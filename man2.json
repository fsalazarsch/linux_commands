[{"NOMBRE": "       accept - acepta una conexi\u00f3n sobre un conector (socket).\n\n", "SINOPSIS": "       #include <sys/types.h>\n       #include <sys/socket.h>\n\n       int accept(int s, struct sockaddr *addr, socklen_t *addrlen);\n\n", "DESCRIPCION": "       La  funci\u00f3n  accept se usa con conectores orientados a conexi\u00f3n (SOCK_STREAM, SOCK_SEQPACKET y SOCK_RDM).\n       Extrae la primera petici\u00f3n de conexi\u00f3n de la cola de conexiones pendientes, le asocia un  nuevo  conector\n       con,  practicamente,  las  misma  propiedades  que  s  y  reserva  un nuevo descriptor de fichero para el\n       conector, el cu\u00e1l es el valor devuelto por la llamada.  El conector original s no se ve afectado por esta\n       llamada.  Dese  cuenta que cualquier opci\u00f3n por descriptor de fichero (cualquiera que se pueda establecer\n       con F_SETFL de fcntl, como no bloqueante o estado as\u00edncrono) no se hereda en un accept.\n\n       El argumento s es un conector que ha sido creado con socket(2), ligado a una direcci\u00f3n local con  bind(2)\n       y que se encuentra a la escucha tras un listen(2).\n\n       El argumento addr es un puntero a una estructura sockaddr. Esta estructura se rellena con la direcci\u00f3n de\n       la entidad con la que se conecta, tal y como la conoce la capa de comunicaciones. El formato exacto de la\n       direcci\u00f3n  pasada en el par\u00e1metro addr viene determinado por la familia del conector (vea socket(2) y las\n       p\u00e1ginas  de  manual  del  protocolo  correspondiente).   El  argumento  addrlen  es   un   par\u00e1metro   de\n       entrada/salida:  al  efectuar la llamada debe contener el tama\u00f1o de la estructura apuntada por addr; a la\n       salida, contendr\u00e1 la longitud real (en bytes) de la direcci\u00f3n devuelta.  Cuando  addr  es  NULL  nada  se\n       rellena.\n\n       Si  no  hay  conexiones  pendientes en la cola y el conector no est\u00e1 marcado como \"no bloqueante\", accept\n       bloquear\u00e1 al invocador hasta que se presente una conexi\u00f3n. Si el conector est\u00e1 marcado como no bloqueante\n       y no hay conexiones pendientes en la cola, accept devolver\u00e1 EAGAIN.\n\n       Para  ser  informado  de  las conexiones entrantes que se produzca en un conector, puede usar select(2) o\n       poll(2).  Se producir\u00e1 un evento de lectura en el intento de una nueva conexi\u00f3n y entonces puede llamar a\n       accept  para  obtener  un conector para esa conexi\u00f3n. Alternativamente, puede configurar el conector para\n       que provoque una se\u00f1al SIGIO cuando se  produzca  actividad  en  el  conector;  vea  socket(7)  para  m\u00e1s\n       detalles.\n\n       Para determinados protocolos que necesitan una confirmaci\u00f3n expl\u00edcita, tales como DECNet, accept se puede\n       interpretar como una funci\u00f3n que, simplemente, desencola la siguiente petici\u00f3n de conexi\u00f3n sin  que  ello\n       implique  la  confirmaci\u00f3n.   Se  sobreentiende la confirmaci\u00f3n cuando se produce una lectura o escritura\n       normal sobre el nuevo descriptor de fichero, y el rechazo puede ser de igual manera impl\u00edcito cerrando el\n       nuevo conector. Actualmente, s\u00f3lo DECNet tiene esta sem\u00e1ntica en Linux.\n\n", "OBSERVACIONES": "       Puede que no siempre haya una conexi\u00f3n esperando despu\u00e9s de que se produzca una se\u00f1al SIGIO, o despu\u00e9s de\n       que select(2) o poll(2) devuelvan un evento de lectura, debido  a  que  la  conexi\u00f3n  podr\u00eda  haber  sido\n       eliminada  por  un  error  as\u00edncrono  de  red u otro hilo antes de que se llame a accept.  Si esto ocurre\n       entonces la llamada se bloquear\u00e1 esperando a que llegue la siguiente conexi\u00f3n.  Para  asegurarse  de  que\n       accept  nunca  se  bloquea,  es necesario que el conector s pasado tenga la opci\u00f3n O_NONBLOCK activa (vea\n       socket(7)).\n\nVALOR DEVUELTO\n       La llamada devuelve -1 ante un error. Si tiene \u00e9xito, devuelve un entero no negativo que es el descriptor\n       del conector aceptado.\n\nMANEJO DE ERRORES\n       La  llamada  accept de Linux pasa los errores de red ya pendientes sobre el nuevo conector como un c\u00f3digo\n       de error de accept.  Este comportamiento difiere de otras  construcciones  de  conectores  BSD.  Para  un\n       funcionamiento fiable, la aplicaci\u00f3n debe detectar los errores de red definidos por el protocolo tras una\n       llamada a accept y tratarlos como EAGAIN reintentado la  operaci\u00f3n.  En  el  caso  de  TCP/IP  estos  son\n       ENETDOWN, EPROTO, ENOPROTOOPT, EHOSTDOWN, ENONET, EHOSTUNREACH, EOPNOTSUPP y ENETUNREACH.\n\n", "ERRORES": "       accept fallar\u00e1 si:\n\n       EAGAIN o EWOULDBLOCK\n              El conector est\u00e1 marcado como no-bloqueante y no hay conexiones que aceptar.\n\n       EBADF  El descriptor es inv\u00e1lido.\n\n       ENOTSOCK\n              El descriptor referencia a un fichero, no a un conector.\n\n       EOPNOTSUPP\n              El conector referenciado no es del tipo SOCK_STREAM.\n\n       EINTR  La  llamada  al  sistema fue interrumpida por una se\u00f1al que fue capturada antes de que llegara una\n              conexi\u00f3n v\u00e1lida.\n\n       ECONNABORTED\n              Una conexi\u00f3n fue abortada.\n\n       EINVAL El conector no est\u00e1 escuchando conexiones.\n\n       EMFILE El l\u00edmite de descriptores de fichero abiertos por proceso ha sido alcanzado.\n\n       ENFILE El l\u00edmite m\u00e1ximo del sistema para descriptores de fichero ha sido alcanzado.\n\n       accept puede fallar si:\n\n       EFAULT El par\u00e1metro addr no se encuentra en una zona accesible para escritura por el usuario.\n\n       ENOBUFS, ENOMEM\n              No hay suficiente memoria disponible.  Esto normalmente significa que  la  asignaci\u00f3n  de  memoria\n              est\u00e1 limitada por los l\u00edmites del buffer de conectores, no por la memoria del sistema.\n\n       EPROTO Error de protocolo.\n\n       La llamada accept de Linux puede fallar si:\n\n       EPERM  Las reglas del cortafuegos proh\u00edben la conexi\u00f3n.\n\n       Adem\u00e1s,  se  pueden devolver otros errores de red para el nuevo conector y que se encuentren definidos en\n       el protocolo.  Diferentes  n\u00facleos  de  Linux  pueden  devolver  otros  errores  diferentes  como  ENOSR,\n       ESOCKTNOSUPPORT, EPROTONOSUPPORT, ETIMEDOUT.  El valor ERESTARTSYS puede darse durante una ejecuci\u00f3n paso\n       a paso.\n\nCONFORME A\n       SVr4, 4.4BSD (la funci\u00f3n accept apareci\u00f3 por primera vez en  BSD  4.2).   La  p\u00e1gina  de  manual  de  BSD\n       documenta  cinco  posibles respuestas de error (EBADF, ENOTSOCK, EOPNOTSUPP, EWOULDBLOCK, EFAULT).  SUSv3\n       documenta los errores EAGAIN, EBADF,  ECONNABORTED,  EINTR,  EINVAL,  EMFILE,  ENFILE,  ENOBUFS,  ENOMEM,\n       ENOTSOCK, EOPNOTSUPP, EPROTO, EWOULDBLOCK. Adem\u00e1s, SUSv2 documenta EFAULT y ENOSR.\n\n       La  llamada  accept de Linux no hereda opciones de conector como O_NONBLOCK.  Este comportamiento difiere\n       de  otras  construcciones  de  conectores  BSD.   Los  programas  portables  no  deben  confiar  en  este\n       comportamiento y establecer siempre todas las opciones requeridas en el conector devuelto por accept.\n\n", "NOTA": "       El  tercer argumento de accept se declar\u00f3 originalmente como un `int *' (y as\u00ed est\u00e1 en libc4 y libc5 y en\n       otros muchos sistemas como BSD 4.*, SunOS 4, SGI); el est\u00e1ndar propuesto POSIX 1003.1g quiso cambiarlo  a\n       `size_t  *' y as\u00ed est\u00e1 en SunOS 5.  M\u00e1s tarde, los borradores POSIX ten\u00edan `socklen_t *' y as\u00ed lo tomaron\n       the Single Unix Specification y glibc2.  Citando  a  Linus  Torvalds:  _Cualquier_  biblioteca  razonable\n       _debe_  hacer  que  \"socklen_t\"  sea del mismo tama\u00f1o que int. Cualquier otra cosa destroza todo lo de la\n       capa de conectores BSD. POSIX inicialmente estableci\u00f3 el tipo a size_t y, de hecho, yo (y es  de  suponer\n       que  otros  aunque,  obviamente,  no  demasiados)  nos  quejamos  a  gritos.  El  ser  de  tipo size_t es\n       completamente desastroso, precisamente porque, por ejemplo, size_t muy rara vez es del mismo  tama\u00f1o  que\n       \"int\"  en  arquitecturas  de  64  bit. Y _tiene_ que ser del mismo tama\u00f1o que \"int\" porque as\u00ed est\u00e1 en la\n       interfaz de conectores BSD.  De cualquier modo, los de POSIX  finalmente  tuvieron  una  idea  y  crearon\n       \"socklen_t\".  Para empezar, no deber\u00edan haberlo tocado pero, una vez que lo hicieron, pensaron que deb\u00edan\n       tener  un  tipo  con  nombre  propio  por  alguna  insondable  raz\u00f3n  (probablemente  alguien  no  quer\u00eda\n       desprestigiarse por haber cometido la estupidez original por lo que, simplemente, renombraron su metedura\n       de pata de forma silenciosa).\n\nV\u00c9ASE TAMBI\u00c9N\n       bind(2), connect(2), listen(2), select(2), socket(2)\n\nP\u00e1gina de Linux 2.2                               23 Abril 2002                                        ACCEPT(2)\n"},{"NOMBRE": "       access - comprueba los permisos de usuario para un fichero\n\n", "SINOPSIS": "       #include <unistd.h>\n\n       int access(const char *pathname, int mode);\n\n", "DESCRIPCION": "       access  comprueba  si al proceso se le permitir\u00eda leer, escribir o comprobar la existencia del fichero (u\n       otro objeto del sistema de ficheros) cuyo nombre es pathname.  Si pathname  es  un  enlace  simb\u00f3lico  se\n       comprueban los permisos del fichero referenciado por dicho enlace simb\u00f3lico.\n\n       mode es una m\u00e1scara compuesta por uno o m\u00e1s de los siguientes elementos: R_OK, W_OK, X_OK y F_OK.\n\n       R_OK,  W_OK  y  X_OK  se  utilizan  para  la  comprobaci\u00f3n de lectura, escritura o ejecuci\u00f3n del fichero,\n       respectivamente.  F_OK se utiliza para ver si se permite  la  mera  comprobaci\u00f3n  de  la  existencia  del\n       fichero.  Esto depende de los permisos de los directorios que aparecen en el camino hasta el fichero, tal\n       como se da en pathname, y de los permisos de los directorios y ficheros  referenciados  por  los  enlaces\n       simb\u00f3licos que se pueden encontrar a lo largo del camino.\n\n       La comprobaci\u00f3n se realiza con los uid y gid reales del proceso, en lugar de utilizar los identificadores\n       efectivos, tal como se hace cuando realmente se intenta una operaci\u00f3n. Esto permite a los  programas  con\n       el bit SETUID activo determinar f\u00e1cilmente la autoridad del usuario invocador.\n\n       S\u00f3lo  se  comprueban  los  bits  de  acceso,  no  el  tipo  de fichero o sus contenidos. Por lo tanto, si\n       encontramos que un directorio se puede \"escribir\", probablemente  esto  significa  que  se  pueden  crear\n       ficheros  en  el  directorio,  no  que  el  directorio  se  pueda  escribir  como se hace con un fichero.\n       Similarmente, podemos encontrar un fichero DOS como \"ejecutable\" y, a\u00fan as\u00ed, puede fallar una  llamada  a\n       execve(2).\n\n       Si  el  proceso tiene los privilegios apropiados, una implementaci\u00f3n puede indicar \u00e9xito para X_OK aun si\n       ninguno de los bits de permiso de ejecuci\u00f3n del fichero est\u00e1n activos.\n\nVALOR DEVUELTO\n       Si ha habido \u00e9xito (se han concedido todos los permisos solicitados) la funci\u00f3n devuelve un valor  0.  Si\n       se  ha  producido  un  error (al menos, uno de los bits de mode ha interrogado por un permiso que ha sido\n       denegado, o ha ocurrido alg\u00fan otro tipo de error), la funci\u00f3n devuelve -1 y a errno se le asigna un valor\n       adecuado.\n\n", "ERRORES": "       access fallar\u00e1 si:\n\n       EACCES Se  denegar\u00eda  el acceso solicitado al fichero o se deniega el permiso de b\u00fasqueda para uno de los\n              directorios en pathname.\n\n       ELOOP  Se han encontrado demasiados enlaces simb\u00f3licos al resolver pathname.\n\n       ENAMETOOLONG\n              pathname es demasiado largo.\n\n       ENOENT Un directorio componente de pathname es accesible pero no existe o es un enlace simb\u00f3lico colgado.\n\n       ENOTDIR\n              Un componente usado como directorio en pathname no es, de hecho, un directorio.\n\n       EROFS  Se ha solicitado permiso de escritura para un fichero en un sistema de ficheros de s\u00f3lo lectura.\n\n       access puede fallar si:\n\n       EFAULT pathname apunta fuera del espacio de direcciones al que tiene acceso.\"\n\n       EINVAL mode se ha especificado incorrectamente\n\n       ENOMEM No hay suficiente memoria disponible en el n\u00facleo.\n\n       EIO    Ha ocurrido un error de E/S.\n\n       ENOMEM Memoria del n\u00facleo insuficiente.\n\n       ETXTBSY\n              Se requiere acceso de escritura para un ejecutable que est\u00e1 siendo ejecutado.\n\n", "RESTRICCIONES": "       access regresa un error si falla cualquiera de los tipos de acceso  especificados  en  la  llamada  a  la\n       funci\u00f3n, aunque los otros tipos tuvieran \u00e9xito.\n\n       access  no  puede  funcionar correctamente sobre sistemas de ficheros NFS que tengan activa la aplicaci\u00f3n\n       del UID, porque la aplicaci\u00f3n del UID se realiza en el servidor y se oculta a los clientes que comprueban\n       los permisos.\n\n       Usar  access  para  comprobar si un usuario est\u00e1 autorizado a, por ejemplo, abrir un fichero antes de que\n       realmente lo haga usando open(2), crea un agujero de seguridad ya que el usuario podr\u00eda explotar el breve\n       intervalo de tiempo que hay entre la comprobaci\u00f3n y la apertura del fichero para manipularlo.\n\nCONFORME A\n       SVID, AT&T, POSIX, X/OPEN, BSD 4.3\n\nV\u00c9ASE TAMBI\u00c9N\n       stat(2), open(2), chmod(2), chown(2), setuid(2), setgid(2)\n\nLinux                                             23 Abril 2002                                        ACCESS(2)\n"},{"NOMBRE": "       acct - activa/desactiva la contabilidad de procesos\n\n", "SINOPSIS": "       #include <unistd.h>\n\n       int acct(const char *filename);\n\n", "DESCRIPCION": "       Cuando  se usa con el nombre de un fichero existente como argumento, se activa la contabilidad y se a\u00f1ade\n       a filename un registro de informaci\u00f3n para cada proceso finalizado.  Usando NULL como argumento desactiva\n       la contabilidad.\n\nVALOR DEVUELTO\n       En  caso  de  \u00e9xito  el  valor  devuelto es cero. Si hay alg\u00fan error, el resultado es  -1 y a errno se le\n       asigna un valor apropiado.\n\n", "ERRORES": "       EACCES Permiso de escritura denegado sobre el fichero especificado.\n\n       EACCESS\n              El argumento filename no es un fichero regular.\n\n       EFAULT filename apunta fuera del espacio de direcciones accesible.\n\n       EIO    Error al escribir en el fichero filename.\n\n       EISDIR filename es un directorio.\n\n       ELOOP  Demasiados enlaces simb\u00f3licos encontrados al resolver filename.\n\n       ENAMETOOLONG\n              filename es demasiado largo.\n\n       ENOENT El nombre de fichero especificado no existe.\n\n       ENOMEM No hay memoria suficiente.\n\n       ENOSYS No se activ\u00f3 la contabilidad BSD de procesos  cuando  se  compil\u00f3  el  n\u00facleo.   EL  par\u00e1metro  de\n              configuraci\u00f3n del n\u00facleo que controla esta caracter\u00edstica es CONFIG_BSD_PROCESS_ACCT.\n\n       ENOTDIR\n              Un componente usado como directorio en filename no es un directorio.\n\n       EPERM  El proceso invocador no tiene permiso para activar la contabilidad de procesos.\n\n       EROFS  filename hace referencia a un fichero en un sistema de ficheros de solo-lectura.\n\n       EUSERS No hay m\u00e1s estructuras de fichero disponibles o no hay memoria suficiente.\n\nCONFORME A\n       SVr4  (pero  no a POSIX).  SVr4 documenta una condici\u00f3n de error EBUSY, pero no EISDIR ni ENOSYS. Tambi\u00e9n\n       AIX y HPUX documentan EBUSY (intento de activar la contabilidad cuando ya est\u00e1 activada),  al  igual  que\n       Solaris  (intento  de  activar  la  contabilidad  usando  el  mismo  fichero  que  ya  est\u00e1  siendo usado\n       actualmente).\n\n", "OBSERVACIONES": "       No se genera contabilidad alguna para aquellos programas que se est\u00e9n ejecutando cuado ocurre  una  ca\u00edda\n       del sistema. En particular, los procesos que nunca finalizan no se tienen en cuenta en la contabilidad.\n\nLinux 2.1.126                                   4 noviembre 1998                                         ACCT(2)\n"},{"NOMBRE": "       adjtimex - ajusta el reloj del n\u00facleo\n\n", "SINOPSIS": "       #include <sys/timex.h>\n\n       int adjtimex(struct timex *buf);\n\n", "DESCRIPCION": "       Linux  usa  el algoritmo de David L. Mills para ajustar el reloj (v\u00e9ase RFC 1305).  La llamada al sistema\n       adjtimex lee y opcionalmente prepara par\u00e1metros de ajuste para dicho algoritmo.   Esta  llamada  toma  un\n       indicador  a  una  estructura  timex , actualiza los par\u00e1metros del n\u00facleo a partir de los valores de los\n       campos, y devuelve la misma estructura con los valores actuales del n\u00facleo.  Esta estructura  se  declara\n       como sigue a continuaci\u00f3n:\n\n       struct timex {\n           int modes;           /* selector de modo*/\n           long offset;         /* ajuste de la hora (usec) */\n           long freq;           /* ajuste de la frecuencia (ppm escalada) */\n           long maxerror;       /* error m\u00e1ximo  (usec) */\n           long esterror;       /* error estimado  (usec) */\n           int status;          /* comando/estado del reloj*/\n           long constant;       /* pll constante de tiempo */\n           long precision;      /* precisi\u00f3n del reloj(usec) (s\u00f3lo lectura) */\n           long tolerance;      /* tolerancia de la frecuencia del reloj (ppm)\n                                   (s\u00f3lo lectura) */\n           struct timeval time; /* hora actual (s\u00f3lo lectura) */\n           long tick;           /* usecs entre ticks del reloj */\n       };\n\n       El  campo  modes  determina  que  par\u00e1metros  ser\u00e1n  asignados, si es que hay alguno.  Puede contener una\n       combinaci\u00f3n (mediante una operaci\u00f3n-O l\u00f3gica) de cero o m\u00e1s elementos de la lista siguiente:\n\n       #define ADJ_OFFSET            0x0001 /* ajuste de la hora */\n       #define ADJ_FREQUENCY         0x0002 /* ajuste de la frecuencia */\n       #define ADJ_MAXERROR          0x0004 /* error m\u00e1ximo de la hora*/\n       #define ADJ_ESTERROR          0x0008 /* error estimado de la hora */\n       #define ADJ_STATUS            0x0010 /* estado del reloj */\n       #define ADJ_TIMECONST         0x0020 /* pll constante de tiempo */\n       #define ADJ_TICK              0x4000 /* valor tick*/\n       #define ADJ_OFFSET_SINGLESHOT 0x8001 /* ajuste de hora; m\u00e9todo antiguo */\n\n       Los usuarios comunes s\u00f3lo puede utilizar un valor cero  para  mode.   \u00danicamente  el  superusuario  puede\n       asignar un valor a un par\u00e1metro.\n\nVALOR DEVUELTO\n       En caso de \u00e9xito, adjtimex devuelve el estado del reloj:\n\n              #define TIME_OK   0 /* reloj sincronizado */\n              #define TIME_INS  1 /* insertar segundo de salto */\n              #define TIME_DEL  2 /* borrar segundo de salto */\n              #define TIME_OOP  3 /* segundo de salto en progreso */\n              #define TIME_WAIT 4 /* se ha producido un segundo de salto */\n              #define TIME_BAD  5 /* reloj no sincronizado  */\n\n       En caso de fallo, adjtimex regresa -1 y asigna un valor apropiado a errno.\n\n", "ERRORES": "       EFAULT buf no apunta a una zona de memoria escribible.\n\n       EPERM  buf.mode no es cero y el usuario no es el superusuario.\n\n       EINVAL Se  ha hecho un intento de asignar a buf.offset un valor fuera del intervalo -131071 a  +131071, o\n              de asignar a buf.status un valor no contenido en la lista anteriormente discutida, o de asignar  a\n              buf.tick  un  valor  fuera  del  intervalo  900000/HZ  a  1100000/HZ, donde HZ es la frecuencia de\n              interrupci\u00f3n del reloj del sistema.\n\nV\u00c9ASE TAMBI\u00c9N\n       settimeofday(2)\n\nLinux 2.0                                         30 julio 1997                                      ADJTIMEX(2)\n"},{"NOMBRE": "       afs_syscall,  break,  ftime,  gtty,  lock,  mpx,  prof,  profil,  stty,  ulimit - Llamadas al sistema sin\n       implementar\n\n", "SINOPSIS": "       Llamadas al sistema sin implementar.\n\n", "DESCRIPCION": "       Estas llamadas al sistema no est\u00e1n implementadas en la versi\u00f3n 2.4 del n\u00facleo de Linux.\n\nVALOR DEVUELTO\n       Estas llamadas al sistema siempre devuelven -1 y asignan a la variable errno el valor ENOSYS.\n\n", "OBSERVACIONES": "       D\u00e9se cuenta que ftime(3), profil(3) y ulimit(3) se implementan como funciones de biblioteca.\n\n       Algunas llamadas al sistema, como alloc_hugepages(2), free_hugepages(2),  ioperm(2),  iopl(2)  y  vm86(2)\n       s\u00f3lo existen en ciertas arquitecturas.\n\n       Algunas  llamadas  al sistema, como ipc(2) y {create,init,delete}_module(2) s\u00f3lo existen cuando el n\u00facleo\n       de Linux se construy\u00f3 con soporte para ellas.\n\nV\u00c9ASE TAMBI\u00c9N\n       obsolete(2)\n\nLinux 2.4                                         12 junio 1998                                 UNIMPLEMENTED(2)\n"},{"NOMBRE": "       alarm - activa una alarma para el env\u00edo de una se\u00f1al\n\n", "SINOPSIS": "       #include <unistd.h>\n\n       unsigned int alarm(unsigned int sec);\n\n", "DESCRIPCION": "       alarm se encarga de enviar una se\u00f1al SIGALRM al proceso en sec segundos.\n\n       Si sec es cero, no se prepara una nueva alarma. Adem\u00e1s, cualquier alarm previamente preparada se cancela.\n\nVALOR DEVUELTO\n       alarm  devuelve  el n\u00famero de segundos que quedaban para que cualquier alarma previa se disparase, o cero\n       si no hab\u00eda ninguna alarma pendiente.\n\n", "OBSERVACIONES": "       alarm y  setitimer comparten el mismo cron\u00f3metro; el uso de una interferir\u00e1 con el de la otra.\n\n       sleep() puede estar implementada usando SIGALRM; mezclar llamadas a alarm() y sleep() es una mala idea.\n\n       Los retardos en la planificaci\u00f3n pueden, como siempre, provocar el retardo de la  ejecuci\u00f3n  del  proceso\n       una cantidad arbitraria de tiempo.\n\nCONFORME A\n       SVID, AT&T, POSIX, X/OPEN, BSD 4.3\n\nV\u00c9ASE TAMBI\u00c9N\n       setitimer(2), signal(2), sigaction(2), gettimeofday(2), select(2), pause(2), sleep(3)\n\nLinux                                             30 Junio 1996                                         ALARM(2)\n"},{"NOMBRE": "       alloc_hugepages, free_hugepages - asigna o libera p\u00e1ginas de gran tama\u00f1o\n\n", "SINOPSIS": "       void *alloc_hugepages(int key, void *addr, size_t len, int prot, int flag);\n\n       int free_hugepages(void *addr);\n\n", "DESCRIPCION": "       Las llamadas al sistema alloc_hugepages y free_hugepages fueron introducidas en Linux 2.5.36 y eliminadas\n       de nuevo en la versi\u00f3n 2.5.54.  Exist\u00edan s\u00f3lo para arquitecturas i386 e ia64  (cuando  se  encontraba  la\n       opci\u00f3n  CONFIG_HUGETLB_PAGE).   En Linux 2.4.20 existen los n\u00fameros de las llamadas al sistemas, pero las\n       llamadas devuelven ENOSYS.\n\n       En la arquitectura i386 el hardware de gesti\u00f3n de la memoria maneja p\u00e1ginas ordinarias (4 KiB) y  p\u00e1ginas\n       grandes (2 o 4 MiB). De manera similar, la arquitectura ia64 maneja p\u00e1ginas grandes de distintos tama\u00f1os.\n       Estas llamadas al sistema sirven para ubicar p\u00e1ginas de gran tama\u00f1o en la  memoria  del  proceso  o  para\n       liberarlas.  Las p\u00e1ginas grandes est\u00e1n fijas en memoria, y no son intercambiadas (swapped).\n\n       El par\u00e1metro key es un identificador. Cuando es cero las p\u00e1ginas son privadas, y no son heredadas por los\n       hijos.  Cuando  es  positivo  las  p\u00e1ginas  son  compartidas  con  otras  aplicaciones  usando  el  mismo\n       identificador key, y heredadas por los procesos hijo.\n\n       El  par\u00e1metro  addr de free_hugepages() indica qu\u00e9 p\u00e1gina est\u00e1 siendo liberada - es el valor devuelto por\n       una llamada a alloc_hugepages().  (La memoria es realmente liberada por  primera  vez  cuando  todos  los\n       usuarios la han liberado.)  El par\u00e1metro addr de alloc_hugepages() es una sugerencia, que el n\u00facleo puede\n       o no puede tomar.  Las direcciones deben estar debidamente alineadas.\n\n       El par\u00e1metro len es la longitud del segmento requerido. Debe ser un m\u00faltiplo  del  tama\u00f1o  de  la  p\u00e1gina\n       grande.\n\n       El  par\u00e1metro  prot  especifica  la protecci\u00f3n de memoria del segmento.  Puede ser PROT_READ, PROT_WRITE,\n       PROT_EXEC.\n\n       El par\u00e1metro flag es ignorado, a menos que key sea positivo. En tal caso, si flag es IPC_CREAT,  se  crea\n       un  nuevo segmento de p\u00e1gina grande cuando no existe ninguno con el identificador dado. Si esta opci\u00f3n no\n       est\u00e1 activa, se devuelve ENOENT cuando no existe tal segmento.\n\nVALOR DEVUELTO\n       En caso de \u00e9xito, alloc_hugepages devuelve la direcci\u00f3n virtual asignada, y free_hugepages devuelve cero.\n       En caso de error, se devuelve -1, y se modifica errno con el valor apropiado.\n\n", "ERRORES": "       ENOSYS La llamada al sistema no est\u00e1 soportada por este n\u00facleo.\n\nCONFORME A\n       Esta  llamadas  exist\u00edan  s\u00f3lo  en  Linux  2.5.36 - 2.5.54.  Estas llamadas son espec\u00edficas de Linux para\n       procesadores Intel, y no deber\u00edan ser usadas en  programas  portables.  De  hecho,  los  n\u00fameros  de  las\n       llamadas  al  sistema  est\u00e1n marcados para ser reutilizados, por lo que los programas que las usen pueden\n       comportarse de manera aleatoria con n\u00facleos futuros.\n\n", "ARCHIVOS": "       /proc/sys/vm/nr_hugepages N\u00famero de p\u00e1ginas hugetlb configuradas.  Puede ser le\u00eddo y escrito.\n\n       /proc/meminfo Proporciona informaci\u00f3n del n\u00famero de p\u00e1ginas hugetlb configuradas y de su  tama\u00f1o  en  las\n       tres variables HugePages_Total, HugePages_Free, Hugepagesize.\n\n", "OBSERVACIONES": "       Estas  llamadas  al sistema ya no existen. En la actualidad puede usarse el sistema de ficheros hugetlbfs\n       en su lugar. La memoria contenida en las p\u00e1ginas grandes (si la CPU  las  soporta)  se  obtiene  ubicando\n       ficheros en este sistema de ficheros virtual con mmap.\n\n       El n\u00famero m\u00e1ximo de p\u00e1ginas grandes puede especificarse usando el par\u00e1metro hugepages= en el arranque.\n\nLinux 2.5.36                                     2 febrero 2003                               ALLOC_HUGEPAGES(2)\n"},{"NOMBRE": "       arch_prctl - Fija el estado de un hilo para una arquitectura espec\u00edfica.\n\n", "SINOPSIS": "       #include <asm/prctl.h>\n\n       #include <sys/prctl.h>\n\n       int arch_prctl(int code, unsigned long addr)\n\n", "DESCRIPCION": "       La  funci\u00f3n arch_prctl fija el estado de un hilo o proceso para una arquitectura espec\u00edfica.  code escoge\n       una subfunci\u00f3n y le pasa el argumento addr.\n\n       Las subfunciones para la arquitectura x86-64 son:\n\n       ARCH_SET_FS\n              Establece la base de 64 bits para el registro FS a addr.\n\n       ARCH_GET_FS\n              Devuelve el valor de base de 64 bits para el registro FS del hilo actual en la  variable  unsigned\n              long apuntada por el par\u00e1metro address\n\n       ARCH_SET_GS\n              Establece la base de 64 bits para el registro GS a addr.\n\n       ARCH_GET_GS\n              Devuelve el valor de base 64 bits para el registro GS del hilo actual en la variable unsigned long\n              apuntada por el par\u00e1metro address.\n\n", "OBSERVACIONES": "       En la actualidad arch_prctl es soportada solamente por la plataforma Linux/x86-64 para  programas  de  64\n       bits.\n\n       La base de 64 bits cambia cuando se carga un nuevo selector de segmento de 32 bits.\n\n       ARCH_SET_GS est\u00e1 deshabilitado en algunos n\u00facleos.\n\n       Los  cambios de contexto para las bases de segmento de 64 bits son bastante costosos. Una alternativa m\u00e1s\n       r\u00e1pida ser\u00eda fijar una base  de  32  bits  usando  un  selector  de  segmento  configurando  un  LDT  con\n       modify_ldt(2)  o  usando la llamada al sistema set_thread_area(2) en un n\u00facleo 2.5.  arch_prctl solamente\n       se necesita cuando se quieren establecer bases mayores de 4GB.   La  memoria  en  los  primeros  2GB  del\n       espacio de direcciones puede ser asignada usando mmap(2) con la opci\u00f3n MAP_32BIT.\n\n       No  existe  el  prototipo  de  arch_prctl en glibc 2.2. Es tarea del programador declararlo por s\u00ed mismo.\n       Este inconveniente ser\u00e1 subsanado en versiones futuras de glibc.\n\n       FS puede estar ya usado por la biblioteca de hilos.\n\n", "ERRORES": "       EINVAL code no es un subcomando v\u00e1lido.\n\n       EPERM  addr est\u00e1 fuera del espacio de direcciones.\n\n       EFAULT addr apunta a una direcci\u00f3n no asignada o que est\u00e1 fuera del espacio de direcciones del proceso.\n\n", "AUTOR": "       P\u00e1gina de manual escrita por Andi Kleen.\n\nCONFORME A\n       arch_prctl es una extensi\u00f3n de Linux/x86-64 y no deber\u00eda emplearse en programas que se pretenden que sean\n       portables.\n\nV\u00c9ASE TAMBI\u00c9N\n       mmap(2), modify_ldt(2), prctl(2), set_thread_area(2)\n\n       Manual del Programador de AMD X86-64\n\nLinux 2.4.20                                     2 febrero 2003                                    ARCH_PRCTL(2)\n"},{"NOMBRE": "       bdflush - demonio del n\u00facleo para vaciar buffers sucios al disco.\n\n", "SINOPSIS": "       update [opt]\n\n", "DESCRIPCION": "       bdflush  se  usa para iniciar el demonio del n\u00facleo para vaciar buffers sucios hacia el disco. El trabajo\n       sucio real est\u00e1 en una funci\u00f3n del n\u00facleo y bdflush realmente desdobla  un  nuevo  proceso  que  entonces\n       llama  a  una  funci\u00f3n  del n\u00facleo que nunca regresa en n\u00facleos antiguos. Bajo los nuevos n\u00facleos  (2.0+)\n       esto ya  no se necesita y este comportamiento se puede desactivar con la opci\u00f3n de compilaci\u00f3n del n\u00facleo\n       NEWKERNEL.\n\n       bdflush  actualmente  desdobla  un segundo demonio tambi\u00e9n, y este act\u00faa como un proceso de actualizaci\u00f3n\n       m\u00e1s tradicional, salvo que los b\u00faferes no se consideran listos para ser escritos hasta que envejezcan  un\n       poco.  El reloj se inicia cuando el buffer se marca con el bit de sucio, y el buffer no se escribe  hasta\n       que pase un intervalo. El intervalo es distinto para un buffer  de datos o un buffer de  metadatos  (como\n       directorios, mapas de bits, boques indirectos, etc) y la configuraci\u00f3n actual se muestra mediante bdflush\n       cuando se ejecuta con argumentos en la l\u00ednea de comando. Por defecto son treinta segundos para un  buffer\n       de datos y cinco segundos para un buffer de metadatos.\n\n       Los dos demonios se inician normalmente en /etc/rc con un comando:\n\n       /sbin/update\n\n       Observe  que  necesita  tener  los  dos  demonios  en  ejecuci\u00f3n  ya que cada uno sirve para un prop\u00f3sito\n       diferente. Observe tambi\u00e9n que este comando se deber\u00eda  ejecutar  antes  de  relizar  cuaquier  operaci\u00f3n\n       grande  de  E/S.  En  particular,  update se deber\u00eda llamar antes de que cualquier sistema de archivo sea\n       verificado o montado como lectura/escritura.\n\n       Cuando bdflush se llama por un usuario sin privilegios de superusuario, se llama a  flush()  y  sync()  y\n       termina.  No deben haber m\u00e1s de 20 demonios de actualizaci\u00f3n corriendo a la vez.\n\nOPCIONES DE l\u00cdNEA DE COMANDO\n       -d   Muestra par\u00e1metros del n\u00facleo. El uso de esta opci\u00f3n previene el inicio del demonio.\n\n       -h   Imprime el mensaje de uso (help).\n\n       -s   Si  los valores por defecto de bdflush al anterior comportamiento, llama a sync con esta frecuencia.\n            ( En segundos ) Por defecto: 30.\n\n       -f   Llama flush con esta frecuencia. ( En segundos ) Por defecto: 5.\n\n       -0   Fracci\u00f3n m\u00e1xima de lista LRU para examinar para bloques sucios.\n\n       -1   M\u00e1ximo n\u00famero de bloques sucios a escribir cada vez que se active bdflush.\n\n       -2   N\u00famero de b\u00faferes limpios para cargarse en la lista de libres por refill_freelist\n\n       -3   Umbral de bloque sucio para activar bdflush en refill_freelist\n\n       -4   Percentaje de cach\u00e9 a buscar para clusters libres.\n\n       -5   Tiempo de envejecimiento de los datos del buffer antes de vaciarlos.\n\n       -6   Tiempo de envejecimiento de los b\u00faferes que no son datos (dir, bitmaps, etc) antes de vaciarlos.\n\n       -7   Constante de tiempo promedio de carga de cach\u00e9 de buffer.\n\n       -8   Raz\u00f3n LAV (usada para determinar el umbral de fratricidio del buffer)\n\n       -v   Muestra informaci\u00f3n de la versi\u00f3n\n\n       -n   Duerme tras este tiempo, activa spindown. (Por defecto: spindown desactivado). Tras  un  tiempo  sin\n            leer  un  disco  (de acuerdo con /proc/stat), se llama a /etc/rc/rc.spindown , y la actualizaci\u00f3n en\n            segundo plano se para. Tras terminar /etc/rc/rc.spindown, la primera lectura del disco har\u00e1 que crea\n            que  el  disco  est\u00e1  actualizado,  llama  a  /etc/rc/rc.spinup  y  comienza a escribir los b\u00fafferes\n            modificados regularmente al disco. Si se env\u00eda la se\u00f1al 1 al demonio, forzar\u00e1 los  discos  ahora  al\n            estado de reposo (spin-down).\n\n", "AUTOR": "       bdflush  se  escribi\u00f3  como  un  ardid  r\u00e1pido  por  Eric Youngdale <ericy@gnu.ai.mit.edu>.  El principal\n       objetivo fue mejorar las prestaciones del n\u00facleo realizando un vaciado de  los  b\u00fafferes  sucios  de  una\n       forma  m\u00e1s  inteligente,  y a\u00f1adir soporte para la agrupaci\u00f3n de b\u00fafferes. Es libre para mejorarlo. Otros\n       varios ardides son de Phil Bostley <bostley@cs.colorado.edu> y Daniel Quinlan <quinlan@yggdrasil.com>. El\n       soporte Sleep fue a\u00f1adido por Pavel Machek <pavel@atrey.karlin.mff.cuni.cz>.\n\nFALLOS(BUGS)\n       Si hay, es m\u00e1s probable que sean del c\u00f3digo del n\u00facleo. El soporte Sleep s\u00f3lo se preocupa de las lecturas\n       de los discos, as\u00ed pues, si no hay RAM suficiente  para  escritura  (write-back),  puede  ralentizar  los\n       discos  en un momento equivocado. El soporte Sleep tambi\u00e9n tiene en cuenta s\u00f3lo el primer disco duro, por\n       tanto ...  Hay una peque\u00f1a  confusi\u00f3n  entre  los  dos  nombres  \"bdflush\"  y  \"update\".  Actualmente  el\n       ejecutable se llama update, pero se compila de bdflush.c y los autores se refieren a \u00e9l como bdflush.\n\nLinux                                              Marzo 1997                                         bdflush(8)\n"},{"NOMBRE": "       bash,  :,  .,  [,  alias, bg, bind, break, builtin, caller, cd, command, compgen, complete, compopt, con\u2010\n       tinue, declare, dirs, disown, echo, enable, eval, exec, exit, export, false, fc, fg, getopts, hash, help,\n       history,  jobs, kill, let, local, logout, mapfile, popd, printf, pushd, pwd, read, readonly, return, set,\n       shift, shopt, source, suspend, test, times, trap, true, type, typeset,  ulimit,  umask,  unalias,  unset,\n       wait - bash built-in commands, see bash(1)\n\nBASH BUILTIN COMMANDS\n       Unless  otherwise noted, each builtin command documented in this section as accepting options preceded by\n       - accepts -- to signify the end of the options.  The :, true, false, and test/[ builtins  do  not  accept\n       options  and  do  not  treat  --  specially.   The  exit, logout, return, break, continue, let, and shift\n       builtins accept and process arguments beginning with - without requiring --.  Other builtins that  accept\n       arguments  but are not specified as accepting options interpret arguments beginning with - as invalid op\u2010\n       tions and require -- to prevent this interpretation.\n       : [arguments]\n              No effect; the command does nothing beyond expanding arguments and performing any specified  redi\u2010\n              rections.  The return status is zero.\n\n        .  filename [arguments]\n       source filename [arguments]\n              Read  and execute commands from filename in the current shell environment and return the exit sta\u2010\n              tus of the last command executed from filename.  If filename does not contain a  slash,  filenames\n              in  PATH  are  used to find the directory containing filename.  The file searched for in PATH need\n              not be executable.  When bash is not in posix mode, the current directory is searched if  no  file\n              is  found  in PATH.  If the sourcepath option to the shopt builtin command is turned off, the PATH\n              is not searched.  If any arguments are supplied, they become the positional parameters when  file\u2010\n              name  is  executed.   Otherwise  the positional parameters are unchanged.  If the -T option is en\u2010\n              abled, source inherits any trap on DEBUG; if it is not, any DEBUG trap string  is  saved  and  re\u2010\n              stored  around  the  call to source, and source unsets the DEBUG trap while it executes.  If -T is\n              not set, and the sourced file changes the DEBUG trap, the new value is retained when  source  com\u2010\n              pletes.   The  return  status  is the status of the last command exited within the script (0 if no\n              commands are executed), and false if filename is not found or cannot be read.\n\n       alias [-p] [name[=value] ...]\n              Alias with no arguments or with the -p option prints  the  list  of  aliases  in  the  form  alias\n              name=value  on  standard  output.   When arguments are supplied, an alias is defined for each name\n              whose value is given.  A trailing space in value causes the next word to be checked for alias sub\u2010\n              stitution  when  the  alias is expanded.  For each name in the argument list for which no value is\n              supplied, the name and value of the alias is printed.  Alias returns true unless a name  is  given\n              for which no alias has been defined.\n\n       bg [jobspec ...]\n              Resume each suspended job jobspec in the background, as if it had been started with &.  If jobspec\n              is not present, the shell's notion of the current job is used.  bg jobspec returns  0  unless  run\n              when  job control is disabled or, when run with job control enabled, any specified jobspec was not\n              found or was started without job control.\n\n       bind [-m keymap] [-lpsvPSVX]\n       bind [-m keymap] [-q function] [-u function] [-r keyseq]\n       bind [-m keymap] -f filename\n       bind [-m keymap] -x keyseq:shell-command\n       bind [-m keymap] keyseq:function-name\n       bind [-m keymap] keyseq:readline-command\n              Display current readline key and function bindings, bind a key sequence to a readline function  or\n              macro,  or  set  a readline variable.  Each non-option argument is a command as it would appear in\n              .inputrc, but each binding or command must be passed as a separate  argument;  e.g.,  '\"\\C-x\\C-r\":\n              re-read-init-file'.  Options, if supplied, have the following meanings:\n              -m keymap\n                     Use  keymap  as  the  keymap  to be affected by the subsequent bindings.  Acceptable keymap\n                     names are emacs, emacs-standard,  emacs-meta,  emacs-ctlx,  vi,  vi-move,  vi-command,  and\n                     vi-insert.  vi is equivalent to vi-command (vi-move is also a synonym); emacs is equivalent\n                     to emacs-standard.\n              -l     List the names of all readline functions.\n              -p     Display readline function names and bindings in such a way that they can be re-read.\n              -P     List current readline function names and bindings.\n              -s     Display readline key sequences bound to macros and the strings they output in  such  a  way\n                     that they can be re-read.\n              -S     Display readline key sequences bound to macros and the strings they output.\n              -v     Display readline variable names and values in such a way that they can be re-read.\n              -V     List current readline variable names and values.\n              -f filename\n                     Read key bindings from filename.\n              -q function\n                     Query about which keys invoke the named function.\n              -u function\n                     Unbind all keys bound to the named function.\n              -r keyseq\n                     Remove any current binding for keyseq.\n              -x keyseq:shell-command\n                     Cause  shell-command to be executed whenever keyseq is entered.  When shell-command is exe\u2010\n                     cuted, the shell sets the READLINE_LINE variable to the contents of the readline line  buf\u2010\n                     fer  and  the READLINE_POINT and READLINE_MARK variables to the current location of the in\u2010\n                     sertion point and the saved insertion point (the mark), respectively.  If the executed com\u2010\n                     mand changes the value of any of READLINE_LINE, READLINE_POINT, or READLINE_MARK, those new\n                     values will be reflected in the editing state.\n              -X     List all key sequences bound to shell commands and the associated commands in a format that\n                     can be reused as input.\n\n              The return value is 0 unless an unrecognized option is given or an error occurred.\n\n       break [n]\n              Exit  from within a for, while, until, or select loop.  If n is specified, break n levels.  n must\n              be \u2265 1.  If n is greater than the number of enclosing loops, all enclosing loops are exited.   The\n              return value is 0 unless n is not greater than or equal to 1.\n\n       builtin shell-builtin [arguments]\n              Execute  the  specified  shell builtin, passing it arguments, and return its exit status.  This is\n              useful when defining a function whose name is the same as a shell builtin, retaining the function\u2010\n              ality of the builtin within the function.  The cd builtin is commonly redefined this way.  The re\u2010\n              turn status is false if shell-builtin is not a shell builtin command.\n\n       caller [expr]\n              Returns the context of any active subroutine call (a shell function or a script executed with  the\n              .  or  source builtins).  Without expr, caller displays the line number and source filename of the\n              current subroutine call.  If a non-negative integer is supplied as expr, caller displays the  line\n              number,  subroutine  name, and source file corresponding to that position in the current execution\n              call stack.  This extra information may be used, for example, to print a stack trace.  The current\n              frame  is  frame  0.  The return value is 0 unless the shell is not executing a subroutine call or\n              expr does not correspond to a valid position in the call stack.\n\n       cd [-L|[-P [-e]] [-@]] [dir]\n              Change the current directory to dir.  if dir is not supplied, the value of the HOME shell variable\n              is  the default.  Any additional arguments following dir are ignored.  The variable CDPATH defines\n              the search path for the directory containing dir: each directory name in CDPATH  is  searched  for\n              dir.   Alternative  directory names in CDPATH are separated by a colon (:).  A null directory name\n              in CDPATH is the same as the current directory, i.e., ``.''.  If dir begins with a slash (/), then\n              CDPATH  is not used.  The -P option causes cd to use the physical directory structure by resolving\n              symbolic links while traversing dir and before processing instances of .. in dir (see also the  -P\n              option  to the set builtin command); the -L option forces symbolic links to be followed by resolv\u2010\n              ing the link after processing instances of .. in dir.  If .. appears in dir, it  is  processed  by\n              removing the immediately previous pathname component from dir, back to a slash or the beginning of\n              dir.  If the -e option is supplied with -P, and the current working directory cannot  be  success\u2010\n              fully  determined  after a successful directory change, cd will return an unsuccessful status.  On\n              systems that support it, the -@ option presents the extended attributes associated with a file  as\n              a  directory.   An argument of - is converted to $OLDPWD before the directory change is attempted.\n              If a non-empty directory name from CDPATH is used, or if - is the first argument, and  the  direc\u2010\n              tory  change  is  successful, the absolute pathname of the new working directory is written to the\n              standard output.  The return value is true if the directory was successfully changed; false other\u2010\n              wise.\n\n       command [-pVv] command [arg ...]\n              Run command with args suppressing the normal shell function lookup.  Only builtin commands or com\u2010\n              mands found in the PATH are executed.  If the -p option is given, the search for command  is  per\u2010\n              formed  using  a  default value for PATH that is guaranteed to find all of the standard utilities.\n              If either the -V or -v option is supplied, a description of command is  printed.   The  -v  option\n              causes  a  single  word indicating the command or filename used to invoke command to be displayed;\n              the -V option produces a more verbose description.  If the -V or -v option is supplied,  the  exit\n              status  is  0  if command was found, and 1 if not.  If neither option is supplied and an error oc\u2010\n              curred or command cannot be found, the exit status is 127.  Otherwise, the exit status of the com\u2010\n              mand builtin is the exit status of command.\n\n       compgen [option] [word]\n              Generate  possible  completion  matches for word according to the options, which may be any option\n              accepted by the complete builtin with the exception of -p and -r, and write  the  matches  to  the\n              standard output.  When using the -F or -C options, the various shell variables set by the program\u2010\n              mable completion facilities, while available, will not have useful values.\n\n              The matches will be generated in the same way as if the programmable completion code had generated\n              them  directly  from  a  completion specification with the same flags.  If word is specified, only\n              those completions matching word will be displayed.\n\n              The return value is true unless an invalid option is supplied, or no matches were generated.\n\n       complete [-abcdefgjksuv] [-o comp-option] [-DEI] [-A action] [-G globpat] [-W wordlist]\n              [-F function] [-C command] [-X filterpat] [-P prefix] [-S suffix] name [name ...]\n       complete -pr [-DEI] [name ...]\n              Specify how arguments to each name should be completed.  If the -p option is supplied,  or  if  no\n              options  are supplied, existing completion specifications are printed in a way that allows them to\n              be reused as input.  The -r option removes a completion specification for each  name,  or,  if  no\n              names  are  supplied,  all completion specifications.  The -D option indicates that other supplied\n              options and actions should apply to the ``default'' command completion; that  is,  completion  at\u2010\n              tempted on a command for which no completion has previously been defined.  The -E option indicates\n              that other supplied options and actions should apply to ``empty''  command  completion;  that  is,\n              completion attempted on a blank line.  The -I option indicates that other supplied options and ac\u2010\n              tions should apply to completion on the initial non-assignment word on the line, or after  a  com\u2010\n              mand  delimiter such as ; or |, which is usually command name completion.  If multiple options are\n              supplied, the -D option takes precedence over -E, and both take precedence over -I.  If any of -D,\n              -E,  or -I are supplied, any other name arguments are ignored; these completions only apply to the\n              case specified by the option.\n\n              The process of applying these completion specifications when word completion is attempted  is  de\u2010\n              scribed above under Programmable Completion.\n\n              Other options, if specified, have the following meanings.  The arguments to the -G, -W, and -X op\u2010\n              tions (and, if necessary, the -P and -S options) should be quoted to protect them  from  expansion\n              before the complete builtin is invoked.\n              -o comp-option\n                      The comp-option controls several aspects of the compspec's behavior beyond the simple gen\u2010\n                      eration of completions.  comp-option may be one of:\n                      bashdefault\n                              Perform the rest of the default bash completions  if  the  compspec  generates  no\n                              matches.\n                      default Use readline's default filename completion if the compspec generates no matches.\n                      dirnames\n                              Perform directory name completion if the compspec generates no matches.\n                      filenames\n                              Tell  readline  that the compspec generates filenames, so it can perform any file\u2010\n                              name-specific processing (like adding a slash to directory names, quoting  special\n                              characters, or suppressing trailing spaces).  Intended to be used with shell func\u2010\n                              tions.\n                      noquote Tell readline not to quote the completed words  if  they  are  filenames  (quoting\n                              filenames is the default).\n                      nosort  Tell readline not to sort the list of possible completions alphabetically.\n                      nospace Tell readline not to append a space (the default) to words completed at the end of\n                              the line.\n                      plusdirs\n                              After any matches defined by the compspec are generated, directory name completion\n                              is attempted and any matches are added to the results of the other actions.\n              -A action\n                      The action may be one of the following to generate a list of possible completions:\n                      alias   Alias names.  May also be specified as -a.\n                      arrayvar\n                              Array variable names.\n                      binding Readline key binding names.\n                      builtin Names of shell builtin commands.  May also be specified as -b.\n                      command Command names.  May also be specified as -c.\n                      directory\n                              Directory names.  May also be specified as -d.\n                      disabled\n                              Names of disabled shell builtins.\n                      enabled Names of enabled shell builtins.\n                      export  Names of exported shell variables.  May also be specified as -e.\n                      file    File names.  May also be specified as -f.\n                      function\n                              Names of shell functions.\n                      group   Group names.  May also be specified as -g.\n                      helptopic\n                              Help topics as accepted by the help builtin.\n                      hostname\n                              Hostnames, as taken from the file specified by the HOSTFILE shell variable.\n                      job     Job names, if job control is active.  May also be specified as -j.\n                      keyword Shell reserved words.  May also be specified as -k.\n                      running Names of running jobs, if job control is active.\n                      service Service names.  May also be specified as -s.\n                      setopt  Valid arguments for the -o option to the set builtin.\n                      shopt   Shell option names as accepted by the shopt builtin.\n                      signal  Signal names.\n                      stopped Names of stopped jobs, if job control is active.\n                      user    User names.  May also be specified as -u.\n                      variable\n                              Names of all shell variables.  May also be specified as -v.\n              -C command\n                      command is executed in a subshell environment, and its output is used as the possible com\u2010\n                      pletions.\n              -F function\n                      The shell function function is executed in the current shell environment.  When the  func\u2010\n                      tion  is  executed, the first argument ($1) is the name of the command whose arguments are\n                      being completed, the second argument ($2) is the word being completed, and the third argu\u2010\n                      ment  ($3)  is  the  word  preceding the word being completed on the current command line.\n                      When it finishes, the possible completions are retrieved from the value of  the  COMPREPLY\n                      array variable.\n              -G globpat\n                      The pathname expansion pattern globpat is expanded to generate the possible completions.\n              -P prefix\n                      prefix  is added at the beginning of each possible completion after all other options have\n                      been applied.\n              -S suffix\n                      suffix is appended to each possible completion after all other options have been applied.\n              -W wordlist\n                      The wordlist is split using the characters in the IFS special variable as delimiters,  and\n                      each  resultant  word  is expanded.  Shell quoting is honored within wordlist, in order to\n                      provide a mechanism for the words to contain shell metacharacters  or  characters  in  the\n                      value  of IFS.  The possible completions are the members of the resultant list which match\n                      the word being completed.\n              -X filterpat\n                      filterpat is a pattern as used for pathname expansion.  It is applied to the list of  pos\u2010\n                      sible  completions  generated  by the preceding options and arguments, and each completion\n                      matching filterpat is removed from the list.  A leading ! in filterpat  negates  the  pat\u2010\n                      tern; in this case, any completion not matching filterpat is removed.\n\n              The  return  value  is true unless an invalid option is supplied, an option other than -p or -r is\n              supplied without a name argument, an attempt is made to remove a completion  specification  for  a\n              name for which no specification exists, or an error occurs adding a completion specification.\n\n       compopt [-o option] [-DEI] [+o option] [name]\n              Modify  completion  options for each name according to the options, or for the currently-executing\n              completion if no names are supplied.  If no options are given, display the completion options  for\n              each  name  or the current completion.  The possible values of option are those valid for the com\u2010\n              plete builtin described above.  The -D option indicates that other supplied options  should  apply\n              to  the  ``default''  command  completion; that is, completion attempted on a command for which no\n              completion has previously been defined.  The -E  option  indicates  that  other  supplied  options\n              should  apply to ``empty'' command completion; that is, completion attempted on a blank line.  The\n              -I option indicates that other supplied options should apply to completion on the initial  non-as\u2010\n              signment  word  on the line, or after a command delimiter such as ; or |, which is usually command\n              name completion.\n\n              The return value is true unless an invalid option is supplied, an attempt is made  to  modify  the\n              options for a name for which no completion specification exists, or an output error occurs.\n\n       continue [n]\n              Resume  the next iteration of the enclosing for, while, until, or select loop.  If n is specified,\n              resume at the nth enclosing loop.  n must be \u2265 1.  If n is greater than the  number  of  enclosing\n              loops,  the last enclosing loop (the ``top-level'' loop) is resumed.  The return value is 0 unless\n              n is not greater than or equal to 1.\n\n       declare [-aAfFgiIlnrtux] [-p] [name[=value] ...]\n       typeset [-aAfFgiIlnrtux] [-p] [name[=value] ...]\n              Declare variables and/or give them attributes.  If no names are given then display the  values  of\n              variables.   The  -p  option will display the attributes and values of each name.  When -p is used\n              with name arguments, additional options, other than -f and -F, are ignored.  When -p  is  supplied\n              without  name arguments, it will display the attributes and values of all variables having the at\u2010\n              tributes specified by the additional options.  If no other options are supplied with  -p,  declare\n              will  display  the  attributes and values of all shell variables.  The -f option will restrict the\n              display to shell functions.  The -F option inhibits the display of function definitions; only  the\n              function  name  and  attributes are printed.  If the extdebug shell option is enabled using shopt,\n              the source file name and line number where each name is defined are displayed as well.  The -F op\u2010\n              tion  implies  -f.   The -g option forces variables to be created or modified at the global scope,\n              even when declare is executed in a shell function.  It is ignored in all other cases.  The -I  op\u2010\n              tion  causes local variables to inherit the attributes (except the nameref attribute) and value of\n              any existing variable with the same name at a surrounding scope.  If there is  no  existing  vari\u2010\n              able, the local variable is initially unset.  The following options can be used to restrict output\n              to variables with the specified attribute or to give variables attributes:\n              -a     Each name is an indexed array variable (see Arrays above).\n              -A     Each name is an associative array variable (see Arrays above).\n              -f     Use function names only.\n              -i     The variable is treated as an integer; arithmetic  evaluation  (see  ARITHMETIC  EVALUATION\n                     above) is performed when the variable is assigned a value.\n              -l     When  the  variable  is assigned a value, all upper-case characters are converted to lower-\n                     case.  The upper-case attribute is disabled.\n              -n     Give each name the nameref attribute, making it a name reference to another variable.  That\n                     other variable is defined by the value of name.  All references, assignments, and attribute\n                     modifications to name, except those using or changing the -n  attribute  itself,  are  per\u2010\n                     formed on the variable referenced by name's value.  The nameref attribute cannot be applied\n                     to array variables.\n              -r     Make names readonly.  These names cannot then be assigned values by  subsequent  assignment\n                     statements or unset.\n              -t     Give  each  name  the trace attribute.  Traced functions inherit the DEBUG and RETURN traps\n                     from the calling shell.  The trace attribute has no special meaning for variables.\n              -u     When the variable is assigned a value, all lower-case characters are  converted  to  upper-\n                     case.  The lower-case attribute is disabled.\n              -x     Mark names for export to subsequent commands via the environment.\n\n              Using  `+'  instead of `-' turns off the attribute instead, with the exceptions that +a and +A may\n              not be used to destroy array variables and +r will not remove the readonly attribute.   When  used\n              in  a function, declare and typeset make each name local, as with the local command, unless the -g\n              option is supplied.  If a variable name is followed by =value, the value of the variable is set to\n              value.   When  using  -a or -A and the compound assignment syntax to create array variables, addi\u2010\n              tional attributes do not take effect until subsequent assignments.  The return value is  0  unless\n              an invalid option is encountered, an attempt is made to define a function using ``-f foo=bar'', an\n              attempt is made to assign a value to a readonly variable, an attempt is made to assign a value  to\n              an  array  variable  without  using  the compound assignment syntax (see Arrays above), one of the\n              names is not a valid shell variable name, an attempt is made to turn off  readonly  status  for  a\n              readonly  variable,  an  attempt is made to turn off array status for an array variable, or an at\u2010\n              tempt is made to display a non-existent function with -f.\n\n       dirs [-clpv] [+n] [-n]\n              Without options, displays the list of currently remembered directories.  The default display is on\n              a  single  line  with directory names separated by spaces.  Directories are added to the list with\n              the pushd command; the popd command removes entries from the list.  The current directory  is  al\u2010\n              ways the first directory in the stack.\n              -c     Clears the directory stack by deleting all of the entries.\n              -l     Produces  a listing using full pathnames; the default listing format uses a tilde to denote\n                     the home directory.\n              -p     Print the directory stack with one entry per line.\n              -v     Print the directory stack with one entry per line, prefixing each entry with its  index  in\n                     the stack.\n              +n     Displays  the nth entry counting from the left of the list shown by dirs when invoked with\u2010\n                     out options, starting with zero.\n              -n     Displays the nth entry counting from the right of the list shown by dirs when invoked with\u2010\n                     out options, starting with zero.\n\n              The  return value is 0 unless an invalid option is supplied or n indexes beyond the end of the di\u2010\n              rectory stack.\n\n       disown [-ar] [-h] [jobspec ... | pid ... ]\n              Without options, remove each jobspec from the table of active jobs.  If jobspec  is  not  present,\n              and  neither  the  -a nor the -r option is supplied, the current job is used.  If the -h option is\n              given, each jobspec is not removed from the table, but is marked so that SIGHUP is not sent to the\n              job  if  the shell receives a SIGHUP.  If no jobspec is supplied, the -a option means to remove or\n              mark all jobs; the -r option without a jobspec argument restricts operation to running jobs.   The\n              return value is 0 unless a jobspec does not specify a valid job.\n\n       echo [-neE] [arg ...]\n              Output  the  args,  separated  by  spaces, followed by a newline.  The return status is 0 unless a\n              write error occurs.  If -n is specified, the trailing newline is suppressed.  If the -e option  is\n              given,  interpretation  of  the  following backslash-escaped characters is enabled.  The -E option\n              disables the interpretation of these escape characters, even on systems where they are interpreted\n              by  default.   The  xpg_echo shell option may be used to dynamically determine whether or not echo\n              expands these escape characters by default.  echo does not interpret -- to mean  the  end  of  op\u2010\n              tions.  echo interprets the following escape sequences:\n              \\a     alert (bell)\n              \\b     backspace\n              \\c     suppress further output\n              \\e\n              \\E     an escape character\n              \\f     form feed\n              \\n     new line\n              \\r     carriage return\n              \\t     horizontal tab\n              \\v     vertical tab\n              \\\\     backslash\n              \\0nnn  the eight-bit character whose value is the octal value nnn (zero to three octal digits)\n              \\xHH   the eight-bit character whose value is the hexadecimal value HH (one or two hex digits)\n              \\uHHHH the  Unicode  (ISO/IEC  10646)  character whose value is the hexadecimal value HHHH (one to\n                     four hex digits)\n              \\UHHHHHHHH\n                     the Unicode (ISO/IEC 10646) character whose value is the hexadecimal value HHHHHHHH (one to\n                     eight hex digits)\n\n       enable [-a] [-dnps] [-f filename] [name ...]\n              Enable  and  disable  builtin shell commands.  Disabling a builtin allows a disk command which has\n              the same name as a shell builtin to be executed without specifying a full  pathname,  even  though\n              the  shell  normally searches for builtins before disk commands.  If -n is used, each name is dis\u2010\n              abled; otherwise, names are enabled.  For example, to use the test binary found via the  PATH  in\u2010\n              stead  of  the shell builtin version, run ``enable -n test''.  The -f option means to load the new\n              builtin command name from shared object filename, on systems that support dynamic loading.  The -d\n              option will delete a builtin previously loaded with -f.  If no name arguments are given, or if the\n              -p option is supplied, a list of shell builtins is printed.  With no other option  arguments,  the\n              list  consists  of  all  enabled  shell  builtins.   If -n is supplied, only disabled builtins are\n              printed.  If -a is supplied, the list printed includes all builtins, with an indication of whether\n              or  not  each  is  enabled.   If  -s  is  supplied,  the output is restricted to the POSIX special\n              builtins.  The return value is 0 unless a name is not a shell builtin or there is an error loading\n              a new builtin from a shared object.\n\n       eval [arg ...]\n              The  args are read and concatenated together into a single command.  This command is then read and\n              executed by the shell, and its exit status is returned as the value of  eval.   If  there  are  no\n              args, or only null arguments, eval returns 0.\n\n       exec [-cl] [-a name] [command [arguments]]\n              If  command is specified, it replaces the shell.  No new process is created.  The arguments become\n              the arguments to command.  If the -l option is supplied, the shell places a dash at the  beginning\n              of  the zeroth argument passed to command.  This is what login(1) does.  The -c option causes com\u2010\n              mand to be executed with an empty environment.  If -a is supplied, the shell passes  name  as  the\n              zeroth argument to the executed command.  If command cannot be executed for some reason, a non-in\u2010\n              teractive shell exits, unless the execfail shell option is enabled.   In  that  case,  it  returns\n              failure.   An  interactive shell returns failure if the file cannot be executed.  A subshell exits\n              unconditionally if exec fails.  If command is not specified, any redirections take effect  in  the\n              current  shell, and the return status is 0.  If there is a redirection error, the return status is\n              1.\n\n       exit [n]\n              Cause the shell to exit with a status of n.  If n is omitted, the exit status is that of the  last\n              command executed.  A trap on EXIT is executed before the shell terminates.\n\n       export [-fn] [name[=word]] ...\n       export -p\n              The  supplied  names  are  marked for automatic export to the environment of subsequently executed\n              commands.  If the -f option is given, the names refer to functions.  If no names are given, or  if\n              the  -p  option  is supplied, a list of names of all exported variables is printed.  The -n option\n              causes the export property to be removed from each name.  If a variable name is followed by =word,\n              the  value  of  the variable is set to word.  export returns an exit status of 0 unless an invalid\n              option is encountered, one of the names is not a valid shell variable name, or -f is supplied with\n              a name that is not a function.\n\n       fc [-e ename] [-lnr] [first] [last]\n       fc -s [pat=rep] [cmd]\n              The  first  form selects a range of commands from first to last from the history list and displays\n              or edits and re-executes them.  First and last may be specified as a string (to  locate  the  last\n              command  beginning with that string) or as a number (an index into the history list, where a nega\u2010\n              tive number is used as an offset from the current command number).  When listing, a first or  last\n              of  0  is  equivalent  to -1 and -0 is equivalent to the current command (usually the fc command);\n              otherwise 0 is equivalent to -1 and -0 is invalid.  If last is not specified, it  is  set  to  the\n              current  command for listing (so that ``fc -l -10'' prints the last 10 commands) and to first oth\u2010\n              erwise.  If first is not specified, it is set to the previous command  for  editing  and  -16  for\n              listing.\n\n              The  -n  option  suppresses the command numbers when listing.  The -r option reverses the order of\n              the commands.  If the -l option is given, the commands are listed on standard output.   Otherwise,\n              the  editor given by ename is invoked on a file containing those commands.  If ename is not given,\n              the value of the FCEDIT variable is used, and the value of EDITOR if FCEDIT is not set.   If  nei\u2010\n              ther  variable  is  set, vi is used.  When editing is complete, the edited commands are echoed and\n              executed.\n\n              In the second form, command is re-executed after each instance of pat is replaced by rep.  Command\n              is interpreted the same as first above.  A useful alias to use with this is ``r=\"fc -s\"'', so that\n              typing ``r cc'' runs the last command beginning with ``cc'' and typing ``r'' re-executes the  last\n              command.\n\n              If  the first form is used, the return value is 0 unless an invalid option is encountered or first\n              or last specify history lines out of range.  If the -e option is supplied, the return value is the\n              value  of  the last command executed or failure if an error occurs with the temporary file of com\u2010\n              mands.  If the second form is used, the return status is that of the command  re-executed,  unless\n              cmd does not specify a valid history line, in which case fc returns failure.\n\n       fg [jobspec]\n              Resume  jobspec  in  the  foreground, and make it the current job.  If jobspec is not present, the\n              shell's notion of the current job is used.  The return value is that of the  command  placed  into\n              the  foreground,  or failure if run when job control is disabled or, when run with job control en\u2010\n              abled, if jobspec does not specify a valid job or jobspec specifies a job that was started without\n              job control.\n\n       getopts optstring name [arg ...]\n              getopts is used by shell procedures to parse positional parameters.  optstring contains the option\n              characters to be recognized; if a character is followed by a colon, the option is expected to have\n              an  argument, which should be separated from it by white space.  The colon and question mark char\u2010\n              acters may not be used as option characters.  Each time it is invoked, getopts places the next op\u2010\n              tion in the shell variable name, initializing name if it does not exist, and the index of the next\n              argument to be processed into the variable OPTIND.  OPTIND is initialized to 1 each time the shell\n              or  a  shell script is invoked.  When an option requires an argument, getopts places that argument\n              into the variable OPTARG.  The shell does not reset OPTIND automatically; it must be manually  re\u2010\n              set  between multiple calls to getopts within the same shell invocation if a new set of parameters\n              is to be used.\n\n              When the end of options is encountered, getopts exits with  a  return  value  greater  than  zero.\n              OPTIND is set to the index of the first non-option argument, and name is set to ?.\n\n              getopts  normally parses the positional parameters, but if more arguments are supplied as arg val\u2010\n              ues, getopts parses those instead.\n\n              getopts can report errors in two ways.  If the first character of optstring is a colon, silent er\u2010\n              ror  reporting is used.  In normal operation, diagnostic messages are printed when invalid options\n              or missing option arguments are encountered.  If the variable OPTERR is set to 0,  no  error  mes\u2010\n              sages will be displayed, even if the first character of optstring is not a colon.\n\n              If  an invalid option is seen, getopts places ? into name and, if not silent, prints an error mes\u2010\n              sage and unsets OPTARG.  If getopts is silent, the option character found is placed in OPTARG  and\n              no diagnostic message is printed.\n\n              If  a  required argument is not found, and getopts is not silent, a question mark (?) is placed in\n              name, OPTARG is unset, and a diagnostic message is printed.  If getopts is silent,  then  a  colon\n              (:) is placed in name and OPTARG is set to the option character found.\n\n              getopts  returns  true  if an option, specified or unspecified, is found.  It returns false if the\n              end of options is encountered or an error occurs.\n\n       hash [-lr] [-p filename] [-dt] [name]\n              Each time hash is invoked, the full pathname of the command name is determined  by  searching  the\n              directories  in $PATH and remembered.  Any previously-remembered pathname is discarded.  If the -p\n              option is supplied, no path search is performed, and filename is used as the full filename of  the\n              command.  The -r option causes the shell to forget all remembered locations.  The -d option causes\n              the shell to forget the remembered location of each name.  If the -t option is supplied, the  full\n              pathname  to which each name corresponds is printed.  If multiple name arguments are supplied with\n              -t, the name is printed before the hashed full pathname.  The -l option causes output to  be  dis\u2010\n              played  in a format that may be reused as input.  If no arguments are given, or if only -l is sup\u2010\n              plied, information about remembered commands is printed.  The return status is true unless a  name\n              is not found or an invalid option is supplied.\n\n       help [-dms] [pattern]\n              Display  helpful information about builtin commands.  If pattern is specified, help gives detailed\n              help on all commands matching pattern; otherwise help for  all  the  builtins  and  shell  control\n              structures is printed.\n              -d     Display a short description of each pattern\n              -m     Display the description of each pattern in a manpage-like format\n              -s     Display only a short usage synopsis for each pattern\n\n              The return status is 0 unless no command matches pattern.\n\n       history [n]\n       history -c\n       history -d offset\n       history -d start-end\n       history -anrw [filename]\n       history -p arg [arg ...]\n       history -s arg [arg ...]\n              With  no  options, display the command history list with line numbers.  Lines listed with a * have\n              been modified.  An argument of n lists only the last n lines.  If the shell variable  HISTTIMEFOR\u2010\n              MAT  is  set and not null, it is used as a format string for strftime(3) to display the time stamp\n              associated with each displayed history entry.  No intervening blank is printed between the format\u2010\n              ted  time stamp and the history line.  If filename is supplied, it is used as the name of the his\u2010\n              tory file; if not, the value of HISTFILE is used.  Options, if supplied, have the following  mean\u2010\n              ings:\n              -c     Clear the history list by deleting all the entries.\n              -d offset\n                     Delete  the  history entry at position offset.  If offset is negative, it is interpreted as\n                     relative to one greater than the last history position, so negative indices count back from\n                     the end of the history, and an index of -1 refers to the current history -d command.\n              -d start-end\n                     Delete  the history entries between positions start and end, inclusive.  Positive and nega\u2010\n                     tive values for start and end are interpreted as described above.\n              -a     Append the ``new'' history lines to the history file.   These  are  history  lines  entered\n                     since  the  beginning  of the current bash session, but not already appended to the history\n                     file.\n              -n     Read the history lines not already read from the history  file  into  the  current  history\n                     list.  These are lines appended to the history file since the beginning of the current bash\n                     session.\n              -r     Read the contents of the history file and append them to the current history list.\n              -w     Write the current history list to the history file, overwriting  the  history  file's  con\u2010\n                     tents.\n              -p     Perform  history  substitution on the following args and display the result on the standard\n                     output.  Does not store the results in the history list.  Each arg must be quoted  to  dis\u2010\n                     able normal history expansion.\n              -s     Store the args in the history list as a single entry.  The last command in the history list\n                     is removed before the args are added.\n\n              If the HISTTIMEFORMAT variable is set, the time stamp information associated with each history en\u2010\n              try  is  written to the history file, marked with the history comment character.  When the history\n              file is read, lines beginning with the history comment character followed immediately by  a  digit\n              are  interpreted  as  timestamps for the following history entry.  The return value is 0 unless an\n              invalid option is encountered, an error occurs while reading or writing the history file,  an  in\u2010\n              valid offset is supplied as an argument to -d, or the history expansion supplied as an argument to\n              -p fails.\n\n       jobs [-lnprs] [ jobspec ... ]\n       jobs -x command [ args ... ]\n              The first form lists the active jobs.  The options have the following meanings:\n              -l     List process IDs in addition to the normal information.\n              -n     Display information only about jobs that have changed status since the user was last  noti\u2010\n                     fied of their status.\n              -p     List only the process ID of the job's process group leader.\n              -r     Display only running jobs.\n              -s     Display only stopped jobs.\n\n              If  jobspec  is given, output is restricted to information about that job.  The return status is 0\n              unless an invalid option is encountered or an invalid jobspec is supplied.\n\n              If the -x option is supplied, jobs replaces any jobspec found in command or args with  the  corre\u2010\n              sponding process group ID, and executes command passing it args, returning its exit status.\n\n       kill [-s sigspec | -n signum | -sigspec] [pid | jobspec] ...\n       kill -l|-L [sigspec | exit_status]\n              Send  the  signal named by sigspec or signum to the processes named by pid or jobspec.  sigspec is\n              either a case-insensitive signal name such as SIGKILL (with or without the SIG prefix) or a signal\n              number;  signum is a signal number.  If sigspec is not present, then SIGTERM is assumed.  An argu\u2010\n              ment of -l lists the signal names.  If any arguments are supplied when -l is given, the  names  of\n              the  signals corresponding to the arguments are listed, and the return status is 0.  The exit_sta\u2010\n              tus argument to -l is a number specifying either a signal number or the exit status of  a  process\n              terminated  by  a  signal.   The -L option is equivalent to -l.  kill returns true if at least one\n              signal was successfully sent, or false if an error occurs or an invalid option is encountered.\n\n       let arg [arg ...]\n              Each arg is an arithmetic expression to be evaluated (see ARITHMETIC EVALUATION  above).   If  the\n              last arg evaluates to 0, let returns 1; 0 is returned otherwise.\n\n       local [option] [name[=value] ... | - ]\n              For  each argument, a local variable named name is created, and assigned value.  The option can be\n              any of the options accepted by declare.  When local is used within a function, it causes the vari\u2010\n              able name to have a visible scope restricted to that function and its children.  If name is -, the\n              set of shell options is made local to the function  in  which  local  is  invoked:  shell  options\n              changed  using  the set builtin inside the function are restored to their original values when the\n              function returns.  The restore is effected as if a series of set commands were executed to restore\n              the values that were in place before the function.  With no operands, local writes a list of local\n              variables to the standard output.  It is an error to use local when not within  a  function.   The\n              return  status  is 0 unless local is used outside a function, an invalid name is supplied, or name\n              is a readonly variable.\n\n       logout Exit a login shell.\n\n       mapfile [-d delim] [-n count] [-O origin] [-s count] [-t] [-u fd] [-C callback] [-c quantum] [array]\n       readarray [-d delim] [-n count] [-O origin] [-s count] [-t] [-u fd] [-C callback] [-c quantum] [array]\n              Read lines from the standard input into the indexed array variable array, or from file  descriptor\n              fd  if  the  -u  option is supplied.  The variable MAPFILE is the default array.  Options, if sup\u2010\n              plied, have the following meanings:\n              -d     The first character of delim is used to terminate each input line, rather than newline.  If\n                     delim is the empty string, mapfile will terminate a line when it reads a NUL character.\n              -n     Copy at most count lines.  If count is 0, all lines are copied.\n              -O     Begin assigning to array at index origin.  The default index is 0.\n              -s     Discard the first count lines read.\n              -t     Remove a trailing delim (default newline) from each line read.\n              -u     Read lines from file descriptor fd instead of the standard input.\n              -C     Evaluate callback each time quantum lines are read.  The -c option specifies quantum.\n              -c     Specify the number of lines read between each call to callback.\n\n              If  -C  is  specified  without -c, the default quantum is 5000.  When callback is evaluated, it is\n              supplied the index of the next array element to be assigned and the line to be  assigned  to  that\n              element  as additional arguments.  callback is evaluated after the line is read but before the ar\u2010\n              ray element is assigned.\n\n              If not supplied with an explicit origin, mapfile will clear array before assigning to it.\n\n              mapfile returns successfully unless an invalid option or option argument is supplied, array is in\u2010\n              valid or unassignable, or if array is not an indexed array.\n\n       popd [-n] [+n] [-n]\n              Removes  entries  from the directory stack.  With no arguments, removes the top directory from the\n              stack, and performs a cd to the new top directory.  Arguments, if  supplied,  have  the  following\n              meanings:\n              -n     Suppresses the normal change of directory when removing directories from the stack, so that\n                     only the stack is manipulated.\n              +n     Removes the nth entry counting from the left of the list shown by dirs, starting with zero.\n                     For example: ``popd +0'' removes the first directory, ``popd +1'' the second.\n              -n     Removes  the  nth  entry  counting  from the right of the list shown by dirs, starting with\n                     zero.  For example: ``popd -0'' removes the last directory, ``popd -1'' the next to last.\n\n              If the popd command is successful, a dirs is performed as well, and the return status is 0.   popd\n              returns  false  if  an invalid option is encountered, the directory stack is empty, a non-existent\n              directory stack entry is specified, or the directory change fails.\n\n       printf [-v var] format [arguments]\n              Write the formatted arguments to the standard output under the control of the format.  The -v  op\u2010\n              tion  causes  the output to be assigned to the variable var rather than being printed to the stan\u2010\n              dard output.\n\n              The format is a character string which contains three types of objects:  plain  characters,  which\n              are  simply  copied to standard output, character escape sequences, which are converted and copied\n              to the standard output, and format specifications, each of which causes printing of the next  suc\u2010\n              cessive  argument.  In addition to the standard printf(1) format specifications, printf interprets\n              the following extensions:\n              %b     causes printf to expand backslash escape sequences in the  corresponding  argument  in  the\n                     same way as echo -e.\n              %q     causes  printf to output the corresponding argument in a format that can be reused as shell\n                     input.\n              %(datefmt)T\n                     causes printf to output the date-time string resulting  from  using  datefmt  as  a  format\n                     string  for  strftime(3).  The corresponding argument is an integer representing the number\n                     of seconds since the epoch.  Two special argument values may be  used:  -1  represents  the\n                     current  time,  and -2 represents the time the shell was invoked.  If no argument is speci\u2010\n                     fied, conversion behaves as if -1 had been given.  This is an exception to the usual printf\n                     behavior.\n\n              The  %b,  %q,  and  %T  directives all use the field width and precision arguments from the format\n              specification and write that many bytes from (or use that wide a field for) the expanded argument,\n              which usually contains more characters than the original.\n\n              Arguments  to  non-string format specifiers are treated as C constants, except that a leading plus\n              or minus sign is allowed, and if the leading character is a single or double quote, the  value  is\n              the ASCII value of the following character.\n\n              The  format  is  reused as necessary to consume all of the arguments.  If the format requires more\n              arguments than are supplied, the extra format specifications behave as if a  zero  value  or  null\n              string, as appropriate, had been supplied.  The return value is zero on success, non-zero on fail\u2010\n              ure.\n\n       pushd [-n] [+n] [-n]\n       pushd [-n] [dir]\n              Adds a directory to the top of the directory stack, or rotates the stack, making the  new  top  of\n              the  stack the current working directory.  With no arguments, pushd exchanges the top two directo\u2010\n              ries and returns 0, unless the directory stack is empty.  Arguments, if supplied, have the follow\u2010\n              ing meanings:\n              -n     Suppresses the normal change of directory when rotating or adding directories to the stack,\n                     so that only the stack is manipulated.\n              +n     Rotates the stack so that the nth directory (counting from the left of the  list  shown  by\n                     dirs, starting with zero) is at the top.\n              -n     Rotates  the  stack so that the nth directory (counting from the right of the list shown by\n                     dirs, starting with zero) is at the top.\n              dir    Adds dir to the directory stack at the top, making it the new current working directory  as\n                     if it had been supplied as the argument to the cd builtin.\n\n              If the pushd command is successful, a dirs is performed as well.  If the first form is used, pushd\n              returns 0 unless the cd to dir fails.  With the second form, pushd returns 0 unless the  directory\n              stack  is  empty,  a non-existent directory stack element is specified, or the directory change to\n              the specified new current directory fails.\n\n       pwd [-LP]\n              Print the absolute pathname of the current working directory.  The pathname  printed  contains  no\n              symbolic  links  if the -P option is supplied or the -o physical option to the set builtin command\n              is enabled.  If the -L option is used, the pathname printed may contain symbolic links.   The  re\u2010\n              turn  status is 0 unless an error occurs while reading the name of the current directory or an in\u2010\n              valid option is supplied.\n\n       read [-ers] [-a aname] [-d delim] [-i text] [-n nchars] [-N nchars] [-p  prompt]  [-t  timeout]  [-u  fd]\n       [name ...]\n              One  line  is read from the standard input, or from the file descriptor fd supplied as an argument\n              to the -u option, split into words as described above under Word Splitting, and the first word  is\n              assigned  to  the  first  name,  the second word to the second name, and so on.  If there are more\n              words than names, the remaining words and their intervening delimiters are assigned  to  the  last\n              name.  If there are fewer words read from the input stream than names, the remaining names are as\u2010\n              signed empty values.  The characters in IFS are used to split the line into words using  the  same\n              rules  the shell uses for expansion (described above under Word Splitting).  The backslash charac\u2010\n              ter (\\) may be used to remove any special meaning for the next character read and for line contin\u2010\n              uation.  Options, if supplied, have the following meanings:\n              -a aname\n                     The  words  are  assigned to sequential indices of the array variable aname, starting at 0.\n                     aname is unset before any new values are assigned.  Other name arguments are ignored.\n              -d delim\n                     The first character of delim is used to terminate the input line, rather than newline.   If\n                     delim is the empty string, read will terminate a line when it reads a NUL character.\n              -e     If  the  standard input is coming from a terminal, readline (see READLINE above) is used to\n                     obtain the line.  Readline uses the current (or default, if line editing was not previously\n                     active) editing settings, but uses Readline's default filename completion.\n              -i text\n                     If  readline  is being used to read the line, text is placed into the editing buffer before\n                     editing begins.\n              -n nchars\n                     read returns after reading nchars characters rather than waiting for a complete line of in\u2010\n                     put, but honors a delimiter if fewer than nchars characters are read before the delimiter.\n              -N nchars\n                     read  returns  after  reading  exactly nchars characters rather than waiting for a complete\n                     line of input, unless EOF is encountered or read times out.  Delimiter  characters  encoun\u2010\n                     tered  in  the input are not treated specially and do not cause read to return until nchars\n                     characters are read.  The result is not split on the characters in IFS; the intent is  that\n                     the  variable is assigned exactly the characters read (with the exception of backslash; see\n                     the -r option below).\n              -p prompt\n                     Display prompt on standard error, without a trailing newline, before attempting to read any\n                     input.  The prompt is displayed only if input is coming from a terminal.\n              -r     Backslash  does  not act as an escape character.  The backslash is considered to be part of\n                     the line.  In particular, a backslash-newline pair may not then be used as a line continua\u2010\n                     tion.\n              -s     Silent mode.  If input is coming from a terminal, characters are not echoed.\n              -t timeout\n                     Cause  read to time out and return failure if a complete line of input (or a specified num\u2010\n                     ber of characters) is not read within timeout seconds.  timeout may  be  a  decimal  number\n                     with  a  fractional  portion following the decimal point.  This option is only effective if\n                     read is reading input from a terminal, pipe, or other special file; it has no  effect  when\n                     reading  from regular files.  If read times out, read saves any partial input read into the\n                     specified variable name.  If timeout is 0, read returns immediately, without trying to read\n                     any  data.   The  exit  status is 0 if input is available on the specified file descriptor,\n                     non-zero otherwise.  The exit status is greater than 128 if the timeout is exceeded.\n              -u fd  Read input from file descriptor fd.\n\n              If no names are supplied, the line read, without the ending delimiter but otherwise unmodified, is\n              assigned  to the variable REPLY.  The exit status is zero, unless end-of-file is encountered, read\n              times out (in which case the status is greater than 128), a variable assignment error (such as as\u2010\n              signing  to a readonly variable) occurs, or an invalid file descriptor is supplied as the argument\n              to -u.\n\n       readonly [-aAf] [-p] [name[=word] ...]\n              The given names are marked readonly; the values of these names may not be  changed  by  subsequent\n              assignment.  If the -f option is supplied, the functions corresponding to the names are so marked.\n              The -a option restricts the variables to indexed arrays; the -A option restricts the variables  to\n              associative  arrays.  If both options are supplied, -A takes precedence.  If no name arguments are\n              given, or if the -p option is supplied, a list of all readonly names is printed.   The  other  op\u2010\n              tions  may be used to restrict the output to a subset of the set of readonly names.  The -p option\n              causes output to be displayed in a format that may be reused as input.  If a variable name is fol\u2010\n              lowed  by  =word,  the value of the variable is set to word.  The return status is 0 unless an in\u2010\n              valid option is encountered, one of the names is not a valid shell variable name, or  -f  is  sup\u2010\n              plied with a name that is not a function.\n\n       return [n]\n              Causes  a  function  to stop executing and return the value specified by n to its caller.  If n is\n              omitted, the return status is that of the last command executed in the function body.   If  return\n              is  executed  by a trap handler, the last command used to determine the status is the last command\n              executed before the trap handler.  If return is executed during a DEBUG  trap,  the  last  command\n              used  to  determine  the status is the last command executed by the trap handler before return was\n              invoked.  If return is used outside a function,  but  during  execution  of  a  script  by  the  .\n              (source)  command,  it  causes  the shell to stop executing that script and return either n or the\n              exit status of the last command executed within the script as the exit status of the script.  If n\n              is  supplied,  the return value is its least significant 8 bits.  The return status is non-zero if\n              return is supplied a non-numeric argument, or is used outside a function and not during  execution\n              of a script by . or source.  Any command associated with the RETURN trap is executed before execu\u2010\n              tion resumes after the function or script.\n\n       set [--abefhkmnptuvxBCEHPT] [-o option-name] [arg ...]\n       set [+abefhkmnptuvxBCEHPT] [+o option-name] [arg ...]\n              Without options, the name and value of each shell variable are displayed in a format that  can  be\n              reused  as input for setting or resetting the currently-set variables.  Read-only variables cannot\n              be reset.  In posix mode, only shell variables are listed.  The output is sorted according to  the\n              current  locale.   When  options are specified, they set or unset shell attributes.  Any arguments\n              remaining after option processing are treated as values for the positional parameters and are  as\u2010\n              signed, in order, to $1, $2, ...  $n.  Options, if specified, have the following meanings:\n              -a      Each  variable  or  function that is created or modified is given the export attribute and\n                      marked for export to the environment of subsequent commands.\n              -b      Report the status of terminated background jobs immediately, rather than before  the  next\n                      primary prompt.  This is effective only when job control is enabled.\n              -e      Exit  immediately if a pipeline (which may consist of a single simple command), a list, or\n                      a compound command (see SHELL GRAMMAR above), exits with a  non-zero  status.   The  shell\n                      does  not exit if the command that fails is part of the command list immediately following\n                      a while or until keyword, part of the test following the if or elif reserved  words,  part\n                      of  any  command  executed in a && or || list except the command following the final && or\n                      ||, any command in a pipeline but the last, or if the command's return value is being  in\u2010\n                      verted  with !.  If a compound command other than a subshell returns a non-zero status be\u2010\n                      cause a command failed while -e was being ignored, the shell does not  exit.   A  trap  on\n                      ERR,  if  set, is executed before the shell exits.  This option applies to the shell envi\u2010\n                      ronment and each  subshell  environment  separately  (see  COMMAND  EXECUTION  ENVIRONMENT\n                      above), and may cause subshells to exit before executing all the commands in the subshell.\n\n                      If  a  compound command or shell function executes in a context where -e is being ignored,\n                      none of the commands executed within the compound command or function  body  will  be  af\u2010\n                      fected  by the -e setting, even if -e is set and a command returns a failure status.  If a\n                      compound command or shell function sets -e while executing in a context where  -e  is  ig\u2010\n                      nored,  that  setting  will  not have any effect until the compound command or the command\n                      containing the function call completes.\n              -f      Disable pathname expansion.\n              -h      Remember the location of commands as they are looked up for execution.  This is enabled by\n                      default.\n              -k      All  arguments  in  the  form of assignment statements are placed in the environment for a\n                      command, not just those that precede the command name.\n              -m      Monitor mode.  Job control is enabled.  This option  is  on  by  default  for  interactive\n                      shells  on  systems that support it (see JOB CONTROL above).  All processes run in a sepa\u2010\n                      rate process group.  When a background job completes, the shell prints a  line  containing\n                      its exit status.\n              -n      Read  commands but do not execute them.  This may be used to check a shell script for syn\u2010\n                      tax errors.  This is ignored by interactive shells.\n              -o option-name\n                      The option-name can be one of the following:\n                      allexport\n                              Same as -a.\n                      braceexpand\n                              Same as -B.\n                      emacs   Use an emacs-style command line editing interface.  This  is  enabled  by  default\n                              when  the  shell  is interactive, unless the shell is started with the --noediting\n                              option.  This also affects the editing interface used for read -e.\n                      errexit Same as -e.\n                      errtrace\n                              Same as -E.\n                      functrace\n                              Same as -T.\n                      hashall Same as -h.\n                      histexpand\n                              Same as -H.\n                      history Enable command history, as described above under HISTORY.  This option  is  on  by\n                              default in interactive shells.\n                      ignoreeof\n                              The  effect  is  as  if  the shell command ``IGNOREEOF=10'' had been executed (see\n                              Shell Variables above).\n                      keyword Same as -k.\n                      monitor Same as -m.\n                      noclobber\n                              Same as -C.\n                      noexec  Same as -n.\n                      noglob  Same as -f.\n                      nolog   Currently ignored.\n                      notify  Same as -b.\n                      nounset Same as -u.\n                      onecmd  Same as -t.\n                      physical\n                              Same as -P.\n                      pipefail\n                              If set, the return value of a pipeline is the value of the last  (rightmost)  com\u2010\n                              mand  to exit with a non-zero status, or zero if all commands in the pipeline exit\n                              successfully.  This option is disabled by default.\n                      posix   Change the behavior of bash where the default operation  differs  from  the  POSIX\n                              standard  to  match the standard (posix mode).  See SEE ALSO below for a reference\n                              to a document that details how posix mode affects bash's behavior.\n                      privileged\n                              Same as -p.\n                      verbose Same as -v.\n                      vi      Use a vi-style command line editing interface.  This also affects the editing  in\u2010\n                              terface used for read -e.\n                      xtrace  Same as -x.\n                      If  -o is supplied with no option-name, the values of the current options are printed.  If\n                      +o is supplied with no option-name, a series of set commands to recreate the  current  op\u2010\n                      tion settings is displayed on the standard output.\n              -p      Turn  on  privileged  mode.  In this mode, the $ENV and $BASH_ENV files are not processed,\n                      shell functions are not inherited from the environment, and the SHELLOPTS,  BASHOPTS,  CD\u2010\n                      PATH,  and  GLOBIGNORE  variables, if they appear in the environment, are ignored.  If the\n                      shell is started with the effective user (group) id not equal to the real user (group) id,\n                      and  the  -p  option is not supplied, these actions are taken and the effective user id is\n                      set to the real user id.  If the -p option is supplied at startup, the effective  user  id\n                      is  not  reset.  Turning this option off causes the effective user and group ids to be set\n                      to the real user and group ids.\n              -t      Exit after reading and executing one command.\n              -u      Treat unset variables and parameters other than the special parameters \"@\" and \"*\"  as  an\n                      error when performing parameter expansion.  If expansion is attempted on an unset variable\n                      or parameter, the shell prints an error message, and, if not  interactive,  exits  with  a\n                      non-zero status.\n              -v      Print shell input lines as they are read.\n              -x      After  expanding each simple command, for command, case command, select command, or arith\u2010\n                      metic for command, display the expanded value of PS4, followed by the command and its  ex\u2010\n                      panded arguments or associated word list.\n              -B      The shell performs brace expansion (see Brace Expansion above).  This is on by default.\n              -C      If set, bash does not overwrite an existing file with the >, >&, and <> redirection opera\u2010\n                      tors.  This may be overridden when creating output files by using the redirection operator\n                      >| instead of >.\n              -E      If  set,  any trap on ERR is inherited by shell functions, command substitutions, and com\u2010\n                      mands executed in a subshell environment.  The ERR trap is normally not inherited in  such\n                      cases.\n              -H      Enable  !  style history substitution.  This option is on by default when the shell is in\u2010\n                      teractive.\n              -P      If set, the shell does not resolve symbolic links when executing commands such as cd  that\n                      change  the  current working directory.  It uses the physical directory structure instead.\n                      By default, bash follows the logical chain of directories when performing  commands  which\n                      change the current directory.\n              -T      If  set, any traps on DEBUG and RETURN are inherited by shell functions, command substitu\u2010\n                      tions, and commands executed in a subshell environment.  The DEBUG and  RETURN  traps  are\n                      normally not inherited in such cases.\n              --      If  no arguments follow this option, then the positional parameters are unset.  Otherwise,\n                      the positional parameters are set to the args, even if some of them begin with a -.\n              -       Signal the end of options, cause all remaining args to be assigned to the  positional  pa\u2010\n                      rameters.  The -x and -v options are turned off.  If there are no args, the positional pa\u2010\n                      rameters remain unchanged.\n\n              The options are off by default unless otherwise noted.  Using + rather than - causes these options\n              to  be  turned off.  The options can also be specified as arguments to an invocation of the shell.\n              The current set of options may be found in $-.  The return status is always true unless an invalid\n              option is encountered.\n\n       shift [n]\n              The  positional parameters from n+1 ... are renamed to $1 ....  Parameters represented by the num\u2010\n              bers $# down to $#-n+1 are unset.  n must be a non-negative number less than or equal to $#.  If n\n              is  0, no parameters are changed.  If n is not given, it is assumed to be 1.  If n is greater than\n              $#, the positional parameters are not changed.  The return status is greater than  zero  if  n  is\n              greater than $# or less than zero; otherwise 0.\n\n       shopt [-pqsu] [-o] [optname ...]\n              Toggle  the  values  of  settings controlling optional shell behavior.  The settings can be either\n              those listed below, or, if the -o option is used, those available with the -o option  to  the  set\n              builtin  command.   With no options, or with the -p option, a list of all settable options is dis\u2010\n              played, with an indication of whether or not each is set; if optnames are supplied, the output  is\n              restricted  to  those  options.  The -p option causes output to be displayed in a form that may be\n              reused as input.  Other options have the following meanings:\n              -s     Enable (set) each optname.\n              -u     Disable (unset) each optname.\n              -q     Suppresses normal output (quiet mode); the return status indicates whether the  optname  is\n                     set  or  unset.  If multiple optname arguments are given with -q, the return status is zero\n                     if all optnames are enabled; non-zero otherwise.\n              -o     Restricts the values of optname to be those defined for the -o option to the set builtin.\n\n              If either -s or -u is used with no optname arguments, shopt shows only those options which are set\n              or  unset,  respectively.   Unless  otherwise noted, the shopt options are disabled (unset) by de\u2010\n              fault.\n\n              The return status when listing options is zero if all optnames are  enabled,  non-zero  otherwise.\n              When  setting  or  unsetting  options,  the return status is zero unless an optname is not a valid\n              shell option.\n\n              The list of shopt options is:\n\n              assoc_expand_once\n                      If set, the shell suppresses multiple evaluation of associative  array  subscripts  during\n                      arithmetic  expression  evaluation, while executing builtins that can perform variable as\u2010\n                      signments, and while executing builtins that perform array dereferencing.\n              autocd  If set, a command name that is the name of a directory is executed as if it were the argu\u2010\n                      ment to the cd command.  This option is only used by interactive shells.\n              cdable_vars\n                      If set, an argument to the cd builtin command that is not a directory is assumed to be the\n                      name of a variable whose value is the directory to change to.\n              cdspell If set, minor errors in the spelling of a directory component in a cd command will be cor\u2010\n                      rected.   The  errors  checked for are transposed characters, a missing character, and one\n                      character too many.  If a correction is found, the corrected filename is printed, and  the\n                      command proceeds.  This option is only used by interactive shells.\n              checkhash\n                      If set, bash checks that a command found in the hash table exists before trying to execute\n                      it.  If a hashed command no longer exists, a normal path search is performed.\n              checkjobs\n                      If set, bash lists the status of any stopped and running jobs before exiting  an  interac\u2010\n                      tive  shell.   If any jobs are running, this causes the exit to be deferred until a second\n                      exit is attempted without an intervening command (see JOB CONTROL above).  The  shell  al\u2010\n                      ways postpones exiting if any jobs are stopped.\n              checkwinsize\n                      If set, bash checks the window size after each external (non-builtin) command and, if nec\u2010\n                      essary, updates the values of LINES and COLUMNS.  This option is enabled by default.\n              cmdhist If set, bash attempts to save all lines of a multiple-line command in the same history en\u2010\n                      try.   This  allows easy re-editing of multi-line commands.  This option is enabled by de\u2010\n                      fault, but only has an effect if command history is enabled, as described above under HIS\u2010\n                      TORY.\n              compat31\n              compat32\n              compat40\n              compat41\n              compat42\n              compat43\n              compat44\n                      These  control aspects of the shell's compatibility mode (see SHELL COMPATIBILITY MODE be\u2010\n                      low).\n\n              complete_fullquote\n                      If set, bash quotes all shell metacharacters in filenames and directory  names  when  per\u2010\n                      forming  completion.  If not set, bash removes metacharacters such as the dollar sign from\n                      the set of characters that will be quoted in completed filenames when these metacharacters\n                      appear  in  shell  variable  references  in words to be completed.  This means that dollar\n                      signs in variable names that expand to directories will not be quoted; however, any dollar\n                      signs appearing in filenames will not be quoted, either.  This is active only when bash is\n                      using backslashes to quote completed filenames.  This variable is set by default, which is\n                      the default bash behavior in versions through 4.2.\n\n              direxpand\n                      If  set,  bash replaces directory names with the results of word expansion when performing\n                      filename completion.  This changes the contents of the readline editing  buffer.   If  not\n                      set, bash attempts to preserve what the user typed.\n\n              dirspell\n                      If set, bash attempts spelling correction on directory names during word completion if the\n                      directory name initially supplied does not exist.\n\n              dotglob If set, bash includes filenames beginning with a `.' in the results of pathname expansion.\n                      The  filenames  ``.''   and  ``..''  must always be matched explicitly, even if dotglob is\n                      set.\n\n              execfail\n                      If set, a non-interactive shell will not exit if it cannot execute the file  specified  as\n                      an  argument  to  the  exec  builtin  command.  An interactive shell does not exit if exec\n                      fails.\n\n              expand_aliases\n                      If set, aliases are expanded as described above under ALIASES.  This option is enabled  by\n                      default for interactive shells.\n\n              extdebug\n                      If  set  at  shell invocation, or in a shell startup file, arrange to execute the debugger\n                      profile before the shell starts, identical to the --debugger option.  If set after invoca\u2010\n                      tion, behavior intended for use by debuggers is enabled:\n\n                      1.     The  -F option to the declare builtin displays the source file name and line number\n                             corresponding to each function name supplied as an argument.\n\n                      2.     If the command run by the DEBUG trap returns a non-zero value, the next command  is\n                             skipped and not executed.\n\n                      3.     If the command run by the DEBUG trap returns a value of 2, and the shell is execut\u2010\n                             ing in a subroutine (a shell function or a shell script executed by the . or source\n                             builtins), the shell simulates a call to return.\n\n                      4.     BASH_ARGC and BASH_ARGV are updated as described in their descriptions above.\n\n                      5.     Function  tracing  is enabled: command substitution, shell functions, and subshells\n                             invoked with ( command ) inherit the DEBUG and RETURN traps.\n\n                      6.     Error tracing is enabled: command substitution, shell functions, and subshells  in\u2010\n                             voked with ( command ) inherit the ERR trap.\n\n              extglob If  set,  the  extended pattern matching features described above under Pathname Expansion\n                      are enabled.\n\n              extquote\n                      If set, $'string' and $\"string\" quoting is performed within  ${parameter}  expansions  en\u2010\n                      closed in double quotes.  This option is enabled by default.\n\n              failglob\n                      If  set, patterns which fail to match filenames during pathname expansion result in an ex\u2010\n                      pansion error.\n\n              force_fignore\n                      If set, the suffixes specified by the FIGNORE shell variable cause  words  to  be  ignored\n                      when  performing  word  completion even if the ignored words are the only possible comple\u2010\n                      tions.  See SHELL VARIABLES above for a description of FIGNORE.  This option is enabled by\n                      default.\n\n              globasciiranges\n                      If set, range expressions used in pattern matching bracket expressions (see Pattern Match\u2010\n                      ing above) behave as if in the traditional C locale when performing comparisons.  That is,\n                      the  current  locale's collating sequence is not taken into account, so b will not collate\n                      between A and B, and upper-case and lower-case ASCII characters will collate together.\n\n              globstar\n                      If set, the pattern ** used in a pathname expansion context will match all files and  zero\n                      or  more directories and subdirectories.  If the pattern is followed by a /, only directo\u2010\n                      ries and subdirectories match.\n\n              gnu_errfmt\n                      If set, shell error messages are written in the standard GNU error message format.\n\n              histappend\n                      If set, the history list is appended to the file named by the value of the HISTFILE  vari\u2010\n                      able when the shell exits, rather than overwriting the file.\n\n              histreedit\n                      If  set,  and  readline is being used, a user is given the opportunity to re-edit a failed\n                      history substitution.\n\n              histverify\n                      If set, and readline is being used, the results of history substitution  are  not  immedi\u2010\n                      ately passed to the shell parser.  Instead, the resulting line is loaded into the readline\n                      editing buffer, allowing further modification.\n\n              hostcomplete\n                      If set, and readline is being used, bash will attempt to perform hostname completion  when\n                      a  word  containing a @ is being completed (see Completing under READLINE above).  This is\n                      enabled by default.\n\n              huponexit\n                      If set, bash will send SIGHUP to all jobs when an interactive login shell exits.\n\n              inherit_errexit\n                      If set, command substitution inherits the value of the errexit option, instead  of  unset\u2010\n                      ting it in the subshell environment.  This option is enabled when posix mode is enabled.\n\n              interactive_comments\n                      If  set,  allow a word beginning with # to cause that word and all remaining characters on\n                      that line to be ignored in an interactive shell (see COMMENTS above).  This option is  en\u2010\n                      abled by default.\n\n              lastpipe\n                      If  set,  and job control is not active, the shell runs the last command of a pipeline not\n                      executed in the background in the current shell environment.\n\n              lithist If set, and the cmdhist option is enabled, multi-line commands are saved  to  the  history\n                      with embedded newlines rather than using semicolon separators where possible.\n\n              localvar_inherit\n                      If  set,  local  variables inherit the value and attributes of a variable of the same name\n                      that exists at a previous scope before any new value is assigned.  The  nameref  attribute\n                      is not inherited.\n\n              localvar_unset\n                      If  set, calling unset on local variables in previous function scopes marks them so subse\u2010\n                      quent lookups find them unset until that function returns. This is identical to the behav\u2010\n                      ior of unsetting local variables at the current function scope.\n\n              login_shell\n                      The  shell sets this option if it is started as a login shell (see INVOCATION above).  The\n                      value may not be changed.\n\n              mailwarn\n                      If set, and a file that bash is checking for mail has been accessed since the last time it\n                      was checked, the message ``The mail in mailfile has been read'' is displayed.\n\n              no_empty_cmd_completion\n                      If  set, and readline is being used, bash will not attempt to search the PATH for possible\n                      completions when completion is attempted on an empty line.\n\n              nocaseglob\n                      If set, bash matches filenames in a case-insensitive fashion when performing pathname  ex\u2010\n                      pansion (see Pathname Expansion above).\n\n              nocasematch\n                      If set, bash matches patterns in a case-insensitive fashion when performing matching while\n                      executing case or [[ conditional commands, when performing pattern substitution  word  ex\u2010\n                      pansions, or when filtering possible completions as part of programmable completion.\n\n              nullglob\n                      If set, bash allows patterns which match no files (see Pathname Expansion above) to expand\n                      to a null string, rather than themselves.\n\n              progcomp\n                      If set, the programmable completion facilities (see Programmable Completion above) are en\u2010\n                      abled.  This option is enabled by default.\n\n              progcomp_alias\n                      If  set,  and  programmable completion is enabled, bash treats a command name that doesn't\n                      have any completions as a possible alias and attempts alias expansion. If it has an alias,\n                      bash  attempts  programmable completion using the command word resulting from the expanded\n                      alias.\n\n              promptvars\n                      If set, prompt strings undergo parameter expansion, command substitution,  arithmetic  ex\u2010\n                      pansion, and quote removal after being expanded as described in PROMPTING above.  This op\u2010\n                      tion is enabled by default.\n\n              restricted_shell\n                      The shell sets this option if it is started in restricted mode (see RESTRICTED  SHELL  be\u2010\n                      low).   The  value  may not be changed.  This is not reset when the startup files are exe\u2010\n                      cuted, allowing the startup files to discover whether or not a shell is restricted.\n\n              shift_verbose\n                      If set, the shift builtin prints an error message when the shift count exceeds the  number\n                      of positional parameters.\n\n              sourcepath\n                      If set, the source (.) builtin uses the value of PATH to find the directory containing the\n                      file supplied as an argument.  This option is enabled by default.\n\n              xpg_echo\n                      If set, the echo builtin expands backslash-escape sequences by default.\n\n       suspend [-f]\n              Suspend the execution of this shell until it receives a SIGCONT signal.  A login shell  cannot  be\n              suspended; the -f option can be used to override this and force the suspension.  The return status\n              is 0 unless the shell is a login shell and -f is not supplied, or if job control is not enabled.\n\n       test expr\n       [ expr ]\n              Return a status of 0 (true) or 1 (false) depending on the evaluation of the conditional expression\n              expr.   Each  operator  and  operand must be a separate argument.  Expressions are composed of the\n              primaries described in the bash manual page under CONDITIONAL EXPRESSIONS.  test does  not  accept\n              any options, nor does it accept and ignore an argument of -- as signifying the end of options.\n\n              Expressions  may  be  combined using the following operators, listed in decreasing order of prece\u2010\n              dence.  The evaluation depends on the number of arguments; see below.  Operator precedence is used\n              when there are five or more arguments.\n              ! expr True if expr is false.\n              ( expr )\n                     Returns  the  value  of expr.  This may be used to override the normal precedence of opera\u2010\n                     tors.\n              expr1 -a expr2\n                     True if both expr1 and expr2 are true.\n              expr1 -o expr2\n                     True if either expr1 or expr2 is true.\n\n              test and [ evaluate conditional expressions using a set of rules based on the number of arguments.\n\n              0 arguments\n                     The expression is false.\n              1 argument\n                     The expression is true if and only if the argument is not null.\n              2 arguments\n                     If the first argument is !, the expression is true if and only if the  second  argument  is\n                     null.   If  the first argument is one of the unary conditional operators listed above under\n                     CONDITIONAL EXPRESSIONS, the expression is true if the unary test is true.   If  the  first\n                     argument is not a valid unary conditional operator, the expression is false.\n              3 arguments\n                     The following conditions are applied in the order listed.  If the second argument is one of\n                     the binary conditional operators listed above under CONDITIONAL EXPRESSIONS, the result  of\n                     the  expression is the result of the binary test using the first and third arguments as op\u2010\n                     erands.  The -a and -o operators are considered binary operators when there are three argu\u2010\n                     ments.   If the first argument is !, the value is the negation of the two-argument test us\u2010\n                     ing the second and third arguments.  If the first argument is exactly ( and the third argu\u2010\n                     ment  is exactly ), the result is the one-argument test of the second argument.  Otherwise,\n                     the expression is false.\n              4 arguments\n                     If the first argument is !, the result is the negation  of  the  three-argument  expression\n                     composed of the remaining arguments.  Otherwise, the expression is parsed and evaluated ac\u2010\n                     cording to precedence using the rules listed above.\n              5 or more arguments\n                     The expression is parsed and evaluated according  to  precedence  using  the  rules  listed\n                     above.\n\n              When used with test or [, the < and > operators sort lexicographically using ASCII ordering.\n\n       times  Print  the  accumulated  user and system times for the shell and for processes run from the shell.\n              The return status is 0.\n\n       trap [-lp] [[arg] sigspec ...]\n              The command arg is to be read and executed when the shell receives signal(s) sigspec.  If  arg  is\n              absent (and there is a single sigspec) or -, each specified signal is reset to its original dispo\u2010\n              sition (the value it had upon entrance to the shell).  If arg is the null string the signal speci\u2010\n              fied  by  each  sigspec  is  ignored  by  the shell and by the commands it invokes.  If arg is not\n              present and -p has been supplied, then the trap commands associated with  each  sigspec  are  dis\u2010\n              played.  If no arguments are supplied or if only -p is given, trap prints the list of commands as\u2010\n              sociated with each signal.  The -l option causes the shell to print a list  of  signal  names  and\n              their  corresponding  numbers.   Each  sigspec is either a signal name defined in <signal.h>, or a\n              signal number.  Signal names are case insensitive and the SIG prefix is optional.\n\n              If a sigspec is EXIT (0) the command arg is executed on exit from the shell.  If a sigspec is  DE\u2010\n              BUG,  the  command  arg is executed before every simple command, for command, case command, select\n              command, every arithmetic for command, and before the first command executes in a  shell  function\n              (see  SHELL  GRAMMAR above).  Refer to the description of the extdebug option to the shopt builtin\n              for details of its effect on the DEBUG trap.  If a sigspec is RETURN, the command arg is  executed\n              each time a shell function or a script executed with the . or source builtins finishes executing.\n\n              If  a sigspec is ERR, the command arg is executed whenever a pipeline (which may consist of a sin\u2010\n              gle simple command), a list, or a compound command returns a non-zero exit status, subject to  the\n              following  conditions.   The ERR trap is not executed if the failed command is part of the command\n              list immediately following a while or until keyword, part of the test in an if statement, part  of\n              a command executed in a && or || list except the command following the final && or ||, any command\n              in a pipeline but the last, or if the command's return value is being inverted using !.  These are\n              the same conditions obeyed by the errexit (-e) option.\n\n              Signals  ignored upon entry to the shell cannot be trapped, reset or listed.  Trapped signals that\n              are not being ignored are reset to their original values in a  subshell  or  subshell  environment\n              when one is created.  The return status is false if any sigspec is invalid; otherwise trap returns\n              true.\n\n       type [-aftpP] name [name ...]\n              With no options, indicate how each name would be interpreted if used as a command name.  If the -t\n              option is used, type prints a string which is one of alias, keyword, function, builtin, or file if\n              name is an alias, shell reserved word, function, builtin, or disk file, respectively.  If the name\n              is  not found, then nothing is printed, and an exit status of false is returned.  If the -p option\n              is used, type either returns the name of the disk file that would be executed if name were  speci\u2010\n              fied  as  a  command  name,  or  nothing if ``type -t name'' would not return file.  The -P option\n              forces a PATH search for each name, even if ``type -t name'' would not return file.  If a  command\n              is  hashed, -p and -P print the hashed value, which is not necessarily the file that appears first\n              in PATH.  If the -a option is used, type prints all of the places that contain an executable named\n              name.   This  includes  aliases and functions, if and only if the -p option is not also used.  The\n              table of hashed commands is not consulted when using -a.  The -f option suppresses shell  function\n              lookup,  as  with the command builtin.  type returns true if all of the arguments are found, false\n              if any are not found.\n\n       ulimit [-HS] -a\n       ulimit [-HS] [-bcdefiklmnpqrstuvxPRT [limit]]\n              Provides control over the resources available to the shell and to processes started by it, on sys\u2010\n              tems  that  allow  such control.  The -H and -S options specify that the hard or soft limit is set\n              for the given resource.  A hard limit cannot be increased by a non-root user once  it  is  set;  a\n              soft limit may be increased up to the value of the hard limit.  If neither -H nor -S is specified,\n              both the soft and hard limits are set.  The value of limit can be a number in the  unit  specified\n              for  the  resource or one of the special values hard, soft, or unlimited, which stand for the cur\u2010\n              rent hard limit, the current soft limit, and no limit, respectively.  If  limit  is  omitted,  the\n              current  value  of the soft limit of the resource is printed, unless the -H option is given.  When\n              more than one resource is specified, the limit name and unit, if appropriate, are  printed  before\n              the value.  Other options are interpreted as follows:\n              -a     All current limits are reported; no limits are set\n              -b     The maximum socket buffer size\n              -c     The maximum size of core files created\n              -d     The maximum size of a process's data segment\n              -e     The maximum scheduling priority (\"nice\")\n              -f     The maximum size of files written by the shell and its children\n              -i     The maximum number of pending signals\n              -k     The maximum number of kqueues that may be allocated\n              -l     The maximum size that may be locked into memory\n              -m     The maximum resident set size (many systems do not honor this limit)\n              -n     The  maximum  number  of  open file descriptors (most systems do not allow this value to be\n                     set)\n              -p     The pipe size in 512-byte blocks (this may not be set)\n              -q     The maximum number of bytes in POSIX message queues\n              -r     The maximum real-time scheduling priority\n              -s     The maximum stack size\n              -t     The maximum amount of cpu time in seconds\n              -u     The maximum number of processes available to a single user\n              -v     The maximum amount of virtual memory available to the shell and, on some  systems,  to  its\n                     children\n              -x     The maximum number of file locks\n              -P     The maximum number of pseudoterminals\n              -R     The maximum time a real-time process can run before blocking, in microseconds\n              -T     The maximum number of threads\n\n              If  limit  is  given,  and  the -a option is not used, limit is the new value of the specified re\u2010\n              source.  If no option is given, then -f is assumed.  Values are in  1024-byte  increments,  except\n              for  -t,  which  is  in  seconds;  -R, which is in microseconds; -p, which is in units of 512-byte\n              blocks; -P, -T, -b, -k, -n, and -u, which are unscaled values; and, when in posix mode, -c and -f,\n              which  are in 512-byte increments.  The return status is 0 unless an invalid option or argument is\n              supplied, or an error occurs while setting a new limit.  In POSIX Mode 512-byte  blocks  are  used\n              for the `-c' and `-f' options.\n\n       umask [-p] [-S] [mode]\n              The  user file-creation mask is set to mode.  If mode begins with a digit, it is interpreted as an\n              octal number; otherwise it is interpreted as a symbolic mode mask  similar  to  that  accepted  by\n              chmod(1).  If mode is omitted, the current value of the mask is printed.  The -S option causes the\n              mask to be printed in symbolic form; the default output is an octal number.  If the -p  option  is\n              supplied,  and  mode  is omitted, the output is in a form that may be reused as input.  The return\n              status is 0 if the mode was successfully changed or if no mode argument was  supplied,  and  false\n              otherwise.\n\n       unalias [-a] [name ...]\n              Remove  each  name from the list of defined aliases.  If -a is supplied, all alias definitions are\n              removed.  The return value is true unless a supplied name is not a defined alias.\n\n       unset [-fv] [-n] [name ...]\n              For each name, remove the corresponding variable or function.  If the -v  option  is  given,  each\n              name refers to a shell variable, and that variable is removed.  Read-only variables may not be un\u2010\n              set.  If -f is specified, each name refers to a shell function, and the function definition is re\u2010\n              moved.  If the -n option is supplied, and name is a variable with the nameref attribute, name will\n              be unset rather than the variable it references.  -n has no effect if the -f option  is  supplied.\n              If  no options are supplied, each name refers to a variable; if there is no variable by that name,\n              a function with that name, if any, is unset.  Each unset variable or function is removed from  the\n              environment  passed  to  subsequent  commands.   If  any  of  BASH_ALIASES, BASH_ARGV0, BASH_CMDS,\n              BASH_COMMAND, BASH_SUBSHELL,  BASHPID,  COMP_WORDBREAKS,  DIRSTACK,  EPOCHREALTIME,  EPOCHSECONDS,\n              FUNCNAME,  GROUPS, HISTCMD, LINENO, RANDOM, SECONDS, or SRANDOM are unset, they lose their special\n              properties, even if they are subsequently reset.  The exit status is true unless a name  is  read\u2010\n              only.\n\n       wait [-fn] [-p varname] [id ...]\n              Wait for each specified child process and return its termination status.  Each id may be a process\n              ID or a job specification; if a job spec is given, all processes in that job's pipeline are waited\n              for.  If id is not given, wait waits for all running background jobs and the last-executed process\n              substitution, if its process id is the same as $!, and the return status is zero.  If the  -n  op\u2010\n              tion is supplied, wait waits for a single job from the list of ids or, if no ids are supplied, any\n              job, to complete and returns its exit status.  If none of the supplied arguments is a child of the\n              shell, or if no arguments are supplied and the shell has no unwaited-for children, the exit status\n              is 127.  If the -p option is supplied, the process or job identifier of the job for which the exit\n              status is returned is assigned to the variable varname named by the option argument.  The variable\n              will be unset initially, before any assignment.  This is useful only when the -n  option  is  sup\u2010\n              plied.  Supplying the -f option, when job control is enabled, forces wait to wait for id to termi\u2010\n              nate before returning its status, instead of returning when it changes status.  If id specifies  a\n              non-existent  process  or job, the return status is 127.  Otherwise, the return status is the exit\n              status of the last process or job waited for.\n\nSHELL COMPATIBILITY MODE\n       Bash-4.0 introduced the concept of a `shell compatibility level', specified as a set of  options  to  the\n       shopt  builtin compat31, compat32, compat40, compat41, and so on).  There is only one current compatibil\u2010\n       ity level -- each option is mutually exclusive.  The compatibility level is intended to  allow  users  to\n       select  behavior  from  previous  versions  that  is  incompatible with newer versions while they migrate\n       scripts to use current features and behavior. It's intended to be a temporary solution.\n\n       This section does not mention behavior that is standard for a particular version (e.g., setting  compat32\n       means  that quoting the rhs of the regexp matching operator quotes special regexp characters in the word,\n       which is default behavior in bash-3.2 and above).\n\n       If a user enables, say, compat32, it may affect the behavior of other compatibility levels up to and  in\u2010\n       cluding  the  current  compatibility  level.  The idea is that each compatibility level controls behavior\n       that changed in that version of bash, but that behavior may have been present in earlier  versions.   For\n       instance,  the  change  to use locale-based comparisons with the [[ command came in bash-4.1, and earlier\n       versions used ASCII-based comparisons, so enabling compat32 will enable ASCII-based comparisons as  well.\n       That  granularity  may  not be sufficient for all uses, and as a result users should employ compatibility\n       levels carefully.  Read the documentation for a particular feature to find out the current behavior.\n\n       Bash-4.3 introduced a new shell variable: BASH_COMPAT.  The value assigned to this  variable  (a  decimal\n       version number like 4.2, or an integer corresponding to the compatNN option, like 42) determines the com\u2010\n       patibility level.\n\n       Starting with bash-4.4, Bash has begun deprecating older compatibility levels.  Eventually,  the  options\n       will be removed in favor of BASH_COMPAT.\n\n       Bash-5.0  is  the  final version for which there will be an individual shopt option for the previous ver\u2010\n       sion. Users should use BASH_COMPAT on bash-5.0 and later versions.\n\n       The following table describes the behavior changes controlled by each compatibility level  setting.   The\n       compatNN  tag  is  used as shorthand for setting the compatibility level to NN using one of the following\n       mechanisms.  For versions prior to bash-5.0, the compatibility level may be set using  the  corresponding\n       compatNN shopt option.  For bash-4.3 and later versions, the BASH_COMPAT variable is preferred, and it is\n       required for bash-5.1 and later versions.\n\n       compat31\n              \u2022      quoting the rhs of the [[ command's regexp matching operator (=~) has no special effect\n\n       compat32\n              \u2022      interrupting a command list such as \"a ; b ; c\" causes the execution of the next command in\n                     the  list  (in bash-4.0 and later versions, the shell acts as if it received the interrupt,\n                     so interrupting one command in a list aborts the execution of the entire list)\n\n       compat40\n              \u2022      the < and > operators to the [[ command do not consider the current locale  when  comparing\n                     strings;  they use ASCII ordering.  Bash versions prior to bash-4.1 use ASCII collation and\n                     strcmp(3); bash-4.1 and later use the current locale's collation sequence and strcoll(3).\n\n       compat41\n              \u2022      in posix mode, time may be followed by options and still be recognized as a  reserved  word\n                     (this is POSIX interpretation 267)\n              \u2022      in  posix  mode, the parser requires that an even number of single quotes occur in the word\n                     portion of a double-quoted parameter expansion and treats them specially, so  that  charac\u2010\n                     ters within the single quotes are considered quoted (this is POSIX interpretation 221)\n\n       compat42\n              \u2022      the  replacement  string  in  double-quoted pattern substitution does not undergo quote re\u2010\n                     moval, as it does in versions after bash-4.2\n              \u2022      in posix mode, single quotes are considered special when expanding the word  portion  of  a\n                     double-quoted parameter expansion and can be used to quote a closing brace or other special\n                     character (this is part of POSIX interpretation 221); in later versions, single quotes  are\n                     not special within double-quoted word expansions\n\n       compat43\n              \u2022      the  shell  does not print a warning message if an attempt is made to use a quoted compound\n                     assignment as an argument to declare (declare -a foo='(1 2)').  Later  versions  warn  that\n                     this usage is deprecated\n              \u2022      word  expansion  errors  are  considered non-fatal errors that cause the current command to\n                     fail, even in posix mode (the default behavior is to make them fatal errors that cause  the\n                     shell to exit)\n              \u2022      when  executing a shell function, the loop state (while/until/etc.)  is not reset, so break\n                     or continue in that function will break or continue loops in the calling context.  Bash-4.4\n                     and later reset the loop state to prevent this\n\n       compat44\n              \u2022      the  shell  sets  up  the  values used by BASH_ARGV and BASH_ARGC so they can expand to the\n                     shell's positional parameters even if extended debugging mode is not enabled\n              \u2022      a subshell inherits loops from its parent context, so break or continue will cause the sub\u2010\n                     shell to exit.  Bash-5.0 and later reset the loop state to prevent the exit\n              \u2022      variable  assignments  preceding builtins like export and readonly that set attributes con\u2010\n                     tinue to affect variables with the same name in the calling environment even if  the  shell\n                     is not in posix mode\n\n       compat50\n              \u2022      Bash-5.1 changed the way $RANDOM is generated to introduce slightly more randomness. If the\n                     shell compatibility level is set to 50 or lower, it reverts to the method from bash-5.0 and\n                     previous  versions,  so  seeding the random number generator by assigning a value to RANDOM\n                     will produce the same sequence as in bash-5.0\n              \u2022      If the command hash table is empty, bash versions prior to  bash-5.1  printed  an  informa\u2010\n                     tional  message  to  that  effect,  even when producing output that can be reused as input.\n                     Bash-5.1 suppresses that message when the -l option is supplied.\n\nSEE ALSO\n       bash(1), sh(1)\n\nGNU Bash 5.0                                       2004 Apr 20                                  BASH_BUILTINS(1)\n"},{"NOMBRE": "       bash,  :,  .,  [,  alias, bg, bind, break, builtin, caller, cd, command, compgen, complete, compopt, con\u2010\n       tinue, declare, dirs, disown, echo, enable, eval, exec, exit, export, false, fc, fg, getopts, hash, help,\n       history,  jobs, kill, let, local, logout, mapfile, popd, printf, pushd, pwd, read, readonly, return, set,\n       shift, shopt, source, suspend, test, times, trap, true, type, typeset,  ulimit,  umask,  unalias,  unset,\n       wait - bash built-in commands, see bash(1)\n\nBASH BUILTIN COMMANDS\n       Unless  otherwise noted, each builtin command documented in this section as accepting options preceded by\n       - accepts -- to signify the end of the options.  The :, true, false, and test/[ builtins  do  not  accept\n       options  and  do  not  treat  --  specially.   The  exit, logout, return, break, continue, let, and shift\n       builtins accept and process arguments beginning with - without requiring --.  Other builtins that  accept\n       arguments  but are not specified as accepting options interpret arguments beginning with - as invalid op\u2010\n       tions and require -- to prevent this interpretation.\n       : [arguments]\n              No effect; the command does nothing beyond expanding arguments and performing any specified  redi\u2010\n              rections.  The return status is zero.\n\n        .  filename [arguments]\n       source filename [arguments]\n              Read  and execute commands from filename in the current shell environment and return the exit sta\u2010\n              tus of the last command executed from filename.  If filename does not contain a  slash,  filenames\n              in  PATH  are  used to find the directory containing filename.  The file searched for in PATH need\n              not be executable.  When bash is not in posix mode, the current directory is searched if  no  file\n              is  found  in PATH.  If the sourcepath option to the shopt builtin command is turned off, the PATH\n              is not searched.  If any arguments are supplied, they become the positional parameters when  file\u2010\n              name  is  executed.   Otherwise  the positional parameters are unchanged.  If the -T option is en\u2010\n              abled, source inherits any trap on DEBUG; if it is not, any DEBUG trap string  is  saved  and  re\u2010\n              stored  around  the  call to source, and source unsets the DEBUG trap while it executes.  If -T is\n              not set, and the sourced file changes the DEBUG trap, the new value is retained when  source  com\u2010\n              pletes.   The  return  status  is the status of the last command exited within the script (0 if no\n              commands are executed), and false if filename is not found or cannot be read.\n\n       alias [-p] [name[=value] ...]\n              Alias with no arguments or with the -p option prints  the  list  of  aliases  in  the  form  alias\n              name=value  on  standard  output.   When arguments are supplied, an alias is defined for each name\n              whose value is given.  A trailing space in value causes the next word to be checked for alias sub\u2010\n              stitution  when  the  alias is expanded.  For each name in the argument list for which no value is\n              supplied, the name and value of the alias is printed.  Alias returns true unless a name  is  given\n              for which no alias has been defined.\n\n       bg [jobspec ...]\n              Resume each suspended job jobspec in the background, as if it had been started with &.  If jobspec\n              is not present, the shell's notion of the current job is used.  bg jobspec returns  0  unless  run\n              when  job control is disabled or, when run with job control enabled, any specified jobspec was not\n              found or was started without job control.\n\n       bind [-m keymap] [-lpsvPSVX]\n       bind [-m keymap] [-q function] [-u function] [-r keyseq]\n       bind [-m keymap] -f filename\n       bind [-m keymap] -x keyseq:shell-command\n       bind [-m keymap] keyseq:function-name\n       bind [-m keymap] keyseq:readline-command\n              Display current readline key and function bindings, bind a key sequence to a readline function  or\n              macro,  or  set  a readline variable.  Each non-option argument is a command as it would appear in\n              .inputrc, but each binding or command must be passed as a separate  argument;  e.g.,  '\"\\C-x\\C-r\":\n              re-read-init-file'.  Options, if supplied, have the following meanings:\n              -m keymap\n                     Use  keymap  as  the  keymap  to be affected by the subsequent bindings.  Acceptable keymap\n                     names are emacs, emacs-standard,  emacs-meta,  emacs-ctlx,  vi,  vi-move,  vi-command,  and\n                     vi-insert.  vi is equivalent to vi-command (vi-move is also a synonym); emacs is equivalent\n                     to emacs-standard.\n              -l     List the names of all readline functions.\n              -p     Display readline function names and bindings in such a way that they can be re-read.\n              -P     List current readline function names and bindings.\n              -s     Display readline key sequences bound to macros and the strings they output in  such  a  way\n                     that they can be re-read.\n              -S     Display readline key sequences bound to macros and the strings they output.\n              -v     Display readline variable names and values in such a way that they can be re-read.\n              -V     List current readline variable names and values.\n              -f filename\n                     Read key bindings from filename.\n              -q function\n                     Query about which keys invoke the named function.\n              -u function\n                     Unbind all keys bound to the named function.\n              -r keyseq\n                     Remove any current binding for keyseq.\n              -x keyseq:shell-command\n                     Cause  shell-command to be executed whenever keyseq is entered.  When shell-command is exe\u2010\n                     cuted, the shell sets the READLINE_LINE variable to the contents of the readline line  buf\u2010\n                     fer  and  the READLINE_POINT and READLINE_MARK variables to the current location of the in\u2010\n                     sertion point and the saved insertion point (the mark), respectively.  If the executed com\u2010\n                     mand changes the value of any of READLINE_LINE, READLINE_POINT, or READLINE_MARK, those new\n                     values will be reflected in the editing state.\n              -X     List all key sequences bound to shell commands and the associated commands in a format that\n                     can be reused as input.\n\n              The return value is 0 unless an unrecognized option is given or an error occurred.\n\n       break [n]\n              Exit  from within a for, while, until, or select loop.  If n is specified, break n levels.  n must\n              be \u2265 1.  If n is greater than the number of enclosing loops, all enclosing loops are exited.   The\n              return value is 0 unless n is not greater than or equal to 1.\n\n       builtin shell-builtin [arguments]\n              Execute  the  specified  shell builtin, passing it arguments, and return its exit status.  This is\n              useful when defining a function whose name is the same as a shell builtin, retaining the function\u2010\n              ality of the builtin within the function.  The cd builtin is commonly redefined this way.  The re\u2010\n              turn status is false if shell-builtin is not a shell builtin command.\n\n       caller [expr]\n              Returns the context of any active subroutine call (a shell function or a script executed with  the\n              .  or  source builtins).  Without expr, caller displays the line number and source filename of the\n              current subroutine call.  If a non-negative integer is supplied as expr, caller displays the  line\n              number,  subroutine  name, and source file corresponding to that position in the current execution\n              call stack.  This extra information may be used, for example, to print a stack trace.  The current\n              frame  is  frame  0.  The return value is 0 unless the shell is not executing a subroutine call or\n              expr does not correspond to a valid position in the call stack.\n\n       cd [-L|[-P [-e]] [-@]] [dir]\n              Change the current directory to dir.  if dir is not supplied, the value of the HOME shell variable\n              is  the default.  Any additional arguments following dir are ignored.  The variable CDPATH defines\n              the search path for the directory containing dir: each directory name in CDPATH  is  searched  for\n              dir.   Alternative  directory names in CDPATH are separated by a colon (:).  A null directory name\n              in CDPATH is the same as the current directory, i.e., ``.''.  If dir begins with a slash (/), then\n              CDPATH  is not used.  The -P option causes cd to use the physical directory structure by resolving\n              symbolic links while traversing dir and before processing instances of .. in dir (see also the  -P\n              option  to the set builtin command); the -L option forces symbolic links to be followed by resolv\u2010\n              ing the link after processing instances of .. in dir.  If .. appears in dir, it  is  processed  by\n              removing the immediately previous pathname component from dir, back to a slash or the beginning of\n              dir.  If the -e option is supplied with -P, and the current working directory cannot  be  success\u2010\n              fully  determined  after a successful directory change, cd will return an unsuccessful status.  On\n              systems that support it, the -@ option presents the extended attributes associated with a file  as\n              a  directory.   An argument of - is converted to $OLDPWD before the directory change is attempted.\n              If a non-empty directory name from CDPATH is used, or if - is the first argument, and  the  direc\u2010\n              tory  change  is  successful, the absolute pathname of the new working directory is written to the\n              standard output.  The return value is true if the directory was successfully changed; false other\u2010\n              wise.\n\n       command [-pVv] command [arg ...]\n              Run command with args suppressing the normal shell function lookup.  Only builtin commands or com\u2010\n              mands found in the PATH are executed.  If the -p option is given, the search for command  is  per\u2010\n              formed  using  a  default value for PATH that is guaranteed to find all of the standard utilities.\n              If either the -V or -v option is supplied, a description of command is  printed.   The  -v  option\n              causes  a  single  word indicating the command or filename used to invoke command to be displayed;\n              the -V option produces a more verbose description.  If the -V or -v option is supplied,  the  exit\n              status  is  0  if command was found, and 1 if not.  If neither option is supplied and an error oc\u2010\n              curred or command cannot be found, the exit status is 127.  Otherwise, the exit status of the com\u2010\n              mand builtin is the exit status of command.\n\n       compgen [option] [word]\n              Generate  possible  completion  matches for word according to the options, which may be any option\n              accepted by the complete builtin with the exception of -p and -r, and write  the  matches  to  the\n              standard output.  When using the -F or -C options, the various shell variables set by the program\u2010\n              mable completion facilities, while available, will not have useful values.\n\n              The matches will be generated in the same way as if the programmable completion code had generated\n              them  directly  from  a  completion specification with the same flags.  If word is specified, only\n              those completions matching word will be displayed.\n\n              The return value is true unless an invalid option is supplied, or no matches were generated.\n\n       complete [-abcdefgjksuv] [-o comp-option] [-DEI] [-A action] [-G globpat] [-W wordlist]\n              [-F function] [-C command] [-X filterpat] [-P prefix] [-S suffix] name [name ...]\n       complete -pr [-DEI] [name ...]\n              Specify how arguments to each name should be completed.  If the -p option is supplied,  or  if  no\n              options  are supplied, existing completion specifications are printed in a way that allows them to\n              be reused as input.  The -r option removes a completion specification for each  name,  or,  if  no\n              names  are  supplied,  all completion specifications.  The -D option indicates that other supplied\n              options and actions should apply to the ``default'' command completion; that  is,  completion  at\u2010\n              tempted on a command for which no completion has previously been defined.  The -E option indicates\n              that other supplied options and actions should apply to ``empty''  command  completion;  that  is,\n              completion attempted on a blank line.  The -I option indicates that other supplied options and ac\u2010\n              tions should apply to completion on the initial non-assignment word on the line, or after  a  com\u2010\n              mand  delimiter such as ; or |, which is usually command name completion.  If multiple options are\n              supplied, the -D option takes precedence over -E, and both take precedence over -I.  If any of -D,\n              -E,  or -I are supplied, any other name arguments are ignored; these completions only apply to the\n              case specified by the option.\n\n              The process of applying these completion specifications when word completion is attempted  is  de\u2010\n              scribed above under Programmable Completion.\n\n              Other options, if specified, have the following meanings.  The arguments to the -G, -W, and -X op\u2010\n              tions (and, if necessary, the -P and -S options) should be quoted to protect them  from  expansion\n              before the complete builtin is invoked.\n              -o comp-option\n                      The comp-option controls several aspects of the compspec's behavior beyond the simple gen\u2010\n                      eration of completions.  comp-option may be one of:\n                      bashdefault\n                              Perform the rest of the default bash completions  if  the  compspec  generates  no\n                              matches.\n                      default Use readline's default filename completion if the compspec generates no matches.\n                      dirnames\n                              Perform directory name completion if the compspec generates no matches.\n                      filenames\n                              Tell  readline  that the compspec generates filenames, so it can perform any file\u2010\n                              name-specific processing (like adding a slash to directory names, quoting  special\n                              characters, or suppressing trailing spaces).  Intended to be used with shell func\u2010\n                              tions.\n                      noquote Tell readline not to quote the completed words  if  they  are  filenames  (quoting\n                              filenames is the default).\n                      nosort  Tell readline not to sort the list of possible completions alphabetically.\n                      nospace Tell readline not to append a space (the default) to words completed at the end of\n                              the line.\n                      plusdirs\n                              After any matches defined by the compspec are generated, directory name completion\n                              is attempted and any matches are added to the results of the other actions.\n              -A action\n                      The action may be one of the following to generate a list of possible completions:\n                      alias   Alias names.  May also be specified as -a.\n                      arrayvar\n                              Array variable names.\n                      binding Readline key binding names.\n                      builtin Names of shell builtin commands.  May also be specified as -b.\n                      command Command names.  May also be specified as -c.\n                      directory\n                              Directory names.  May also be specified as -d.\n                      disabled\n                              Names of disabled shell builtins.\n                      enabled Names of enabled shell builtins.\n                      export  Names of exported shell variables.  May also be specified as -e.\n                      file    File names.  May also be specified as -f.\n                      function\n                              Names of shell functions.\n                      group   Group names.  May also be specified as -g.\n                      helptopic\n                              Help topics as accepted by the help builtin.\n                      hostname\n                              Hostnames, as taken from the file specified by the HOSTFILE shell variable.\n                      job     Job names, if job control is active.  May also be specified as -j.\n                      keyword Shell reserved words.  May also be specified as -k.\n                      running Names of running jobs, if job control is active.\n                      service Service names.  May also be specified as -s.\n                      setopt  Valid arguments for the -o option to the set builtin.\n                      shopt   Shell option names as accepted by the shopt builtin.\n                      signal  Signal names.\n                      stopped Names of stopped jobs, if job control is active.\n                      user    User names.  May also be specified as -u.\n                      variable\n                              Names of all shell variables.  May also be specified as -v.\n              -C command\n                      command is executed in a subshell environment, and its output is used as the possible com\u2010\n                      pletions.\n              -F function\n                      The shell function function is executed in the current shell environment.  When the  func\u2010\n                      tion  is  executed, the first argument ($1) is the name of the command whose arguments are\n                      being completed, the second argument ($2) is the word being completed, and the third argu\u2010\n                      ment  ($3)  is  the  word  preceding the word being completed on the current command line.\n                      When it finishes, the possible completions are retrieved from the value of  the  COMPREPLY\n                      array variable.\n              -G globpat\n                      The pathname expansion pattern globpat is expanded to generate the possible completions.\n              -P prefix\n                      prefix  is added at the beginning of each possible completion after all other options have\n                      been applied.\n              -S suffix\n                      suffix is appended to each possible completion after all other options have been applied.\n              -W wordlist\n                      The wordlist is split using the characters in the IFS special variable as delimiters,  and\n                      each  resultant  word  is expanded.  Shell quoting is honored within wordlist, in order to\n                      provide a mechanism for the words to contain shell metacharacters  or  characters  in  the\n                      value  of IFS.  The possible completions are the members of the resultant list which match\n                      the word being completed.\n              -X filterpat\n                      filterpat is a pattern as used for pathname expansion.  It is applied to the list of  pos\u2010\n                      sible  completions  generated  by the preceding options and arguments, and each completion\n                      matching filterpat is removed from the list.  A leading ! in filterpat  negates  the  pat\u2010\n                      tern; in this case, any completion not matching filterpat is removed.\n\n              The  return  value  is true unless an invalid option is supplied, an option other than -p or -r is\n              supplied without a name argument, an attempt is made to remove a completion  specification  for  a\n              name for which no specification exists, or an error occurs adding a completion specification.\n\n       compopt [-o option] [-DEI] [+o option] [name]\n              Modify  completion  options for each name according to the options, or for the currently-executing\n              completion if no names are supplied.  If no options are given, display the completion options  for\n              each  name  or the current completion.  The possible values of option are those valid for the com\u2010\n              plete builtin described above.  The -D option indicates that other supplied options  should  apply\n              to  the  ``default''  command  completion; that is, completion attempted on a command for which no\n              completion has previously been defined.  The -E  option  indicates  that  other  supplied  options\n              should  apply to ``empty'' command completion; that is, completion attempted on a blank line.  The\n              -I option indicates that other supplied options should apply to completion on the initial  non-as\u2010\n              signment  word  on the line, or after a command delimiter such as ; or |, which is usually command\n              name completion.\n\n              The return value is true unless an invalid option is supplied, an attempt is made  to  modify  the\n              options for a name for which no completion specification exists, or an output error occurs.\n\n       continue [n]\n              Resume  the next iteration of the enclosing for, while, until, or select loop.  If n is specified,\n              resume at the nth enclosing loop.  n must be \u2265 1.  If n is greater than the  number  of  enclosing\n              loops,  the last enclosing loop (the ``top-level'' loop) is resumed.  The return value is 0 unless\n              n is not greater than or equal to 1.\n\n       declare [-aAfFgiIlnrtux] [-p] [name[=value] ...]\n       typeset [-aAfFgiIlnrtux] [-p] [name[=value] ...]\n              Declare variables and/or give them attributes.  If no names are given then display the  values  of\n              variables.   The  -p  option will display the attributes and values of each name.  When -p is used\n              with name arguments, additional options, other than -f and -F, are ignored.  When -p  is  supplied\n              without  name arguments, it will display the attributes and values of all variables having the at\u2010\n              tributes specified by the additional options.  If no other options are supplied with  -p,  declare\n              will  display  the  attributes and values of all shell variables.  The -f option will restrict the\n              display to shell functions.  The -F option inhibits the display of function definitions; only  the\n              function  name  and  attributes are printed.  If the extdebug shell option is enabled using shopt,\n              the source file name and line number where each name is defined are displayed as well.  The -F op\u2010\n              tion  implies  -f.   The -g option forces variables to be created or modified at the global scope,\n              even when declare is executed in a shell function.  It is ignored in all other cases.  The -I  op\u2010\n              tion  causes local variables to inherit the attributes (except the nameref attribute) and value of\n              any existing variable with the same name at a surrounding scope.  If there is  no  existing  vari\u2010\n              able, the local variable is initially unset.  The following options can be used to restrict output\n              to variables with the specified attribute or to give variables attributes:\n              -a     Each name is an indexed array variable (see Arrays above).\n              -A     Each name is an associative array variable (see Arrays above).\n              -f     Use function names only.\n              -i     The variable is treated as an integer; arithmetic  evaluation  (see  ARITHMETIC  EVALUATION\n                     above) is performed when the variable is assigned a value.\n              -l     When  the  variable  is assigned a value, all upper-case characters are converted to lower-\n                     case.  The upper-case attribute is disabled.\n              -n     Give each name the nameref attribute, making it a name reference to another variable.  That\n                     other variable is defined by the value of name.  All references, assignments, and attribute\n                     modifications to name, except those using or changing the -n  attribute  itself,  are  per\u2010\n                     formed on the variable referenced by name's value.  The nameref attribute cannot be applied\n                     to array variables.\n              -r     Make names readonly.  These names cannot then be assigned values by  subsequent  assignment\n                     statements or unset.\n              -t     Give  each  name  the trace attribute.  Traced functions inherit the DEBUG and RETURN traps\n                     from the calling shell.  The trace attribute has no special meaning for variables.\n              -u     When the variable is assigned a value, all lower-case characters are  converted  to  upper-\n                     case.  The lower-case attribute is disabled.\n              -x     Mark names for export to subsequent commands via the environment.\n\n              Using  `+'  instead of `-' turns off the attribute instead, with the exceptions that +a and +A may\n              not be used to destroy array variables and +r will not remove the readonly attribute.   When  used\n              in  a function, declare and typeset make each name local, as with the local command, unless the -g\n              option is supplied.  If a variable name is followed by =value, the value of the variable is set to\n              value.   When  using  -a or -A and the compound assignment syntax to create array variables, addi\u2010\n              tional attributes do not take effect until subsequent assignments.  The return value is  0  unless\n              an invalid option is encountered, an attempt is made to define a function using ``-f foo=bar'', an\n              attempt is made to assign a value to a readonly variable, an attempt is made to assign a value  to\n              an  array  variable  without  using  the compound assignment syntax (see Arrays above), one of the\n              names is not a valid shell variable name, an attempt is made to turn off  readonly  status  for  a\n              readonly  variable,  an  attempt is made to turn off array status for an array variable, or an at\u2010\n              tempt is made to display a non-existent function with -f.\n\n       dirs [-clpv] [+n] [-n]\n              Without options, displays the list of currently remembered directories.  The default display is on\n              a  single  line  with directory names separated by spaces.  Directories are added to the list with\n              the pushd command; the popd command removes entries from the list.  The current directory  is  al\u2010\n              ways the first directory in the stack.\n              -c     Clears the directory stack by deleting all of the entries.\n              -l     Produces  a listing using full pathnames; the default listing format uses a tilde to denote\n                     the home directory.\n              -p     Print the directory stack with one entry per line.\n              -v     Print the directory stack with one entry per line, prefixing each entry with its  index  in\n                     the stack.\n              +n     Displays  the nth entry counting from the left of the list shown by dirs when invoked with\u2010\n                     out options, starting with zero.\n              -n     Displays the nth entry counting from the right of the list shown by dirs when invoked with\u2010\n                     out options, starting with zero.\n\n              The  return value is 0 unless an invalid option is supplied or n indexes beyond the end of the di\u2010\n              rectory stack.\n\n       disown [-ar] [-h] [jobspec ... | pid ... ]\n              Without options, remove each jobspec from the table of active jobs.  If jobspec  is  not  present,\n              and  neither  the  -a nor the -r option is supplied, the current job is used.  If the -h option is\n              given, each jobspec is not removed from the table, but is marked so that SIGHUP is not sent to the\n              job  if  the shell receives a SIGHUP.  If no jobspec is supplied, the -a option means to remove or\n              mark all jobs; the -r option without a jobspec argument restricts operation to running jobs.   The\n              return value is 0 unless a jobspec does not specify a valid job.\n\n       echo [-neE] [arg ...]\n              Output  the  args,  separated  by  spaces, followed by a newline.  The return status is 0 unless a\n              write error occurs.  If -n is specified, the trailing newline is suppressed.  If the -e option  is\n              given,  interpretation  of  the  following backslash-escaped characters is enabled.  The -E option\n              disables the interpretation of these escape characters, even on systems where they are interpreted\n              by  default.   The  xpg_echo shell option may be used to dynamically determine whether or not echo\n              expands these escape characters by default.  echo does not interpret -- to mean  the  end  of  op\u2010\n              tions.  echo interprets the following escape sequences:\n              \\a     alert (bell)\n              \\b     backspace\n              \\c     suppress further output\n              \\e\n              \\E     an escape character\n              \\f     form feed\n              \\n     new line\n              \\r     carriage return\n              \\t     horizontal tab\n              \\v     vertical tab\n              \\\\     backslash\n              \\0nnn  the eight-bit character whose value is the octal value nnn (zero to three octal digits)\n              \\xHH   the eight-bit character whose value is the hexadecimal value HH (one or two hex digits)\n              \\uHHHH the  Unicode  (ISO/IEC  10646)  character whose value is the hexadecimal value HHHH (one to\n                     four hex digits)\n              \\UHHHHHHHH\n                     the Unicode (ISO/IEC 10646) character whose value is the hexadecimal value HHHHHHHH (one to\n                     eight hex digits)\n\n       enable [-a] [-dnps] [-f filename] [name ...]\n              Enable  and  disable  builtin shell commands.  Disabling a builtin allows a disk command which has\n              the same name as a shell builtin to be executed without specifying a full  pathname,  even  though\n              the  shell  normally searches for builtins before disk commands.  If -n is used, each name is dis\u2010\n              abled; otherwise, names are enabled.  For example, to use the test binary found via the  PATH  in\u2010\n              stead  of  the shell builtin version, run ``enable -n test''.  The -f option means to load the new\n              builtin command name from shared object filename, on systems that support dynamic loading.  The -d\n              option will delete a builtin previously loaded with -f.  If no name arguments are given, or if the\n              -p option is supplied, a list of shell builtins is printed.  With no other option  arguments,  the\n              list  consists  of  all  enabled  shell  builtins.   If -n is supplied, only disabled builtins are\n              printed.  If -a is supplied, the list printed includes all builtins, with an indication of whether\n              or  not  each  is  enabled.   If  -s  is  supplied,  the output is restricted to the POSIX special\n              builtins.  The return value is 0 unless a name is not a shell builtin or there is an error loading\n              a new builtin from a shared object.\n\n       eval [arg ...]\n              The  args are read and concatenated together into a single command.  This command is then read and\n              executed by the shell, and its exit status is returned as the value of  eval.   If  there  are  no\n              args, or only null arguments, eval returns 0.\n\n       exec [-cl] [-a name] [command [arguments]]\n              If  command is specified, it replaces the shell.  No new process is created.  The arguments become\n              the arguments to command.  If the -l option is supplied, the shell places a dash at the  beginning\n              of  the zeroth argument passed to command.  This is what login(1) does.  The -c option causes com\u2010\n              mand to be executed with an empty environment.  If -a is supplied, the shell passes  name  as  the\n              zeroth argument to the executed command.  If command cannot be executed for some reason, a non-in\u2010\n              teractive shell exits, unless the execfail shell option is enabled.   In  that  case,  it  returns\n              failure.   An  interactive shell returns failure if the file cannot be executed.  A subshell exits\n              unconditionally if exec fails.  If command is not specified, any redirections take effect  in  the\n              current  shell, and the return status is 0.  If there is a redirection error, the return status is\n              1.\n\n       exit [n]\n              Cause the shell to exit with a status of n.  If n is omitted, the exit status is that of the  last\n              command executed.  A trap on EXIT is executed before the shell terminates.\n\n       export [-fn] [name[=word]] ...\n       export -p\n              The  supplied  names  are  marked for automatic export to the environment of subsequently executed\n              commands.  If the -f option is given, the names refer to functions.  If no names are given, or  if\n              the  -p  option  is supplied, a list of names of all exported variables is printed.  The -n option\n              causes the export property to be removed from each name.  If a variable name is followed by =word,\n              the  value  of  the variable is set to word.  export returns an exit status of 0 unless an invalid\n              option is encountered, one of the names is not a valid shell variable name, or -f is supplied with\n              a name that is not a function.\n\n       fc [-e ename] [-lnr] [first] [last]\n       fc -s [pat=rep] [cmd]\n              The  first  form selects a range of commands from first to last from the history list and displays\n              or edits and re-executes them.  First and last may be specified as a string (to  locate  the  last\n              command  beginning with that string) or as a number (an index into the history list, where a nega\u2010\n              tive number is used as an offset from the current command number).  When listing, a first or  last\n              of  0  is  equivalent  to -1 and -0 is equivalent to the current command (usually the fc command);\n              otherwise 0 is equivalent to -1 and -0 is invalid.  If last is not specified, it  is  set  to  the\n              current  command for listing (so that ``fc -l -10'' prints the last 10 commands) and to first oth\u2010\n              erwise.  If first is not specified, it is set to the previous command  for  editing  and  -16  for\n              listing.\n\n              The  -n  option  suppresses the command numbers when listing.  The -r option reverses the order of\n              the commands.  If the -l option is given, the commands are listed on standard output.   Otherwise,\n              the  editor given by ename is invoked on a file containing those commands.  If ename is not given,\n              the value of the FCEDIT variable is used, and the value of EDITOR if FCEDIT is not set.   If  nei\u2010\n              ther  variable  is  set, vi is used.  When editing is complete, the edited commands are echoed and\n              executed.\n\n              In the second form, command is re-executed after each instance of pat is replaced by rep.  Command\n              is interpreted the same as first above.  A useful alias to use with this is ``r=\"fc -s\"'', so that\n              typing ``r cc'' runs the last command beginning with ``cc'' and typing ``r'' re-executes the  last\n              command.\n\n              If  the first form is used, the return value is 0 unless an invalid option is encountered or first\n              or last specify history lines out of range.  If the -e option is supplied, the return value is the\n              value  of  the last command executed or failure if an error occurs with the temporary file of com\u2010\n              mands.  If the second form is used, the return status is that of the command  re-executed,  unless\n              cmd does not specify a valid history line, in which case fc returns failure.\n\n       fg [jobspec]\n              Resume  jobspec  in  the  foreground, and make it the current job.  If jobspec is not present, the\n              shell's notion of the current job is used.  The return value is that of the  command  placed  into\n              the  foreground,  or failure if run when job control is disabled or, when run with job control en\u2010\n              abled, if jobspec does not specify a valid job or jobspec specifies a job that was started without\n              job control.\n\n       getopts optstring name [arg ...]\n              getopts is used by shell procedures to parse positional parameters.  optstring contains the option\n              characters to be recognized; if a character is followed by a colon, the option is expected to have\n              an  argument, which should be separated from it by white space.  The colon and question mark char\u2010\n              acters may not be used as option characters.  Each time it is invoked, getopts places the next op\u2010\n              tion in the shell variable name, initializing name if it does not exist, and the index of the next\n              argument to be processed into the variable OPTIND.  OPTIND is initialized to 1 each time the shell\n              or  a  shell script is invoked.  When an option requires an argument, getopts places that argument\n              into the variable OPTARG.  The shell does not reset OPTIND automatically; it must be manually  re\u2010\n              set  between multiple calls to getopts within the same shell invocation if a new set of parameters\n              is to be used.\n\n              When the end of options is encountered, getopts exits with  a  return  value  greater  than  zero.\n              OPTIND is set to the index of the first non-option argument, and name is set to ?.\n\n              getopts  normally parses the positional parameters, but if more arguments are supplied as arg val\u2010\n              ues, getopts parses those instead.\n\n              getopts can report errors in two ways.  If the first character of optstring is a colon, silent er\u2010\n              ror  reporting is used.  In normal operation, diagnostic messages are printed when invalid options\n              or missing option arguments are encountered.  If the variable OPTERR is set to 0,  no  error  mes\u2010\n              sages will be displayed, even if the first character of optstring is not a colon.\n\n              If  an invalid option is seen, getopts places ? into name and, if not silent, prints an error mes\u2010\n              sage and unsets OPTARG.  If getopts is silent, the option character found is placed in OPTARG  and\n              no diagnostic message is printed.\n\n              If  a  required argument is not found, and getopts is not silent, a question mark (?) is placed in\n              name, OPTARG is unset, and a diagnostic message is printed.  If getopts is silent,  then  a  colon\n              (:) is placed in name and OPTARG is set to the option character found.\n\n              getopts  returns  true  if an option, specified or unspecified, is found.  It returns false if the\n              end of options is encountered or an error occurs.\n\n       hash [-lr] [-p filename] [-dt] [name]\n              Each time hash is invoked, the full pathname of the command name is determined  by  searching  the\n              directories  in $PATH and remembered.  Any previously-remembered pathname is discarded.  If the -p\n              option is supplied, no path search is performed, and filename is used as the full filename of  the\n              command.  The -r option causes the shell to forget all remembered locations.  The -d option causes\n              the shell to forget the remembered location of each name.  If the -t option is supplied, the  full\n              pathname  to which each name corresponds is printed.  If multiple name arguments are supplied with\n              -t, the name is printed before the hashed full pathname.  The -l option causes output to  be  dis\u2010\n              played  in a format that may be reused as input.  If no arguments are given, or if only -l is sup\u2010\n              plied, information about remembered commands is printed.  The return status is true unless a  name\n              is not found or an invalid option is supplied.\n\n       help [-dms] [pattern]\n              Display  helpful information about builtin commands.  If pattern is specified, help gives detailed\n              help on all commands matching pattern; otherwise help for  all  the  builtins  and  shell  control\n              structures is printed.\n              -d     Display a short description of each pattern\n              -m     Display the description of each pattern in a manpage-like format\n              -s     Display only a short usage synopsis for each pattern\n\n              The return status is 0 unless no command matches pattern.\n\n       history [n]\n       history -c\n       history -d offset\n       history -d start-end\n       history -anrw [filename]\n       history -p arg [arg ...]\n       history -s arg [arg ...]\n              With  no  options, display the command history list with line numbers.  Lines listed with a * have\n              been modified.  An argument of n lists only the last n lines.  If the shell variable  HISTTIMEFOR\u2010\n              MAT  is  set and not null, it is used as a format string for strftime(3) to display the time stamp\n              associated with each displayed history entry.  No intervening blank is printed between the format\u2010\n              ted  time stamp and the history line.  If filename is supplied, it is used as the name of the his\u2010\n              tory file; if not, the value of HISTFILE is used.  Options, if supplied, have the following  mean\u2010\n              ings:\n              -c     Clear the history list by deleting all the entries.\n              -d offset\n                     Delete  the  history entry at position offset.  If offset is negative, it is interpreted as\n                     relative to one greater than the last history position, so negative indices count back from\n                     the end of the history, and an index of -1 refers to the current history -d command.\n              -d start-end\n                     Delete  the history entries between positions start and end, inclusive.  Positive and nega\u2010\n                     tive values for start and end are interpreted as described above.\n              -a     Append the ``new'' history lines to the history file.   These  are  history  lines  entered\n                     since  the  beginning  of the current bash session, but not already appended to the history\n                     file.\n              -n     Read the history lines not already read from the history  file  into  the  current  history\n                     list.  These are lines appended to the history file since the beginning of the current bash\n                     session.\n              -r     Read the contents of the history file and append them to the current history list.\n              -w     Write the current history list to the history file, overwriting  the  history  file's  con\u2010\n                     tents.\n              -p     Perform  history  substitution on the following args and display the result on the standard\n                     output.  Does not store the results in the history list.  Each arg must be quoted  to  dis\u2010\n                     able normal history expansion.\n              -s     Store the args in the history list as a single entry.  The last command in the history list\n                     is removed before the args are added.\n\n              If the HISTTIMEFORMAT variable is set, the time stamp information associated with each history en\u2010\n              try  is  written to the history file, marked with the history comment character.  When the history\n              file is read, lines beginning with the history comment character followed immediately by  a  digit\n              are  interpreted  as  timestamps for the following history entry.  The return value is 0 unless an\n              invalid option is encountered, an error occurs while reading or writing the history file,  an  in\u2010\n              valid offset is supplied as an argument to -d, or the history expansion supplied as an argument to\n              -p fails.\n\n       jobs [-lnprs] [ jobspec ... ]\n       jobs -x command [ args ... ]\n              The first form lists the active jobs.  The options have the following meanings:\n              -l     List process IDs in addition to the normal information.\n              -n     Display information only about jobs that have changed status since the user was last  noti\u2010\n                     fied of their status.\n              -p     List only the process ID of the job's process group leader.\n              -r     Display only running jobs.\n              -s     Display only stopped jobs.\n\n              If  jobspec  is given, output is restricted to information about that job.  The return status is 0\n              unless an invalid option is encountered or an invalid jobspec is supplied.\n\n              If the -x option is supplied, jobs replaces any jobspec found in command or args with  the  corre\u2010\n              sponding process group ID, and executes command passing it args, returning its exit status.\n\n       kill [-s sigspec | -n signum | -sigspec] [pid | jobspec] ...\n       kill -l|-L [sigspec | exit_status]\n              Send  the  signal named by sigspec or signum to the processes named by pid or jobspec.  sigspec is\n              either a case-insensitive signal name such as SIGKILL (with or without the SIG prefix) or a signal\n              number;  signum is a signal number.  If sigspec is not present, then SIGTERM is assumed.  An argu\u2010\n              ment of -l lists the signal names.  If any arguments are supplied when -l is given, the  names  of\n              the  signals corresponding to the arguments are listed, and the return status is 0.  The exit_sta\u2010\n              tus argument to -l is a number specifying either a signal number or the exit status of  a  process\n              terminated  by  a  signal.   The -L option is equivalent to -l.  kill returns true if at least one\n              signal was successfully sent, or false if an error occurs or an invalid option is encountered.\n\n       let arg [arg ...]\n              Each arg is an arithmetic expression to be evaluated (see ARITHMETIC EVALUATION  above).   If  the\n              last arg evaluates to 0, let returns 1; 0 is returned otherwise.\n\n       local [option] [name[=value] ... | - ]\n              For  each argument, a local variable named name is created, and assigned value.  The option can be\n              any of the options accepted by declare.  When local is used within a function, it causes the vari\u2010\n              able name to have a visible scope restricted to that function and its children.  If name is -, the\n              set of shell options is made local to the function  in  which  local  is  invoked:  shell  options\n              changed  using  the set builtin inside the function are restored to their original values when the\n              function returns.  The restore is effected as if a series of set commands were executed to restore\n              the values that were in place before the function.  With no operands, local writes a list of local\n              variables to the standard output.  It is an error to use local when not within  a  function.   The\n              return  status  is 0 unless local is used outside a function, an invalid name is supplied, or name\n              is a readonly variable.\n\n       logout Exit a login shell.\n\n       mapfile [-d delim] [-n count] [-O origin] [-s count] [-t] [-u fd] [-C callback] [-c quantum] [array]\n       readarray [-d delim] [-n count] [-O origin] [-s count] [-t] [-u fd] [-C callback] [-c quantum] [array]\n              Read lines from the standard input into the indexed array variable array, or from file  descriptor\n              fd  if  the  -u  option is supplied.  The variable MAPFILE is the default array.  Options, if sup\u2010\n              plied, have the following meanings:\n              -d     The first character of delim is used to terminate each input line, rather than newline.  If\n                     delim is the empty string, mapfile will terminate a line when it reads a NUL character.\n              -n     Copy at most count lines.  If count is 0, all lines are copied.\n              -O     Begin assigning to array at index origin.  The default index is 0.\n              -s     Discard the first count lines read.\n              -t     Remove a trailing delim (default newline) from each line read.\n              -u     Read lines from file descriptor fd instead of the standard input.\n              -C     Evaluate callback each time quantum lines are read.  The -c option specifies quantum.\n              -c     Specify the number of lines read between each call to callback.\n\n              If  -C  is  specified  without -c, the default quantum is 5000.  When callback is evaluated, it is\n              supplied the index of the next array element to be assigned and the line to be  assigned  to  that\n              element  as additional arguments.  callback is evaluated after the line is read but before the ar\u2010\n              ray element is assigned.\n\n              If not supplied with an explicit origin, mapfile will clear array before assigning to it.\n\n              mapfile returns successfully unless an invalid option or option argument is supplied, array is in\u2010\n              valid or unassignable, or if array is not an indexed array.\n\n       popd [-n] [+n] [-n]\n              Removes  entries  from the directory stack.  With no arguments, removes the top directory from the\n              stack, and performs a cd to the new top directory.  Arguments, if  supplied,  have  the  following\n              meanings:\n              -n     Suppresses the normal change of directory when removing directories from the stack, so that\n                     only the stack is manipulated.\n              +n     Removes the nth entry counting from the left of the list shown by dirs, starting with zero.\n                     For example: ``popd +0'' removes the first directory, ``popd +1'' the second.\n              -n     Removes  the  nth  entry  counting  from the right of the list shown by dirs, starting with\n                     zero.  For example: ``popd -0'' removes the last directory, ``popd -1'' the next to last.\n\n              If the popd command is successful, a dirs is performed as well, and the return status is 0.   popd\n              returns  false  if  an invalid option is encountered, the directory stack is empty, a non-existent\n              directory stack entry is specified, or the directory change fails.\n\n       printf [-v var] format [arguments]\n              Write the formatted arguments to the standard output under the control of the format.  The -v  op\u2010\n              tion  causes  the output to be assigned to the variable var rather than being printed to the stan\u2010\n              dard output.\n\n              The format is a character string which contains three types of objects:  plain  characters,  which\n              are  simply  copied to standard output, character escape sequences, which are converted and copied\n              to the standard output, and format specifications, each of which causes printing of the next  suc\u2010\n              cessive  argument.  In addition to the standard printf(1) format specifications, printf interprets\n              the following extensions:\n              %b     causes printf to expand backslash escape sequences in the  corresponding  argument  in  the\n                     same way as echo -e.\n              %q     causes  printf to output the corresponding argument in a format that can be reused as shell\n                     input.\n              %(datefmt)T\n                     causes printf to output the date-time string resulting  from  using  datefmt  as  a  format\n                     string  for  strftime(3).  The corresponding argument is an integer representing the number\n                     of seconds since the epoch.  Two special argument values may be  used:  -1  represents  the\n                     current  time,  and -2 represents the time the shell was invoked.  If no argument is speci\u2010\n                     fied, conversion behaves as if -1 had been given.  This is an exception to the usual printf\n                     behavior.\n\n              The  %b,  %q,  and  %T  directives all use the field width and precision arguments from the format\n              specification and write that many bytes from (or use that wide a field for) the expanded argument,\n              which usually contains more characters than the original.\n\n              Arguments  to  non-string format specifiers are treated as C constants, except that a leading plus\n              or minus sign is allowed, and if the leading character is a single or double quote, the  value  is\n              the ASCII value of the following character.\n\n              The  format  is  reused as necessary to consume all of the arguments.  If the format requires more\n              arguments than are supplied, the extra format specifications behave as if a  zero  value  or  null\n              string, as appropriate, had been supplied.  The return value is zero on success, non-zero on fail\u2010\n              ure.\n\n       pushd [-n] [+n] [-n]\n       pushd [-n] [dir]\n              Adds a directory to the top of the directory stack, or rotates the stack, making the  new  top  of\n              the  stack the current working directory.  With no arguments, pushd exchanges the top two directo\u2010\n              ries and returns 0, unless the directory stack is empty.  Arguments, if supplied, have the follow\u2010\n              ing meanings:\n              -n     Suppresses the normal change of directory when rotating or adding directories to the stack,\n                     so that only the stack is manipulated.\n              +n     Rotates the stack so that the nth directory (counting from the left of the  list  shown  by\n                     dirs, starting with zero) is at the top.\n              -n     Rotates  the  stack so that the nth directory (counting from the right of the list shown by\n                     dirs, starting with zero) is at the top.\n              dir    Adds dir to the directory stack at the top, making it the new current working directory  as\n                     if it had been supplied as the argument to the cd builtin.\n\n              If the pushd command is successful, a dirs is performed as well.  If the first form is used, pushd\n              returns 0 unless the cd to dir fails.  With the second form, pushd returns 0 unless the  directory\n              stack  is  empty,  a non-existent directory stack element is specified, or the directory change to\n              the specified new current directory fails.\n\n       pwd [-LP]\n              Print the absolute pathname of the current working directory.  The pathname  printed  contains  no\n              symbolic  links  if the -P option is supplied or the -o physical option to the set builtin command\n              is enabled.  If the -L option is used, the pathname printed may contain symbolic links.   The  re\u2010\n              turn  status is 0 unless an error occurs while reading the name of the current directory or an in\u2010\n              valid option is supplied.\n\n       read [-ers] [-a aname] [-d delim] [-i text] [-n nchars] [-N nchars] [-p  prompt]  [-t  timeout]  [-u  fd]\n       [name ...]\n              One  line  is read from the standard input, or from the file descriptor fd supplied as an argument\n              to the -u option, split into words as described above under Word Splitting, and the first word  is\n              assigned  to  the  first  name,  the second word to the second name, and so on.  If there are more\n              words than names, the remaining words and their intervening delimiters are assigned  to  the  last\n              name.  If there are fewer words read from the input stream than names, the remaining names are as\u2010\n              signed empty values.  The characters in IFS are used to split the line into words using  the  same\n              rules  the shell uses for expansion (described above under Word Splitting).  The backslash charac\u2010\n              ter (\\) may be used to remove any special meaning for the next character read and for line contin\u2010\n              uation.  Options, if supplied, have the following meanings:\n              -a aname\n                     The  words  are  assigned to sequential indices of the array variable aname, starting at 0.\n                     aname is unset before any new values are assigned.  Other name arguments are ignored.\n              -d delim\n                     The first character of delim is used to terminate the input line, rather than newline.   If\n                     delim is the empty string, read will terminate a line when it reads a NUL character.\n              -e     If  the  standard input is coming from a terminal, readline (see READLINE above) is used to\n                     obtain the line.  Readline uses the current (or default, if line editing was not previously\n                     active) editing settings, but uses Readline's default filename completion.\n              -i text\n                     If  readline  is being used to read the line, text is placed into the editing buffer before\n                     editing begins.\n              -n nchars\n                     read returns after reading nchars characters rather than waiting for a complete line of in\u2010\n                     put, but honors a delimiter if fewer than nchars characters are read before the delimiter.\n              -N nchars\n                     read  returns  after  reading  exactly nchars characters rather than waiting for a complete\n                     line of input, unless EOF is encountered or read times out.  Delimiter  characters  encoun\u2010\n                     tered  in  the input are not treated specially and do not cause read to return until nchars\n                     characters are read.  The result is not split on the characters in IFS; the intent is  that\n                     the  variable is assigned exactly the characters read (with the exception of backslash; see\n                     the -r option below).\n              -p prompt\n                     Display prompt on standard error, without a trailing newline, before attempting to read any\n                     input.  The prompt is displayed only if input is coming from a terminal.\n              -r     Backslash  does  not act as an escape character.  The backslash is considered to be part of\n                     the line.  In particular, a backslash-newline pair may not then be used as a line continua\u2010\n                     tion.\n              -s     Silent mode.  If input is coming from a terminal, characters are not echoed.\n              -t timeout\n                     Cause  read to time out and return failure if a complete line of input (or a specified num\u2010\n                     ber of characters) is not read within timeout seconds.  timeout may  be  a  decimal  number\n                     with  a  fractional  portion following the decimal point.  This option is only effective if\n                     read is reading input from a terminal, pipe, or other special file; it has no  effect  when\n                     reading  from regular files.  If read times out, read saves any partial input read into the\n                     specified variable name.  If timeout is 0, read returns immediately, without trying to read\n                     any  data.   The  exit  status is 0 if input is available on the specified file descriptor,\n                     non-zero otherwise.  The exit status is greater than 128 if the timeout is exceeded.\n              -u fd  Read input from file descriptor fd.\n\n              If no names are supplied, the line read, without the ending delimiter but otherwise unmodified, is\n              assigned  to the variable REPLY.  The exit status is zero, unless end-of-file is encountered, read\n              times out (in which case the status is greater than 128), a variable assignment error (such as as\u2010\n              signing  to a readonly variable) occurs, or an invalid file descriptor is supplied as the argument\n              to -u.\n\n       readonly [-aAf] [-p] [name[=word] ...]\n              The given names are marked readonly; the values of these names may not be  changed  by  subsequent\n              assignment.  If the -f option is supplied, the functions corresponding to the names are so marked.\n              The -a option restricts the variables to indexed arrays; the -A option restricts the variables  to\n              associative  arrays.  If both options are supplied, -A takes precedence.  If no name arguments are\n              given, or if the -p option is supplied, a list of all readonly names is printed.   The  other  op\u2010\n              tions  may be used to restrict the output to a subset of the set of readonly names.  The -p option\n              causes output to be displayed in a format that may be reused as input.  If a variable name is fol\u2010\n              lowed  by  =word,  the value of the variable is set to word.  The return status is 0 unless an in\u2010\n              valid option is encountered, one of the names is not a valid shell variable name, or  -f  is  sup\u2010\n              plied with a name that is not a function.\n\n       return [n]\n              Causes  a  function  to stop executing and return the value specified by n to its caller.  If n is\n              omitted, the return status is that of the last command executed in the function body.   If  return\n              is  executed  by a trap handler, the last command used to determine the status is the last command\n              executed before the trap handler.  If return is executed during a DEBUG  trap,  the  last  command\n              used  to  determine  the status is the last command executed by the trap handler before return was\n              invoked.  If return is used outside a function,  but  during  execution  of  a  script  by  the  .\n              (source)  command,  it  causes  the shell to stop executing that script and return either n or the\n              exit status of the last command executed within the script as the exit status of the script.  If n\n              is  supplied,  the return value is its least significant 8 bits.  The return status is non-zero if\n              return is supplied a non-numeric argument, or is used outside a function and not during  execution\n              of a script by . or source.  Any command associated with the RETURN trap is executed before execu\u2010\n              tion resumes after the function or script.\n\n       set [--abefhkmnptuvxBCEHPT] [-o option-name] [arg ...]\n       set [+abefhkmnptuvxBCEHPT] [+o option-name] [arg ...]\n              Without options, the name and value of each shell variable are displayed in a format that  can  be\n              reused  as input for setting or resetting the currently-set variables.  Read-only variables cannot\n              be reset.  In posix mode, only shell variables are listed.  The output is sorted according to  the\n              current  locale.   When  options are specified, they set or unset shell attributes.  Any arguments\n              remaining after option processing are treated as values for the positional parameters and are  as\u2010\n              signed, in order, to $1, $2, ...  $n.  Options, if specified, have the following meanings:\n              -a      Each  variable  or  function that is created or modified is given the export attribute and\n                      marked for export to the environment of subsequent commands.\n              -b      Report the status of terminated background jobs immediately, rather than before  the  next\n                      primary prompt.  This is effective only when job control is enabled.\n              -e      Exit  immediately if a pipeline (which may consist of a single simple command), a list, or\n                      a compound command (see SHELL GRAMMAR above), exits with a  non-zero  status.   The  shell\n                      does  not exit if the command that fails is part of the command list immediately following\n                      a while or until keyword, part of the test following the if or elif reserved  words,  part\n                      of  any  command  executed in a && or || list except the command following the final && or\n                      ||, any command in a pipeline but the last, or if the command's return value is being  in\u2010\n                      verted  with !.  If a compound command other than a subshell returns a non-zero status be\u2010\n                      cause a command failed while -e was being ignored, the shell does not  exit.   A  trap  on\n                      ERR,  if  set, is executed before the shell exits.  This option applies to the shell envi\u2010\n                      ronment and each  subshell  environment  separately  (see  COMMAND  EXECUTION  ENVIRONMENT\n                      above), and may cause subshells to exit before executing all the commands in the subshell.\n\n                      If  a  compound command or shell function executes in a context where -e is being ignored,\n                      none of the commands executed within the compound command or function  body  will  be  af\u2010\n                      fected  by the -e setting, even if -e is set and a command returns a failure status.  If a\n                      compound command or shell function sets -e while executing in a context where  -e  is  ig\u2010\n                      nored,  that  setting  will  not have any effect until the compound command or the command\n                      containing the function call completes.\n              -f      Disable pathname expansion.\n              -h      Remember the location of commands as they are looked up for execution.  This is enabled by\n                      default.\n              -k      All  arguments  in  the  form of assignment statements are placed in the environment for a\n                      command, not just those that precede the command name.\n              -m      Monitor mode.  Job control is enabled.  This option  is  on  by  default  for  interactive\n                      shells  on  systems that support it (see JOB CONTROL above).  All processes run in a sepa\u2010\n                      rate process group.  When a background job completes, the shell prints a  line  containing\n                      its exit status.\n              -n      Read  commands but do not execute them.  This may be used to check a shell script for syn\u2010\n                      tax errors.  This is ignored by interactive shells.\n              -o option-name\n                      The option-name can be one of the following:\n                      allexport\n                              Same as -a.\n                      braceexpand\n                              Same as -B.\n                      emacs   Use an emacs-style command line editing interface.  This  is  enabled  by  default\n                              when  the  shell  is interactive, unless the shell is started with the --noediting\n                              option.  This also affects the editing interface used for read -e.\n                      errexit Same as -e.\n                      errtrace\n                              Same as -E.\n                      functrace\n                              Same as -T.\n                      hashall Same as -h.\n                      histexpand\n                              Same as -H.\n                      history Enable command history, as described above under HISTORY.  This option  is  on  by\n                              default in interactive shells.\n                      ignoreeof\n                              The  effect  is  as  if  the shell command ``IGNOREEOF=10'' had been executed (see\n                              Shell Variables above).\n                      keyword Same as -k.\n                      monitor Same as -m.\n                      noclobber\n                              Same as -C.\n                      noexec  Same as -n.\n                      noglob  Same as -f.\n                      nolog   Currently ignored.\n                      notify  Same as -b.\n                      nounset Same as -u.\n                      onecmd  Same as -t.\n                      physical\n                              Same as -P.\n                      pipefail\n                              If set, the return value of a pipeline is the value of the last  (rightmost)  com\u2010\n                              mand  to exit with a non-zero status, or zero if all commands in the pipeline exit\n                              successfully.  This option is disabled by default.\n                      posix   Change the behavior of bash where the default operation  differs  from  the  POSIX\n                              standard  to  match the standard (posix mode).  See SEE ALSO below for a reference\n                              to a document that details how posix mode affects bash's behavior.\n                      privileged\n                              Same as -p.\n                      verbose Same as -v.\n                      vi      Use a vi-style command line editing interface.  This also affects the editing  in\u2010\n                              terface used for read -e.\n                      xtrace  Same as -x.\n                      If  -o is supplied with no option-name, the values of the current options are printed.  If\n                      +o is supplied with no option-name, a series of set commands to recreate the  current  op\u2010\n                      tion settings is displayed on the standard output.\n              -p      Turn  on  privileged  mode.  In this mode, the $ENV and $BASH_ENV files are not processed,\n                      shell functions are not inherited from the environment, and the SHELLOPTS,  BASHOPTS,  CD\u2010\n                      PATH,  and  GLOBIGNORE  variables, if they appear in the environment, are ignored.  If the\n                      shell is started with the effective user (group) id not equal to the real user (group) id,\n                      and  the  -p  option is not supplied, these actions are taken and the effective user id is\n                      set to the real user id.  If the -p option is supplied at startup, the effective  user  id\n                      is  not  reset.  Turning this option off causes the effective user and group ids to be set\n                      to the real user and group ids.\n              -t      Exit after reading and executing one command.\n              -u      Treat unset variables and parameters other than the special parameters \"@\" and \"*\"  as  an\n                      error when performing parameter expansion.  If expansion is attempted on an unset variable\n                      or parameter, the shell prints an error message, and, if not  interactive,  exits  with  a\n                      non-zero status.\n              -v      Print shell input lines as they are read.\n              -x      After  expanding each simple command, for command, case command, select command, or arith\u2010\n                      metic for command, display the expanded value of PS4, followed by the command and its  ex\u2010\n                      panded arguments or associated word list.\n              -B      The shell performs brace expansion (see Brace Expansion above).  This is on by default.\n              -C      If set, bash does not overwrite an existing file with the >, >&, and <> redirection opera\u2010\n                      tors.  This may be overridden when creating output files by using the redirection operator\n                      >| instead of >.\n              -E      If  set,  any trap on ERR is inherited by shell functions, command substitutions, and com\u2010\n                      mands executed in a subshell environment.  The ERR trap is normally not inherited in  such\n                      cases.\n              -H      Enable  !  style history substitution.  This option is on by default when the shell is in\u2010\n                      teractive.\n              -P      If set, the shell does not resolve symbolic links when executing commands such as cd  that\n                      change  the  current working directory.  It uses the physical directory structure instead.\n                      By default, bash follows the logical chain of directories when performing  commands  which\n                      change the current directory.\n              -T      If  set, any traps on DEBUG and RETURN are inherited by shell functions, command substitu\u2010\n                      tions, and commands executed in a subshell environment.  The DEBUG and  RETURN  traps  are\n                      normally not inherited in such cases.\n              --      If  no arguments follow this option, then the positional parameters are unset.  Otherwise,\n                      the positional parameters are set to the args, even if some of them begin with a -.\n              -       Signal the end of options, cause all remaining args to be assigned to the  positional  pa\u2010\n                      rameters.  The -x and -v options are turned off.  If there are no args, the positional pa\u2010\n                      rameters remain unchanged.\n\n              The options are off by default unless otherwise noted.  Using + rather than - causes these options\n              to  be  turned off.  The options can also be specified as arguments to an invocation of the shell.\n              The current set of options may be found in $-.  The return status is always true unless an invalid\n              option is encountered.\n\n       shift [n]\n              The  positional parameters from n+1 ... are renamed to $1 ....  Parameters represented by the num\u2010\n              bers $# down to $#-n+1 are unset.  n must be a non-negative number less than or equal to $#.  If n\n              is  0, no parameters are changed.  If n is not given, it is assumed to be 1.  If n is greater than\n              $#, the positional parameters are not changed.  The return status is greater than  zero  if  n  is\n              greater than $# or less than zero; otherwise 0.\n\n       shopt [-pqsu] [-o] [optname ...]\n              Toggle  the  values  of  settings controlling optional shell behavior.  The settings can be either\n              those listed below, or, if the -o option is used, those available with the -o option  to  the  set\n              builtin  command.   With no options, or with the -p option, a list of all settable options is dis\u2010\n              played, with an indication of whether or not each is set; if optnames are supplied, the output  is\n              restricted  to  those  options.  The -p option causes output to be displayed in a form that may be\n              reused as input.  Other options have the following meanings:\n              -s     Enable (set) each optname.\n              -u     Disable (unset) each optname.\n              -q     Suppresses normal output (quiet mode); the return status indicates whether the  optname  is\n                     set  or  unset.  If multiple optname arguments are given with -q, the return status is zero\n                     if all optnames are enabled; non-zero otherwise.\n              -o     Restricts the values of optname to be those defined for the -o option to the set builtin.\n\n              If either -s or -u is used with no optname arguments, shopt shows only those options which are set\n              or  unset,  respectively.   Unless  otherwise noted, the shopt options are disabled (unset) by de\u2010\n              fault.\n\n              The return status when listing options is zero if all optnames are  enabled,  non-zero  otherwise.\n              When  setting  or  unsetting  options,  the return status is zero unless an optname is not a valid\n              shell option.\n\n              The list of shopt options is:\n\n              assoc_expand_once\n                      If set, the shell suppresses multiple evaluation of associative  array  subscripts  during\n                      arithmetic  expression  evaluation, while executing builtins that can perform variable as\u2010\n                      signments, and while executing builtins that perform array dereferencing.\n              autocd  If set, a command name that is the name of a directory is executed as if it were the argu\u2010\n                      ment to the cd command.  This option is only used by interactive shells.\n              cdable_vars\n                      If set, an argument to the cd builtin command that is not a directory is assumed to be the\n                      name of a variable whose value is the directory to change to.\n              cdspell If set, minor errors in the spelling of a directory component in a cd command will be cor\u2010\n                      rected.   The  errors  checked for are transposed characters, a missing character, and one\n                      character too many.  If a correction is found, the corrected filename is printed, and  the\n                      command proceeds.  This option is only used by interactive shells.\n              checkhash\n                      If set, bash checks that a command found in the hash table exists before trying to execute\n                      it.  If a hashed command no longer exists, a normal path search is performed.\n              checkjobs\n                      If set, bash lists the status of any stopped and running jobs before exiting  an  interac\u2010\n                      tive  shell.   If any jobs are running, this causes the exit to be deferred until a second\n                      exit is attempted without an intervening command (see JOB CONTROL above).  The  shell  al\u2010\n                      ways postpones exiting if any jobs are stopped.\n              checkwinsize\n                      If set, bash checks the window size after each external (non-builtin) command and, if nec\u2010\n                      essary, updates the values of LINES and COLUMNS.  This option is enabled by default.\n              cmdhist If set, bash attempts to save all lines of a multiple-line command in the same history en\u2010\n                      try.   This  allows easy re-editing of multi-line commands.  This option is enabled by de\u2010\n                      fault, but only has an effect if command history is enabled, as described above under HIS\u2010\n                      TORY.\n              compat31\n              compat32\n              compat40\n              compat41\n              compat42\n              compat43\n              compat44\n                      These  control aspects of the shell's compatibility mode (see SHELL COMPATIBILITY MODE be\u2010\n                      low).\n\n              complete_fullquote\n                      If set, bash quotes all shell metacharacters in filenames and directory  names  when  per\u2010\n                      forming  completion.  If not set, bash removes metacharacters such as the dollar sign from\n                      the set of characters that will be quoted in completed filenames when these metacharacters\n                      appear  in  shell  variable  references  in words to be completed.  This means that dollar\n                      signs in variable names that expand to directories will not be quoted; however, any dollar\n                      signs appearing in filenames will not be quoted, either.  This is active only when bash is\n                      using backslashes to quote completed filenames.  This variable is set by default, which is\n                      the default bash behavior in versions through 4.2.\n\n              direxpand\n                      If  set,  bash replaces directory names with the results of word expansion when performing\n                      filename completion.  This changes the contents of the readline editing  buffer.   If  not\n                      set, bash attempts to preserve what the user typed.\n\n              dirspell\n                      If set, bash attempts spelling correction on directory names during word completion if the\n                      directory name initially supplied does not exist.\n\n              dotglob If set, bash includes filenames beginning with a `.' in the results of pathname expansion.\n                      The  filenames  ``.''   and  ``..''  must always be matched explicitly, even if dotglob is\n                      set.\n\n              execfail\n                      If set, a non-interactive shell will not exit if it cannot execute the file  specified  as\n                      an  argument  to  the  exec  builtin  command.  An interactive shell does not exit if exec\n                      fails.\n\n              expand_aliases\n                      If set, aliases are expanded as described above under ALIASES.  This option is enabled  by\n                      default for interactive shells.\n\n              extdebug\n                      If  set  at  shell invocation, or in a shell startup file, arrange to execute the debugger\n                      profile before the shell starts, identical to the --debugger option.  If set after invoca\u2010\n                      tion, behavior intended for use by debuggers is enabled:\n\n                      1.     The  -F option to the declare builtin displays the source file name and line number\n                             corresponding to each function name supplied as an argument.\n\n                      2.     If the command run by the DEBUG trap returns a non-zero value, the next command  is\n                             skipped and not executed.\n\n                      3.     If the command run by the DEBUG trap returns a value of 2, and the shell is execut\u2010\n                             ing in a subroutine (a shell function or a shell script executed by the . or source\n                             builtins), the shell simulates a call to return.\n\n                      4.     BASH_ARGC and BASH_ARGV are updated as described in their descriptions above.\n\n                      5.     Function  tracing  is enabled: command substitution, shell functions, and subshells\n                             invoked with ( command ) inherit the DEBUG and RETURN traps.\n\n                      6.     Error tracing is enabled: command substitution, shell functions, and subshells  in\u2010\n                             voked with ( command ) inherit the ERR trap.\n\n              extglob If  set,  the  extended pattern matching features described above under Pathname Expansion\n                      are enabled.\n\n              extquote\n                      If set, $'string' and $\"string\" quoting is performed within  ${parameter}  expansions  en\u2010\n                      closed in double quotes.  This option is enabled by default.\n\n              failglob\n                      If  set, patterns which fail to match filenames during pathname expansion result in an ex\u2010\n                      pansion error.\n\n              force_fignore\n                      If set, the suffixes specified by the FIGNORE shell variable cause  words  to  be  ignored\n                      when  performing  word  completion even if the ignored words are the only possible comple\u2010\n                      tions.  See SHELL VARIABLES above for a description of FIGNORE.  This option is enabled by\n                      default.\n\n              globasciiranges\n                      If set, range expressions used in pattern matching bracket expressions (see Pattern Match\u2010\n                      ing above) behave as if in the traditional C locale when performing comparisons.  That is,\n                      the  current  locale's collating sequence is not taken into account, so b will not collate\n                      between A and B, and upper-case and lower-case ASCII characters will collate together.\n\n              globstar\n                      If set, the pattern ** used in a pathname expansion context will match all files and  zero\n                      or  more directories and subdirectories.  If the pattern is followed by a /, only directo\u2010\n                      ries and subdirectories match.\n\n              gnu_errfmt\n                      If set, shell error messages are written in the standard GNU error message format.\n\n              histappend\n                      If set, the history list is appended to the file named by the value of the HISTFILE  vari\u2010\n                      able when the shell exits, rather than overwriting the file.\n\n              histreedit\n                      If  set,  and  readline is being used, a user is given the opportunity to re-edit a failed\n                      history substitution.\n\n              histverify\n                      If set, and readline is being used, the results of history substitution  are  not  immedi\u2010\n                      ately passed to the shell parser.  Instead, the resulting line is loaded into the readline\n                      editing buffer, allowing further modification.\n\n              hostcomplete\n                      If set, and readline is being used, bash will attempt to perform hostname completion  when\n                      a  word  containing a @ is being completed (see Completing under READLINE above).  This is\n                      enabled by default.\n\n              huponexit\n                      If set, bash will send SIGHUP to all jobs when an interactive login shell exits.\n\n              inherit_errexit\n                      If set, command substitution inherits the value of the errexit option, instead  of  unset\u2010\n                      ting it in the subshell environment.  This option is enabled when posix mode is enabled.\n\n              interactive_comments\n                      If  set,  allow a word beginning with # to cause that word and all remaining characters on\n                      that line to be ignored in an interactive shell (see COMMENTS above).  This option is  en\u2010\n                      abled by default.\n\n              lastpipe\n                      If  set,  and job control is not active, the shell runs the last command of a pipeline not\n                      executed in the background in the current shell environment.\n\n              lithist If set, and the cmdhist option is enabled, multi-line commands are saved  to  the  history\n                      with embedded newlines rather than using semicolon separators where possible.\n\n              localvar_inherit\n                      If  set,  local  variables inherit the value and attributes of a variable of the same name\n                      that exists at a previous scope before any new value is assigned.  The  nameref  attribute\n                      is not inherited.\n\n              localvar_unset\n                      If  set, calling unset on local variables in previous function scopes marks them so subse\u2010\n                      quent lookups find them unset until that function returns. This is identical to the behav\u2010\n                      ior of unsetting local variables at the current function scope.\n\n              login_shell\n                      The  shell sets this option if it is started as a login shell (see INVOCATION above).  The\n                      value may not be changed.\n\n              mailwarn\n                      If set, and a file that bash is checking for mail has been accessed since the last time it\n                      was checked, the message ``The mail in mailfile has been read'' is displayed.\n\n              no_empty_cmd_completion\n                      If  set, and readline is being used, bash will not attempt to search the PATH for possible\n                      completions when completion is attempted on an empty line.\n\n              nocaseglob\n                      If set, bash matches filenames in a case-insensitive fashion when performing pathname  ex\u2010\n                      pansion (see Pathname Expansion above).\n\n              nocasematch\n                      If set, bash matches patterns in a case-insensitive fashion when performing matching while\n                      executing case or [[ conditional commands, when performing pattern substitution  word  ex\u2010\n                      pansions, or when filtering possible completions as part of programmable completion.\n\n              nullglob\n                      If set, bash allows patterns which match no files (see Pathname Expansion above) to expand\n                      to a null string, rather than themselves.\n\n              progcomp\n                      If set, the programmable completion facilities (see Programmable Completion above) are en\u2010\n                      abled.  This option is enabled by default.\n\n              progcomp_alias\n                      If  set,  and  programmable completion is enabled, bash treats a command name that doesn't\n                      have any completions as a possible alias and attempts alias expansion. If it has an alias,\n                      bash  attempts  programmable completion using the command word resulting from the expanded\n                      alias.\n\n              promptvars\n                      If set, prompt strings undergo parameter expansion, command substitution,  arithmetic  ex\u2010\n                      pansion, and quote removal after being expanded as described in PROMPTING above.  This op\u2010\n                      tion is enabled by default.\n\n              restricted_shell\n                      The shell sets this option if it is started in restricted mode (see RESTRICTED  SHELL  be\u2010\n                      low).   The  value  may not be changed.  This is not reset when the startup files are exe\u2010\n                      cuted, allowing the startup files to discover whether or not a shell is restricted.\n\n              shift_verbose\n                      If set, the shift builtin prints an error message when the shift count exceeds the  number\n                      of positional parameters.\n\n              sourcepath\n                      If set, the source (.) builtin uses the value of PATH to find the directory containing the\n                      file supplied as an argument.  This option is enabled by default.\n\n              xpg_echo\n                      If set, the echo builtin expands backslash-escape sequences by default.\n\n       suspend [-f]\n              Suspend the execution of this shell until it receives a SIGCONT signal.  A login shell  cannot  be\n              suspended; the -f option can be used to override this and force the suspension.  The return status\n              is 0 unless the shell is a login shell and -f is not supplied, or if job control is not enabled.\n\n       test expr\n       [ expr ]\n              Return a status of 0 (true) or 1 (false) depending on the evaluation of the conditional expression\n              expr.   Each  operator  and  operand must be a separate argument.  Expressions are composed of the\n              primaries described in the bash manual page under CONDITIONAL EXPRESSIONS.  test does  not  accept\n              any options, nor does it accept and ignore an argument of -- as signifying the end of options.\n\n              Expressions  may  be  combined using the following operators, listed in decreasing order of prece\u2010\n              dence.  The evaluation depends on the number of arguments; see below.  Operator precedence is used\n              when there are five or more arguments.\n              ! expr True if expr is false.\n              ( expr )\n                     Returns  the  value  of expr.  This may be used to override the normal precedence of opera\u2010\n                     tors.\n              expr1 -a expr2\n                     True if both expr1 and expr2 are true.\n              expr1 -o expr2\n                     True if either expr1 or expr2 is true.\n\n              test and [ evaluate conditional expressions using a set of rules based on the number of arguments.\n\n              0 arguments\n                     The expression is false.\n              1 argument\n                     The expression is true if and only if the argument is not null.\n              2 arguments\n                     If the first argument is !, the expression is true if and only if the  second  argument  is\n                     null.   If  the first argument is one of the unary conditional operators listed above under\n                     CONDITIONAL EXPRESSIONS, the expression is true if the unary test is true.   If  the  first\n                     argument is not a valid unary conditional operator, the expression is false.\n              3 arguments\n                     The following conditions are applied in the order listed.  If the second argument is one of\n                     the binary conditional operators listed above under CONDITIONAL EXPRESSIONS, the result  of\n                     the  expression is the result of the binary test using the first and third arguments as op\u2010\n                     erands.  The -a and -o operators are considered binary operators when there are three argu\u2010\n                     ments.   If the first argument is !, the value is the negation of the two-argument test us\u2010\n                     ing the second and third arguments.  If the first argument is exactly ( and the third argu\u2010\n                     ment  is exactly ), the result is the one-argument test of the second argument.  Otherwise,\n                     the expression is false.\n              4 arguments\n                     If the first argument is !, the result is the negation  of  the  three-argument  expression\n                     composed of the remaining arguments.  Otherwise, the expression is parsed and evaluated ac\u2010\n                     cording to precedence using the rules listed above.\n              5 or more arguments\n                     The expression is parsed and evaluated according  to  precedence  using  the  rules  listed\n                     above.\n\n              When used with test or [, the < and > operators sort lexicographically using ASCII ordering.\n\n       times  Print  the  accumulated  user and system times for the shell and for processes run from the shell.\n              The return status is 0.\n\n       trap [-lp] [[arg] sigspec ...]\n              The command arg is to be read and executed when the shell receives signal(s) sigspec.  If  arg  is\n              absent (and there is a single sigspec) or -, each specified signal is reset to its original dispo\u2010\n              sition (the value it had upon entrance to the shell).  If arg is the null string the signal speci\u2010\n              fied  by  each  sigspec  is  ignored  by  the shell and by the commands it invokes.  If arg is not\n              present and -p has been supplied, then the trap commands associated with  each  sigspec  are  dis\u2010\n              played.  If no arguments are supplied or if only -p is given, trap prints the list of commands as\u2010\n              sociated with each signal.  The -l option causes the shell to print a list  of  signal  names  and\n              their  corresponding  numbers.   Each  sigspec is either a signal name defined in <signal.h>, or a\n              signal number.  Signal names are case insensitive and the SIG prefix is optional.\n\n              If a sigspec is EXIT (0) the command arg is executed on exit from the shell.  If a sigspec is  DE\u2010\n              BUG,  the  command  arg is executed before every simple command, for command, case command, select\n              command, every arithmetic for command, and before the first command executes in a  shell  function\n              (see  SHELL  GRAMMAR above).  Refer to the description of the extdebug option to the shopt builtin\n              for details of its effect on the DEBUG trap.  If a sigspec is RETURN, the command arg is  executed\n              each time a shell function or a script executed with the . or source builtins finishes executing.\n\n              If  a sigspec is ERR, the command arg is executed whenever a pipeline (which may consist of a sin\u2010\n              gle simple command), a list, or a compound command returns a non-zero exit status, subject to  the\n              following  conditions.   The ERR trap is not executed if the failed command is part of the command\n              list immediately following a while or until keyword, part of the test in an if statement, part  of\n              a command executed in a && or || list except the command following the final && or ||, any command\n              in a pipeline but the last, or if the command's return value is being inverted using !.  These are\n              the same conditions obeyed by the errexit (-e) option.\n\n              Signals  ignored upon entry to the shell cannot be trapped, reset or listed.  Trapped signals that\n              are not being ignored are reset to their original values in a  subshell  or  subshell  environment\n              when one is created.  The return status is false if any sigspec is invalid; otherwise trap returns\n              true.\n\n       type [-aftpP] name [name ...]\n              With no options, indicate how each name would be interpreted if used as a command name.  If the -t\n              option is used, type prints a string which is one of alias, keyword, function, builtin, or file if\n              name is an alias, shell reserved word, function, builtin, or disk file, respectively.  If the name\n              is  not found, then nothing is printed, and an exit status of false is returned.  If the -p option\n              is used, type either returns the name of the disk file that would be executed if name were  speci\u2010\n              fied  as  a  command  name,  or  nothing if ``type -t name'' would not return file.  The -P option\n              forces a PATH search for each name, even if ``type -t name'' would not return file.  If a  command\n              is  hashed, -p and -P print the hashed value, which is not necessarily the file that appears first\n              in PATH.  If the -a option is used, type prints all of the places that contain an executable named\n              name.   This  includes  aliases and functions, if and only if the -p option is not also used.  The\n              table of hashed commands is not consulted when using -a.  The -f option suppresses shell  function\n              lookup,  as  with the command builtin.  type returns true if all of the arguments are found, false\n              if any are not found.\n\n       ulimit [-HS] -a\n       ulimit [-HS] [-bcdefiklmnpqrstuvxPRT [limit]]\n              Provides control over the resources available to the shell and to processes started by it, on sys\u2010\n              tems  that  allow  such control.  The -H and -S options specify that the hard or soft limit is set\n              for the given resource.  A hard limit cannot be increased by a non-root user once  it  is  set;  a\n              soft limit may be increased up to the value of the hard limit.  If neither -H nor -S is specified,\n              both the soft and hard limits are set.  The value of limit can be a number in the  unit  specified\n              for  the  resource or one of the special values hard, soft, or unlimited, which stand for the cur\u2010\n              rent hard limit, the current soft limit, and no limit, respectively.  If  limit  is  omitted,  the\n              current  value  of the soft limit of the resource is printed, unless the -H option is given.  When\n              more than one resource is specified, the limit name and unit, if appropriate, are  printed  before\n              the value.  Other options are interpreted as follows:\n              -a     All current limits are reported; no limits are set\n              -b     The maximum socket buffer size\n              -c     The maximum size of core files created\n              -d     The maximum size of a process's data segment\n              -e     The maximum scheduling priority (\"nice\")\n              -f     The maximum size of files written by the shell and its children\n              -i     The maximum number of pending signals\n              -k     The maximum number of kqueues that may be allocated\n              -l     The maximum size that may be locked into memory\n              -m     The maximum resident set size (many systems do not honor this limit)\n              -n     The  maximum  number  of  open file descriptors (most systems do not allow this value to be\n                     set)\n              -p     The pipe size in 512-byte blocks (this may not be set)\n              -q     The maximum number of bytes in POSIX message queues\n              -r     The maximum real-time scheduling priority\n              -s     The maximum stack size\n              -t     The maximum amount of cpu time in seconds\n              -u     The maximum number of processes available to a single user\n              -v     The maximum amount of virtual memory available to the shell and, on some  systems,  to  its\n                     children\n              -x     The maximum number of file locks\n              -P     The maximum number of pseudoterminals\n              -R     The maximum time a real-time process can run before blocking, in microseconds\n              -T     The maximum number of threads\n\n              If  limit  is  given,  and  the -a option is not used, limit is the new value of the specified re\u2010\n              source.  If no option is given, then -f is assumed.  Values are in  1024-byte  increments,  except\n              for  -t,  which  is  in  seconds;  -R, which is in microseconds; -p, which is in units of 512-byte\n              blocks; -P, -T, -b, -k, -n, and -u, which are unscaled values; and, when in posix mode, -c and -f,\n              which  are in 512-byte increments.  The return status is 0 unless an invalid option or argument is\n              supplied, or an error occurs while setting a new limit.  In POSIX Mode 512-byte  blocks  are  used\n              for the `-c' and `-f' options.\n\n       umask [-p] [-S] [mode]\n              The  user file-creation mask is set to mode.  If mode begins with a digit, it is interpreted as an\n              octal number; otherwise it is interpreted as a symbolic mode mask  similar  to  that  accepted  by\n              chmod(1).  If mode is omitted, the current value of the mask is printed.  The -S option causes the\n              mask to be printed in symbolic form; the default output is an octal number.  If the -p  option  is\n              supplied,  and  mode  is omitted, the output is in a form that may be reused as input.  The return\n              status is 0 if the mode was successfully changed or if no mode argument was  supplied,  and  false\n              otherwise.\n\n       unalias [-a] [name ...]\n              Remove  each  name from the list of defined aliases.  If -a is supplied, all alias definitions are\n              removed.  The return value is true unless a supplied name is not a defined alias.\n\n       unset [-fv] [-n] [name ...]\n              For each name, remove the corresponding variable or function.  If the -v  option  is  given,  each\n              name refers to a shell variable, and that variable is removed.  Read-only variables may not be un\u2010\n              set.  If -f is specified, each name refers to a shell function, and the function definition is re\u2010\n              moved.  If the -n option is supplied, and name is a variable with the nameref attribute, name will\n              be unset rather than the variable it references.  -n has no effect if the -f option  is  supplied.\n              If  no options are supplied, each name refers to a variable; if there is no variable by that name,\n              a function with that name, if any, is unset.  Each unset variable or function is removed from  the\n              environment  passed  to  subsequent  commands.   If  any  of  BASH_ALIASES, BASH_ARGV0, BASH_CMDS,\n              BASH_COMMAND, BASH_SUBSHELL,  BASHPID,  COMP_WORDBREAKS,  DIRSTACK,  EPOCHREALTIME,  EPOCHSECONDS,\n              FUNCNAME,  GROUPS, HISTCMD, LINENO, RANDOM, SECONDS, or SRANDOM are unset, they lose their special\n              properties, even if they are subsequently reset.  The exit status is true unless a name  is  read\u2010\n              only.\n\n       wait [-fn] [-p varname] [id ...]\n              Wait for each specified child process and return its termination status.  Each id may be a process\n              ID or a job specification; if a job spec is given, all processes in that job's pipeline are waited\n              for.  If id is not given, wait waits for all running background jobs and the last-executed process\n              substitution, if its process id is the same as $!, and the return status is zero.  If the  -n  op\u2010\n              tion is supplied, wait waits for a single job from the list of ids or, if no ids are supplied, any\n              job, to complete and returns its exit status.  If none of the supplied arguments is a child of the\n              shell, or if no arguments are supplied and the shell has no unwaited-for children, the exit status\n              is 127.  If the -p option is supplied, the process or job identifier of the job for which the exit\n              status is returned is assigned to the variable varname named by the option argument.  The variable\n              will be unset initially, before any assignment.  This is useful only when the -n  option  is  sup\u2010\n              plied.  Supplying the -f option, when job control is enabled, forces wait to wait for id to termi\u2010\n              nate before returning its status, instead of returning when it changes status.  If id specifies  a\n              non-existent  process  or job, the return status is 127.  Otherwise, the return status is the exit\n              status of the last process or job waited for.\n\nSHELL COMPATIBILITY MODE\n       Bash-4.0 introduced the concept of a `shell compatibility level', specified as a set of  options  to  the\n       shopt  builtin compat31, compat32, compat40, compat41, and so on).  There is only one current compatibil\u2010\n       ity level -- each option is mutually exclusive.  The compatibility level is intended to  allow  users  to\n       select  behavior  from  previous  versions  that  is  incompatible with newer versions while they migrate\n       scripts to use current features and behavior. It's intended to be a temporary solution.\n\n       This section does not mention behavior that is standard for a particular version (e.g., setting  compat32\n       means  that quoting the rhs of the regexp matching operator quotes special regexp characters in the word,\n       which is default behavior in bash-3.2 and above).\n\n       If a user enables, say, compat32, it may affect the behavior of other compatibility levels up to and  in\u2010\n       cluding  the  current  compatibility  level.  The idea is that each compatibility level controls behavior\n       that changed in that version of bash, but that behavior may have been present in earlier  versions.   For\n       instance,  the  change  to use locale-based comparisons with the [[ command came in bash-4.1, and earlier\n       versions used ASCII-based comparisons, so enabling compat32 will enable ASCII-based comparisons as  well.\n       That  granularity  may  not be sufficient for all uses, and as a result users should employ compatibility\n       levels carefully.  Read the documentation for a particular feature to find out the current behavior.\n\n       Bash-4.3 introduced a new shell variable: BASH_COMPAT.  The value assigned to this  variable  (a  decimal\n       version number like 4.2, or an integer corresponding to the compatNN option, like 42) determines the com\u2010\n       patibility level.\n\n       Starting with bash-4.4, Bash has begun deprecating older compatibility levels.  Eventually,  the  options\n       will be removed in favor of BASH_COMPAT.\n\n       Bash-5.0  is  the  final version for which there will be an individual shopt option for the previous ver\u2010\n       sion. Users should use BASH_COMPAT on bash-5.0 and later versions.\n\n       The following table describes the behavior changes controlled by each compatibility level  setting.   The\n       compatNN  tag  is  used as shorthand for setting the compatibility level to NN using one of the following\n       mechanisms.  For versions prior to bash-5.0, the compatibility level may be set using  the  corresponding\n       compatNN shopt option.  For bash-4.3 and later versions, the BASH_COMPAT variable is preferred, and it is\n       required for bash-5.1 and later versions.\n\n       compat31\n              \u2022      quoting the rhs of the [[ command's regexp matching operator (=~) has no special effect\n\n       compat32\n              \u2022      interrupting a command list such as \"a ; b ; c\" causes the execution of the next command in\n                     the  list  (in bash-4.0 and later versions, the shell acts as if it received the interrupt,\n                     so interrupting one command in a list aborts the execution of the entire list)\n\n       compat40\n              \u2022      the < and > operators to the [[ command do not consider the current locale  when  comparing\n                     strings;  they use ASCII ordering.  Bash versions prior to bash-4.1 use ASCII collation and\n                     strcmp(3); bash-4.1 and later use the current locale's collation sequence and strcoll(3).\n\n       compat41\n              \u2022      in posix mode, time may be followed by options and still be recognized as a  reserved  word\n                     (this is POSIX interpretation 267)\n              \u2022      in  posix  mode, the parser requires that an even number of single quotes occur in the word\n                     portion of a double-quoted parameter expansion and treats them specially, so  that  charac\u2010\n                     ters within the single quotes are considered quoted (this is POSIX interpretation 221)\n\n       compat42\n              \u2022      the  replacement  string  in  double-quoted pattern substitution does not undergo quote re\u2010\n                     moval, as it does in versions after bash-4.2\n              \u2022      in posix mode, single quotes are considered special when expanding the word  portion  of  a\n                     double-quoted parameter expansion and can be used to quote a closing brace or other special\n                     character (this is part of POSIX interpretation 221); in later versions, single quotes  are\n                     not special within double-quoted word expansions\n\n       compat43\n              \u2022      the  shell  does not print a warning message if an attempt is made to use a quoted compound\n                     assignment as an argument to declare (declare -a foo='(1 2)').  Later  versions  warn  that\n                     this usage is deprecated\n              \u2022      word  expansion  errors  are  considered non-fatal errors that cause the current command to\n                     fail, even in posix mode (the default behavior is to make them fatal errors that cause  the\n                     shell to exit)\n              \u2022      when  executing a shell function, the loop state (while/until/etc.)  is not reset, so break\n                     or continue in that function will break or continue loops in the calling context.  Bash-4.4\n                     and later reset the loop state to prevent this\n\n       compat44\n              \u2022      the  shell  sets  up  the  values used by BASH_ARGV and BASH_ARGC so they can expand to the\n                     shell's positional parameters even if extended debugging mode is not enabled\n              \u2022      a subshell inherits loops from its parent context, so break or continue will cause the sub\u2010\n                     shell to exit.  Bash-5.0 and later reset the loop state to prevent the exit\n              \u2022      variable  assignments  preceding builtins like export and readonly that set attributes con\u2010\n                     tinue to affect variables with the same name in the calling environment even if  the  shell\n                     is not in posix mode\n\n       compat50\n              \u2022      Bash-5.1 changed the way $RANDOM is generated to introduce slightly more randomness. If the\n                     shell compatibility level is set to 50 or lower, it reverts to the method from bash-5.0 and\n                     previous  versions,  so  seeding the random number generator by assigning a value to RANDOM\n                     will produce the same sequence as in bash-5.0\n              \u2022      If the command hash table is empty, bash versions prior to  bash-5.1  printed  an  informa\u2010\n                     tional  message  to  that  effect,  even when producing output that can be reused as input.\n                     Bash-5.1 suppresses that message when the -l option is supplied.\n\nSEE ALSO\n       bash(1), sh(1)\n\nGNU Bash 5.0                                       2004 Apr 20                                  BASH_BUILTINS(1)\n"},{"NOMBRE": "       brk, sbrk - cambia el tama\u00f1o del segmento de datos\n\n", "SINOPSIS": "       #include <unistd.h>\n\n       int brk(void *end_data_segment);\n       void *sbrk(ptrdiff_t increment);\n\n", "DESCRIPCION": "       brk  establece  el  final  del  segmento de datos al valor especificado por end_data_segment, cuando este\n       valor es razonable, el sistema dispone de suficiente memoria y el proceso no excede su l\u00edmite m\u00e1ximo para\n       datos (v\u00e9ase setrlimit(2)).\n\n       sbrk aumenta el espacio de datos del programa en increment bytes.  sbrk no es una llamada del sistema, es\n       simplemente un envoltorio (`wrapper') de la biblioteca de C.  Se puede llamar a sbrk con un incremento de\n       0 para averiguar la direcci\u00f3n actual del comienzo de la zona de memoria din\u00e1mica del segumento de datos.\n\nVALOR DEVUELTO\n       En  caso  de  \u00e9xito,  brk  devuelve  cero, y sbrk da un puntero al principio de la nueva \u00e1rea. En caso de\n       error, la funci\u00f3n devuelve -1, y en errno se coloca el valor ENOMEM.\n\nCONFORME A\n       BSD 4.3 brk y sbrk no est\u00e1n definidos en el est\u00e1ndar de C y est\u00e1n excluidos deliberadamente del  est\u00e1ndar\n       POSIX.1 (v\u00e9anse los p\u00e1rrafos B.1.1.1.3 y B.8.3.3).\n\nV\u00c9ASE TAMBI\u00c9N\n       execve(2), getrlimit(2), malloc(3)\n\nLinux 0.99.11                                     30 junio 1996                                           BRK(2)\n"},{"NOMBRE": "       cacheflush - vac\u00eda el contenido de la cach\u00e9 de instrucciones y/o datos\n\n", "SINOPSIS": "       #include <asm/cachectl.h>\n\n       int cacheflush(char *addr, int nbytes, int cache);\n\n", "DESCRIPCION": "       cacheflush  vac\u00eda  el  contenido de la(s) cach\u00e9(s) indicada(s) por las direcciones de usuario en el rango\n       addr a (addr+nbytes-1).  cache puede ser uno de los siguientes valores:\n\n       ICACHE Purga la cach\u00e9 de instrucciones.\n\n       DCACHE Escribe en memoria e invalida las l\u00edneas de cach\u00e9 v\u00e1lidas afectadas.\n\n       BCACHE Igual que (ICACHE|DCACHE).\n\nVALOR DEVUELTO\n       cacheflush devuelve 0 si finaliza con \u00e9xito o -1 en caso de error. Si se detectan  errores,  la  variable\n       errno indicar\u00e1 el tipo de error.\n\n", "ERRORES": "       EINVAL El par\u00e1metro cache no es ninguno de los valores aceptados ICACHE, DCACHE, o BCACHE.\n\n       EFAULT Todo o parte del rango de direcciones de addr a (addr+nbytes-1) no es accesible.\n\n", "FALLOS": "       La  implementaci\u00f3n  actual  ignora  los  par\u00e1metros addr y nbytes.  Por lo tanto siempre se vac\u00eda toda la\n       cach\u00e9.\n\n", "NOTA": "       Esta llamada del sistema s\u00f3lo est\u00e1 disponible en sistemas basados  en  MIPS.  No  deber\u00eda  ser  usada  en\n       programas que pretendan ser portables.\n\nV\u00c9ASE TAMBI\u00c9N\n       cachectl(2)\n\nLinux 2.0.32                                      27 Junio 1995                                    CACHEFLUSH(2)\n"},{"NOMBRE": "       capget, capset - consulta/establece las capacidades de un proceso\n\n", "SINOPSIS": "       #undef _POSIX_SOURCE\n       #include <sys/capability.h>\n\n       int capget(cap_user_header_t header, cap_user_data_t data);\n\n       int capset(cap_user_header_t header, const cap_user_data_t data);\n\n", "DESCRIPCION": "       A  partir  de  la versi\u00f3n 2.2 de Linux, el poder del superusuario (root) se ha dividido en un conjunto de\n       capacidades discretas.  Todo proceso posee un conjunto  de  capacidades  efectivas  que  identifican  qu\u00e9\n       capacidades  (si  las  hay)  puede  ejercer  actualmente.   Todo  proceso  tambi\u00e9n  posee  un conjunto de\n       capacidades heredables que se pueden  pasar  a  trav\u00e9s  de  una  llamada  execve(2),  y  un  conjunto  de\n       capacidades permitidas que el proceso puede hacer efectivas o heredables.\n\n       Estas  dos  funciones  son las interfaz directa con el n\u00facleo para consultar y establecer capacidades. No\n       s\u00f3lo estas llamadas al sistema son espec\u00edficas de Linux sino que  el  API  del  n\u00facleo  es  probable  que\n       cambie,  y  el uso de estas funciones (en particular el formato de los tipos cap_user_*_t) est\u00e1 subjeto a\n       cambios con cada versi\u00f3n del n\u00facleo.\n\n       Las interfaces portables son cap_set_proc(3) y  cap_get_proc(3).   Si  es  posible,  deber\u00eda  usar  estas\n       interfaces  en  sus  aplicaciones.  Si  desea  usar las extensiones de Linux en sus aplicaciones, deber\u00eda\n       utilizar las interfaces capsetp(3) y capgetp(3), que son m\u00e1s f\u00e1ciles de usar.\n\nVALOR DEVUELTO\n       En caso de \u00e9xito, se devuelve un cero. En caso de error, se devuelve un -1 y se asigna a errno  un  valor\n       apropiado.\n\n", "ERRORES": "       EINVAL Uno de los argumentos es incorrecto.\n\n       EPERM  Se ha intentado a\u00f1adir una capacidad al conjunto Permitido, o asignar una capacidad que no est\u00e1 en\n              el conjunto Permitido al conjunto Efectivo o Heredable.\n\nINFORMACI\u00d3N ADICIONAL\n       La interfaz portable para las funciones de consulta y establecimiento de capacidades  la  proporciona  la\n       biblioteca libcap que est\u00e1 disponible aqu\u00ed:\n       ftp://linux.kernel.org/pub/linux/libs/security/linux-privs\n\nV\u00c9ASE TAMBI\u00c9N\n       capabilities(7)\n\nLinux 2.2                                       9 septiembre 1999                                      CAPGET(2)\n"},{"NOMBRE": "       capget, capset - consulta/establece las capacidades de un proceso\n\n", "SINOPSIS": "       #undef _POSIX_SOURCE\n       #include <sys/capability.h>\n\n       int capget(cap_user_header_t header, cap_user_data_t data);\n\n       int capset(cap_user_header_t header, const cap_user_data_t data);\n\n", "DESCRIPCION": "       A  partir  de  la versi\u00f3n 2.2 de Linux, el poder del superusuario (root) se ha dividido en un conjunto de\n       capacidades discretas.  Todo proceso posee un conjunto  de  capacidades  efectivas  que  identifican  qu\u00e9\n       capacidades  (si  las  hay)  puede  ejercer  actualmente.   Todo  proceso  tambi\u00e9n  posee  un conjunto de\n       capacidades heredables que se pueden  pasar  a  trav\u00e9s  de  una  llamada  execve(2),  y  un  conjunto  de\n       capacidades permitidas que el proceso puede hacer efectivas o heredables.\n\n       Estas  dos  funciones  son las interfaz directa con el n\u00facleo para consultar y establecer capacidades. No\n       s\u00f3lo estas llamadas al sistema son espec\u00edficas de Linux sino que  el  API  del  n\u00facleo  es  probable  que\n       cambie,  y  el uso de estas funciones (en particular el formato de los tipos cap_user_*_t) est\u00e1 subjeto a\n       cambios con cada versi\u00f3n del n\u00facleo.\n\n       Las interfaces portables son cap_set_proc(3) y  cap_get_proc(3).   Si  es  posible,  deber\u00eda  usar  estas\n       interfaces  en  sus  aplicaciones.  Si  desea  usar las extensiones de Linux en sus aplicaciones, deber\u00eda\n       utilizar las interfaces capsetp(3) y capgetp(3), que son m\u00e1s f\u00e1ciles de usar.\n\nVALOR DEVUELTO\n       En caso de \u00e9xito, se devuelve un cero. En caso de error, se devuelve un -1 y se asigna a errno  un  valor\n       apropiado.\n\n", "ERRORES": "       EINVAL Uno de los argumentos es incorrecto.\n\n       EPERM  Se ha intentado a\u00f1adir una capacidad al conjunto Permitido, o asignar una capacidad que no est\u00e1 en\n              el conjunto Permitido al conjunto Efectivo o Heredable.\n\nINFORMACI\u00d3N ADICIONAL\n       La interfaz portable para las funciones de consulta y establecimiento de capacidades  la  proporciona  la\n       biblioteca libcap que est\u00e1 disponible aqu\u00ed:\n       ftp://linux.kernel.org/pub/linux/libs/security/linux-privs\n\nV\u00c9ASE TAMBI\u00c9N\n       capabilities(7)\n\nLinux 2.2                                       9 septiembre 1999                                      CAPGET(2)\n"},{"NOMBRE": "       chdir, fchdir - cambia el directorio de trabajo\n\n", "SINOPSIS": "       #include <unistd.h>\n\n       int chdir(const char *path);\n       int fchdir(int fd);\n\n", "DESCRIPCION": "       chdir cambia el directorio presente a aquel especificado en path.\n\n       fchdir es lo mismo que chdir, solo que el directorio est\u00e1 dado como un descriptor de fichero abierto.\n\nVALOR DEVUELTO\n       En caso de \u00e9xito, cero. Si hay alg\u00fan error, -1, y se asigna a errno un valor apropiado.\n\n", "ERRORES": "       Depediendo  del sistema de ficheros, se pueden devolver otros errores.  Los errores m\u00e1s comunes se listan\n       a continuaci\u00f3n:\n\n       EFAULT path apunta fuera de su espacio de direcciones accesible.\n\n       ENAMETOOLONG\n              path es demasiado largo.\n\n       ENOENT El fichero no existe.\n\n       ENOMEM No hay suficiente memoria disponible en el n\u00facleo.\n\n       ENOTDIR\n              Un componente del camino path no es un directorio.\n\n       EACCES Ha sido denegado el permiso de b\u00fasqueda en uno de los componentes del camino path.\n\n       ELOOP  Se han encontrado demasiados enlaces simb\u00f3licos al resolver path.\n\n       EIO    Ha ocurrido un error de E/S.\n\n       Los errores m\u00e1s comunes para fchdir se muestran a continuaci\u00f3n:\n\n       EBADF  fd no es un descriptor v\u00e1lido de fichero.\n\n       EACCES Se ha denegado el permiso de b\u00fasqueda sobre el directorio abierto en fd.\n\n", "OBSERVACIONES": "       El prototipo para fchdir est\u00e1 disponible solamente si _BSD_SOURCE est\u00e1 definida (bien  expl\u00edcitamente,  o\n       expl\u00edcitamente, al no definir _POSIX_SOURCE o compilando con la opci\u00f3n -ansi).\n\nCONFORME A\n       La  llamada chdir es compatible con SVr4, SVID, POSIX, X/OPEN, 4.4BSD.  SVr4 documenta las condiciones de\n       error adicionales EINTR, ENOLINK y EMULTIHOP pero no tiene ENOMEM.  POSIX.1 no tiene las  condiciones  de\n       error ENOMEM o ELOOP.  X/OPEN no tiene las condiciones de error EFAULT, ENOMEM ni EIO.  La llamada fchdir\n       es compatible con SVr4, 4.4BSD y X/OPEN.  SVr4 documenta las condiciones de error adicionales EIO,  EINTR\n       y ENOLINK.  X/OPEN documenta las condiciones de error adicionales EINTR y EIO.\n\nV\u00c9ASE TAMIBI\u00c9N\n       getcwd(3), chroot(2)\n\nLinux 2.0.30                                     21 agosto 1997                                         CHDIR(2)\n"},{"NOMBRE": "       chmod - cambia los permisos de acceso de ficheros\n\n", "SINOPSIS": "       chmod [opciones] modo fichero...\n\n       Opciones de POSIX: [-R]\n\n       Opciones de GNU (en la forma m\u00e1s corta): [-cfvR] [--reference=rfile] [--help] [--version] [--]\n\n", "DESCRIPCION": "       chmod  cambia  los  permisos  de  cada  fichero  dado seg\u00fan modo, que puede ser o bien una representaci\u00f3n\n       simbolica de los cambios a realizar, o bien un n\u00famero octal que representa  el  patr\u00f3n  de  bits  de  los\n       nuevos permisos.\n\n       El formato de un argumento de cambio de modo simb\u00f3lico es\n       `[ugoa...][[+-=][rwxXstugo...]...][,...]'.\n\n       Tal  argumento  es  una lista de \u00f3rdenes de cambio de modo simb\u00f3lico, separadas por comas.  Cada orden de\n       cambio de modo simb\u00f3lico empieza con cero o m\u00e1s  letras  del  conjunto  `ugoa':  \u00e9stas  controlan  a  qu\u00e9\n       usuarios  se  referir\u00e1n  los  nuevos  permisos  del  fichero  cuyos permisos se van a cambiar: el usuario\n       propietario (u), otros usuarios distintos del propietario pero del mismo grupo que el  del  fichero  (g),\n       otros  usuarios  que  ni  son el propietario ni pertenecen al grupo del fichero (o), o todos los usuarios\n       (a). De forma que `a' equivale aqu\u00ed a `ugo'.  Si no se da ninguna de estas letras, el efecto es el  mismo\n       que  si  se  hubiera  puesto  `a',  salvo  que  los  bits que est\u00e1n activos en la m\u00e1scara umask no se ven\n       afectados.\n\n       El operador `+' hace que los permisos seleccionados se a\u00f1adan a los ya existentes en  cada  fichero;  `-'\n       hace que se quiten de los que ya hab\u00eda; y `=' hace que sean los \u00fanicos que el fichero va a tener.\n\n       Las  letras  `rwxXstugo'  seleccionan  los  nuevos  permisos  para  los  usuarios afectados: lectura (r),\n       escritura o modificaci\u00f3n (w), ejecuci\u00f3n (para un fichero ejecutable) o permiso de paso (para directorios)\n       (x),  ejecuci\u00f3n  solamente  si  el  fichero  es  un directorio o ya tiene permiso de ejecuci\u00f3n para alg\u00fan\n       usuario (X), activar el bit SUID o SGID para ejecuci\u00f3n (s), activar el bit  \"pegajoso\"  o  STI  (t),  los\n       permisos  que  el  usuario  propietario  del  fichero  ya tiene (u), los que otros usuarios del grupo del\n       fichero, pero no el propietario, ya tienen (g) y los que otros usuarios distintos de  los  anteriores  ya\n       tienen  (o).   (As\u00ed, `chmod g-s fichero' quita el bit SGID (establecer el identificador de grupo), `chmod\n       ug+s fichero' activa los bits SUID y SGID, pero en cambio `chmod o+s fichero' no hace nada.)\n\n       El `bit pegajoso' no est\u00e1 descrito por POSIX.  El nombre deriva del  significado  original:  mantener  el\n       texto  del  programa  en  el  dispositivo  de  intercambio  (swap).   Esto  es un juego de palabras entre\n       `pegajoso', en ingl\u00e9s STIcky, y STI, por Save Text Image (N. del T.).\n\n       Hoy d\u00eda, cuando se aplica a un directorio, significa que  solamente  el  propietario  del  fichero  y  el\n       propietario  de  ese directorio pueden borrar el fichero de dicho directorio.  (Esto se emplea com\u00fanmente\n       en directorios como /tmp que tienen permiso de escritura general.)\n\n       Un modo num\u00e9rico est\u00e1 compuesto de 1 a 4 d\u00edgitos octales (0-7), formados mediante adici\u00f3n de los bits  de\n       valores  4,  2 y 1. Los d\u00edgitos que falten se toman como ceros iniciales. El primer d\u00edgito selecciona los\n       atributos SUID (4), SGID (2) y STI [`sticky'] (1). El segundo selecciona los  permisos  para  el  usuario\n       propietario  del fichero: lectura (4), escritura (2) y ejecuci\u00f3n (1); el tercero, los permisos para otros\n       usuarios del mismo grupo que el fichero, pero no el propietario, con los mismos valores que antes; y  por\n       \u00faltimo,  el cuarto d\u00edgito selecciona los permisos para los otros usuarios que no son ni el propietario ni\n       est\u00e1n en el mismo grupo que el fichero, con los mismos valores de nuevo.\n\n       chmod nunca cambia los permisos de enlaces simb\u00f3licos; la llamada al sistema chmod(2)  no  puede  cambiar\n       sus  permisos.  Esto  no  es un problema puesto que los permisos de los enlaces simb\u00f3licos nunca se usan.\n       Sin embargo, para cada enlace simb\u00f3lico puesto en la l\u00ednea de \u00f3rdenes,  chmod  cambia  los  permisos  del\n       fichero al cual apunta.  En cambio, chmod hace caso omiso de los enlaces simb\u00f3licos que encuentre durante\n       el recorrido recursivo de directorios.\n\nOPCIONES DE POSIX\n       -R     Cambia recursivamente los permisos de directorios y sus contenidos.\n\nOPCIONES DE GNU\n       -c, --changes\n              Muestra un mensaje mencionando solamente aquellos ficheros cuyos permisos cambian realmente.\n\n       -f, --silent, --quiet\n              No muestra mensajes de error sobre ficheros cuyos permisos no se pueden cambiar.\n\n       -v, --verbose\n              Describe prolijamente la acci\u00f3n efectuada o no para cada fichero.\n\n       -R, --recursive\n              Cambia recursivamente los permisos de directorios y sus contenidos.\n\nOPCIONES EST\u00c1NDARES DE GNU\n       --help Muestra un mensaje en la salida est\u00e1ndar sobre el modo de empleo y acaba con c\u00f3digo de \u00e9xito.\n\n       --version\n              Muestra en la salida est\u00e1ndar informaci\u00f3n sobre la versi\u00f3n y luego acaba con c\u00f3digo de \u00e9xito.\n\n       --     Termina la lista de opciones.\n\n       --reference=rfile\n              (Nueva en fileutils 4.0.)  Cambia el modo de file al del fichero rfile.\n\n", "ENTORNO": "       Las variables LANG, LC_ALL, LC_CTYPE y LC_MESSAGES tienen los significados usuales.\n\nCONFORME A\n       POSIX 1003.2 s\u00f3lo requiere la opci\u00f3n -R. El empleo de otras opciones puede  no  ser  transportable.  Este\n       est\u00e1ndar  no  describe  el  bit  de  permiso  `t'. Este est\u00e1ndar no especifica si chmod debe preservar la\n       consistencia desactivando o rehusando activar los bits SUID y SGID, p. ej., cuando se ponen a cero  todos\n       los bits de ejecuci\u00f3n, o si chmod debe hacer caso al bit `s' en absoluto.\n\nMODOS NO EST\u00c1NDARES\n       Arriba  describimos  el  empleo  del  bit  `t'  en  directorios.   Varios sistemas adjudican significados\n       especiales a combinaciones de bits de modo, que de otra forma no tendr\u00edan sentido.  En particular, Linux,\n       siguiendo  las  directrices  de  System V (consulte la Definici\u00f3n de Interfaz System V (SVID) versi\u00f3n 3),\n       deja que el bit SGID para ficheros sin permiso de ejecuci\u00f3n para el grupo marque el fichero para  bloqueo\n       (\"candado\") obligatorio. Para m\u00e1s detalles, vea el fichero /usr/src/linux/Documentation/mandatory.txt.\n\n", "OBSERVACIONES": "       Esta p\u00e1gina describe chmod seg\u00fan se encuentra en el paquete fileutils-4.0; otras versiones pueden diferir\n       un poco. Env\u00ede por correo electr\u00f3nico correcciones y adiciones a la  direcci\u00f3n  aeb@cwi.nl.   Informe  de\n       fallos en el programa a fileutils-bugs@gnu.ai.mit.edu.\n\nGNU fileutils 4.0                                Noviembre 1998                                         CHMOD(1)\n"},{"NOMBRE": "       chown - cambia el usuario y grupo propietarios de ficheros\n\n", "SINOPSIS": "       chown [opciones] usuario[:grupo] fichero...\n\n       Opciones de POSIX: [-R]\n\n       Opciones  de  GNU  (en  la  forma  m\u00e1s  corta):  [-cfhvR]  [--dereference]  [--reference=rfile]  [--help]\n       [--version] [--]\n\n", "DESCRIPCION": "       chown cambia el propietario de cada fichero, usuario o grupo, seg\u00fan el primer argumento que  no  sea  una\n       opci\u00f3n,  el cual se interpreta como sigue.  Si s\u00f3lo se da un nombre de usuario (o UID num\u00e9rico), entonces\n       ese usuario se convierte en el propietario de cada fichero dado y el grupo al que pertenece el fichero no\n       cambia.  Si  al nombre de usuario sigue un signo de dos puntos y un nombre de grupo (o GID num\u00e9rico), sin\n       espacios entre ellos, entonces tambi\u00e9n se cambia el grupo al que pertenece cada fichero.\n\nDETALLES DE GNU\n       La versi\u00f3n de GNU permite un punto `.' en vez de dos puntos `:' (imitando la versi\u00f3n de  BSD).  [Esto  no\n       fue permitido por POSIX puesto que un punto es un car\u00e1cter v\u00e1lido en un nombre de usuario.]  Si al nombre\n       de usuario sigue un signo de dos puntos o un solo punto pero luego no aparece un nombre de grupo  o  GID,\n       entonces  ese usuario se convierte en el propietario de los ficheros y el grupo de los ficheros se cambia\n       al primario de ese usuario. Si se da el signo de dos puntos o el punto y el nombre de grupo o  GID,  pero\n       se  omite el nombre de usuario, solamente se cambia el grupo de los ficheros; en este caso, chown hace lo\n       mismo que chgrp.\n\nOPCIONES DE POSIX\n       -R     Cambia recursivamente el propietario de directorios y sus contenidos.\n\nOPCIONES DE GNU\n       -c, --changes\n              Muestra un mensaje donde menciona solamente aquellos ficheros cuyo propietario cambia realmente.\n\n       -f, --silent, --quiet\n              No muestra mensajes de error sobre ficheros cuyo propietario no puede cambiarse.\n\n       -h, --no-dereference\n              Act\u00faa sobre enlaces simb\u00f3licos propiamente en vez de sobre lo que apunten. Disponible solamente si\n              el sistema proporciona la primitiva lchown.\n\n       -v, --verbose\n              Describe prolijamente la acci\u00f3n efectuada (o no) para cada fichero.\n\n       -R, --recursive\n              Cambia recursivamente la propietariedad de directorios y sus contenidos.\n\n       --dereference\n              Cambia la propiedad del destino de un enlace simb\u00f3lico en lugar de la del propio enlace simb\u00f3lico.\n              (Nueva en fileutils-4.0.)\n\n       --reference=rfile\n              (Nueva en fileutils 4.0.)  Cambia la propiedad de file a la del fichero rfile.\n\nOPCIONES EST\u00c1NDARES DE GNU\n       --help Muestra un mensaje en la salida est\u00e1ndar sobre el modo de empleo y acaba con c\u00f3digo de \u00e9xito.\n\n       --version\n              Muestra en la salida est\u00e1ndar informaci\u00f3n sobre la versi\u00f3n y luego acaba con c\u00f3digo de \u00e9xito.\n\n       --     Termina la lista de opciones.\n\n", "ENTORNO": "       Las variables LANG, LC_ALL, LC_CTYPE y LC_MESSAGES tienen los significados usuales.\n\nCONFORME A\n       POSIX 1003.2 no permite el empleo del punto como separador entre el nombre de usuario y el de grupo.\n\n", "OBSERVACIONES": "       Esta p\u00e1gina describe chown seg\u00fan se encuentra en el paquete fileutils-4.0; otras versiones pueden diferir\n       un  poco.  Env\u00ede  por  correo electr\u00f3nico correcciones y adiciones a la direcci\u00f3n aeb@cwi.nl.  Informe de\n       fallos en el programa a fileutils-bugs@gnu.ai.mit.edu.\n\nGNU fileutils 4.0                                Noviembre 1998                                         CHOWN(1)\n"},{"NOMBRE": "       chroot - ejecuta comandos o shells interactivos con un directorio ra\u00edz especial.\n\n", "SINOPSIS": "       chroot [--help] [--version] directorio [command...]\n\n", "DESCRIPCION": "       Esta  documentaci\u00f3n  no  ser\u00e1  mantenida  y puede ser inexacta o incompleta.  La documentaci\u00f3n Texinfo es\n       ahora la fuente autorizada.\n\n       Esta p\u00e1gina de manual documenta la versi\u00f3n GNU de chroot.  chroot ejecuta un comando  con  un  directorio\n       espec\u00edfico  como  directorio ra\u00edz para la traducci\u00f3n de nombres de ficheros.  Si no especificamos comando\n       chroot ejecuta una shell interactiva. La variable de entorno `SHELL' especifica el  programa  shell;  por\n       defecto es /bin/sh.\n\n   OPCIONES\n       --help Imprime un mensaje de uso en la salida est\u00e1ndar y termina correctamente.\n\n       --version\n              Imprime informaci\u00f3n sobre la versi\u00f3n en la salida est\u00e1ndar y termina correctamente.\n\n   NOTAS\n       En muchos sistemas s\u00f3lo el superusuario puede cambiar el directorio ra\u00edz.\n\nFSF                                           Utilidades Shell GNU                                    CHROOT(1L)\n"},{"NOMBRE": "       clone - crea un proceso hijo\n\n", "SINOPSIS": "       #include <sched.h>\n\n       int clone(int (*fn)(void *), void *child_stack, int flags, void *arg);\n\n       _syscall2(int, clone, int, flags, void *, child_stack)\n\n", "DESCRIPCION": "       clone  crea  un nuevo proceso como lo hace fork(2).  clone es una funci\u00f3n de biblioteca situada encima de\n       la llamada al sistema subyacente clone , de aqu\u00ed en adelante referida como sys_clone.  Una descripci\u00f3n de\n       sys_clone se da hacia el final de esta p\u00e1gina.\n\n       A  diferencia  de  fork(2),  estas  llamadas  permiten al proceso hijo compartir partes de su contexto de\n       ejecuci\u00f3n con el proceso invocador, tales como el espacio de memoria, la tabla de descriptores de fichero\n       y  la  tabla  de  manejadores  de  se\u00f1al.   (Observe  que  en  esta p\u00e1gina de manual, \"proceso invocador\"\n       normalmente se corresponde con \"proceso padre\". Vea la descripci\u00f3n de CLONE_PARENT m\u00e1s abajo.)\n\n       El principal uso de clone es para implementar los hilos: m\u00faltiples hilos de control en un programa que se\n       ejecutan concurrentemente en un espacio de memoria compartido.\n\n       Cuando  se  crea el proceso hijo con clone, \u00e9ste ejecuta la funci\u00f3n fn(arg).  (Eso difiere de fork(2), en\n       donde la ejecuci\u00f3n contin\u00faa en el hijo desde el punto en el  que  se  encuentra  la  llamada  fork(2)  El\n       argumento  fn  es  un  puntero  a  una  funci\u00f3n  que  es  ejecutada por el proceso hijo al comienzo de su\n       ejecuci\u00f3n.  El argumento arg se pasa a la funci\u00f3n fn.\n\n       Cuando la funci\u00f3n fn(arg) regresa, el proceso hijo termina. El entero devuelto por fn  es  el  c\u00f3digo  de\n       salida  del  proceso  hijo.  El  proceso  hijo tambi\u00e9n puede terminar expl\u00edcitamente ejecutando exit(2) o\n       despu\u00e9s de recibir una se\u00f1al fatal.\n\n       El argumento child_stack indica la posici\u00f3n de la pila utilizada por el  proceso  hijo.  Puesto  que  los\n       procesos  hijo  e  invocador pueden compartir la memoria, no es posible, en general, para el proceso hijo\n       ejecutarse usando la misma pila que el proceso invocador. Por tanto, el proceso invocador  debe  preparar\n       un \u00e1rea de memoria para la pila del hijo y pasar un puntero a dicha \u00e1rea a clone.  Las pilas crecen hacia\n       abajo en todos los procesadores en los que se ejecuta Linux (excepto en el procesador HP PA), por lo  que\n       child_stack  apunta  normalmente a la direcci\u00f3n m\u00e1s alta de la zona de memoria preparada para la pila del\n       hijo.\n\n       El byte bajo de flags contiene el n\u00famero de la se\u00f1al enviada al padre cuando el hijo muere.  Si la  se\u00f1al\n       especificada  es  cualquiera distinta de SIGCHLD, el proceso padre debe especificar las opciones __WALL o\n       __WCLONE cuando espera al hijo con wait(2).  Si no se indica  ninguna  se\u00f1al,  el  proceso  padre  no  es\n       notificado cuando el hijo termina.\n\n       flags puede tambi\u00e9n ser operado con un OR a nivel de bits (bitwise or) con una o varias de las siguientes\n       constantes, para as\u00ed especificar qu\u00e9 van a compartir los procesos invocador e hijo:\n\n       CLONE_PARENT\n              (Linux 2.4 en adelante) Si CLONE_PARENT est\u00e1 presente, el padre del nuevo hijo (valor devuelto por\n              getppid(2)) ser\u00e1 el mismo que el del proceso invocador.\n\n              Si  CLONE_PARENT  no  est\u00e1  presente,  (al  igual  que ocurre con fork(2)) el padre del hijo es el\n              proceso invocador.\n\n              Observe que es el proceso padre, tal como informa getppid(2), el que es notificado cuando el  hijo\n              termina,  as\u00ed  que  si se especifica la opci\u00f3n CLONE_PARENT , ser\u00e1 notificado el padre del proceso\n              invocador, en lugar del propio proceso invocador.\n\n       CLONE_FS\n              Si se pone CLONE_FS, los procesos invocador e hijo comparten la misma informaci\u00f3n del  sistema  de\n              ficheros. \u00c9sta incluye la ra\u00edz del sistema de ficheros, el directorio de trabajo actual y el valor\n              de umask. Cualquier llamada a chroot(2), chdir(2) o umask(2) realizada por el proceso invocador  o\n              hijo tambi\u00e9n afecta al otro proceso.\n\n              Si  no  se  pone  CLONE_FS, el proceso hijo trabaja con una copia de la informaci\u00f3n del sistema de\n              ficheros del proceso invocador en el momento  de  ejecutar  la  llamada  clone.   Las  llamadas  a\n              chroot(2), chdir(2) o umask(2) realizadas despu\u00e9s por uno de los procesos no afectan al otro.\n\n       CLONE_FILES\n              Si  se pone CLONE_FILES, los procesos invocador e hijo comparten la misma tabla de descriptores de\n              fichero. Los descriptores de fichero siempre se refieren a los mismos ficheros en el  invocador  y\n              en  el  proceso  hijo.  Cualquier  descriptor  de fichero creado por el proceso invocador o por el\n              proceso hijo tambi\u00e9n es v\u00e1lido en el otro proceso. De igual forma, si uno de los  procesos  cierra\n              un  descriptor de fichero o cambia sus banderas (flags) asociadas, el otro proceso tambi\u00e9n se ver\u00e1\n              afectado.\n\n              Si no se pone CLONE_FILES, el proceso hijo hereda una copia de todos los descriptores  de  fichero\n              abiertos  en  el  proceso  invocador  en  el momento de ejecutar clone.  Las operaciones sobre los\n              descriptores de fichero realizadas despu\u00e9s por uno de los procesos invocador o hijo no afectan  al\n              otro.\n\n       CLONE_NEWNS\n              (Linux 2.4.19 en adelante) Comienza el hijo en un nuevo espacio de nombres.\n\n              Cada proceso vive en un espacio de nombres. El espacio de nombres de un proceso viene dado por los\n              datos (el conjunto de montajes) que describen la jerarqu\u00eda de ficheros tal como la ve ese proceso.\n              Despu\u00e9s  de  una llamada a fork(2) o clone(2) con la bandera CLONE_NEWNS desactivada, el hijo vive\n              en el mismo espacio de nombres que el padre.  Las llamadas al sistema mount(2) y umount(2) cambian\n              el espacio de nombres del proceso invocador, y por tanto afectan a todos los procesos que viven en\n              el mismo espacio de nombres, pero no a los que est\u00e1n en un espacio de nombres diferente.\n\n              Tras una llamada a clone(2) con la bandera CLONE_NEWNS  activada,  el  hijo  clonado  comienza  su\n              ejecuci\u00f3n  en  un  nuevo espacio de nombres, inicializado con una copia del espacio de nombres del\n              padre.\n\n              Solamente un proceso privilegiado  puede  indicar  la  bandera  CLONE_NEWNS.   No  est\u00e1  permitido\n              especificar CLONE_NEWNS y CLONE_FS en la misma llamada a clone.\n\n       CLONE_SIGHAND\n              Si se pone CLONE_SIGHAND, los procesos invocador e hijo comparten la misma tabla de manejadores de\n              se\u00f1al.  Si el proceso invocador o  hijo  llama  a  sigaction(2)  para  cambiar  el  comportamiento\n              asociado  a  una  se\u00f1al,  el comportamiento tambi\u00e9n se cambia en el otro proceso. Sin embargo, los\n              procesos invocador e hijo todav\u00eda tienen diferentes m\u00e1scaras de se\u00f1ales  y  conjuntos  de  se\u00f1ales\n              pendientes.  Por  tanto,  uno  de  ellos  puede  bloquear  o  desbloquear  algunas  se\u00f1ales usando\n              sigprocmask(2) sin afectar al otro proceso.\n\n              Si no se pone CLONE_SIGHAND, el proceso hijo hereda una copia de  los  manejadores  de  se\u00f1al  del\n              proceso invocador en el momento de ejecutar clone.  Las llamadas a sigaction(2) realizadas despu\u00e9s\n              por uno de los procesos no tendr\u00e1n efecto sobre el otro proceso.\n\n       CLONE_PTRACE\n              Si se especifica la opci\u00f3n CLONE_PTRACE , y el proceso invocador est\u00e1 siendo rastreado, tambi\u00e9n se\n              rastrea al hijo (vea ptrace(2)).\n\n       CLONE_VFORK\n              Si  la  opci\u00f3n CLONE_VFORK est\u00e1 presente, la ejecuci\u00f3n del proceso invocador se suspende hasta que\n              el hijo libere sus recursos de memoria virtual mediante una llamada a  execve(2)  o  _exit(2)  (al\n              igual que con vfork(2)).\n\n              Si  CLONE_VFORK no est\u00e1 presente tanto el proceso invocador como el hijo son planificables tras la\n              llamada, y una aplicaci\u00f3n no deber\u00eda confiar en que se ejecuten en un determinado orden.\n\n       CLONE_VM\n              Si CLONE_VM est\u00e1 presente, el proceso invocador y el proceso hijo se ejecutan en el mismo  espacio\n              de memoria. En particular, las escrituras en memoria realizadas por el proceso invocador o el hijo\n              son visibles tambi\u00e9n en el otro proceso.  Adem\u00e1s, cualquier ubicaci\u00f3n  o  eliminaci\u00f3n  de  memoria\n              realizada con mmap(2) o munmap(2) por el proceso hijo o invocador tambi\u00e9n afecta al otro proceso.\n\n              Si  CLONE_VM  no  est\u00e1  presente,  el proceso hijo se ejecuta en una copia separada del espacio de\n              memoria del proceso invocador en el momento de la llamada a clone.  Las escrituras  en  memoria  o\n              las ubicaciones/eliminaciones de ficheros realizadas por uno de los procesos no afecta al otro, al\n              igual que con fork(2).\n\n       CLONE_PID\n              Si se pone CLONE_PID, se crea el proceso hijo con el mismo identificador de proceso que el proceso\n              invocador.\n\n              Si  no  se  pone  CLONE_PID, el proceso hijo posee un identificador de proceso \u00fanico, distinto del\n              identificador del invocador.\n\n              Esta bandera s\u00f3lo puede ser especificada por el proceso de arranque del sistema (PID 0).\n\n       CLONE_THREAD\n              (Linux 2.4 en adelante) Si CLONE_THREAD est\u00e1 presente, el proceso hijo se pone en el  mismo  grupo\n              de hilos que el proceso invocador.\n\n              Si  CLONE_THREAD  no  est\u00e1  presente, el proceso hijo se pone en su propio (nuevo) grupo de hilos,\n              cuyo identificador es el mismo que el identificador de proceso.\n\n              (Los grupos de hilos son una caracter\u00edstica a\u00f1adida en Linux 2.4 para soportar  la  noci\u00f3n  de  un\n              conjunto  de  hilos  compartiendo  un  solo  PID  impuesta  por los hilos POSIX. En Linux 2.4, las\n              llamadas a getpid(2) devuelven el identificador de grupo de hilos del invocador.)\n\n       La llamada al sistema sys_clone se corresponde m\u00e1s estrechamente con  fork(2)  en  el  hecho  de  que  la\n       ejecuci\u00f3n en el proceso hijo contin\u00faa desde el punto de la llamada. As\u00ed, sys_clone solamente requiere los\n       argumentos flags y child_stack , que tienen el mismo significado que para clone.  (Observe que  el  orden\n       de estos argumentos difiere de clone.)\n\n       Otra diferencia de sys_clone es que el argumento child_stack puede ser cero, en cuyo caso la sem\u00e1ntica de\n       copia-en-escritura (copy-on-write) asegura que el proceso hijo obtendr\u00e1 copias de  las  p\u00e1ginas  de  pila\n       cuando  cualquiera  de  los  dos  procesos  modifique la pila. En este caso, para una operaci\u00f3n correcta,\n       deber\u00eda especificarse la opci\u00f3n CLONE_VM.\n\nVALOR DEVUELTO\n       En caso de \u00e9xito, se devuelve el PID del hijo en el hilo de ejecuci\u00f3n del invocador. En caso de fallo, se\n       devuelve  -1  en  el contexto del invocador, no se crear\u00e1 ning\u00fan proceso hijo y se asignar\u00e1 a la variable\n       errno un valor apropiado.\n\n", "ERRORES": "       EAGAIN Se est\u00e1n ejecutando ya demasiados procesos.\n\n       ENOMEM __clone no puede reservar suficiente memoria para obtener una estructura de tarea (task structure)\n              para el hijo o para copiar aquellas partes del contexto del padre que necesitan ser copiadas.\n\n       EINVAL Devuelto por clone cuando se especifica un valor cero para child_stack.\n\n       EINVAL Se especificaron ambas opciones CLONE_FS y CLONE_NEWNS en flags.\n\n       EINVAL Se especific\u00f3 CLONE_THREAD , pero no CLONE_SIGHAND.  (Desde Linux 2.5.35.)\n\n       EPERM  Se especific\u00f3 CLONE_PID por un proceso cuyo PID es distinto de cero.\n\n", "FALLOS": "       Desde la versi\u00f3n 2.1.97 del n\u00facleo, no se debe usar la bandera CLONE_PID ya que otras partes del n\u00facleo y\n       la mayor\u00eda del software del sistema todav\u00eda asumen que los identificadores de proceso son \u00fanicos.\n\n       No hay una entrada para clone en la versi\u00f3n 5 de libc. libc 6 (o sea, glibc 2)  proporciona  una  llamada\n       clone tal como la que se ha descrito en esta p\u00e1gina de manual.\n\n", "OBSERVACIONES": "       Para las versiones del n\u00facleo 2.4.7-2.4.18 la bandera CLONE_THREAD implica la bandera CLONE_PARENT.\n\nCONFORME A\n       Las  llamadas  clone  y sys_clone son espec\u00edficas de Linux y no deber\u00edan usarse en aquellos programas que\n       pretendan se portables. Para programar aplicaciones con hilos (m\u00faltiples hilos de  control  en  el  mismo\n       espacio  de  memoria)  es mejor usar una biblioteca que implemente la API de hilos POSIX 1003.1c, como la\n       biblioteca LinuxThreads (incluida en glibc2). Vea pthread_create(3).\n\n       Esta p\u00e1gina de manual se corresponde con los n\u00facleos 2.0.x, 2.1.x, 2.2.x,  2.4.x,  y  con  las  versiones\n       2.0.x y 2.1.x de glibc.\n\nV\u00c9ASE TAMBI\u00c9N\n       fork(2), wait(2), pthread_create(3)\n\nLinux 2.4                                       31 diciembre 2001                                       CLONE(2)\n"},{"NOMBRE": "       close - cierra un descriptor de fichero\n\n", "SINOPSIS": "       #include <unistd.h>\n\n       int close(int fd);\n\n", "DESCRIPCION": "       close  cierra  un  descriptor  de  fichero  de  forma  que  ya no se refiera a fichero alguno y pueda ser\n       reutilizado. Cualesquiera bloqueos mantenidos sobre el fichero con el que estaba  asociado,  y  propiedad\n       del  proceso,  son  eliminados  (sin  importar  qu\u00e9  descriptor  de fichero fue utilizado para obtener el\n       bloqueo).\n\n       Si fd es la \u00faltima copia de cierto descriptor de fichero, los recursos asociados con dicho descriptor son\n       liberados;  si  el  descriptor  fuera  la \u00faltima referencia a un fichero que haya sido eliminada mediante\n       unlink(2) entonces el fichero es borrado.\n\nVALOR DEVUELTO\n       close devuelve 0 en caso de \u00e9xito y -1 si ocurre alg\u00fan error.\n\n", "ERRORES": "       EBADF  fd no es un descriptor de fichero abierto v\u00e1lido.\n\n       EINTR  La llamada close() fue interrumpida por una se\u00f1al.\n\n       EIO    Ocurri\u00f3 un error de E/S.\n\nCONFORME A\n       SVID, AT&T, POSIX, X/OPEN, BSD 4.3.  SVr4 documenta una condici\u00f3n de error ENOLINK adicional.\n\n", "NOTA": "       El no comprobar el valor devuelto por close es un error de programaci\u00f3n com\u00fan y  no  obstante  serio.  Es\n       bastante  posible que los errores de una operaci\u00f3n write(2) previa sean informados por primera vez con la\n       \u00faltima llamada close.\n\n       Una llamada a close con \u00e9xito no garantiza que los datos hayan sido guardados a disco con \u00e9xito,  ya  que\n       el  n\u00facleo  aplaza  las escrituras. No es habitual en un sistema de ficheros vaciar los buffers cuando se\n       cierra el flujo de datos. Si necesita asegurarse de  que  los  datos  sean  f\u00edsicamente  almacenados  use\n       fsync(2).   (\u00c9sto  depender\u00e1  del hardware de disco.)  No comprobar el valor devuelto cuando se cierra un\n       fichero puede dar lugar a una p\u00e9rdida silenciosa de datos.  Esto se observa especialmente en  NFS  y  con\n       las cuotas de discos.\n\nV\u00c9ASE TAMBI\u00c9N\n       open(2), fcntl(2), shutdown(2), unlink(2), fclose(3), fsync(2)\n\nLinux                                           13 Diciembre 2001                                       CLOSE(2)\n"},{"NOMBRE": "       connect - inicia una conexi\u00f3n en un conector (socket)\n\n", "SINOPSIS": "       #include <sys/types.h>\n       #include <sys/socket.h>\n\n       int connect(int sockfd, const struct sockaddr *serv_addr, socklen_t addrlen);\n\n", "DESCRIPCION": "       El  descriptor  de  fichero sockfd debe referenciar a un conector.  Si el conector es del tipo SOCK_DGRAM\n       entonces la direcci\u00f3n serv_addr es la direcci\u00f3n a la que por defecto se env\u00edan los datagramas y la  \u00fanica\n       direcci\u00f3n  de la que se reciben datagramas. Si el conector es del tipo SOCK_STREAM o SOCK_SEQPACKET, esta\n       llamada intenta hacer una conexi\u00f3n a otro conector. El otro conector est\u00e1 especificado por serv_addr,  la\n       cual  es  una direcci\u00f3n (de longitud addrlen) en el espacio de comunicaciones del conector.  Cada espacio\n       de comunicaciones interpreta el par\u00e1metro serv_addr a su manera.\n\n       Generalmente, los conectores de protocolos orientados a conexi\u00f3n pueden  conectarse  con  \u00e9xito  mediante\n       connect  una  vez  solamente;  los  conectores de protocolos no orientados a conexi\u00f3n pueden usar connect\n       m\u00faltiples veces para cambiar sus asociaciones. Los conectores de  protocolos  no  orientados  a  conexi\u00f3n\n       pueden  disolver la asociaci\u00f3n conectandose a una direcci\u00f3n en la que al miembro sa_family de sockaddr se\n       le ha asignado el valor AF_UNSPEC.\n\nVALOR DEVUELTO\n       Si la conexi\u00f3n o enlace tiene \u00e9xito, se devuelve 0. En caso de error, se devuelve -1, y se  asigna  a  la\n       variable errno un valor apropiado.\n\n", "ERRORES": "       Los  siguientes  s\u00f3lo  son errores generales de conector.  Puede haber otros c\u00f3digos de error espec\u00edficos\n       del dominio.\n\n       EBADF  El descriptor del fichero no es un \u00edndice v\u00e1lido de la tabla de descriptores.\n\n       EFAULT La estructura de direcci\u00f3n del conector est\u00e1 fuera del espacio de direcciones del usuario.\n\n       ENOTSOCK\n              El descriptor del fichero no est\u00e1 asociado con un conector.\n\n       EISCONN\n              El conector ya est\u00e1 conectado.\n\n       ECONNREFUSED\n              No hay nadie escuchando en la direcci\u00f3n remota.\n\n       ETIMEDOUT\n              Finaliz\u00f3 el plazo de tiempo mientras se intentaba la conexi\u00f3n. El servidor puede  estar  demasiado\n              ocupado  para  aceptar  nuevas  conexiones.  Dese cuenta que para conectores IP el plazo de tiempo\n              puede ser muy largo cuando se han habilitado los \"syncookies\" en el servidor.\n\n       ENETUNREACH\n              Red inaccesible.\n\n       EADDRINUSE\n              La direcci\u00f3n local ya est\u00e1 en uso.\n\n       EINPROGRESS\n              El conector es no bloqueante y la conexi\u00f3n no puede completarse inmediatamente.  Es  posible  usar\n              select(2)  o poll(2) para completarla seleccionando el conector para escritura. Despu\u00e9s que select\n              indique que la escritura es posible, use getsockopt(2) para  leer  la  opci\u00f3n  SO_ERROR  al  nivel\n              SOL_SOCKET  para  determinar  si  connect  se complet\u00f3 con \u00e9xito (BSO_ERROR ser\u00e1 cero) o sin \u00e9xito\n              (BSO_ERROR ser\u00e1 uno de los c\u00f3digos de error usuales listados aqu\u00ed, explicando la raz\u00f3n del fallo).\n\n       EALREADY\n              El conector es no bloqueante y todav\u00eda no se ha terminado un intento de conexi\u00f3n anterior.\n\n       EAGAIN No hay m\u00e1s puertos locales libres o las entradas en la cache de  enrutamiento  son  insuficientes.\n              Para  PF_INET  vea  la  sysctl  net.ipv4.ip_local_port_range en ip(7) para ver c\u00f3mo incrementar el\n              n\u00famero de puertos locales.\n\n       EAFNOSUPPORT\n              La direcci\u00f3n pasada no tiene la familia de direcciones correcta en su campo sa_family.\n\n       EACCES, EPERM\n              El usuario ha intentado conectarse a una direcci\u00f3n de difusi\u00f3n (broadcast)  sin  que  el  conector\n              tenga  activa  la  opci\u00f3n de difusi\u00f3n, o la petici\u00f3n de conexi\u00f3n ha fallado debido a una regla del\n              cortafuegos local.\n\nCONFORME A\n       SVr4, 4.4BSD (la funci\u00f3n connect apareci\u00f3 por primera vez en BSD 4.2).  SVr4 documenta adicionalmente los\n       c\u00f3digos  de  error  generales  EADDRNOTAVAIL,  EINVAL, EAFNOSUPPORT, EALREADY, EINTR, EPROTOTYPE y ENOSR.\n       Tambi\u00e9n documenta muchas condiciones de error adicionales que no se describen aqu\u00ed.\n\n", "NOTA": "       El tercer argumento de connect es en realidad un entero (y esto es lo que tienen BSD 4.*, libc4 y libc5).\n       Cierta  confusi\u00f3n  en  POSIX dio como resultado el actual socklen_t.  El est\u00e1ndar propuesto todav\u00eda no ha\n       sido adoptado pero glibc2 ya lo sigue y tambi\u00e9n tiene socklen_t. Vea tambi\u00e9n accept(2).\n\nFALLOS (BUGS)\n       Desconectar un conector llamando a connect con una direcci\u00f3n AF_UNSPEC no se ha implementado todav\u00eda.\n\nV\u00c9ASE TAMBI\u00c9N\n       accept(2), bind(2), listen(2), socket(2), getsockname(2)\n\nLinux 2.2                                        3 octubre 1998                                       CONNECT(2)\n"},{"NOMBRE": "       open, creat - abren y posiblemente crean un fichero o dispositivo\n\n", "SINOPSIS": "       #include <sys/types.h>\n       #include <sys/stat.h>\n       #include <fcntl.h>\n\n       int open(const char *camino, int flags);\n       int open(const char *camino, int flags, mode_t modo);\n       int creat(const char *camino, mode_t modo);\n\n", "DESCRIPCION": "       La  llamada  al sistema open() se utiliza para convertir una ruta en un descriptor de fichero (un peque\u00f1o\n       entero no negativo que se utiliza en las operaciones de E/S  posteriores  como  en  read,  write,  etc.).\n       Cuando  la  llamada  tiene  \u00e9xito,  el  descriptor  de fichero devuelto ser\u00e1 el descriptor de fichero m\u00e1s\n       peque\u00f1o no abierto actualmente para  el  proceso.   Esta  llamada  crea  un  nuevo  fichero  abierto,  no\n       compartido  con  ning\u00fan  otro proceso. (Pero pueden aparecer ficheros abiertos compartidos a trav\u00e9s de la\n       llamada al sistema fork(2).)  El nuevo descriptor de fichero se configura para que permanezca  abierto  a\n       trav\u00e9s de funciones exec (vea fcntl(2)).  El apuntador de lectura/escritura del fichero se configura para\n       que apunte al principio del fichero.\n\n       El par\u00e1metro flags es uno de O_RDONLY, O_WRONLY u O_RDWR que, respectivamente, piden que la apertura  del\n       fichero  sea  solamente  para lectura, solamente para escritura, o para lectura y escritura, combin\u00e1ndose\n       mediante el operador de bits OR (|),  con cero o m\u00e1s de las siguientes macros:\n\n       O_CREAT\n              Si el fichero no existe, ser\u00e1 creado.  El propietario (identificador de usuario)  del  fichero  se\n              fija  al  identificador de usuario efectivo del proceso.  La propiedad del grupo (identificador de\n              grupo) se fija bien al identificador de grupo efectivo del proceso  o  bien  al  identificador  de\n              grupo del directorio padre (dependiendo del tipo de sistema de ficheros y las opciones de montaje,\n              y el modo del directorio padre, vea, p.e. las opciones de montaje bsdgroups y sysvgroups sobre  el\n              sistema de ficheros ext2, tal como se describen en mount(8)).\n\n       O_EXCL Cuando  se  combina  con  O_CREAT,  es  un error que el fichero ya exista, y open fallar\u00e1. En este\n              contexto, un enlace simb\u00f3lico existe, sin tener en cuenta a donde apunte.  O_EXCL no  funciona  en\n              sistemas  de  ficheros  de  red  NFS,  programas que conf\u00eden en \u00e9l para efectuar tareas de bloqueo\n              contendr\u00e1n una condici\u00f3n de concurso. La soluci\u00f3n para efectuar  un  bloqueo  at\u00f3mico  de  fichero\n              mediante  un  fichero  de  bloqueo  es crear un fichero \u00fanico en el mismo sistema de ficheros (por\n              ejemplo, incorporando el nombre del ordenador y el PID) y utilizar link(2) para hacer un enlace al\n              fichero  de  bloqueo. Si link() devuelve 0, el bloqueo tiene \u00e9xito. En caso contrario, use stat(2)\n              en el fichero \u00fanico para comprobar si su n\u00famero de enlaces se ha incrementado a 2, en cuyo caso el\n              bloqueo tambi\u00e9n tiene \u00e9xito.\n\n       O_NOCTTY\n              Si  camino  se  refiere a una terminal \u2014 vea tty(4) \u2014 no se convertir\u00e1 en la terminal controladora\n              del proceso ni en el caso de que el proceso no tenga ninguna.\n\n       O_TRUNC\n              Si el fichero ya existe y es un fichero regular y el modo de apertura permite escribir  (p.e.,  es\n              O_RDWR  o  O_WRONLY)  ser\u00e1  truncado  a  longitud  0.   Si  el fichero es una FIFO o un fichero de\n              dispositivo de terminal, la opci\u00f3n O_TRUNC es ignorada. En otro  caso  el  efecto  de  O_TRUNC  es\n              indefinido.  (En muchas versiones de Linux ser\u00e1 ignorado; en otras devolver\u00e1 un error.)\n\n       O_APPEND\n              El  fichero se abrir\u00e1 en modo de s\u00f3lo-a\u00f1adir. Antes de cada escritura, el apuntador del fichero es\n              posicionado al final del fichero, como se har\u00eda con lseek.  O_APPEND  puede  conducir  a  ficheros\n              corruptos en sistemas de ficheros NFS si m\u00e1s de un proceso a\u00f1ade datos a un fichero a la vez. Esto\n              es as\u00ed porque NFS no admite a\u00f1adir a un fichero, as\u00ed que el n\u00facleo del cliente ha de simularlo, lo\n              que no puede hacerse sin una condici\u00f3n de carrera.\n\n       O_NONBLOCK u O_NDELAY\n              Cuando  \u00e9sto es posible, el fichero se abre en modo no bloqueante. Ni el open ni ninguna operaci\u00f3n\n              subsecuente sobre el descriptor de fichero  que es devuelto har\u00e1n  que  el  proceso  que  hace  la\n              llamada espere.  Para el manejo de FIFOs (tuber\u00edas nombradas), vea tambi\u00e9n fifo(4).\n\n       O_SYNC El  fichero  se  abre  para  E/S  s\u00edncrona.  Cualesquiera  operaciones de escritura write sobre el\n              descriptor de fichero resultante bloquear\u00e1n el proceso que ha efectuado la llamada hasta  que  los\n              datos  hayan sido f\u00edsicamente escritos en el dispositivo subyacente.  Vea no obstante m\u00e1s abajo la\n              secci\u00f3n RESTRICCIONES.\n\n       O_NOFOLLOW\n              Si pathname es un enlace simb\u00f3lico, entonces la apertura falla. \u00c9sta es una extensi\u00f3n  de  FreeBSD\n              que  fue a\u00f1adida a Linux en la versi\u00f3n 2.1.126.  Todav\u00eda se seguir\u00e1n los enlaces simb\u00f3licos de los\n              componentes anteriores de la ruta. Los ficheros cabecera de la versi\u00f3n 2.0.100  y  posteriores  de\n              glibc incluyen una definici\u00f3n de esta opci\u00f3n; los n\u00facleos anteriores al 2.1.126 lo ignorar\u00e1n si se\n              usa.\n\n       O_DIRECTORY\n              Si pathname no es un directorio, har\u00e1 que la apertura falle. Esta opci\u00f3n es espec\u00edfica de Linux  y\n              fue  a\u00f1adida  en  la versi\u00f3n 2.1.126 del n\u00facleo para evitar problemas de denegaci\u00f3n de servicio al\n              llamar a opendir(3) sobre una FIFO o dispositivo de cinta, pero no se deber\u00eda  usar  fuera  de  la\n              implementaci\u00f3n de opendir.\n\n       O_DIRECT\n              Trata de minimizar los efectos de la cach\u00e9 de E/S a y desde el fichero.  En general \u00e9sto empeorar\u00e1\n              el rendimiento, pero es \u00fatil en situaciones especiales, como cuando  las  aplicaciones  poseen  su\n              propia  cach\u00e9.   La  E/S  del  fichero  se  realiza  directamente a/desde buffers en el espacio de\n              usuario.  La E/S es s\u00edncrona, es  decir,  cuando  las  llamadas  al  sistema  read(2)  o  write(2)\n              finalizan,  se  garantiza que los datos han sido transferidos.  Los tama\u00f1os de la transferencia, y\n              el alineamiento del buffer de usuario y el desplazamiento del fichero deben  ser  todos  m\u00faltiplos\n              del tama\u00f1o de bloque l\u00f3gico del sistema de ficheros.\n              Esta  bandera est\u00e1 soportada en varios sistemas tipo Unix; el soporte para Linux fue a\u00f1adido en la\n              versi\u00f3n 2.4.10 del n\u00facleo.\n              Una interfaz sem\u00e1nticamente similar para los dispositivos de bloque se describe en raw(8).\n\n       O_ASYNC\n              Genera una se\u00f1al (SIGIO por defecto, pero se puede cambiar mediante fcntl(2)) cuando la entrada  o\n              la salida se hace posible en este descriptor de fichero.  Esta caracter\u00edstica est\u00e1 s\u00f3lo disponible\n              para terminales, pseudo-terminales, y conectores. Vea fcntl(2) para m\u00e1s detalles..\n\n       O_LARGEFILE\n              En sistemas de 32 bits que soportan el `sistema de ficheros grandes'  (Large  Files  System,  LFS)\n              permite abrir ficheros cuyos tama\u00f1os no pueden ser representados en 31 bits.\n\n       Algunos  de estos modificadores opcionales pueden alterarse mediante el empleo de fcntl despu\u00e9s de que el\n       fichero haya sido abierto.\n\n       El argumento modo especifica los permisos a emplear  en  caso  de  que  se  cree  un  nuevo  fichero.  Es\n       modificado  por  la  m\u00e1scara  umask del proceso de la forma habitual: los permisos del fichero creado son\n       (modo & ~umask).  Observe que este modo s\u00f3lo se aplica a futuros accesos del fichero  reci\u00e9n  creado;  la\n       llamada  open  que  crea  un  fichero  de solo-lectura puede devolver tambi\u00e9n un descriptor de fichero de\n       lectura/escritura.\n\n       Se proporcionan las siguientes constantes simb\u00f3licas para modo:\n\n       S_IRWXU\n              00700 el usuario (el propietario del fichero) tiene permisos de lectura, escritura y ejecuci\u00f3n\n\n       S_IRUSR (S_IREAD)\n              00400 el usuario tiene permiso de lectura\n\n       S_IWUSR (S_IWRITE)\n              00200 el usuario tiene permiso de escritura\n\n       S_IXUSR (S_IEXEC)\n              00100 el usuario tiene permiso de ejecuci\u00f3n\n\n       S_IRWXG\n              00070 el grupo tiene permiso de lectura, escritura y ejecuci\u00f3n\n\n       S_IRGRP\n              00040 el grupo tiene permiso de lectura\n\n       S_IWGRP\n              00020 el grupo tiene permiso de escritura\n\n       S_IXGRP\n              00010 el grupo tiene permiso de ejecuci\u00f3n\n\n       S_IRWXO\n              00007 los otros tienen permiso de lectura, escritura y ejecuci\u00f3n\n\n       S_IROTH\n              00004 los otros tienen permiso de lectura\n\n       S_IWOTH\n              00002 los otros tienen permiso de escritura\n\n       S_IXOTH\n              00001 los otros tienen permiso de ejecuci\u00f3n\n\n       El argumento modo debe especificarse cuando O_CREAT est\u00e1 en flags, y si no est\u00e1, no es tenido en cuenta.\n\n       creat equivale a open con flags igual a O_CREAT|O_WRONLY|O_TRUNC.\n\nVALOR DEVUELTO\n       open y creat devuelven el nuevo descriptor de fichero, o -1 si ha ocurrido un error (en cuyo caso, se  da\n       un  valor  apropiado  a  errno).   Observe que open pueden abrir ficheros especiales de dispositivo, pero\n       creat no puede crearlos; emplee mknod(2) en su lugar.\n\n       En sistemas de ficheros NFS con asociaci\u00f3n de UIDs habilitada,  open  puede  devolver  un  descriptor  de\n       fichero  pero  p.  ej.  llamadas  a  read(2) pueden denegarse con el error EACCES.  Esto es as\u00ed porque el\n       cliente hace el open comprobando los permisos, pero la asociaci\u00f3n de UID la hace el  servidor  sobre  las\n       peticiones de lectura y escritura.\n\n       Si  el  fichero es reci\u00e9n creado, sus campos atime, ctime, mtime se rellenan con la hora actual, al igual\n       que los campos ctime y mtime del directorio padre.  En otro caso, si el fichero es modificado a causa  de\n       la bandera O_TRUNC, sus campos ctime y mtime se rellenan con la hora actual.\n\n", "ERRORES": "       EEXIST camino ya existe y se usaron O_CREAT y O_EXCL.\n\n       EISDIR camino  se  refiere  a  un  directorio  y el acceso pedido implicaba escribir (esto es, O_WRONLY o\n              O_RDWR estaban activos).\n\n       EACCES El acceso pedido al fichero no es permitido, o uno de los directorios en camino no  tiene  permiso\n              de  b\u00fasqueda  o  paso  (ejecuci\u00f3n),  o el fichero todav\u00eda no existe y el directorio padre no tiene\n              permiso de escritura.\n\n       ENAMETOOLONG\n              camino era demasiado largo.\n\n       ENOENT O_CREAT no est\u00e1 activo y el fichero especificado no existe.  O bien,  un componente directorio  en\n              camino no existe o es un enlace simb\u00f3lico colgante (que apunta a un fichero inexistente).\n\n       ENOTDIR\n              Un  componente  de  camino  empleado  como  un  directorio  no es, de hecho, un directorio o se ha\n              especificado la opci\u00f3n O_DIRECTORY y pathname no es un directorio.\n\n       ENXIO  Se ha seleccionado O_NONBLOCK | O_WRONLY, el fichero indicado es una FIFO y ning\u00fan  proceso  tiene\n              el  fichero  abierto para lectura.  O el fichero es un fichero especial de dispositivo y no existe\n              el dispositivo correspondiente.\n\n       ENODEV pathname  se  refiere  a  un  fichero  especial  de  dispositivo  y  no  existe   el   dispositivo\n              correspondiente.  (\u00c9ste  es  un  fallo  del n\u00facleo de Linux. En esta situaci\u00f3n se deber\u00eda devolver\n              ENXIO.)\n\n       EROFS  camino se refiere a un fichero de un sistema de ficheros de s\u00f3lo lectura y se ha pedido un  acceso\n              de escritura.\n\n       ETXTBSY\n              camino  se refiere a una imagen ejecutable que se est\u00e1 ejecutando ahora mismo y se pidi\u00f3 un acceso\n              de escritura.\n\n       EFAULT camino apunta afuera de su espacio de direcciones accesible.\n\n       ELOOP  Se han encontrado demasiados enl\u00e1ces simb\u00f3licos al resolver camino, o se ha especificado la opci\u00f3n\n              O_NOFOLLOW pero pathname no es un enlace simb\u00f3lico.\n\n       ENOSPC camino  iba  a  ser  creado pero el dispositivo que lo habr\u00eda de contener no tiene espacio para el\n              nuevo fichero.\n\n       ENOMEM No hay disponible bastante memoria del n\u00facleo.\n\n       EMFILE El proceso ya tiene abiertos todos los ficheros que puede.\n\n       ENFILE Se ha alcanzado el l\u00edmite del n\u00famero total de ficheros abiertos en el sistema.\n\nCONFORME A\n       SVr4, SVID, POSIX, X/OPEN, BSD 4.3 Las banderas O_NOFOLLOW y O_DIRECTORY son espec\u00edficas de Linux.   Para\n       obtener sus definiciones es necesario definir la macro _GNU_SOURCE.\n\n", "RESTRICCIONES": "       Hay  muchas  impropiedades en el protocolo subyacente a NFS, afectando entre otros a O_SYNC y a O_NDELAY.\n       POSIX proporciona tres variantes diferentes de E/S s\u00edncrona,  correspondientes  a  las  opciones  O_SYNC,\n       O_DSYNC y O_RSYNC.  Actualmente (2.1.130) todas ellas son sin\u00f3nimas en Linux.\n\nV\u00c9ASE TAMBI\u00c9N\n       read(2),  write(2),  fcntl(2),  close(2),  link(2),  mknod(2),  mount(2),  stat(2),  umask(2), unlink(2),\n       socket(2), fopen(3), fifo(4)\n\nLinux                                             3 junio 1999                                           OPEN(2)\n"},{"NOMBRE": "       create_module - crea una entrada para un m\u00f3dulo cargable\n\n", "SINOPSIS": "       #include <linux/module.h>\n\n       caddr_t create_module(const char *nombre, size_t tam);\n\n", "DESCRIPCION": "       create_module  intenta  crear  una  entrada  de  m\u00f3dulo  cargable  y reserva la memoria del n\u00facleo que se\n       necesitar\u00e1 para alojar el m\u00f3dulo. Esta llamada al sistema s\u00f3lo est\u00e1 abierta al superusuario.\n\nVALOR DEVUELTO\n       En caso de \u00e9xito, devuelve la direcci\u00f3n del n\u00facleo en la que residir\u00e1 el m\u00f3dulo.  En  caso  de  error  se\n       devuelve -1 y errno toma un valor apropiado.\n\n", "ERRORES": "       EPERM  El usuario no es el superusuario.\n\n       EEXIST Ya existe un m\u00f3dulo con ese nombre.\n\n       EINVAL El tama\u00f1o pedido es demasiado peque\u00f1o incluso para la informaci\u00f3n de la cabecera del m\u00f3dulo.\n\n       ENOMEM El n\u00facleo no pudo reservar un bloque contiguo de memoria lo suficientemente grande para el m\u00f3dulo.\n\n       EFAULT nombre est\u00e1 afuera del espacio de direcciones accesible por el programa.\n\nV\u00c9ASE TAMBI\u00c9N\n       init_module(2), delete_module(2), query_module(2).\n\nLinux                                           26 Diciembre 1996                               CREATE_MODULE(2)\n"},{"NOMBRE": "       delete_module - borra una entrada de m\u00f3dulo cargable\n\n", "SINOPSIS": "       #include <linux/module.h>\n\n       int delete_module(const char *nombre);\n\n", "DESCRIPCION": "       delete_module  intenta  quitar  una  entrada de m\u00f3dulo cargable que no est\u00e1 en uso. Si nombre es NULL, se\n       quitan todos los m\u00f3dulos marcados como auto-descargables que no est\u00e9n en uso.  Esta  llamada  al  sistema\n       s\u00f3lo est\u00e1 abierta al s\u00faper-usuario.\n\nVALOR DEVUELTO\n       En  caso  de  \u00e9xito,  devuelve  la direcci\u00f3n del n\u00facleo en la que residir\u00e1 el m\u00f3dulo. En caso de error se\n       devuelve -1 y errno toma un valor apropiado.\n\n", "ERRORES": "       EPERM  El usuario no es el s\u00faper-usuario.\n\n       ENOENT No existe ning\u00fan m\u00f3dulo con ese nombre.\n\n       EINVAL nombre era una cadena vac\u00eda.\n\n       EBUSY  El m\u00f3dulo est\u00e1 en uso.\n\n       EFAULT nombre est\u00e1 afuera del espacio de direcciones accesible del programa.\n\nV\u00c9ASE TAMBI\u00c9N\n       create_module(2), init_module(2), query_module(2).\n\nLinux                                           26 Diciembre 1996                               DELETE_MODULE(2)\n"},{"NOMBRE": "       dup, dup2 - duplica un descriptor de fichero\n\n", "SINOPSIS": "       #include <unistd.h>\n\n       int dup(int oldfd);\n       int dup2(int oldfd, int newfd);\n\n", "DESCRIPCION": "       dup y dup2 crean una copia del descriptor de fichero oldfd.\n\n       Despu\u00e9s  de  una  llamada  a  dup  o  dup2  con  \u00e9xito,  los  descriptores  antiguo y nuevo pueden usarse\n       indiferentemente. Comparten candados (locks), indicadores de posici\u00f3n de fichero y banderas (flags);  por\n       ejemplo,  si  la posici\u00f3n del fichero se modifica usando lseek en uno de los descriptores, la posici\u00f3n en\n       el otro tambi\u00e9n cambia.\n\n       Sin embargo los descriptores no comparten la bandera close-on-exec, (cerrar-al-ejecutar).\n\n       dup usa el descriptor libre con menor numeraci\u00f3n posible como nuevo descriptor.\n\n       dup2 hace que newfd sea la copia de oldfd, cerrando primero newfd si es necesario.\n\nVALOR DEVUELTO\n       dup y dup2 devuelven el valor del nuevo descriptor, \u00f3 -1 si ocurre alg\u00fan error, en cuyo caso  errno  toma\n       un valor apropiado.\n\n", "ERRORES": "       EBADF  oldfd  no  es  un  descriptor  de  fichero  abierto,  o  newfd est\u00e1 fuera del rango permitido para\n              descriptores de ficheros.\n\n       EMFILE El proceso ya tiene el m\u00e1ximo n\u00famero de descriptores de fichero abiertos y se ha  intentado  abrir\n              uno nuevo.\n\n", "ADVERTENCIA": "       El error devuelto por dup2 es diferente del devuelto por fcntl(..., F_DUPFD,...)  cuando newfd est\u00e1 fuera\n       de rango. En algunos sistemas dup2 a veces devuelve EINVAL como F_DUPFD.\n\n", "FALLOS": "       Si newfd estaba abierto, cualquier error que pudiera haber aparecido en el momento de llamar a close() se\n       pierde. Un programador cauteloso no usar\u00e1 dup2 sin cerrar newfd primero.\n\nCONFORME A\n       SVID,  AT&T, POSIX, X/OPEN, BSD 4.3. SVr4 documenta las condiciones de error adicionales EINTR y ENOLINK.\n       POSIX.1 a\u00f1ade EINTR.\n\nV\u00c9ASE TAMBI\u00c9N\n       fcntl(2), open(2), close(2)\n\nLinux 1.1.46                                      1 julio 1996                                            DUP(2)\n"},{"NOMBRE": "       dup, dup2 - duplica un descriptor de fichero\n\n", "SINOPSIS": "       #include <unistd.h>\n\n       int dup(int oldfd);\n       int dup2(int oldfd, int newfd);\n\n", "DESCRIPCION": "       dup y dup2 crean una copia del descriptor de fichero oldfd.\n\n       Despu\u00e9s  de  una  llamada  a  dup  o  dup2  con  \u00e9xito,  los  descriptores  antiguo y nuevo pueden usarse\n       indiferentemente. Comparten candados (locks), indicadores de posici\u00f3n de fichero y banderas (flags);  por\n       ejemplo,  si  la posici\u00f3n del fichero se modifica usando lseek en uno de los descriptores, la posici\u00f3n en\n       el otro tambi\u00e9n cambia.\n\n       Sin embargo los descriptores no comparten la bandera close-on-exec, (cerrar-al-ejecutar).\n\n       dup usa el descriptor libre con menor numeraci\u00f3n posible como nuevo descriptor.\n\n       dup2 hace que newfd sea la copia de oldfd, cerrando primero newfd si es necesario.\n\nVALOR DEVUELTO\n       dup y dup2 devuelven el valor del nuevo descriptor, \u00f3 -1 si ocurre alg\u00fan error, en cuyo caso  errno  toma\n       un valor apropiado.\n\n", "ERRORES": "       EBADF  oldfd  no  es  un  descriptor  de  fichero  abierto,  o  newfd est\u00e1 fuera del rango permitido para\n              descriptores de ficheros.\n\n       EMFILE El proceso ya tiene el m\u00e1ximo n\u00famero de descriptores de fichero abiertos y se ha  intentado  abrir\n              uno nuevo.\n\n", "ADVERTENCIA": "       El error devuelto por dup2 es diferente del devuelto por fcntl(..., F_DUPFD,...)  cuando newfd est\u00e1 fuera\n       de rango. En algunos sistemas dup2 a veces devuelve EINVAL como F_DUPFD.\n\n", "FALLOS": "       Si newfd estaba abierto, cualquier error que pudiera haber aparecido en el momento de llamar a close() se\n       pierde. Un programador cauteloso no usar\u00e1 dup2 sin cerrar newfd primero.\n\nCONFORME A\n       SVID,  AT&T, POSIX, X/OPEN, BSD 4.3. SVr4 documenta las condiciones de error adicionales EINTR y ENOLINK.\n       POSIX.1 a\u00f1ade EINTR.\n\nV\u00c9ASE TAMBI\u00c9N\n       fcntl(2), open(2), close(2)\n\nLinux 1.1.46                                      1 julio 1996                                            DUP(2)\n"},{"NOMBRE": "       execve - ejecuta un programa\n\n", "SINOPSIS": "       #include <unistd.h>\n\n       int execve (const char *filename, const char *argv [], const char *envp[]);\n\n", "DESCRIPCION": "       execve()  ejecuta  el programa indicado por filename.  filename debe ser bien un binario ejecutable, bien\n       un gui\u00f3n shell (shell script) comenzando con una l\u00ednea de la forma \"#! int\u00e9rprete [arg]\". En  el  segundo\n       caso, el int\u00e9rprete debe ser un nombre de camino v\u00e1lido para un ejecutable que no sea \u00e9l mismo un gui\u00f3n y\n       que ser\u00e1 ejecutado como int\u00e9rprete [arg] filename.\n\n       argv es un array de cadenas de argumentos pasados al nuevo  programa.   envp  es  un  array  de  cadenas,\n       convencionalmente  de la forma clave=valor, que se pasan como entorno al nuevo programa.  Tanto argv como\n       envp deben terminar en un puntero nulo. El vector de argumentos y el entorno pueden ser accedidos por  la\n       funci\u00f3n  \"main\"  del  programa  invocado  cuando  se  define  como  int main(int argc, char *argv[], char\n       *envp[]).\n\n       execve() no regresa en caso de \u00e9xito, y el c\u00f3digo,  datos,  bss  y  la  pila  del  proceso  invocador  se\n       reescriben  con los correspondientes del programa cargado. El programa invocado hereda el PID del proceso\n       invocador y cualquier descriptor de  fichero  abierto  que  no  se  halla  configurado  para  \"cerrar  en\n       ejecuci\u00f3n\"  (close  on  exec).  Las  se\u00f1ales pendientes del proceso invocador se limpian. Cualquier se\u00f1al\n       capturada por el proceso invocador es devuelta a su comportamiento por defecto.  La se\u00f1al SIGCHLD (cuando\n       est\u00e1 puesta a SIG_IGN) puede o no puede ser reiniciada a SIG_DFL.\n\n       Si  el programa actual est\u00e1 bajo inspecci\u00f3n de ptrace, se le enviar\u00e1 una se\u00f1al  SIGTRAP tr\u00e1s la ejecuci\u00f3n\n       exitosa de execve().\n\n       Si el bit \"set-uid\" est\u00e1 activo en el fichero del programa indicado por filename,  se  cambia  el  ID  de\n       usuario  efectivo  del  proceso  invocador  al  del propietario del fichero del programa. De igual forma,\n       cuando el bit \"set-gid\" del fichero del programa est\u00e1 activo, se cambia el  ID  del  grupo  efectivo  del\n       proceso invocador al del grupo del fichero del programa.\n\n       Si  el  ejecutable  es  un  ejecutable  binario  a.out  enlazado  din\u00e1micamente  que  contiene \"stubs\" de\n       bibliotecas compartidas, se llama al enlazador din\u00e1mico de Linux, ld.so(8), al comienzo de  la  ejecuci\u00f3n\n       para traer al n\u00facleo las bibliotecas compartidas necesarias y enlazar el ejecutable con ellas.\n\n       Si  el  ejecutable  es  un ejecutable ELF enlazado din\u00e1micamente, se usa el int\u00e9rprete especificado en el\n       segmento PT_INTERP para cargar las bibliotecas compartidas  necesarias.  Este  int\u00e9rprete  es  usualmente\n       /lib/ld-linux.so.1  para los binarios enlazados con la versi\u00f3n 5 de la libc de Linux o /lib/ld-linux.so.2\n       para los binarios enlazados con la versi\u00f3n 2 de la libc de GNU.\n\nVALOR DEVUELTO\n       En caso de \u00e9xito execve() no regresa mientras que en caso de error el  valor  devuelto  es  -1,  y  a  la\n       variable errno se le asigna un valor apropiado.\n\n", "ERRORES": "       EACCES El fichero o el int\u00e9rprete de guiones no es un fichero regular.\n\n       EACCES Se  ha  denegado  el  permiso  de  ejecuci\u00f3n  para el fichero o para el int\u00e9rprete de guiones o el\n              int\u00e9rprete ELF.\n\n       EACCES El sistema de ficheros est\u00e1 montado con la opci\u00f3n noexec.\n\n       EPERM  El sistema de ficheros est\u00e1 montado con la opci\u00f3n nosuid, el usuario no es el  superusuario  y  el\n              fichero tiene activo el bit SUID o SGID.\n\n       EPERM  El  proceso est\u00e1 siendo ejecutado paso a paso, el usuario no es el superusuario y el fichero tiene\n              activo el bit SUID o SGID.\n\n       E2BIG  La lista de argumentos es demasiado grande.\n\n       ENOEXEC\n              El ejecutable no se encuentra en un formato reconocible, es para  una  arquitectura  incorrecta  o\n              tiene alg\u00fan otro error de formato que impide su ejecuci\u00f3n.\n\n       EFAULT filename apunta fuera de su espacio de direcciones accesible.\n\n       ENAMETOOLONG\n              filename es demasiado largo.\n\n       ENOENT El  fichero filename no existe o no existe un int\u00e9rprete de guiones o un int\u00e9rprete ELF, o no pudo\n              encontrarse una biblioteca compartida necesitada por el fichero o el int\u00e9rprete.\n\n       ENOMEM No hay suficiente memoria disponible en el n\u00facleo.\n\n       ENOTDIR\n              Un componente del camino filename o del camino del int\u00e9rprete de guiones o del int\u00e9rprete  ELF  no\n              es un directorio.\n\n       EACCES Se  ha  denegado el permiso de b\u00fasqueda en uno de los componentes del camino filename o del camino\n              del int\u00e9rprete de guiones.\n\n       ELOOP  Se han econtrado demasiados enlaces simb\u00f3licos al resolver filename, el nombre del  int\u00e9rprete  de\n              guiones o el nombre del int\u00e9rprete ELF.\n\n       ETXTBSY\n              Uno o m\u00e1s procesos han abierto el ejecutable para escritura.\n\n       EIO    Se ha producido un error de E/S.\n\n       ENFILE Se ha alcanzado el l\u00edmite del n\u00famero total de ficheros abiertos en el sistema.\n\n       EMFILE El proceso ya tiene abiertos el n\u00famero m\u00e1ximo de fichero.\n\n       EINVAL El ejecutable ELF tiene m\u00e1s de un segmento PT_INTERP (es decir, ha intentado especificar m\u00e1s de un\n              int\u00e9rprete).\n\n       EISDIR El int\u00e9rprete ELF es un directorio.\n\n       ELIBBAD\n              El int\u00e9rprete ELF no est\u00e1 en un formato reconocible.\n\nCONFORME A\n       SVr4, SVID, X/OPEN y BSD 4.3.  POSIX no documenta el significado  de  #!  pero,  en  cualquier  caso,  es\n       compatible.  SVr4  documenta  las  condiciones  de  error  adicionales  EAGAIN, EINTR, ELIBACC, ENOLINK y\n       EMULTIHOP; POSIX no documenta las condiciones de  error  ETXTBSY,  EPERM,  EFAULT,  ELOOP,  EIO,  ENFILE,\n       EMFILE, EINVAL, EISDIR ni ELIBBAD.\n\n", "OBSERVACIONES": "       Procesos SUID y SGID no pueden ser inspeccionados con ptrace().\n\n       Linux ignora los bits SUID y SGID en los guiones shell.\n\n       El  resultado  de  montar un sistema de ficheros con la opci\u00f3n nosuid var\u00eda entre las distintas versiones\n       del n\u00facleo Linux: algunas se negar\u00e1n a ejecutar ejecutables con los bits SUID/SGID  cuando  \u00e9sto  pudiera\n       dar  al  usuario  poderes  que  no  ten\u00eda antes (devolviendo EPERM), otras simplemente ignorar\u00e1n los bits\n       SUID/SGID y los ejecutar\u00e1n sin m\u00e1s.\n\n       La longitud m\u00e1xima de l\u00ednea en un ejecutable del tipo #! es de 127 caracteres en  la  primera  l\u00ednea  del\n       fichero.\n\nV\u00c9ASE TAMBI\u00c9N\n       chmod(2), fork(2), execl(3), environ(5), ld.so(8)\n\nLinux 2.0.30                                    3 septiembre 1997                                      EXECVE(2)\n"},{"NOMBRE": "       _exit, _Exit - Produce la terminaci\u00f3n del proceso actual\n\n", "SINOPSIS": "       #include <unistd.h>\n\n       void _exit(int status);\n\n       #include <stdlib.h>\n\n       void _Exit(int status);\n\n", "DESCRIPCION": "       La  funci\u00f3n _exit termina \"inmediatamente\" la ejecuci\u00f3n del proceso invocador.  Todos los descriptores de\n       ficheros abiertos que pertenezcan al proceso se cierran; todos los procesos hijos son  heredados  por  el\n       proceso 1, init, y al proceso padre se le env\u00eda la se\u00f1al SIGCHLD.\n\n       El  valor  status se le devuelve al proceso padre como estado de terminaci\u00f3n del proceso, y se puede leer\n       mediante una de las funciones de la familia de wait.\n\n       La funci\u00f3n _Exit es equivalente a _exit.\n\nVALOR DEVUELTO\n       Estas funciones nunca regresan.\n\nCONFORME A\n       SVr4, SVID, POSIX, X/OPEN, BSD 4.3.  La funci\u00f3n _Exit() fue introducida por C99.\n\n", "OBSERVACIONES": "       Para una discusi\u00f3n sobre los efectos de una llamada exit, la transmisi\u00f3n de estados de  salida,  procesos\n       zombie, se\u00f1ales enviadas, etc., vea exit(3).\n\n       La  funci\u00f3n  _exit  hace  lo  mismo que exit(), pero no llama a ninguna funci\u00f3n registrada con la funci\u00f3n\n       atexit del ANSI C, ni a ning\u00fan manejador de se\u00f1ales registrado. Que la funci\u00f3n vac\u00ede los buffers est\u00e1ndar\n       de  E/S  y elimine los ficheros temporales creados con tmpfile(3) depende de la implementaci\u00f3n.  Por otra\n       parte, _exit no  cierra  los  descriptores  de  fichero  abiertos,  y  \u00e9sto  puede  provocar  un  retardo\n       desconocido, a la espera de finalizar cualquier salida pendiente. Si el retardo es no deseado, podr\u00eda ser\n       util llamar a funciones tales como tcflush() antes de llamar a _exit().  Que cualquier  petici\u00f3n  de  E/S\n       pendiente  sea  cancelada, y qu\u00e9 petici\u00f3n de E/S puede ser cancelada en una llamada _exit() depende de la\n       implementaci\u00f3n.\n\nV\u00c9ASE TAMBI\u00c9N\n       fork(2), execve(2), waitpid(2), wait4(2), kill(2), wait(2), exit(3), termios(3)\n\nLinux                                           17 noviembre 2001                                       _EXIT(2)\n"},{"NOMBRE": "       bash,  :,  .,  [,  alias, bg, bind, break, builtin, caller, cd, command, compgen, complete, compopt, con\u2010\n       tinue, declare, dirs, disown, echo, enable, eval, exec, exit, export, false, fc, fg, getopts, hash, help,\n       history,  jobs, kill, let, local, logout, mapfile, popd, printf, pushd, pwd, read, readonly, return, set,\n       shift, shopt, source, suspend, test, times, trap, true, type, typeset,  ulimit,  umask,  unalias,  unset,\n       wait - bash built-in commands, see bash(1)\n\nBASH BUILTIN COMMANDS\n       Unless  otherwise noted, each builtin command documented in this section as accepting options preceded by\n       - accepts -- to signify the end of the options.  The :, true, false, and test/[ builtins  do  not  accept\n       options  and  do  not  treat  --  specially.   The  exit, logout, return, break, continue, let, and shift\n       builtins accept and process arguments beginning with - without requiring --.  Other builtins that  accept\n       arguments  but are not specified as accepting options interpret arguments beginning with - as invalid op\u2010\n       tions and require -- to prevent this interpretation.\n       : [arguments]\n              No effect; the command does nothing beyond expanding arguments and performing any specified  redi\u2010\n              rections.  The return status is zero.\n\n        .  filename [arguments]\n       source filename [arguments]\n              Read  and execute commands from filename in the current shell environment and return the exit sta\u2010\n              tus of the last command executed from filename.  If filename does not contain a  slash,  filenames\n              in  PATH  are  used to find the directory containing filename.  The file searched for in PATH need\n              not be executable.  When bash is not in posix mode, the current directory is searched if  no  file\n              is  found  in PATH.  If the sourcepath option to the shopt builtin command is turned off, the PATH\n              is not searched.  If any arguments are supplied, they become the positional parameters when  file\u2010\n              name  is  executed.   Otherwise  the positional parameters are unchanged.  If the -T option is en\u2010\n              abled, source inherits any trap on DEBUG; if it is not, any DEBUG trap string  is  saved  and  re\u2010\n              stored  around  the  call to source, and source unsets the DEBUG trap while it executes.  If -T is\n              not set, and the sourced file changes the DEBUG trap, the new value is retained when  source  com\u2010\n              pletes.   The  return  status  is the status of the last command exited within the script (0 if no\n              commands are executed), and false if filename is not found or cannot be read.\n\n       alias [-p] [name[=value] ...]\n              Alias with no arguments or with the -p option prints  the  list  of  aliases  in  the  form  alias\n              name=value  on  standard  output.   When arguments are supplied, an alias is defined for each name\n              whose value is given.  A trailing space in value causes the next word to be checked for alias sub\u2010\n              stitution  when  the  alias is expanded.  For each name in the argument list for which no value is\n              supplied, the name and value of the alias is printed.  Alias returns true unless a name  is  given\n              for which no alias has been defined.\n\n       bg [jobspec ...]\n              Resume each suspended job jobspec in the background, as if it had been started with &.  If jobspec\n              is not present, the shell's notion of the current job is used.  bg jobspec returns  0  unless  run\n              when  job control is disabled or, when run with job control enabled, any specified jobspec was not\n              found or was started without job control.\n\n       bind [-m keymap] [-lpsvPSVX]\n       bind [-m keymap] [-q function] [-u function] [-r keyseq]\n       bind [-m keymap] -f filename\n       bind [-m keymap] -x keyseq:shell-command\n       bind [-m keymap] keyseq:function-name\n       bind [-m keymap] keyseq:readline-command\n              Display current readline key and function bindings, bind a key sequence to a readline function  or\n              macro,  or  set  a readline variable.  Each non-option argument is a command as it would appear in\n              .inputrc, but each binding or command must be passed as a separate  argument;  e.g.,  '\"\\C-x\\C-r\":\n              re-read-init-file'.  Options, if supplied, have the following meanings:\n              -m keymap\n                     Use  keymap  as  the  keymap  to be affected by the subsequent bindings.  Acceptable keymap\n                     names are emacs, emacs-standard,  emacs-meta,  emacs-ctlx,  vi,  vi-move,  vi-command,  and\n                     vi-insert.  vi is equivalent to vi-command (vi-move is also a synonym); emacs is equivalent\n                     to emacs-standard.\n              -l     List the names of all readline functions.\n              -p     Display readline function names and bindings in such a way that they can be re-read.\n              -P     List current readline function names and bindings.\n              -s     Display readline key sequences bound to macros and the strings they output in  such  a  way\n                     that they can be re-read.\n              -S     Display readline key sequences bound to macros and the strings they output.\n              -v     Display readline variable names and values in such a way that they can be re-read.\n              -V     List current readline variable names and values.\n              -f filename\n                     Read key bindings from filename.\n              -q function\n                     Query about which keys invoke the named function.\n              -u function\n                     Unbind all keys bound to the named function.\n              -r keyseq\n                     Remove any current binding for keyseq.\n              -x keyseq:shell-command\n                     Cause  shell-command to be executed whenever keyseq is entered.  When shell-command is exe\u2010\n                     cuted, the shell sets the READLINE_LINE variable to the contents of the readline line  buf\u2010\n                     fer  and  the READLINE_POINT and READLINE_MARK variables to the current location of the in\u2010\n                     sertion point and the saved insertion point (the mark), respectively.  If the executed com\u2010\n                     mand changes the value of any of READLINE_LINE, READLINE_POINT, or READLINE_MARK, those new\n                     values will be reflected in the editing state.\n              -X     List all key sequences bound to shell commands and the associated commands in a format that\n                     can be reused as input.\n\n              The return value is 0 unless an unrecognized option is given or an error occurred.\n\n       break [n]\n              Exit  from within a for, while, until, or select loop.  If n is specified, break n levels.  n must\n              be \u2265 1.  If n is greater than the number of enclosing loops, all enclosing loops are exited.   The\n              return value is 0 unless n is not greater than or equal to 1.\n\n       builtin shell-builtin [arguments]\n              Execute  the  specified  shell builtin, passing it arguments, and return its exit status.  This is\n              useful when defining a function whose name is the same as a shell builtin, retaining the function\u2010\n              ality of the builtin within the function.  The cd builtin is commonly redefined this way.  The re\u2010\n              turn status is false if shell-builtin is not a shell builtin command.\n\n       caller [expr]\n              Returns the context of any active subroutine call (a shell function or a script executed with  the\n              .  or  source builtins).  Without expr, caller displays the line number and source filename of the\n              current subroutine call.  If a non-negative integer is supplied as expr, caller displays the  line\n              number,  subroutine  name, and source file corresponding to that position in the current execution\n              call stack.  This extra information may be used, for example, to print a stack trace.  The current\n              frame  is  frame  0.  The return value is 0 unless the shell is not executing a subroutine call or\n              expr does not correspond to a valid position in the call stack.\n\n       cd [-L|[-P [-e]] [-@]] [dir]\n              Change the current directory to dir.  if dir is not supplied, the value of the HOME shell variable\n              is  the default.  Any additional arguments following dir are ignored.  The variable CDPATH defines\n              the search path for the directory containing dir: each directory name in CDPATH  is  searched  for\n              dir.   Alternative  directory names in CDPATH are separated by a colon (:).  A null directory name\n              in CDPATH is the same as the current directory, i.e., ``.''.  If dir begins with a slash (/), then\n              CDPATH  is not used.  The -P option causes cd to use the physical directory structure by resolving\n              symbolic links while traversing dir and before processing instances of .. in dir (see also the  -P\n              option  to the set builtin command); the -L option forces symbolic links to be followed by resolv\u2010\n              ing the link after processing instances of .. in dir.  If .. appears in dir, it  is  processed  by\n              removing the immediately previous pathname component from dir, back to a slash or the beginning of\n              dir.  If the -e option is supplied with -P, and the current working directory cannot  be  success\u2010\n              fully  determined  after a successful directory change, cd will return an unsuccessful status.  On\n              systems that support it, the -@ option presents the extended attributes associated with a file  as\n              a  directory.   An argument of - is converted to $OLDPWD before the directory change is attempted.\n              If a non-empty directory name from CDPATH is used, or if - is the first argument, and  the  direc\u2010\n              tory  change  is  successful, the absolute pathname of the new working directory is written to the\n              standard output.  The return value is true if the directory was successfully changed; false other\u2010\n              wise.\n\n       command [-pVv] command [arg ...]\n              Run command with args suppressing the normal shell function lookup.  Only builtin commands or com\u2010\n              mands found in the PATH are executed.  If the -p option is given, the search for command  is  per\u2010\n              formed  using  a  default value for PATH that is guaranteed to find all of the standard utilities.\n              If either the -V or -v option is supplied, a description of command is  printed.   The  -v  option\n              causes  a  single  word indicating the command or filename used to invoke command to be displayed;\n              the -V option produces a more verbose description.  If the -V or -v option is supplied,  the  exit\n              status  is  0  if command was found, and 1 if not.  If neither option is supplied and an error oc\u2010\n              curred or command cannot be found, the exit status is 127.  Otherwise, the exit status of the com\u2010\n              mand builtin is the exit status of command.\n\n       compgen [option] [word]\n              Generate  possible  completion  matches for word according to the options, which may be any option\n              accepted by the complete builtin with the exception of -p and -r, and write  the  matches  to  the\n              standard output.  When using the -F or -C options, the various shell variables set by the program\u2010\n              mable completion facilities, while available, will not have useful values.\n\n              The matches will be generated in the same way as if the programmable completion code had generated\n              them  directly  from  a  completion specification with the same flags.  If word is specified, only\n              those completions matching word will be displayed.\n\n              The return value is true unless an invalid option is supplied, or no matches were generated.\n\n       complete [-abcdefgjksuv] [-o comp-option] [-DEI] [-A action] [-G globpat] [-W wordlist]\n              [-F function] [-C command] [-X filterpat] [-P prefix] [-S suffix] name [name ...]\n       complete -pr [-DEI] [name ...]\n              Specify how arguments to each name should be completed.  If the -p option is supplied,  or  if  no\n              options  are supplied, existing completion specifications are printed in a way that allows them to\n              be reused as input.  The -r option removes a completion specification for each  name,  or,  if  no\n              names  are  supplied,  all completion specifications.  The -D option indicates that other supplied\n              options and actions should apply to the ``default'' command completion; that  is,  completion  at\u2010\n              tempted on a command for which no completion has previously been defined.  The -E option indicates\n              that other supplied options and actions should apply to ``empty''  command  completion;  that  is,\n              completion attempted on a blank line.  The -I option indicates that other supplied options and ac\u2010\n              tions should apply to completion on the initial non-assignment word on the line, or after  a  com\u2010\n              mand  delimiter such as ; or |, which is usually command name completion.  If multiple options are\n              supplied, the -D option takes precedence over -E, and both take precedence over -I.  If any of -D,\n              -E,  or -I are supplied, any other name arguments are ignored; these completions only apply to the\n              case specified by the option.\n\n              The process of applying these completion specifications when word completion is attempted  is  de\u2010\n              scribed above under Programmable Completion.\n\n              Other options, if specified, have the following meanings.  The arguments to the -G, -W, and -X op\u2010\n              tions (and, if necessary, the -P and -S options) should be quoted to protect them  from  expansion\n              before the complete builtin is invoked.\n              -o comp-option\n                      The comp-option controls several aspects of the compspec's behavior beyond the simple gen\u2010\n                      eration of completions.  comp-option may be one of:\n                      bashdefault\n                              Perform the rest of the default bash completions  if  the  compspec  generates  no\n                              matches.\n                      default Use readline's default filename completion if the compspec generates no matches.\n                      dirnames\n                              Perform directory name completion if the compspec generates no matches.\n                      filenames\n                              Tell  readline  that the compspec generates filenames, so it can perform any file\u2010\n                              name-specific processing (like adding a slash to directory names, quoting  special\n                              characters, or suppressing trailing spaces).  Intended to be used with shell func\u2010\n                              tions.\n                      noquote Tell readline not to quote the completed words  if  they  are  filenames  (quoting\n                              filenames is the default).\n                      nosort  Tell readline not to sort the list of possible completions alphabetically.\n                      nospace Tell readline not to append a space (the default) to words completed at the end of\n                              the line.\n                      plusdirs\n                              After any matches defined by the compspec are generated, directory name completion\n                              is attempted and any matches are added to the results of the other actions.\n              -A action\n                      The action may be one of the following to generate a list of possible completions:\n                      alias   Alias names.  May also be specified as -a.\n                      arrayvar\n                              Array variable names.\n                      binding Readline key binding names.\n                      builtin Names of shell builtin commands.  May also be specified as -b.\n                      command Command names.  May also be specified as -c.\n                      directory\n                              Directory names.  May also be specified as -d.\n                      disabled\n                              Names of disabled shell builtins.\n                      enabled Names of enabled shell builtins.\n                      export  Names of exported shell variables.  May also be specified as -e.\n                      file    File names.  May also be specified as -f.\n                      function\n                              Names of shell functions.\n                      group   Group names.  May also be specified as -g.\n                      helptopic\n                              Help topics as accepted by the help builtin.\n                      hostname\n                              Hostnames, as taken from the file specified by the HOSTFILE shell variable.\n                      job     Job names, if job control is active.  May also be specified as -j.\n                      keyword Shell reserved words.  May also be specified as -k.\n                      running Names of running jobs, if job control is active.\n                      service Service names.  May also be specified as -s.\n                      setopt  Valid arguments for the -o option to the set builtin.\n                      shopt   Shell option names as accepted by the shopt builtin.\n                      signal  Signal names.\n                      stopped Names of stopped jobs, if job control is active.\n                      user    User names.  May also be specified as -u.\n                      variable\n                              Names of all shell variables.  May also be specified as -v.\n              -C command\n                      command is executed in a subshell environment, and its output is used as the possible com\u2010\n                      pletions.\n              -F function\n                      The shell function function is executed in the current shell environment.  When the  func\u2010\n                      tion  is  executed, the first argument ($1) is the name of the command whose arguments are\n                      being completed, the second argument ($2) is the word being completed, and the third argu\u2010\n                      ment  ($3)  is  the  word  preceding the word being completed on the current command line.\n                      When it finishes, the possible completions are retrieved from the value of  the  COMPREPLY\n                      array variable.\n              -G globpat\n                      The pathname expansion pattern globpat is expanded to generate the possible completions.\n              -P prefix\n                      prefix  is added at the beginning of each possible completion after all other options have\n                      been applied.\n              -S suffix\n                      suffix is appended to each possible completion after all other options have been applied.\n              -W wordlist\n                      The wordlist is split using the characters in the IFS special variable as delimiters,  and\n                      each  resultant  word  is expanded.  Shell quoting is honored within wordlist, in order to\n                      provide a mechanism for the words to contain shell metacharacters  or  characters  in  the\n                      value  of IFS.  The possible completions are the members of the resultant list which match\n                      the word being completed.\n              -X filterpat\n                      filterpat is a pattern as used for pathname expansion.  It is applied to the list of  pos\u2010\n                      sible  completions  generated  by the preceding options and arguments, and each completion\n                      matching filterpat is removed from the list.  A leading ! in filterpat  negates  the  pat\u2010\n                      tern; in this case, any completion not matching filterpat is removed.\n\n              The  return  value  is true unless an invalid option is supplied, an option other than -p or -r is\n              supplied without a name argument, an attempt is made to remove a completion  specification  for  a\n              name for which no specification exists, or an error occurs adding a completion specification.\n\n       compopt [-o option] [-DEI] [+o option] [name]\n              Modify  completion  options for each name according to the options, or for the currently-executing\n              completion if no names are supplied.  If no options are given, display the completion options  for\n              each  name  or the current completion.  The possible values of option are those valid for the com\u2010\n              plete builtin described above.  The -D option indicates that other supplied options  should  apply\n              to  the  ``default''  command  completion; that is, completion attempted on a command for which no\n              completion has previously been defined.  The -E  option  indicates  that  other  supplied  options\n              should  apply to ``empty'' command completion; that is, completion attempted on a blank line.  The\n              -I option indicates that other supplied options should apply to completion on the initial  non-as\u2010\n              signment  word  on the line, or after a command delimiter such as ; or |, which is usually command\n              name completion.\n\n              The return value is true unless an invalid option is supplied, an attempt is made  to  modify  the\n              options for a name for which no completion specification exists, or an output error occurs.\n\n       continue [n]\n              Resume  the next iteration of the enclosing for, while, until, or select loop.  If n is specified,\n              resume at the nth enclosing loop.  n must be \u2265 1.  If n is greater than the  number  of  enclosing\n              loops,  the last enclosing loop (the ``top-level'' loop) is resumed.  The return value is 0 unless\n              n is not greater than or equal to 1.\n\n       declare [-aAfFgiIlnrtux] [-p] [name[=value] ...]\n       typeset [-aAfFgiIlnrtux] [-p] [name[=value] ...]\n              Declare variables and/or give them attributes.  If no names are given then display the  values  of\n              variables.   The  -p  option will display the attributes and values of each name.  When -p is used\n              with name arguments, additional options, other than -f and -F, are ignored.  When -p  is  supplied\n              without  name arguments, it will display the attributes and values of all variables having the at\u2010\n              tributes specified by the additional options.  If no other options are supplied with  -p,  declare\n              will  display  the  attributes and values of all shell variables.  The -f option will restrict the\n              display to shell functions.  The -F option inhibits the display of function definitions; only  the\n              function  name  and  attributes are printed.  If the extdebug shell option is enabled using shopt,\n              the source file name and line number where each name is defined are displayed as well.  The -F op\u2010\n              tion  implies  -f.   The -g option forces variables to be created or modified at the global scope,\n              even when declare is executed in a shell function.  It is ignored in all other cases.  The -I  op\u2010\n              tion  causes local variables to inherit the attributes (except the nameref attribute) and value of\n              any existing variable with the same name at a surrounding scope.  If there is  no  existing  vari\u2010\n              able, the local variable is initially unset.  The following options can be used to restrict output\n              to variables with the specified attribute or to give variables attributes:\n              -a     Each name is an indexed array variable (see Arrays above).\n              -A     Each name is an associative array variable (see Arrays above).\n              -f     Use function names only.\n              -i     The variable is treated as an integer; arithmetic  evaluation  (see  ARITHMETIC  EVALUATION\n                     above) is performed when the variable is assigned a value.\n              -l     When  the  variable  is assigned a value, all upper-case characters are converted to lower-\n                     case.  The upper-case attribute is disabled.\n              -n     Give each name the nameref attribute, making it a name reference to another variable.  That\n                     other variable is defined by the value of name.  All references, assignments, and attribute\n                     modifications to name, except those using or changing the -n  attribute  itself,  are  per\u2010\n                     formed on the variable referenced by name's value.  The nameref attribute cannot be applied\n                     to array variables.\n              -r     Make names readonly.  These names cannot then be assigned values by  subsequent  assignment\n                     statements or unset.\n              -t     Give  each  name  the trace attribute.  Traced functions inherit the DEBUG and RETURN traps\n                     from the calling shell.  The trace attribute has no special meaning for variables.\n              -u     When the variable is assigned a value, all lower-case characters are  converted  to  upper-\n                     case.  The lower-case attribute is disabled.\n              -x     Mark names for export to subsequent commands via the environment.\n\n              Using  `+'  instead of `-' turns off the attribute instead, with the exceptions that +a and +A may\n              not be used to destroy array variables and +r will not remove the readonly attribute.   When  used\n              in  a function, declare and typeset make each name local, as with the local command, unless the -g\n              option is supplied.  If a variable name is followed by =value, the value of the variable is set to\n              value.   When  using  -a or -A and the compound assignment syntax to create array variables, addi\u2010\n              tional attributes do not take effect until subsequent assignments.  The return value is  0  unless\n              an invalid option is encountered, an attempt is made to define a function using ``-f foo=bar'', an\n              attempt is made to assign a value to a readonly variable, an attempt is made to assign a value  to\n              an  array  variable  without  using  the compound assignment syntax (see Arrays above), one of the\n              names is not a valid shell variable name, an attempt is made to turn off  readonly  status  for  a\n              readonly  variable,  an  attempt is made to turn off array status for an array variable, or an at\u2010\n              tempt is made to display a non-existent function with -f.\n\n       dirs [-clpv] [+n] [-n]\n              Without options, displays the list of currently remembered directories.  The default display is on\n              a  single  line  with directory names separated by spaces.  Directories are added to the list with\n              the pushd command; the popd command removes entries from the list.  The current directory  is  al\u2010\n              ways the first directory in the stack.\n              -c     Clears the directory stack by deleting all of the entries.\n              -l     Produces  a listing using full pathnames; the default listing format uses a tilde to denote\n                     the home directory.\n              -p     Print the directory stack with one entry per line.\n              -v     Print the directory stack with one entry per line, prefixing each entry with its  index  in\n                     the stack.\n              +n     Displays  the nth entry counting from the left of the list shown by dirs when invoked with\u2010\n                     out options, starting with zero.\n              -n     Displays the nth entry counting from the right of the list shown by dirs when invoked with\u2010\n                     out options, starting with zero.\n\n              The  return value is 0 unless an invalid option is supplied or n indexes beyond the end of the di\u2010\n              rectory stack.\n\n       disown [-ar] [-h] [jobspec ... | pid ... ]\n              Without options, remove each jobspec from the table of active jobs.  If jobspec  is  not  present,\n              and  neither  the  -a nor the -r option is supplied, the current job is used.  If the -h option is\n              given, each jobspec is not removed from the table, but is marked so that SIGHUP is not sent to the\n              job  if  the shell receives a SIGHUP.  If no jobspec is supplied, the -a option means to remove or\n              mark all jobs; the -r option without a jobspec argument restricts operation to running jobs.   The\n              return value is 0 unless a jobspec does not specify a valid job.\n\n       echo [-neE] [arg ...]\n              Output  the  args,  separated  by  spaces, followed by a newline.  The return status is 0 unless a\n              write error occurs.  If -n is specified, the trailing newline is suppressed.  If the -e option  is\n              given,  interpretation  of  the  following backslash-escaped characters is enabled.  The -E option\n              disables the interpretation of these escape characters, even on systems where they are interpreted\n              by  default.   The  xpg_echo shell option may be used to dynamically determine whether or not echo\n              expands these escape characters by default.  echo does not interpret -- to mean  the  end  of  op\u2010\n              tions.  echo interprets the following escape sequences:\n              \\a     alert (bell)\n              \\b     backspace\n              \\c     suppress further output\n              \\e\n              \\E     an escape character\n              \\f     form feed\n              \\n     new line\n              \\r     carriage return\n              \\t     horizontal tab\n              \\v     vertical tab\n              \\\\     backslash\n              \\0nnn  the eight-bit character whose value is the octal value nnn (zero to three octal digits)\n              \\xHH   the eight-bit character whose value is the hexadecimal value HH (one or two hex digits)\n              \\uHHHH the  Unicode  (ISO/IEC  10646)  character whose value is the hexadecimal value HHHH (one to\n                     four hex digits)\n              \\UHHHHHHHH\n                     the Unicode (ISO/IEC 10646) character whose value is the hexadecimal value HHHHHHHH (one to\n                     eight hex digits)\n\n       enable [-a] [-dnps] [-f filename] [name ...]\n              Enable  and  disable  builtin shell commands.  Disabling a builtin allows a disk command which has\n              the same name as a shell builtin to be executed without specifying a full  pathname,  even  though\n              the  shell  normally searches for builtins before disk commands.  If -n is used, each name is dis\u2010\n              abled; otherwise, names are enabled.  For example, to use the test binary found via the  PATH  in\u2010\n              stead  of  the shell builtin version, run ``enable -n test''.  The -f option means to load the new\n              builtin command name from shared object filename, on systems that support dynamic loading.  The -d\n              option will delete a builtin previously loaded with -f.  If no name arguments are given, or if the\n              -p option is supplied, a list of shell builtins is printed.  With no other option  arguments,  the\n              list  consists  of  all  enabled  shell  builtins.   If -n is supplied, only disabled builtins are\n              printed.  If -a is supplied, the list printed includes all builtins, with an indication of whether\n              or  not  each  is  enabled.   If  -s  is  supplied,  the output is restricted to the POSIX special\n              builtins.  The return value is 0 unless a name is not a shell builtin or there is an error loading\n              a new builtin from a shared object.\n\n       eval [arg ...]\n              The  args are read and concatenated together into a single command.  This command is then read and\n              executed by the shell, and its exit status is returned as the value of  eval.   If  there  are  no\n              args, or only null arguments, eval returns 0.\n\n       exec [-cl] [-a name] [command [arguments]]\n              If  command is specified, it replaces the shell.  No new process is created.  The arguments become\n              the arguments to command.  If the -l option is supplied, the shell places a dash at the  beginning\n              of  the zeroth argument passed to command.  This is what login(1) does.  The -c option causes com\u2010\n              mand to be executed with an empty environment.  If -a is supplied, the shell passes  name  as  the\n              zeroth argument to the executed command.  If command cannot be executed for some reason, a non-in\u2010\n              teractive shell exits, unless the execfail shell option is enabled.   In  that  case,  it  returns\n              failure.   An  interactive shell returns failure if the file cannot be executed.  A subshell exits\n              unconditionally if exec fails.  If command is not specified, any redirections take effect  in  the\n              current  shell, and the return status is 0.  If there is a redirection error, the return status is\n              1.\n\n       exit [n]\n              Cause the shell to exit with a status of n.  If n is omitted, the exit status is that of the  last\n              command executed.  A trap on EXIT is executed before the shell terminates.\n\n       export [-fn] [name[=word]] ...\n       export -p\n              The  supplied  names  are  marked for automatic export to the environment of subsequently executed\n              commands.  If the -f option is given, the names refer to functions.  If no names are given, or  if\n              the  -p  option  is supplied, a list of names of all exported variables is printed.  The -n option\n              causes the export property to be removed from each name.  If a variable name is followed by =word,\n              the  value  of  the variable is set to word.  export returns an exit status of 0 unless an invalid\n              option is encountered, one of the names is not a valid shell variable name, or -f is supplied with\n              a name that is not a function.\n\n       fc [-e ename] [-lnr] [first] [last]\n       fc -s [pat=rep] [cmd]\n              The  first  form selects a range of commands from first to last from the history list and displays\n              or edits and re-executes them.  First and last may be specified as a string (to  locate  the  last\n              command  beginning with that string) or as a number (an index into the history list, where a nega\u2010\n              tive number is used as an offset from the current command number).  When listing, a first or  last\n              of  0  is  equivalent  to -1 and -0 is equivalent to the current command (usually the fc command);\n              otherwise 0 is equivalent to -1 and -0 is invalid.  If last is not specified, it  is  set  to  the\n              current  command for listing (so that ``fc -l -10'' prints the last 10 commands) and to first oth\u2010\n              erwise.  If first is not specified, it is set to the previous command  for  editing  and  -16  for\n              listing.\n\n              The  -n  option  suppresses the command numbers when listing.  The -r option reverses the order of\n              the commands.  If the -l option is given, the commands are listed on standard output.   Otherwise,\n              the  editor given by ename is invoked on a file containing those commands.  If ename is not given,\n              the value of the FCEDIT variable is used, and the value of EDITOR if FCEDIT is not set.   If  nei\u2010\n              ther  variable  is  set, vi is used.  When editing is complete, the edited commands are echoed and\n              executed.\n\n              In the second form, command is re-executed after each instance of pat is replaced by rep.  Command\n              is interpreted the same as first above.  A useful alias to use with this is ``r=\"fc -s\"'', so that\n              typing ``r cc'' runs the last command beginning with ``cc'' and typing ``r'' re-executes the  last\n              command.\n\n              If  the first form is used, the return value is 0 unless an invalid option is encountered or first\n              or last specify history lines out of range.  If the -e option is supplied, the return value is the\n              value  of  the last command executed or failure if an error occurs with the temporary file of com\u2010\n              mands.  If the second form is used, the return status is that of the command  re-executed,  unless\n              cmd does not specify a valid history line, in which case fc returns failure.\n\n       fg [jobspec]\n              Resume  jobspec  in  the  foreground, and make it the current job.  If jobspec is not present, the\n              shell's notion of the current job is used.  The return value is that of the  command  placed  into\n              the  foreground,  or failure if run when job control is disabled or, when run with job control en\u2010\n              abled, if jobspec does not specify a valid job or jobspec specifies a job that was started without\n              job control.\n\n       getopts optstring name [arg ...]\n              getopts is used by shell procedures to parse positional parameters.  optstring contains the option\n              characters to be recognized; if a character is followed by a colon, the option is expected to have\n              an  argument, which should be separated from it by white space.  The colon and question mark char\u2010\n              acters may not be used as option characters.  Each time it is invoked, getopts places the next op\u2010\n              tion in the shell variable name, initializing name if it does not exist, and the index of the next\n              argument to be processed into the variable OPTIND.  OPTIND is initialized to 1 each time the shell\n              or  a  shell script is invoked.  When an option requires an argument, getopts places that argument\n              into the variable OPTARG.  The shell does not reset OPTIND automatically; it must be manually  re\u2010\n              set  between multiple calls to getopts within the same shell invocation if a new set of parameters\n              is to be used.\n\n              When the end of options is encountered, getopts exits with  a  return  value  greater  than  zero.\n              OPTIND is set to the index of the first non-option argument, and name is set to ?.\n\n              getopts  normally parses the positional parameters, but if more arguments are supplied as arg val\u2010\n              ues, getopts parses those instead.\n\n              getopts can report errors in two ways.  If the first character of optstring is a colon, silent er\u2010\n              ror  reporting is used.  In normal operation, diagnostic messages are printed when invalid options\n              or missing option arguments are encountered.  If the variable OPTERR is set to 0,  no  error  mes\u2010\n              sages will be displayed, even if the first character of optstring is not a colon.\n\n              If  an invalid option is seen, getopts places ? into name and, if not silent, prints an error mes\u2010\n              sage and unsets OPTARG.  If getopts is silent, the option character found is placed in OPTARG  and\n              no diagnostic message is printed.\n\n              If  a  required argument is not found, and getopts is not silent, a question mark (?) is placed in\n              name, OPTARG is unset, and a diagnostic message is printed.  If getopts is silent,  then  a  colon\n              (:) is placed in name and OPTARG is set to the option character found.\n\n              getopts  returns  true  if an option, specified or unspecified, is found.  It returns false if the\n              end of options is encountered or an error occurs.\n\n       hash [-lr] [-p filename] [-dt] [name]\n              Each time hash is invoked, the full pathname of the command name is determined  by  searching  the\n              directories  in $PATH and remembered.  Any previously-remembered pathname is discarded.  If the -p\n              option is supplied, no path search is performed, and filename is used as the full filename of  the\n              command.  The -r option causes the shell to forget all remembered locations.  The -d option causes\n              the shell to forget the remembered location of each name.  If the -t option is supplied, the  full\n              pathname  to which each name corresponds is printed.  If multiple name arguments are supplied with\n              -t, the name is printed before the hashed full pathname.  The -l option causes output to  be  dis\u2010\n              played  in a format that may be reused as input.  If no arguments are given, or if only -l is sup\u2010\n              plied, information about remembered commands is printed.  The return status is true unless a  name\n              is not found or an invalid option is supplied.\n\n       help [-dms] [pattern]\n              Display  helpful information about builtin commands.  If pattern is specified, help gives detailed\n              help on all commands matching pattern; otherwise help for  all  the  builtins  and  shell  control\n              structures is printed.\n              -d     Display a short description of each pattern\n              -m     Display the description of each pattern in a manpage-like format\n              -s     Display only a short usage synopsis for each pattern\n\n              The return status is 0 unless no command matches pattern.\n\n       history [n]\n       history -c\n       history -d offset\n       history -d start-end\n       history -anrw [filename]\n       history -p arg [arg ...]\n       history -s arg [arg ...]\n              With  no  options, display the command history list with line numbers.  Lines listed with a * have\n              been modified.  An argument of n lists only the last n lines.  If the shell variable  HISTTIMEFOR\u2010\n              MAT  is  set and not null, it is used as a format string for strftime(3) to display the time stamp\n              associated with each displayed history entry.  No intervening blank is printed between the format\u2010\n              ted  time stamp and the history line.  If filename is supplied, it is used as the name of the his\u2010\n              tory file; if not, the value of HISTFILE is used.  Options, if supplied, have the following  mean\u2010\n              ings:\n              -c     Clear the history list by deleting all the entries.\n              -d offset\n                     Delete  the  history entry at position offset.  If offset is negative, it is interpreted as\n                     relative to one greater than the last history position, so negative indices count back from\n                     the end of the history, and an index of -1 refers to the current history -d command.\n              -d start-end\n                     Delete  the history entries between positions start and end, inclusive.  Positive and nega\u2010\n                     tive values for start and end are interpreted as described above.\n              -a     Append the ``new'' history lines to the history file.   These  are  history  lines  entered\n                     since  the  beginning  of the current bash session, but not already appended to the history\n                     file.\n              -n     Read the history lines not already read from the history  file  into  the  current  history\n                     list.  These are lines appended to the history file since the beginning of the current bash\n                     session.\n              -r     Read the contents of the history file and append them to the current history list.\n              -w     Write the current history list to the history file, overwriting  the  history  file's  con\u2010\n                     tents.\n              -p     Perform  history  substitution on the following args and display the result on the standard\n                     output.  Does not store the results in the history list.  Each arg must be quoted  to  dis\u2010\n                     able normal history expansion.\n              -s     Store the args in the history list as a single entry.  The last command in the history list\n                     is removed before the args are added.\n\n              If the HISTTIMEFORMAT variable is set, the time stamp information associated with each history en\u2010\n              try  is  written to the history file, marked with the history comment character.  When the history\n              file is read, lines beginning with the history comment character followed immediately by  a  digit\n              are  interpreted  as  timestamps for the following history entry.  The return value is 0 unless an\n              invalid option is encountered, an error occurs while reading or writing the history file,  an  in\u2010\n              valid offset is supplied as an argument to -d, or the history expansion supplied as an argument to\n              -p fails.\n\n       jobs [-lnprs] [ jobspec ... ]\n       jobs -x command [ args ... ]\n              The first form lists the active jobs.  The options have the following meanings:\n              -l     List process IDs in addition to the normal information.\n              -n     Display information only about jobs that have changed status since the user was last  noti\u2010\n                     fied of their status.\n              -p     List only the process ID of the job's process group leader.\n              -r     Display only running jobs.\n              -s     Display only stopped jobs.\n\n              If  jobspec  is given, output is restricted to information about that job.  The return status is 0\n              unless an invalid option is encountered or an invalid jobspec is supplied.\n\n              If the -x option is supplied, jobs replaces any jobspec found in command or args with  the  corre\u2010\n              sponding process group ID, and executes command passing it args, returning its exit status.\n\n       kill [-s sigspec | -n signum | -sigspec] [pid | jobspec] ...\n       kill -l|-L [sigspec | exit_status]\n              Send  the  signal named by sigspec or signum to the processes named by pid or jobspec.  sigspec is\n              either a case-insensitive signal name such as SIGKILL (with or without the SIG prefix) or a signal\n              number;  signum is a signal number.  If sigspec is not present, then SIGTERM is assumed.  An argu\u2010\n              ment of -l lists the signal names.  If any arguments are supplied when -l is given, the  names  of\n              the  signals corresponding to the arguments are listed, and the return status is 0.  The exit_sta\u2010\n              tus argument to -l is a number specifying either a signal number or the exit status of  a  process\n              terminated  by  a  signal.   The -L option is equivalent to -l.  kill returns true if at least one\n              signal was successfully sent, or false if an error occurs or an invalid option is encountered.\n\n       let arg [arg ...]\n              Each arg is an arithmetic expression to be evaluated (see ARITHMETIC EVALUATION  above).   If  the\n              last arg evaluates to 0, let returns 1; 0 is returned otherwise.\n\n       local [option] [name[=value] ... | - ]\n              For  each argument, a local variable named name is created, and assigned value.  The option can be\n              any of the options accepted by declare.  When local is used within a function, it causes the vari\u2010\n              able name to have a visible scope restricted to that function and its children.  If name is -, the\n              set of shell options is made local to the function  in  which  local  is  invoked:  shell  options\n              changed  using  the set builtin inside the function are restored to their original values when the\n              function returns.  The restore is effected as if a series of set commands were executed to restore\n              the values that were in place before the function.  With no operands, local writes a list of local\n              variables to the standard output.  It is an error to use local when not within  a  function.   The\n              return  status  is 0 unless local is used outside a function, an invalid name is supplied, or name\n              is a readonly variable.\n\n       logout Exit a login shell.\n\n       mapfile [-d delim] [-n count] [-O origin] [-s count] [-t] [-u fd] [-C callback] [-c quantum] [array]\n       readarray [-d delim] [-n count] [-O origin] [-s count] [-t] [-u fd] [-C callback] [-c quantum] [array]\n              Read lines from the standard input into the indexed array variable array, or from file  descriptor\n              fd  if  the  -u  option is supplied.  The variable MAPFILE is the default array.  Options, if sup\u2010\n              plied, have the following meanings:\n              -d     The first character of delim is used to terminate each input line, rather than newline.  If\n                     delim is the empty string, mapfile will terminate a line when it reads a NUL character.\n              -n     Copy at most count lines.  If count is 0, all lines are copied.\n              -O     Begin assigning to array at index origin.  The default index is 0.\n              -s     Discard the first count lines read.\n              -t     Remove a trailing delim (default newline) from each line read.\n              -u     Read lines from file descriptor fd instead of the standard input.\n              -C     Evaluate callback each time quantum lines are read.  The -c option specifies quantum.\n              -c     Specify the number of lines read between each call to callback.\n\n              If  -C  is  specified  without -c, the default quantum is 5000.  When callback is evaluated, it is\n              supplied the index of the next array element to be assigned and the line to be  assigned  to  that\n              element  as additional arguments.  callback is evaluated after the line is read but before the ar\u2010\n              ray element is assigned.\n\n              If not supplied with an explicit origin, mapfile will clear array before assigning to it.\n\n              mapfile returns successfully unless an invalid option or option argument is supplied, array is in\u2010\n              valid or unassignable, or if array is not an indexed array.\n\n       popd [-n] [+n] [-n]\n              Removes  entries  from the directory stack.  With no arguments, removes the top directory from the\n              stack, and performs a cd to the new top directory.  Arguments, if  supplied,  have  the  following\n              meanings:\n              -n     Suppresses the normal change of directory when removing directories from the stack, so that\n                     only the stack is manipulated.\n              +n     Removes the nth entry counting from the left of the list shown by dirs, starting with zero.\n                     For example: ``popd +0'' removes the first directory, ``popd +1'' the second.\n              -n     Removes  the  nth  entry  counting  from the right of the list shown by dirs, starting with\n                     zero.  For example: ``popd -0'' removes the last directory, ``popd -1'' the next to last.\n\n              If the popd command is successful, a dirs is performed as well, and the return status is 0.   popd\n              returns  false  if  an invalid option is encountered, the directory stack is empty, a non-existent\n              directory stack entry is specified, or the directory change fails.\n\n       printf [-v var] format [arguments]\n              Write the formatted arguments to the standard output under the control of the format.  The -v  op\u2010\n              tion  causes  the output to be assigned to the variable var rather than being printed to the stan\u2010\n              dard output.\n\n              The format is a character string which contains three types of objects:  plain  characters,  which\n              are  simply  copied to standard output, character escape sequences, which are converted and copied\n              to the standard output, and format specifications, each of which causes printing of the next  suc\u2010\n              cessive  argument.  In addition to the standard printf(1) format specifications, printf interprets\n              the following extensions:\n              %b     causes printf to expand backslash escape sequences in the  corresponding  argument  in  the\n                     same way as echo -e.\n              %q     causes  printf to output the corresponding argument in a format that can be reused as shell\n                     input.\n              %(datefmt)T\n                     causes printf to output the date-time string resulting  from  using  datefmt  as  a  format\n                     string  for  strftime(3).  The corresponding argument is an integer representing the number\n                     of seconds since the epoch.  Two special argument values may be  used:  -1  represents  the\n                     current  time,  and -2 represents the time the shell was invoked.  If no argument is speci\u2010\n                     fied, conversion behaves as if -1 had been given.  This is an exception to the usual printf\n                     behavior.\n\n              The  %b,  %q,  and  %T  directives all use the field width and precision arguments from the format\n              specification and write that many bytes from (or use that wide a field for) the expanded argument,\n              which usually contains more characters than the original.\n\n              Arguments  to  non-string format specifiers are treated as C constants, except that a leading plus\n              or minus sign is allowed, and if the leading character is a single or double quote, the  value  is\n              the ASCII value of the following character.\n\n              The  format  is  reused as necessary to consume all of the arguments.  If the format requires more\n              arguments than are supplied, the extra format specifications behave as if a  zero  value  or  null\n              string, as appropriate, had been supplied.  The return value is zero on success, non-zero on fail\u2010\n              ure.\n\n       pushd [-n] [+n] [-n]\n       pushd [-n] [dir]\n              Adds a directory to the top of the directory stack, or rotates the stack, making the  new  top  of\n              the  stack the current working directory.  With no arguments, pushd exchanges the top two directo\u2010\n              ries and returns 0, unless the directory stack is empty.  Arguments, if supplied, have the follow\u2010\n              ing meanings:\n              -n     Suppresses the normal change of directory when rotating or adding directories to the stack,\n                     so that only the stack is manipulated.\n              +n     Rotates the stack so that the nth directory (counting from the left of the  list  shown  by\n                     dirs, starting with zero) is at the top.\n              -n     Rotates  the  stack so that the nth directory (counting from the right of the list shown by\n                     dirs, starting with zero) is at the top.\n              dir    Adds dir to the directory stack at the top, making it the new current working directory  as\n                     if it had been supplied as the argument to the cd builtin.\n\n              If the pushd command is successful, a dirs is performed as well.  If the first form is used, pushd\n              returns 0 unless the cd to dir fails.  With the second form, pushd returns 0 unless the  directory\n              stack  is  empty,  a non-existent directory stack element is specified, or the directory change to\n              the specified new current directory fails.\n\n       pwd [-LP]\n              Print the absolute pathname of the current working directory.  The pathname  printed  contains  no\n              symbolic  links  if the -P option is supplied or the -o physical option to the set builtin command\n              is enabled.  If the -L option is used, the pathname printed may contain symbolic links.   The  re\u2010\n              turn  status is 0 unless an error occurs while reading the name of the current directory or an in\u2010\n              valid option is supplied.\n\n       read [-ers] [-a aname] [-d delim] [-i text] [-n nchars] [-N nchars] [-p  prompt]  [-t  timeout]  [-u  fd]\n       [name ...]\n              One  line  is read from the standard input, or from the file descriptor fd supplied as an argument\n              to the -u option, split into words as described above under Word Splitting, and the first word  is\n              assigned  to  the  first  name,  the second word to the second name, and so on.  If there are more\n              words than names, the remaining words and their intervening delimiters are assigned  to  the  last\n              name.  If there are fewer words read from the input stream than names, the remaining names are as\u2010\n              signed empty values.  The characters in IFS are used to split the line into words using  the  same\n              rules  the shell uses for expansion (described above under Word Splitting).  The backslash charac\u2010\n              ter (\\) may be used to remove any special meaning for the next character read and for line contin\u2010\n              uation.  Options, if supplied, have the following meanings:\n              -a aname\n                     The  words  are  assigned to sequential indices of the array variable aname, starting at 0.\n                     aname is unset before any new values are assigned.  Other name arguments are ignored.\n              -d delim\n                     The first character of delim is used to terminate the input line, rather than newline.   If\n                     delim is the empty string, read will terminate a line when it reads a NUL character.\n              -e     If  the  standard input is coming from a terminal, readline (see READLINE above) is used to\n                     obtain the line.  Readline uses the current (or default, if line editing was not previously\n                     active) editing settings, but uses Readline's default filename completion.\n              -i text\n                     If  readline  is being used to read the line, text is placed into the editing buffer before\n                     editing begins.\n              -n nchars\n                     read returns after reading nchars characters rather than waiting for a complete line of in\u2010\n                     put, but honors a delimiter if fewer than nchars characters are read before the delimiter.\n              -N nchars\n                     read  returns  after  reading  exactly nchars characters rather than waiting for a complete\n                     line of input, unless EOF is encountered or read times out.  Delimiter  characters  encoun\u2010\n                     tered  in  the input are not treated specially and do not cause read to return until nchars\n                     characters are read.  The result is not split on the characters in IFS; the intent is  that\n                     the  variable is assigned exactly the characters read (with the exception of backslash; see\n                     the -r option below).\n              -p prompt\n                     Display prompt on standard error, without a trailing newline, before attempting to read any\n                     input.  The prompt is displayed only if input is coming from a terminal.\n              -r     Backslash  does  not act as an escape character.  The backslash is considered to be part of\n                     the line.  In particular, a backslash-newline pair may not then be used as a line continua\u2010\n                     tion.\n              -s     Silent mode.  If input is coming from a terminal, characters are not echoed.\n              -t timeout\n                     Cause  read to time out and return failure if a complete line of input (or a specified num\u2010\n                     ber of characters) is not read within timeout seconds.  timeout may  be  a  decimal  number\n                     with  a  fractional  portion following the decimal point.  This option is only effective if\n                     read is reading input from a terminal, pipe, or other special file; it has no  effect  when\n                     reading  from regular files.  If read times out, read saves any partial input read into the\n                     specified variable name.  If timeout is 0, read returns immediately, without trying to read\n                     any  data.   The  exit  status is 0 if input is available on the specified file descriptor,\n                     non-zero otherwise.  The exit status is greater than 128 if the timeout is exceeded.\n              -u fd  Read input from file descriptor fd.\n\n              If no names are supplied, the line read, without the ending delimiter but otherwise unmodified, is\n              assigned  to the variable REPLY.  The exit status is zero, unless end-of-file is encountered, read\n              times out (in which case the status is greater than 128), a variable assignment error (such as as\u2010\n              signing  to a readonly variable) occurs, or an invalid file descriptor is supplied as the argument\n              to -u.\n\n       readonly [-aAf] [-p] [name[=word] ...]\n              The given names are marked readonly; the values of these names may not be  changed  by  subsequent\n              assignment.  If the -f option is supplied, the functions corresponding to the names are so marked.\n              The -a option restricts the variables to indexed arrays; the -A option restricts the variables  to\n              associative  arrays.  If both options are supplied, -A takes precedence.  If no name arguments are\n              given, or if the -p option is supplied, a list of all readonly names is printed.   The  other  op\u2010\n              tions  may be used to restrict the output to a subset of the set of readonly names.  The -p option\n              causes output to be displayed in a format that may be reused as input.  If a variable name is fol\u2010\n              lowed  by  =word,  the value of the variable is set to word.  The return status is 0 unless an in\u2010\n              valid option is encountered, one of the names is not a valid shell variable name, or  -f  is  sup\u2010\n              plied with a name that is not a function.\n\n       return [n]\n              Causes  a  function  to stop executing and return the value specified by n to its caller.  If n is\n              omitted, the return status is that of the last command executed in the function body.   If  return\n              is  executed  by a trap handler, the last command used to determine the status is the last command\n              executed before the trap handler.  If return is executed during a DEBUG  trap,  the  last  command\n              used  to  determine  the status is the last command executed by the trap handler before return was\n              invoked.  If return is used outside a function,  but  during  execution  of  a  script  by  the  .\n              (source)  command,  it  causes  the shell to stop executing that script and return either n or the\n              exit status of the last command executed within the script as the exit status of the script.  If n\n              is  supplied,  the return value is its least significant 8 bits.  The return status is non-zero if\n              return is supplied a non-numeric argument, or is used outside a function and not during  execution\n              of a script by . or source.  Any command associated with the RETURN trap is executed before execu\u2010\n              tion resumes after the function or script.\n\n       set [--abefhkmnptuvxBCEHPT] [-o option-name] [arg ...]\n       set [+abefhkmnptuvxBCEHPT] [+o option-name] [arg ...]\n              Without options, the name and value of each shell variable are displayed in a format that  can  be\n              reused  as input for setting or resetting the currently-set variables.  Read-only variables cannot\n              be reset.  In posix mode, only shell variables are listed.  The output is sorted according to  the\n              current  locale.   When  options are specified, they set or unset shell attributes.  Any arguments\n              remaining after option processing are treated as values for the positional parameters and are  as\u2010\n              signed, in order, to $1, $2, ...  $n.  Options, if specified, have the following meanings:\n              -a      Each  variable  or  function that is created or modified is given the export attribute and\n                      marked for export to the environment of subsequent commands.\n              -b      Report the status of terminated background jobs immediately, rather than before  the  next\n                      primary prompt.  This is effective only when job control is enabled.\n              -e      Exit  immediately if a pipeline (which may consist of a single simple command), a list, or\n                      a compound command (see SHELL GRAMMAR above), exits with a  non-zero  status.   The  shell\n                      does  not exit if the command that fails is part of the command list immediately following\n                      a while or until keyword, part of the test following the if or elif reserved  words,  part\n                      of  any  command  executed in a && or || list except the command following the final && or\n                      ||, any command in a pipeline but the last, or if the command's return value is being  in\u2010\n                      verted  with !.  If a compound command other than a subshell returns a non-zero status be\u2010\n                      cause a command failed while -e was being ignored, the shell does not  exit.   A  trap  on\n                      ERR,  if  set, is executed before the shell exits.  This option applies to the shell envi\u2010\n                      ronment and each  subshell  environment  separately  (see  COMMAND  EXECUTION  ENVIRONMENT\n                      above), and may cause subshells to exit before executing all the commands in the subshell.\n\n                      If  a  compound command or shell function executes in a context where -e is being ignored,\n                      none of the commands executed within the compound command or function  body  will  be  af\u2010\n                      fected  by the -e setting, even if -e is set and a command returns a failure status.  If a\n                      compound command or shell function sets -e while executing in a context where  -e  is  ig\u2010\n                      nored,  that  setting  will  not have any effect until the compound command or the command\n                      containing the function call completes.\n              -f      Disable pathname expansion.\n              -h      Remember the location of commands as they are looked up for execution.  This is enabled by\n                      default.\n              -k      All  arguments  in  the  form of assignment statements are placed in the environment for a\n                      command, not just those that precede the command name.\n              -m      Monitor mode.  Job control is enabled.  This option  is  on  by  default  for  interactive\n                      shells  on  systems that support it (see JOB CONTROL above).  All processes run in a sepa\u2010\n                      rate process group.  When a background job completes, the shell prints a  line  containing\n                      its exit status.\n              -n      Read  commands but do not execute them.  This may be used to check a shell script for syn\u2010\n                      tax errors.  This is ignored by interactive shells.\n              -o option-name\n                      The option-name can be one of the following:\n                      allexport\n                              Same as -a.\n                      braceexpand\n                              Same as -B.\n                      emacs   Use an emacs-style command line editing interface.  This  is  enabled  by  default\n                              when  the  shell  is interactive, unless the shell is started with the --noediting\n                              option.  This also affects the editing interface used for read -e.\n                      errexit Same as -e.\n                      errtrace\n                              Same as -E.\n                      functrace\n                              Same as -T.\n                      hashall Same as -h.\n                      histexpand\n                              Same as -H.\n                      history Enable command history, as described above under HISTORY.  This option  is  on  by\n                              default in interactive shells.\n                      ignoreeof\n                              The  effect  is  as  if  the shell command ``IGNOREEOF=10'' had been executed (see\n                              Shell Variables above).\n                      keyword Same as -k.\n                      monitor Same as -m.\n                      noclobber\n                              Same as -C.\n                      noexec  Same as -n.\n                      noglob  Same as -f.\n                      nolog   Currently ignored.\n                      notify  Same as -b.\n                      nounset Same as -u.\n                      onecmd  Same as -t.\n                      physical\n                              Same as -P.\n                      pipefail\n                              If set, the return value of a pipeline is the value of the last  (rightmost)  com\u2010\n                              mand  to exit with a non-zero status, or zero if all commands in the pipeline exit\n                              successfully.  This option is disabled by default.\n                      posix   Change the behavior of bash where the default operation  differs  from  the  POSIX\n                              standard  to  match the standard (posix mode).  See SEE ALSO below for a reference\n                              to a document that details how posix mode affects bash's behavior.\n                      privileged\n                              Same as -p.\n                      verbose Same as -v.\n                      vi      Use a vi-style command line editing interface.  This also affects the editing  in\u2010\n                              terface used for read -e.\n                      xtrace  Same as -x.\n                      If  -o is supplied with no option-name, the values of the current options are printed.  If\n                      +o is supplied with no option-name, a series of set commands to recreate the  current  op\u2010\n                      tion settings is displayed on the standard output.\n              -p      Turn  on  privileged  mode.  In this mode, the $ENV and $BASH_ENV files are not processed,\n                      shell functions are not inherited from the environment, and the SHELLOPTS,  BASHOPTS,  CD\u2010\n                      PATH,  and  GLOBIGNORE  variables, if they appear in the environment, are ignored.  If the\n                      shell is started with the effective user (group) id not equal to the real user (group) id,\n                      and  the  -p  option is not supplied, these actions are taken and the effective user id is\n                      set to the real user id.  If the -p option is supplied at startup, the effective  user  id\n                      is  not  reset.  Turning this option off causes the effective user and group ids to be set\n                      to the real user and group ids.\n              -t      Exit after reading and executing one command.\n              -u      Treat unset variables and parameters other than the special parameters \"@\" and \"*\"  as  an\n                      error when performing parameter expansion.  If expansion is attempted on an unset variable\n                      or parameter, the shell prints an error message, and, if not  interactive,  exits  with  a\n                      non-zero status.\n              -v      Print shell input lines as they are read.\n              -x      After  expanding each simple command, for command, case command, select command, or arith\u2010\n                      metic for command, display the expanded value of PS4, followed by the command and its  ex\u2010\n                      panded arguments or associated word list.\n              -B      The shell performs brace expansion (see Brace Expansion above).  This is on by default.\n              -C      If set, bash does not overwrite an existing file with the >, >&, and <> redirection opera\u2010\n                      tors.  This may be overridden when creating output files by using the redirection operator\n                      >| instead of >.\n              -E      If  set,  any trap on ERR is inherited by shell functions, command substitutions, and com\u2010\n                      mands executed in a subshell environment.  The ERR trap is normally not inherited in  such\n                      cases.\n              -H      Enable  !  style history substitution.  This option is on by default when the shell is in\u2010\n                      teractive.\n              -P      If set, the shell does not resolve symbolic links when executing commands such as cd  that\n                      change  the  current working directory.  It uses the physical directory structure instead.\n                      By default, bash follows the logical chain of directories when performing  commands  which\n                      change the current directory.\n              -T      If  set, any traps on DEBUG and RETURN are inherited by shell functions, command substitu\u2010\n                      tions, and commands executed in a subshell environment.  The DEBUG and  RETURN  traps  are\n                      normally not inherited in such cases.\n              --      If  no arguments follow this option, then the positional parameters are unset.  Otherwise,\n                      the positional parameters are set to the args, even if some of them begin with a -.\n              -       Signal the end of options, cause all remaining args to be assigned to the  positional  pa\u2010\n                      rameters.  The -x and -v options are turned off.  If there are no args, the positional pa\u2010\n                      rameters remain unchanged.\n\n              The options are off by default unless otherwise noted.  Using + rather than - causes these options\n              to  be  turned off.  The options can also be specified as arguments to an invocation of the shell.\n              The current set of options may be found in $-.  The return status is always true unless an invalid\n              option is encountered.\n\n       shift [n]\n              The  positional parameters from n+1 ... are renamed to $1 ....  Parameters represented by the num\u2010\n              bers $# down to $#-n+1 are unset.  n must be a non-negative number less than or equal to $#.  If n\n              is  0, no parameters are changed.  If n is not given, it is assumed to be 1.  If n is greater than\n              $#, the positional parameters are not changed.  The return status is greater than  zero  if  n  is\n              greater than $# or less than zero; otherwise 0.\n\n       shopt [-pqsu] [-o] [optname ...]\n              Toggle  the  values  of  settings controlling optional shell behavior.  The settings can be either\n              those listed below, or, if the -o option is used, those available with the -o option  to  the  set\n              builtin  command.   With no options, or with the -p option, a list of all settable options is dis\u2010\n              played, with an indication of whether or not each is set; if optnames are supplied, the output  is\n              restricted  to  those  options.  The -p option causes output to be displayed in a form that may be\n              reused as input.  Other options have the following meanings:\n              -s     Enable (set) each optname.\n              -u     Disable (unset) each optname.\n              -q     Suppresses normal output (quiet mode); the return status indicates whether the  optname  is\n                     set  or  unset.  If multiple optname arguments are given with -q, the return status is zero\n                     if all optnames are enabled; non-zero otherwise.\n              -o     Restricts the values of optname to be those defined for the -o option to the set builtin.\n\n              If either -s or -u is used with no optname arguments, shopt shows only those options which are set\n              or  unset,  respectively.   Unless  otherwise noted, the shopt options are disabled (unset) by de\u2010\n              fault.\n\n              The return status when listing options is zero if all optnames are  enabled,  non-zero  otherwise.\n              When  setting  or  unsetting  options,  the return status is zero unless an optname is not a valid\n              shell option.\n\n              The list of shopt options is:\n\n              assoc_expand_once\n                      If set, the shell suppresses multiple evaluation of associative  array  subscripts  during\n                      arithmetic  expression  evaluation, while executing builtins that can perform variable as\u2010\n                      signments, and while executing builtins that perform array dereferencing.\n              autocd  If set, a command name that is the name of a directory is executed as if it were the argu\u2010\n                      ment to the cd command.  This option is only used by interactive shells.\n              cdable_vars\n                      If set, an argument to the cd builtin command that is not a directory is assumed to be the\n                      name of a variable whose value is the directory to change to.\n              cdspell If set, minor errors in the spelling of a directory component in a cd command will be cor\u2010\n                      rected.   The  errors  checked for are transposed characters, a missing character, and one\n                      character too many.  If a correction is found, the corrected filename is printed, and  the\n                      command proceeds.  This option is only used by interactive shells.\n              checkhash\n                      If set, bash checks that a command found in the hash table exists before trying to execute\n                      it.  If a hashed command no longer exists, a normal path search is performed.\n              checkjobs\n                      If set, bash lists the status of any stopped and running jobs before exiting  an  interac\u2010\n                      tive  shell.   If any jobs are running, this causes the exit to be deferred until a second\n                      exit is attempted without an intervening command (see JOB CONTROL above).  The  shell  al\u2010\n                      ways postpones exiting if any jobs are stopped.\n              checkwinsize\n                      If set, bash checks the window size after each external (non-builtin) command and, if nec\u2010\n                      essary, updates the values of LINES and COLUMNS.  This option is enabled by default.\n              cmdhist If set, bash attempts to save all lines of a multiple-line command in the same history en\u2010\n                      try.   This  allows easy re-editing of multi-line commands.  This option is enabled by de\u2010\n                      fault, but only has an effect if command history is enabled, as described above under HIS\u2010\n                      TORY.\n              compat31\n              compat32\n              compat40\n              compat41\n              compat42\n              compat43\n              compat44\n                      These  control aspects of the shell's compatibility mode (see SHELL COMPATIBILITY MODE be\u2010\n                      low).\n\n              complete_fullquote\n                      If set, bash quotes all shell metacharacters in filenames and directory  names  when  per\u2010\n                      forming  completion.  If not set, bash removes metacharacters such as the dollar sign from\n                      the set of characters that will be quoted in completed filenames when these metacharacters\n                      appear  in  shell  variable  references  in words to be completed.  This means that dollar\n                      signs in variable names that expand to directories will not be quoted; however, any dollar\n                      signs appearing in filenames will not be quoted, either.  This is active only when bash is\n                      using backslashes to quote completed filenames.  This variable is set by default, which is\n                      the default bash behavior in versions through 4.2.\n\n              direxpand\n                      If  set,  bash replaces directory names with the results of word expansion when performing\n                      filename completion.  This changes the contents of the readline editing  buffer.   If  not\n                      set, bash attempts to preserve what the user typed.\n\n              dirspell\n                      If set, bash attempts spelling correction on directory names during word completion if the\n                      directory name initially supplied does not exist.\n\n              dotglob If set, bash includes filenames beginning with a `.' in the results of pathname expansion.\n                      The  filenames  ``.''   and  ``..''  must always be matched explicitly, even if dotglob is\n                      set.\n\n              execfail\n                      If set, a non-interactive shell will not exit if it cannot execute the file  specified  as\n                      an  argument  to  the  exec  builtin  command.  An interactive shell does not exit if exec\n                      fails.\n\n              expand_aliases\n                      If set, aliases are expanded as described above under ALIASES.  This option is enabled  by\n                      default for interactive shells.\n\n              extdebug\n                      If  set  at  shell invocation, or in a shell startup file, arrange to execute the debugger\n                      profile before the shell starts, identical to the --debugger option.  If set after invoca\u2010\n                      tion, behavior intended for use by debuggers is enabled:\n\n                      1.     The  -F option to the declare builtin displays the source file name and line number\n                             corresponding to each function name supplied as an argument.\n\n                      2.     If the command run by the DEBUG trap returns a non-zero value, the next command  is\n                             skipped and not executed.\n\n                      3.     If the command run by the DEBUG trap returns a value of 2, and the shell is execut\u2010\n                             ing in a subroutine (a shell function or a shell script executed by the . or source\n                             builtins), the shell simulates a call to return.\n\n                      4.     BASH_ARGC and BASH_ARGV are updated as described in their descriptions above.\n\n                      5.     Function  tracing  is enabled: command substitution, shell functions, and subshells\n                             invoked with ( command ) inherit the DEBUG and RETURN traps.\n\n                      6.     Error tracing is enabled: command substitution, shell functions, and subshells  in\u2010\n                             voked with ( command ) inherit the ERR trap.\n\n              extglob If  set,  the  extended pattern matching features described above under Pathname Expansion\n                      are enabled.\n\n              extquote\n                      If set, $'string' and $\"string\" quoting is performed within  ${parameter}  expansions  en\u2010\n                      closed in double quotes.  This option is enabled by default.\n\n              failglob\n                      If  set, patterns which fail to match filenames during pathname expansion result in an ex\u2010\n                      pansion error.\n\n              force_fignore\n                      If set, the suffixes specified by the FIGNORE shell variable cause  words  to  be  ignored\n                      when  performing  word  completion even if the ignored words are the only possible comple\u2010\n                      tions.  See SHELL VARIABLES above for a description of FIGNORE.  This option is enabled by\n                      default.\n\n              globasciiranges\n                      If set, range expressions used in pattern matching bracket expressions (see Pattern Match\u2010\n                      ing above) behave as if in the traditional C locale when performing comparisons.  That is,\n                      the  current  locale's collating sequence is not taken into account, so b will not collate\n                      between A and B, and upper-case and lower-case ASCII characters will collate together.\n\n              globstar\n                      If set, the pattern ** used in a pathname expansion context will match all files and  zero\n                      or  more directories and subdirectories.  If the pattern is followed by a /, only directo\u2010\n                      ries and subdirectories match.\n\n              gnu_errfmt\n                      If set, shell error messages are written in the standard GNU error message format.\n\n              histappend\n                      If set, the history list is appended to the file named by the value of the HISTFILE  vari\u2010\n                      able when the shell exits, rather than overwriting the file.\n\n              histreedit\n                      If  set,  and  readline is being used, a user is given the opportunity to re-edit a failed\n                      history substitution.\n\n              histverify\n                      If set, and readline is being used, the results of history substitution  are  not  immedi\u2010\n                      ately passed to the shell parser.  Instead, the resulting line is loaded into the readline\n                      editing buffer, allowing further modification.\n\n              hostcomplete\n                      If set, and readline is being used, bash will attempt to perform hostname completion  when\n                      a  word  containing a @ is being completed (see Completing under READLINE above).  This is\n                      enabled by default.\n\n              huponexit\n                      If set, bash will send SIGHUP to all jobs when an interactive login shell exits.\n\n              inherit_errexit\n                      If set, command substitution inherits the value of the errexit option, instead  of  unset\u2010\n                      ting it in the subshell environment.  This option is enabled when posix mode is enabled.\n\n              interactive_comments\n                      If  set,  allow a word beginning with # to cause that word and all remaining characters on\n                      that line to be ignored in an interactive shell (see COMMENTS above).  This option is  en\u2010\n                      abled by default.\n\n              lastpipe\n                      If  set,  and job control is not active, the shell runs the last command of a pipeline not\n                      executed in the background in the current shell environment.\n\n              lithist If set, and the cmdhist option is enabled, multi-line commands are saved  to  the  history\n                      with embedded newlines rather than using semicolon separators where possible.\n\n              localvar_inherit\n                      If  set,  local  variables inherit the value and attributes of a variable of the same name\n                      that exists at a previous scope before any new value is assigned.  The  nameref  attribute\n                      is not inherited.\n\n              localvar_unset\n                      If  set, calling unset on local variables in previous function scopes marks them so subse\u2010\n                      quent lookups find them unset until that function returns. This is identical to the behav\u2010\n                      ior of unsetting local variables at the current function scope.\n\n              login_shell\n                      The  shell sets this option if it is started as a login shell (see INVOCATION above).  The\n                      value may not be changed.\n\n              mailwarn\n                      If set, and a file that bash is checking for mail has been accessed since the last time it\n                      was checked, the message ``The mail in mailfile has been read'' is displayed.\n\n              no_empty_cmd_completion\n                      If  set, and readline is being used, bash will not attempt to search the PATH for possible\n                      completions when completion is attempted on an empty line.\n\n              nocaseglob\n                      If set, bash matches filenames in a case-insensitive fashion when performing pathname  ex\u2010\n                      pansion (see Pathname Expansion above).\n\n              nocasematch\n                      If set, bash matches patterns in a case-insensitive fashion when performing matching while\n                      executing case or [[ conditional commands, when performing pattern substitution  word  ex\u2010\n                      pansions, or when filtering possible completions as part of programmable completion.\n\n              nullglob\n                      If set, bash allows patterns which match no files (see Pathname Expansion above) to expand\n                      to a null string, rather than themselves.\n\n              progcomp\n                      If set, the programmable completion facilities (see Programmable Completion above) are en\u2010\n                      abled.  This option is enabled by default.\n\n              progcomp_alias\n                      If  set,  and  programmable completion is enabled, bash treats a command name that doesn't\n                      have any completions as a possible alias and attempts alias expansion. If it has an alias,\n                      bash  attempts  programmable completion using the command word resulting from the expanded\n                      alias.\n\n              promptvars\n                      If set, prompt strings undergo parameter expansion, command substitution,  arithmetic  ex\u2010\n                      pansion, and quote removal after being expanded as described in PROMPTING above.  This op\u2010\n                      tion is enabled by default.\n\n              restricted_shell\n                      The shell sets this option if it is started in restricted mode (see RESTRICTED  SHELL  be\u2010\n                      low).   The  value  may not be changed.  This is not reset when the startup files are exe\u2010\n                      cuted, allowing the startup files to discover whether or not a shell is restricted.\n\n              shift_verbose\n                      If set, the shift builtin prints an error message when the shift count exceeds the  number\n                      of positional parameters.\n\n              sourcepath\n                      If set, the source (.) builtin uses the value of PATH to find the directory containing the\n                      file supplied as an argument.  This option is enabled by default.\n\n              xpg_echo\n                      If set, the echo builtin expands backslash-escape sequences by default.\n\n       suspend [-f]\n              Suspend the execution of this shell until it receives a SIGCONT signal.  A login shell  cannot  be\n              suspended; the -f option can be used to override this and force the suspension.  The return status\n              is 0 unless the shell is a login shell and -f is not supplied, or if job control is not enabled.\n\n       test expr\n       [ expr ]\n              Return a status of 0 (true) or 1 (false) depending on the evaluation of the conditional expression\n              expr.   Each  operator  and  operand must be a separate argument.  Expressions are composed of the\n              primaries described in the bash manual page under CONDITIONAL EXPRESSIONS.  test does  not  accept\n              any options, nor does it accept and ignore an argument of -- as signifying the end of options.\n\n              Expressions  may  be  combined using the following operators, listed in decreasing order of prece\u2010\n              dence.  The evaluation depends on the number of arguments; see below.  Operator precedence is used\n              when there are five or more arguments.\n              ! expr True if expr is false.\n              ( expr )\n                     Returns  the  value  of expr.  This may be used to override the normal precedence of opera\u2010\n                     tors.\n              expr1 -a expr2\n                     True if both expr1 and expr2 are true.\n              expr1 -o expr2\n                     True if either expr1 or expr2 is true.\n\n              test and [ evaluate conditional expressions using a set of rules based on the number of arguments.\n\n              0 arguments\n                     The expression is false.\n              1 argument\n                     The expression is true if and only if the argument is not null.\n              2 arguments\n                     If the first argument is !, the expression is true if and only if the  second  argument  is\n                     null.   If  the first argument is one of the unary conditional operators listed above under\n                     CONDITIONAL EXPRESSIONS, the expression is true if the unary test is true.   If  the  first\n                     argument is not a valid unary conditional operator, the expression is false.\n              3 arguments\n                     The following conditions are applied in the order listed.  If the second argument is one of\n                     the binary conditional operators listed above under CONDITIONAL EXPRESSIONS, the result  of\n                     the  expression is the result of the binary test using the first and third arguments as op\u2010\n                     erands.  The -a and -o operators are considered binary operators when there are three argu\u2010\n                     ments.   If the first argument is !, the value is the negation of the two-argument test us\u2010\n                     ing the second and third arguments.  If the first argument is exactly ( and the third argu\u2010\n                     ment  is exactly ), the result is the one-argument test of the second argument.  Otherwise,\n                     the expression is false.\n              4 arguments\n                     If the first argument is !, the result is the negation  of  the  three-argument  expression\n                     composed of the remaining arguments.  Otherwise, the expression is parsed and evaluated ac\u2010\n                     cording to precedence using the rules listed above.\n              5 or more arguments\n                     The expression is parsed and evaluated according  to  precedence  using  the  rules  listed\n                     above.\n\n              When used with test or [, the < and > operators sort lexicographically using ASCII ordering.\n\n       times  Print  the  accumulated  user and system times for the shell and for processes run from the shell.\n              The return status is 0.\n\n       trap [-lp] [[arg] sigspec ...]\n              The command arg is to be read and executed when the shell receives signal(s) sigspec.  If  arg  is\n              absent (and there is a single sigspec) or -, each specified signal is reset to its original dispo\u2010\n              sition (the value it had upon entrance to the shell).  If arg is the null string the signal speci\u2010\n              fied  by  each  sigspec  is  ignored  by  the shell and by the commands it invokes.  If arg is not\n              present and -p has been supplied, then the trap commands associated with  each  sigspec  are  dis\u2010\n              played.  If no arguments are supplied or if only -p is given, trap prints the list of commands as\u2010\n              sociated with each signal.  The -l option causes the shell to print a list  of  signal  names  and\n              their  corresponding  numbers.   Each  sigspec is either a signal name defined in <signal.h>, or a\n              signal number.  Signal names are case insensitive and the SIG prefix is optional.\n\n              If a sigspec is EXIT (0) the command arg is executed on exit from the shell.  If a sigspec is  DE\u2010\n              BUG,  the  command  arg is executed before every simple command, for command, case command, select\n              command, every arithmetic for command, and before the first command executes in a  shell  function\n              (see  SHELL  GRAMMAR above).  Refer to the description of the extdebug option to the shopt builtin\n              for details of its effect on the DEBUG trap.  If a sigspec is RETURN, the command arg is  executed\n              each time a shell function or a script executed with the . or source builtins finishes executing.\n\n              If  a sigspec is ERR, the command arg is executed whenever a pipeline (which may consist of a sin\u2010\n              gle simple command), a list, or a compound command returns a non-zero exit status, subject to  the\n              following  conditions.   The ERR trap is not executed if the failed command is part of the command\n              list immediately following a while or until keyword, part of the test in an if statement, part  of\n              a command executed in a && or || list except the command following the final && or ||, any command\n              in a pipeline but the last, or if the command's return value is being inverted using !.  These are\n              the same conditions obeyed by the errexit (-e) option.\n\n              Signals  ignored upon entry to the shell cannot be trapped, reset or listed.  Trapped signals that\n              are not being ignored are reset to their original values in a  subshell  or  subshell  environment\n              when one is created.  The return status is false if any sigspec is invalid; otherwise trap returns\n              true.\n\n       type [-aftpP] name [name ...]\n              With no options, indicate how each name would be interpreted if used as a command name.  If the -t\n              option is used, type prints a string which is one of alias, keyword, function, builtin, or file if\n              name is an alias, shell reserved word, function, builtin, or disk file, respectively.  If the name\n              is  not found, then nothing is printed, and an exit status of false is returned.  If the -p option\n              is used, type either returns the name of the disk file that would be executed if name were  speci\u2010\n              fied  as  a  command  name,  or  nothing if ``type -t name'' would not return file.  The -P option\n              forces a PATH search for each name, even if ``type -t name'' would not return file.  If a  command\n              is  hashed, -p and -P print the hashed value, which is not necessarily the file that appears first\n              in PATH.  If the -a option is used, type prints all of the places that contain an executable named\n              name.   This  includes  aliases and functions, if and only if the -p option is not also used.  The\n              table of hashed commands is not consulted when using -a.  The -f option suppresses shell  function\n              lookup,  as  with the command builtin.  type returns true if all of the arguments are found, false\n              if any are not found.\n\n       ulimit [-HS] -a\n       ulimit [-HS] [-bcdefiklmnpqrstuvxPRT [limit]]\n              Provides control over the resources available to the shell and to processes started by it, on sys\u2010\n              tems  that  allow  such control.  The -H and -S options specify that the hard or soft limit is set\n              for the given resource.  A hard limit cannot be increased by a non-root user once  it  is  set;  a\n              soft limit may be increased up to the value of the hard limit.  If neither -H nor -S is specified,\n              both the soft and hard limits are set.  The value of limit can be a number in the  unit  specified\n              for  the  resource or one of the special values hard, soft, or unlimited, which stand for the cur\u2010\n              rent hard limit, the current soft limit, and no limit, respectively.  If  limit  is  omitted,  the\n              current  value  of the soft limit of the resource is printed, unless the -H option is given.  When\n              more than one resource is specified, the limit name and unit, if appropriate, are  printed  before\n              the value.  Other options are interpreted as follows:\n              -a     All current limits are reported; no limits are set\n              -b     The maximum socket buffer size\n              -c     The maximum size of core files created\n              -d     The maximum size of a process's data segment\n              -e     The maximum scheduling priority (\"nice\")\n              -f     The maximum size of files written by the shell and its children\n              -i     The maximum number of pending signals\n              -k     The maximum number of kqueues that may be allocated\n              -l     The maximum size that may be locked into memory\n              -m     The maximum resident set size (many systems do not honor this limit)\n              -n     The  maximum  number  of  open file descriptors (most systems do not allow this value to be\n                     set)\n              -p     The pipe size in 512-byte blocks (this may not be set)\n              -q     The maximum number of bytes in POSIX message queues\n              -r     The maximum real-time scheduling priority\n              -s     The maximum stack size\n              -t     The maximum amount of cpu time in seconds\n              -u     The maximum number of processes available to a single user\n              -v     The maximum amount of virtual memory available to the shell and, on some  systems,  to  its\n                     children\n              -x     The maximum number of file locks\n              -P     The maximum number of pseudoterminals\n              -R     The maximum time a real-time process can run before blocking, in microseconds\n              -T     The maximum number of threads\n\n              If  limit  is  given,  and  the -a option is not used, limit is the new value of the specified re\u2010\n              source.  If no option is given, then -f is assumed.  Values are in  1024-byte  increments,  except\n              for  -t,  which  is  in  seconds;  -R, which is in microseconds; -p, which is in units of 512-byte\n              blocks; -P, -T, -b, -k, -n, and -u, which are unscaled values; and, when in posix mode, -c and -f,\n              which  are in 512-byte increments.  The return status is 0 unless an invalid option or argument is\n              supplied, or an error occurs while setting a new limit.  In POSIX Mode 512-byte  blocks  are  used\n              for the `-c' and `-f' options.\n\n       umask [-p] [-S] [mode]\n              The  user file-creation mask is set to mode.  If mode begins with a digit, it is interpreted as an\n              octal number; otherwise it is interpreted as a symbolic mode mask  similar  to  that  accepted  by\n              chmod(1).  If mode is omitted, the current value of the mask is printed.  The -S option causes the\n              mask to be printed in symbolic form; the default output is an octal number.  If the -p  option  is\n              supplied,  and  mode  is omitted, the output is in a form that may be reused as input.  The return\n              status is 0 if the mode was successfully changed or if no mode argument was  supplied,  and  false\n              otherwise.\n\n       unalias [-a] [name ...]\n              Remove  each  name from the list of defined aliases.  If -a is supplied, all alias definitions are\n              removed.  The return value is true unless a supplied name is not a defined alias.\n\n       unset [-fv] [-n] [name ...]\n              For each name, remove the corresponding variable or function.  If the -v  option  is  given,  each\n              name refers to a shell variable, and that variable is removed.  Read-only variables may not be un\u2010\n              set.  If -f is specified, each name refers to a shell function, and the function definition is re\u2010\n              moved.  If the -n option is supplied, and name is a variable with the nameref attribute, name will\n              be unset rather than the variable it references.  -n has no effect if the -f option  is  supplied.\n              If  no options are supplied, each name refers to a variable; if there is no variable by that name,\n              a function with that name, if any, is unset.  Each unset variable or function is removed from  the\n              environment  passed  to  subsequent  commands.   If  any  of  BASH_ALIASES, BASH_ARGV0, BASH_CMDS,\n              BASH_COMMAND, BASH_SUBSHELL,  BASHPID,  COMP_WORDBREAKS,  DIRSTACK,  EPOCHREALTIME,  EPOCHSECONDS,\n              FUNCNAME,  GROUPS, HISTCMD, LINENO, RANDOM, SECONDS, or SRANDOM are unset, they lose their special\n              properties, even if they are subsequently reset.  The exit status is true unless a name  is  read\u2010\n              only.\n\n       wait [-fn] [-p varname] [id ...]\n              Wait for each specified child process and return its termination status.  Each id may be a process\n              ID or a job specification; if a job spec is given, all processes in that job's pipeline are waited\n              for.  If id is not given, wait waits for all running background jobs and the last-executed process\n              substitution, if its process id is the same as $!, and the return status is zero.  If the  -n  op\u2010\n              tion is supplied, wait waits for a single job from the list of ids or, if no ids are supplied, any\n              job, to complete and returns its exit status.  If none of the supplied arguments is a child of the\n              shell, or if no arguments are supplied and the shell has no unwaited-for children, the exit status\n              is 127.  If the -p option is supplied, the process or job identifier of the job for which the exit\n              status is returned is assigned to the variable varname named by the option argument.  The variable\n              will be unset initially, before any assignment.  This is useful only when the -n  option  is  sup\u2010\n              plied.  Supplying the -f option, when job control is enabled, forces wait to wait for id to termi\u2010\n              nate before returning its status, instead of returning when it changes status.  If id specifies  a\n              non-existent  process  or job, the return status is 127.  Otherwise, the return status is the exit\n              status of the last process or job waited for.\n\nSHELL COMPATIBILITY MODE\n       Bash-4.0 introduced the concept of a `shell compatibility level', specified as a set of  options  to  the\n       shopt  builtin compat31, compat32, compat40, compat41, and so on).  There is only one current compatibil\u2010\n       ity level -- each option is mutually exclusive.  The compatibility level is intended to  allow  users  to\n       select  behavior  from  previous  versions  that  is  incompatible with newer versions while they migrate\n       scripts to use current features and behavior. It's intended to be a temporary solution.\n\n       This section does not mention behavior that is standard for a particular version (e.g., setting  compat32\n       means  that quoting the rhs of the regexp matching operator quotes special regexp characters in the word,\n       which is default behavior in bash-3.2 and above).\n\n       If a user enables, say, compat32, it may affect the behavior of other compatibility levels up to and  in\u2010\n       cluding  the  current  compatibility  level.  The idea is that each compatibility level controls behavior\n       that changed in that version of bash, but that behavior may have been present in earlier  versions.   For\n       instance,  the  change  to use locale-based comparisons with the [[ command came in bash-4.1, and earlier\n       versions used ASCII-based comparisons, so enabling compat32 will enable ASCII-based comparisons as  well.\n       That  granularity  may  not be sufficient for all uses, and as a result users should employ compatibility\n       levels carefully.  Read the documentation for a particular feature to find out the current behavior.\n\n       Bash-4.3 introduced a new shell variable: BASH_COMPAT.  The value assigned to this  variable  (a  decimal\n       version number like 4.2, or an integer corresponding to the compatNN option, like 42) determines the com\u2010\n       patibility level.\n\n       Starting with bash-4.4, Bash has begun deprecating older compatibility levels.  Eventually,  the  options\n       will be removed in favor of BASH_COMPAT.\n\n       Bash-5.0  is  the  final version for which there will be an individual shopt option for the previous ver\u2010\n       sion. Users should use BASH_COMPAT on bash-5.0 and later versions.\n\n       The following table describes the behavior changes controlled by each compatibility level  setting.   The\n       compatNN  tag  is  used as shorthand for setting the compatibility level to NN using one of the following\n       mechanisms.  For versions prior to bash-5.0, the compatibility level may be set using  the  corresponding\n       compatNN shopt option.  For bash-4.3 and later versions, the BASH_COMPAT variable is preferred, and it is\n       required for bash-5.1 and later versions.\n\n       compat31\n              \u2022      quoting the rhs of the [[ command's regexp matching operator (=~) has no special effect\n\n       compat32\n              \u2022      interrupting a command list such as \"a ; b ; c\" causes the execution of the next command in\n                     the  list  (in bash-4.0 and later versions, the shell acts as if it received the interrupt,\n                     so interrupting one command in a list aborts the execution of the entire list)\n\n       compat40\n              \u2022      the < and > operators to the [[ command do not consider the current locale  when  comparing\n                     strings;  they use ASCII ordering.  Bash versions prior to bash-4.1 use ASCII collation and\n                     strcmp(3); bash-4.1 and later use the current locale's collation sequence and strcoll(3).\n\n       compat41\n              \u2022      in posix mode, time may be followed by options and still be recognized as a  reserved  word\n                     (this is POSIX interpretation 267)\n              \u2022      in  posix  mode, the parser requires that an even number of single quotes occur in the word\n                     portion of a double-quoted parameter expansion and treats them specially, so  that  charac\u2010\n                     ters within the single quotes are considered quoted (this is POSIX interpretation 221)\n\n       compat42\n              \u2022      the  replacement  string  in  double-quoted pattern substitution does not undergo quote re\u2010\n                     moval, as it does in versions after bash-4.2\n              \u2022      in posix mode, single quotes are considered special when expanding the word  portion  of  a\n                     double-quoted parameter expansion and can be used to quote a closing brace or other special\n                     character (this is part of POSIX interpretation 221); in later versions, single quotes  are\n                     not special within double-quoted word expansions\n\n       compat43\n              \u2022      the  shell  does not print a warning message if an attempt is made to use a quoted compound\n                     assignment as an argument to declare (declare -a foo='(1 2)').  Later  versions  warn  that\n                     this usage is deprecated\n              \u2022      word  expansion  errors  are  considered non-fatal errors that cause the current command to\n                     fail, even in posix mode (the default behavior is to make them fatal errors that cause  the\n                     shell to exit)\n              \u2022      when  executing a shell function, the loop state (while/until/etc.)  is not reset, so break\n                     or continue in that function will break or continue loops in the calling context.  Bash-4.4\n                     and later reset the loop state to prevent this\n\n       compat44\n              \u2022      the  shell  sets  up  the  values used by BASH_ARGV and BASH_ARGC so they can expand to the\n                     shell's positional parameters even if extended debugging mode is not enabled\n              \u2022      a subshell inherits loops from its parent context, so break or continue will cause the sub\u2010\n                     shell to exit.  Bash-5.0 and later reset the loop state to prevent the exit\n              \u2022      variable  assignments  preceding builtins like export and readonly that set attributes con\u2010\n                     tinue to affect variables with the same name in the calling environment even if  the  shell\n                     is not in posix mode\n\n       compat50\n              \u2022      Bash-5.1 changed the way $RANDOM is generated to introduce slightly more randomness. If the\n                     shell compatibility level is set to 50 or lower, it reverts to the method from bash-5.0 and\n                     previous  versions,  so  seeding the random number generator by assigning a value to RANDOM\n                     will produce the same sequence as in bash-5.0\n              \u2022      If the command hash table is empty, bash versions prior to  bash-5.1  printed  an  informa\u2010\n                     tional  message  to  that  effect,  even when producing output that can be reused as input.\n                     Bash-5.1 suppresses that message when the -l option is supplied.\n\nSEE ALSO\n       bash(1), sh(1)\n\nGNU Bash 5.0                                       2004 Apr 20                                  BASH_BUILTINS(1)\n"},{"NOMBRE": "       _exit, _Exit - Produce la terminaci\u00f3n del proceso actual\n\n", "SINOPSIS": "       #include <unistd.h>\n\n       void _exit(int status);\n\n       #include <stdlib.h>\n\n       void _Exit(int status);\n\n", "DESCRIPCION": "       La  funci\u00f3n _exit termina \"inmediatamente\" la ejecuci\u00f3n del proceso invocador.  Todos los descriptores de\n       ficheros abiertos que pertenezcan al proceso se cierran; todos los procesos hijos son  heredados  por  el\n       proceso 1, init, y al proceso padre se le env\u00eda la se\u00f1al SIGCHLD.\n\n       El  valor  status se le devuelve al proceso padre como estado de terminaci\u00f3n del proceso, y se puede leer\n       mediante una de las funciones de la familia de wait.\n\n       La funci\u00f3n _Exit es equivalente a _exit.\n\nVALOR DEVUELTO\n       Estas funciones nunca regresan.\n\nCONFORME A\n       SVr4, SVID, POSIX, X/OPEN, BSD 4.3.  La funci\u00f3n _Exit() fue introducida por C99.\n\n", "OBSERVACIONES": "       Para una discusi\u00f3n sobre los efectos de una llamada exit, la transmisi\u00f3n de estados de  salida,  procesos\n       zombie, se\u00f1ales enviadas, etc., vea exit(3).\n\n       La  funci\u00f3n  _exit  hace  lo  mismo que exit(), pero no llama a ninguna funci\u00f3n registrada con la funci\u00f3n\n       atexit del ANSI C, ni a ning\u00fan manejador de se\u00f1ales registrado. Que la funci\u00f3n vac\u00ede los buffers est\u00e1ndar\n       de  E/S  y elimine los ficheros temporales creados con tmpfile(3) depende de la implementaci\u00f3n.  Por otra\n       parte, _exit no  cierra  los  descriptores  de  fichero  abiertos,  y  \u00e9sto  puede  provocar  un  retardo\n       desconocido, a la espera de finalizar cualquier salida pendiente. Si el retardo es no deseado, podr\u00eda ser\n       util llamar a funciones tales como tcflush() antes de llamar a _exit().  Que cualquier  petici\u00f3n  de  E/S\n       pendiente  sea  cancelada, y qu\u00e9 petici\u00f3n de E/S puede ser cancelada en una llamada _exit() depende de la\n       implementaci\u00f3n.\n\nV\u00c9ASE TAMBI\u00c9N\n       fork(2), execve(2), waitpid(2), wait4(2), kill(2), wait(2), exit(3), termios(3)\n\nLinux                                           17 noviembre 2001                                       _EXIT(2)\n"},{"NOMBRE": "       chdir, fchdir - cambia el directorio de trabajo\n\n", "SINOPSIS": "       #include <unistd.h>\n\n       int chdir(const char *path);\n       int fchdir(int fd);\n\n", "DESCRIPCION": "       chdir cambia el directorio presente a aquel especificado en path.\n\n       fchdir es lo mismo que chdir, solo que el directorio est\u00e1 dado como un descriptor de fichero abierto.\n\nVALOR DEVUELTO\n       En caso de \u00e9xito, cero. Si hay alg\u00fan error, -1, y se asigna a errno un valor apropiado.\n\n", "ERRORES": "       Depediendo  del sistema de ficheros, se pueden devolver otros errores.  Los errores m\u00e1s comunes se listan\n       a continuaci\u00f3n:\n\n       EFAULT path apunta fuera de su espacio de direcciones accesible.\n\n       ENAMETOOLONG\n              path es demasiado largo.\n\n       ENOENT El fichero no existe.\n\n       ENOMEM No hay suficiente memoria disponible en el n\u00facleo.\n\n       ENOTDIR\n              Un componente del camino path no es un directorio.\n\n       EACCES Ha sido denegado el permiso de b\u00fasqueda en uno de los componentes del camino path.\n\n       ELOOP  Se han encontrado demasiados enlaces simb\u00f3licos al resolver path.\n\n       EIO    Ha ocurrido un error de E/S.\n\n       Los errores m\u00e1s comunes para fchdir se muestran a continuaci\u00f3n:\n\n       EBADF  fd no es un descriptor v\u00e1lido de fichero.\n\n       EACCES Se ha denegado el permiso de b\u00fasqueda sobre el directorio abierto en fd.\n\n", "OBSERVACIONES": "       El prototipo para fchdir est\u00e1 disponible solamente si _BSD_SOURCE est\u00e1 definida (bien  expl\u00edcitamente,  o\n       expl\u00edcitamente, al no definir _POSIX_SOURCE o compilando con la opci\u00f3n -ansi).\n\nCONFORME A\n       La  llamada chdir es compatible con SVr4, SVID, POSIX, X/OPEN, 4.4BSD.  SVr4 documenta las condiciones de\n       error adicionales EINTR, ENOLINK y EMULTIHOP pero no tiene ENOMEM.  POSIX.1 no tiene las  condiciones  de\n       error ENOMEM o ELOOP.  X/OPEN no tiene las condiciones de error EFAULT, ENOMEM ni EIO.  La llamada fchdir\n       es compatible con SVr4, 4.4BSD y X/OPEN.  SVr4 documenta las condiciones de error adicionales EIO,  EINTR\n       y ENOLINK.  X/OPEN documenta las condiciones de error adicionales EINTR y EIO.\n\nV\u00c9ASE TAMIBI\u00c9N\n       getcwd(3), chroot(2)\n\nLinux 2.0.30                                     21 agosto 1997                                         CHDIR(2)\n"},{"NOMBRE": "       chmod, fchmod - cambia los permisos de un fichero\n\n", "SINOPSIS": "       #include <sys/types.h>\n       #include <sys/stat.h>\n\n       int chmod(const char *path, mode_t mode);\n       int fchmod(int fildes, mode_t mode);\n\n", "DESCRIPCION": "       Cambia el modo del fichero dado mediante path o referido por fildes\n\n       Los modos se especifican mediante un O l\u00f3gico de los siguientes valores:\n\n              S_ISUID   04000 asignar ID de usuario al ejecutar\n\n              S_ISGID   02000 asignar ID de group al ejecutar\n\n              S_ISVTX   01000 bit pegajoso (sticky bit)\n\n              S_IRUSR (S_IREAD)\n                        00400 lectura para el propietario\n\n              S_IWUSR (S_IWRITE)\n                        00200 escritura para el propietario\n\n              S_IXUSR (S_IEXEC)\n                        00100 ejecuci\u00f3n/busqueda para el propietario\n\n              S_IRGRP   00040 lectura para el grupo\n\n              S_IWGRP   00020 escritura para el grupo\n\n              S_IXGRP   00010 ejecuci\u00f3n/busqueda para el grupo\n\n              S_IROTH   00004 lectura para otros\n\n              S_IWOTH   00002 escritura para otros\n\n              S_IXOTH   00001 ejecuci\u00f3n/busqueda para otros\n\n       El UID efectivo del proceso debe ser cero o debe coincidir con el propietario del fichero.\n\n       Si  el UID efectivo del proceso no es cero y el grupo del fichero no coincide con el ID de grupo efectivo\n       del proceso o con uno de sus IDs de grupo sumplementarios, el bit S_ISGID se desactivar\u00e1, aunque esto  no\n       provocar\u00e1 que se devuelva un error.\n\n       Dependiendo  del  sistema  de  ficheros, los bits S_ISUID y S_ISGID podr\u00edan desactivarse si el fichero es\n       escrito.  En algunos sistemas de ficheros, solo el superusuario puede asignar el bit  pegajoso,  lo  cual\n       puede  tener  un  significado  especial.   Para  el  bit  pegajoso,  y  para  los  bits SUID y SGID sobre\n       directorios, v\u00e9ase stat(2).\n\n       En sistemas de ficheros NFS, la restricci\u00f3n de  permisos  influir\u00e1  inmediatamente  en  los  ficheros  ya\n       abiertos,  ya que el control de acceso se hacen en el servidor, pero los ficheros abiertos son mantenidos\n       por el cliente. La ampliaci\u00f3n de permisos puede verse retrasada para otros  clientes  si  en  ellos  est\u00e1\n       habilitada la ocultaci\u00f3n (caching) de atributos.\n\nVALOR DEVUELTO\n       En caso de \u00e9xito, devuelve 0. En caso de error, -1 y se asigna a la variable errno un valor adecuado.\n\n", "ERRORES": "       Dependiendo del sistema de ficheros, se pueden devolver otros errores. Los m\u00e1s generales para chmod est\u00e1n\n       listados a continuaci\u00f3n:\n\n       EPERM  El UID efectivo no coincide con el propietario del fichero, o no es cero.\n\n       EROFS  El fichero nombrado reside en un sistema de ficheros de s\u00f3lo lectura.\n\n       EFAULT path apunta fuera del espacio de direcciones accesible.\n\n       ENAMETOOLONG\n              path es demasiado largo.\n\n       ENOENT El fichero no existe.\n\n       ENOMEM No hubo suficiente memoria en el n\u00facleo.\n\n       ENOTDIR\n              Un componente del camino path no es un directorio.\n\n       EACCES Se ha denegado el permiso de b\u00fasqueda para uno de los componentes del camino.\n\n       ELOOP  Se han encontrado demasiados enlaces simb\u00f3licos al resolver path.\n\n       EIO    Ha ocurrido un error de E/S.\n\n       Los errores comunes para fchmod son:\n\n       EBADF  El descriptor de fichero fildes no es v\u00e1lido.\n\n       EROFS  Lea nota anterior.\n\n       EPERM  Lea nota anterior.\n\n       EIO    Lea nota anterior.\n\nCONFORME A\n       La llamada chmod conforma con SVr4, SVID, POSIX, X/OPEN, 4.4BSD.  SVr4 documenta adem\u00e1s  las  condiciones\n       de  error  EINTR,  ENOLINK  y  EMULTIHOP,  pero no ENOMEM.  POSIX.1 no documenta las condiciones de error\n       EFAULT, ENOMEM, ELOOP y EIO, ni las macros S_IREAD, S_IWRITE y S_IEXEC.\n\n       La llamada fchmod conforma con 4.4BSD y SVr4.  SVr4 documenta adem\u00e1s las condiciones  de  error  EINTR  y\n       ENOLINK.   Si  se define al menos una de la variables _POSIX_MAPPED_FILES o _POSIX_SHARED_MEMORY_OBJECTS,\n       POSIX exige la funci\u00f3n fchmod y documenta las condiciones de error adicionales ENOSYS y EINVAL,  pero  no\n       documenta EIO.\n\nV\u00c9ASE TAMBI\u00c9N\n       open(2), chown(2), execve(2), stat(2)\n\nLinux 2.0.32                                    10 diciembre 1997                                       CHMOD(2)\n"},{"NOMBRE": "       chown, fchown, lchown - cambian el propietario de un fichero\n\n", "SINOPSIS": "       #include <sys/types.h>\n       #include <unistd.h>\n\n       int chown(const char *path, uid_t owner, gid_t group);\n       int fchown(int fd, uid_t owner, gid_t group);\n       int lchown(const char *path, uid_t owner, gid_t group);\n\n", "DESCRIPCION": "       Cambia el propietario del fichero especificado por path o fd.  Solamente el superusuario puede cambiar el\n       propietario de un fichero.  El propietario de un fichero puede  cambiar  el  grupo  de  dicho  fichero  a\n       cualquier grupo al que dicho usuario pertenezca. El superusuario puede cambiar el grupo arbitrariamente.\n\n       Si a owner o group se asigna -1, entonces dicho ID no se altera.\n\n       Cuando  un no superusuario cambia el propietario o grupo de un fichero ejecutable, se limpian los bits de\n       modo S_ISUID y S_ISGID. POSIX no especifica si esto tambi\u00e9n debe ocurrir cuando el  superusuario  realiza\n       un  chown;  el  comportamiento  de  Linux  depende  de la versi\u00f3n del n\u00facleo. En el caso de un fichero no\n       ejecutable para el grupo (con el bit S_IXGRP limpio) el bit S_ISGID indica un bloqueo obligatorio y no se\n       limpia al ejecutar chown.\n\nVALOR DEVUELTO\n       En  caso  de \u00e9xito, devuelve 0. Si se encuentra alg\u00fan error, devuelve -1, y a errno se le asigna un valor\n       apropiado.\n\n", "ERRORES": "       Dependiendo del sistema de ficheros, se pueden generar otros errores.  Los  errores  m\u00e1s  generales  para\n       chown son:\n\n       EPERM  El UID efectivo no coincide con el propietario del fichero, y no es cero; o el propietario (owner)\n              o grupo (group) han sido especificados incorrectamente.\n\n       EROFS  El fichero en cuesti\u00f3n reside en un sistema de ficheros de s\u00f3lo lectura.\n\n       EFAULT path apunta fuera de su espacio de direcciones accesible.\n\n       ENAMETOOLONG\n              path es demasiado largo.\n\n       ENOENT El fichero no existe.\n\n       ENOMEM No hab\u00eda suficiente memoria disponible en el n\u00facleo.\n\n       ENOTDIR\n              Un componente del camino path no es un directorio.\n\n       EACCES Permiso de busqueda denegado en un componente del camino (path).\n\n       ELOOP  Se encontraron demasiados enlaces simb\u00f3licos al resolver path.\n\n       Los errores comunes para fchown se listan a continuaci\u00f3n:\n\n       EBADF  El descriptor no es v\u00e1lido.\n\n       ENOENT Lea nota anterior.\n\n       EPERM  Lea nota anterior.\n\n       EROFS  Lea nota anterior.\n\n       EIO    Ocurri\u00f3 un error de E/S de bajo nivel mientras se modificaba el nodo-i.\n\n", "OBSERVACIONES": "       En las versiones de Linux anteriores a la 2.1.81 (y distintas de la 2.1.46), chown no segu\u00eda los  enlaces\n       simb\u00f3licos.   Desde  la  versi\u00f3n  2.1.81  de  Linux chown sigue los enlaces simb\u00f3licos y existe una nueva\n       llamada al sistema, lchown, que no sigue los enlaces simb\u00f3licos.  Desde la versi\u00f3n 2.1.86 de Linux,  esta\n       nueva  llamada  (que  tiene  la misma sem\u00e1ntica que la antigua chown) tiene el mismo n\u00famero de llamada al\n       sistema y chown obtiene el n\u00famero reci\u00e9n introducido.\n\n       El     prototipo     para     fchown     s\u00f3lo     est\u00e1     disponible     si     se      ha      definido\n       _BSD_SOURCE(bienexpl\u00edcitamente,oexpl\u00edcitamente,alnodefinir  _POSIX_SOURCE  o  compilando  con  la  opci\u00f3n\n       -ansi).\n\nCONFORME A\n       La llamada chown es conforme a SVr4, SVID, POSIX y X/OPEN.  La versi\u00f3n de esta  llamada  en  4.4BSD  s\u00f3lo\n       puede  ser  usada  por  el superusuario (es decir, los usuarios ordinarios no pueden dar ficheros a otros\n       usuarios).  SVr4 documenta otras condiciones de error como EINVAL, EINTR, ENOLINK y  EMULTIHOP,  pero  no\n       ENOMEM.  POSIX.1 no documenta las codiciones de error ENOMEM ni ELOOP.\n\n       La  llamada  fchown  es conforme a 4.4BSD y SVr4.  SVr4 documenta adem\u00e1s las condiciones de error EINVAL,\n       EIO, EINTR y ENOLINK.\n\n", "RESTRICCIONES": "       La sem\u00e1ntica de chown() es violada deliberadamente en los sistemas de ficheros NFS que han habilitado  la\n       asociaci\u00f3n  del  UID.  Adem\u00e1s,  se  viola la sem\u00e1ntica de todas las llamadas al sistema que acceden a los\n       contenidos de los ficheros ya que chown()  pueden  producir  la  revocaci\u00f3n  de  acceso  inmediata  sobre\n       ficheros  ya  abiertos. La ocultaci\u00f3n (caching) en los clientes puede producir retrasos entre el instante\n       en que la propiedad ha sido cambiada para permitir el acceso de un  usuario  y  el  instante  en  que  el\n       fichero puede realmente ser accedido por el usuario en otros clientes.\n\nV\u00c9ASE TAMBI\u00c9N\n       chmod(2), flock(2).\n\nLinux 2.1.81                                      18 mayo 1997                                          CHOWN(2)\n"},{"NOMBRE": "       fcntl - manipula el descriptor de fichero\n\n", "SINOPSIS": "       #include <unistd.h>\n       #include <fcntl.h>\n\n       int fcntl(int fd, int cmd);\n       int fcntl(int fd, int cmd, long arg);\n       int fcntl(int fd, int cmd, struct flock *lock);\n\n", "DESCRIPCION": "       fcntl  realiza  una de las diversas y variadas operaciones que se pueden hacer sobre fd.  La operaci\u00f3n en\n       cuesti\u00f3n se determina mediante cmd.\n\n   Tratamiento de la bandera \u00abcerrar al ejecutar\u00bb\n       F_DUPFD\n              Busca el descriptor de fichero disponible de menor n\u00famero, mayor o igual que arg, y  lo  convierte\n              en una copia de fd.  Esto es diferente en dup2(2) que usa exactamente el descriptor especificado.\n\n              Los  descriptores  antiguo  y  nuevo  pueden  usarse  indistintamente.  Ambos  comparten  bloqueos\n              (``locks''), indicadores de posici\u00f3n de ficheros y opciones o banderas (``flags'');  por  ejemplo,\n              si  la  posici\u00f3n  del fichero se modifica usando lseek en uno de los descriptores, la posici\u00f3n del\n              otro resulta modificada simult\u00e1neamente.\n\n              Sin embargo, los dos descriptores no comparten la bandera close-on-exec (\u00abcerrar al ejecutar\u00bb). La\n              bandera  close-on-exec  de  la  copia  est\u00e1  desactivada,  lo  que  significa que no se cerrar\u00e1 al\n              ejecutar.\n\n              En caso de \u00e9xito, se devuelve el nuevo descriptor.\n\n       F_GETFD\n              Lee la bandera close-on-exec.  Si el bit FD_CLOEXEC es 0,  el  fichero  permanecer\u00e1  abierto  tras\n              exec, en caso contrario se cerrar\u00e1 el fichero.\n\n       F_SETFD\n              Establece la bandera close-on-exec al valor especificado por el bit FD_CLOEXEC de arg.\n\n   Banderas de situaci\u00f3n de un fichero\n       Un  descriptor  de  fichero  posee  ciertas  banderas asociadas, inicializadas por open(2) y posiblemente\n       modificadas por fcntl(2).  Las banderas se comparten entre copias (hechas con dup(2), fork(2), etc.)  del\n       mismo descriptor de fichero.\n\n       Las banderas y su sem\u00e1ntica est\u00e1n descritas en open(2).\n\n       F_GETFL\n              Lee las banderas de un descriptor de fichero.\n\n       F_SETFL\n              De  las  banderas  de  un  descriptor,  establece  la parte que se corresponde con las banderas de\n              situaci\u00f3n de un fichero al valor especificado por  arg.   Los  restantes  bits  (modo  de  acceso,\n              banderas  de  creaci\u00f3n  de un fichero) de arg se ignoran.  En Linux, esta orden s\u00f3lo puede cambiar\n              las banderas O_APPEND, O_NONBLOCK, O_ASYNC y O_DIRECT.\n\n   Bloqueos (candados) consultivos\n       F_GETLK, F_SETLK y F_SETLKW se usan para adquirir, liberar y  comprobar  la  existencia  de  bloqueos  de\n       registros  (tambi\u00e9n  conocidos como bloqueos de segmentos de ficheros o regiones de ficheros).  El tercer\n       argumento lock es un puntero a una estructura que tiene, al menos, los siguientes  campos  (en  un  orden\n       indeterminado).\n\n         struct flock {\n             ...\n             short l_type;    /* Tipo de bloqueo: F_RDLCK,\n                                 F_WRLCK, F_UNLCK */\n             short l_whence;  /* C\u00f3mo interpretar l_start:\n                                 SEEK_SET, SEEK_CUR, SEEK_END */\n             off_t l_start;   /* Direcci\u00f3n de inicio del bloqueo */\n             off_t l_len;     /* N\u00famero de bytes a bloquear */\n             pid_t l_pid;     /* PID del proceso que bloquea nuestro candado\n                                 (s\u00f3lo F_GETLK) */\n             ...\n         };\n\n       Los  campos  l_whence,  l_start  y  l_len  de  esta estructura especifican el rango de bytes que deseamos\n       bloquear.  l_start es la direcci\u00f3n inicial para el bloqueo y se interpreta  relativa  a:  el  inicio  del\n       fichero  (si  l_whence es SEEK_SET); la posici\u00f3n actual dentro del fichero (si l_whence es SEEK_CUR) o el\n       fin del fichero (si l_whence es SEEK_END).  En los  dos  \u00faltimos  casos,  l_start  puede  ser  un  n\u00famero\n       negativo  siempre  que  la direcci\u00f3n inicial final no quede antes del principio del fichero.  l_len es un\n       entero no negativo (aunque vea NOTAS m\u00e1s abajo) que indica el n\u00famero de bytes a bloquear. Los  bytes  que\n       se  encuentren  m\u00e1s  all\u00e1  del  final del fichero se pueden bloquear, pero no los bytes que se encuentren\n       antes del inicio del fichero. El especificar 0 para l_len tiene un significado especial:  bloquear  todos\n       los  bytes  desde  la  posici\u00f3n  indicada por l_whence y l_start hasta el final del fichero, sin importar\n       cu\u00e1nto crezca el fichero.\n\n       El campo l_type se puede usar para colocar un bloqueo de lectura (F_RDLCK) o de escritura (F_WDLCK) sobre\n       un  fichero.  Varios procesos pueden tener un bloqueo de lectura (bloqueo compartido) sobre una regi\u00f3n de\n       fichero, pero s\u00f3lo un proceso puede tener  un  bloqueo  de  escritura  (bloqueo  exclusivo).  Un  bloqueo\n       exclusivo  excluye  a  todos los dem\u00e1s bloqueos, tanto compartidos como exclusivos. Un \u00fanico proceso s\u00f3lo\n       puede tener un tipo de bloqueo sobre una regi\u00f3n de fichero; si se aplica un nuevo bloqueo a una regi\u00f3n ya\n       bloqueada,  el  bloqueo  existente  se  convierte  al  nuevo tipo de bloqueo.  (Tales conversiones pueden\n       suponer dividir, reducir o fusionar un bloqueo existente si el rango de bytes especificado por  el  nuevo\n       bloqueo no coincide exactamente con el rango del bloqueo existente).\n\n       F_SETLK\n              Adquiere  un  bloqueo  (cuando  l_type es F_RDLCK o F_WRLCK) o libera un bloqueo (cunado l_type es\n              F_UNLCK) sobre los bytes especificados por los campos l_whence, l_start y l_len de lock.  Si  otro\n              proceso  mantiene  ya  un  bloqueo  que  entra en conflicto con el nuevo, la llamada devuelve -1 y\n              asigna a errno el c\u00f3digo de error EACCES o EAGAIN.\n\n       F_SETLKW\n              Como F_SETLK, pero si ya hay un bloqueo sobre el fichero que entra  en  conflicto  con  el  nuevo,\n              entonces  espera  a  que  el  bloqueo  se libere. Si llega y se captura una se\u00f1al mientras se est\u00e1\n              esperando, se interrumpe la llamada y (tras terminar el manejador de se\u00f1al) regresa inmediatamente\n              (devolviendo -1 y asignado a errno el valor EINTR).\n\n       F_GETLK\n              Al  entrar  a esta llamada, lock describe un bloqueo que nos gustar\u00eda colocar en un fichero. Si el\n              bloqueo se pudiera colocar, fcntl() realmente no lo colocar\u00e1, pero devolver\u00e1 F_UNLCK en  el  campo\n              l_type  de  lock  y  dejar\u00e1  los  otros campos de la estructura sin cambiar. Si uno o m\u00e1s bloqueos\n              incompatibles impidieran que este bloqueo se colocara, entonces fcntl() devolver\u00e1  detalles  sobre\n              uno  de  estos bloqueos en los campos l_type, l_whence, l_start y l_len de lock y asignar\u00e1 a l_pid\n              el PID del proceso que posee el bloqueo.\n\n       Para colocar un bloqueo de lectura, se debe abrir fd para lectura. Para colocar un bloqueo de  escritura,\n       se  debe  abrir  fd  para  escritura. Para colocar ambos tipos de bloqueo, abra un fichero para lectura y\n       escritura.\n\n       Adem\u00e1s de ser eliminados por un F_UNLCK expl\u00edcito, los bloqueos de registros se  liberan  autom\u00e1ticamente\n       cuando un proceso termina o cierra cualquier descriptor de fichero que haga referencia a un fichero sobre\n       el que se mantienen los bloqueos.  Esto est\u00e1 mal: significa que un  proceso  puede  perder  los  bloqueos\n       sobre  un fichero como /etc/passwd o /etc/mtab cuando, por alguna raz\u00f3n, una funci\u00f3n de biblioteca decida\n       abrir, leer y cerrar el fichero.\n\n       Los bloqueos de registros no los hereda un hijo creado mediante fork(2), pero se conservan  a  trav\u00e9s  de\n       execve(2).\n\n       Debido  al  almacenamiento  temporal  que realiza stdio(3), se deber\u00eda evitar el bloqueo de registros con\n       rutinas de esa biblioteca; en su lugar, use read(2) y write(2).\n\n   Bloqueos obligatorios\n       (No POSIX.)  Los bloqueos de registro anteriores pueden ser o bien consultivos o bien obligatorios, y son\n       consultivos  por  omisi\u00f3n. Para usar bloqueos obligatorios, se debe habilitar dicho tipo de bloqueo en el\n       sistema de ficheros que contiene el fichero a bloquear (usando la opci\u00f3n \"-o mand\" en mount(8)) y  en  el\n       propio  fichero  (deshabilitando  el permiso de ejecuci\u00f3n para el grupo y activado el bit de permiso set-\n       GID).\n\n       Los bloqueos consultivos no son de obligado cumplimiento y s\u00f3lo son \u00fatiles entre procesos  que  cooperan.\n       Los bloqueos obligatorios son respetados por todos los procesos.\n\n   Manejo de se\u00f1ales\n       F_GETOWN, F_SETOWN, F_GETSIG y F_SETSIG se utilizan para gestionar las se\u00f1ales de disponibilidad de E/S:\n\n       F_GETOWN\n              Obtiene  el ID de proceso o el grupo de procesos que actualmente recibe las se\u00f1ales SIGIO y SIGURG\n              para los eventos sobre el descriptor de fichero fd.\n\n              Los grupos de procesos se devuelven como valores negativos.\n\n       F_SETOWN\n              Establece el ID de proceso o el grupo de procesos que recibir\u00e1 las se\u00f1ales SIGIO y SIGURG para los\n              eventos sobre el descriptor de fichero fd.\n\n              Los  grupos  de  procesos se especifican mediante valores negativos.  (Se puede usar F_SETSIG para\n              especificar una se\u00f1al diferente a SIGIO).\n\n              Si activa la bandera de estado O_ASYNC sobre un descriptor de fichero (tanto si  proporciona  esta\n              bandera  con la llamada open(2) como si usa la orden F_SETFL de fcntl), se enviar\u00e1 una se\u00f1al SIGIO\n              cuando sea posible la entrada o la salida sobre ese descriptor de fichero.\n\n              El proceso o el grupo de procesos que recibir\u00e1 la se\u00f1al  se  puede  seleccionar  usando  la  orden\n              F_SETOWN  de  la  funci\u00f3n  fcntl.   Si  el descriptor de fichero es un conector (``socket''), esto\n              tambi\u00e9n seleccionar\u00e1 al recipiente de las se\u00f1ales SIGURG que se entregan cuando llegan datos fuera\n              de  orden  (``out-of-band'',  OOB) sobre el enchufe. (SIGURG se env\u00eda en cualquier situaci\u00f3n en la\n              que select(2) informar\u00eda que el conector tiene una \"condici\u00f3n excepcional\"). Si el  descriptor  de\n              fichero corresponde a un dispositivo de terminal, entonces las se\u00f1ales SIGIO se env\u00edan al grupo de\n              procesos en primer plano de la terminal.\n\n       F_GETSIG\n              Obtiene la se\u00f1al enviada cuando la entrada o la salida son posibles. Un valor cero  significa  que\n              se  env\u00eda SIGIO. Cualquier otro valor (incluyendo SIGIO) es la se\u00f1al enviada en su lugar y en este\n              caso se dispone de informaci\u00f3n adicional para el  manejador  de  se\u00f1al  si  \u00e9ste  se  instala  con\n              SA_SIGINFO.\n\n       F_SETSIG\n              Establece  la  se\u00f1al  enviada  cuando la entrada o la salida son posibles. Un valor cero significa\n              enviar la se\u00f1al por defecto SIGIO. Cualquier otro valor (incluyendo SIGIO) es la se\u00f1al a enviar en\n              su  lugar  y en este caso se dispone de informaci\u00f3n adiciona para el manejador de se\u00f1al si \u00e9ste se\n              instala con SA_SIGINFO.\n\n              Usando F_SETSIF con un valor distinto de cero y asignando SA_SIGINFO para el  manejador  de  se\u00f1al\n              (vea  sigaction(2)),  se  pasa  informaci\u00f3n  extra  sobre  los  eventos  de E/S al manejador en la\n              estructura siginfo_t.  Si el campo si_code indica que  la  fuente  es  SI_SIGIO,  el  campo  si_fd\n              proporciona  el descriptor de fichero asociado con el evento. En caso contrario, no se indican qu\u00e9\n              descriptores de ficheros hay pendientes y, para  determinar  qu\u00e9  descriptores  de  fichero  est\u00e1n\n              disponibles  para  E/S,  deber\u00eda  usar  los  mecanismos  usuales  (select(2), poll(2), read(2) con\n              O_NONBLOCK activo, etc.).\n\n              Seleccionando una se\u00f1al de tiempo real POSIX.1b (valor >=  SIGRTMIN),  se  pueden  encolar  varios\n              eventos  de  E/S  usando  los  mismos  n\u00fameros  de  se\u00f1al.  (El encolamiento depende de la memoria\n              disponible). Se dispone de informaci\u00f3n extra si se asigna SA_SIGINFO al manejador de  se\u00f1al,  como\n              antes.\n\n       Usando  estos  mecanismos,  un programa puede implementar E/S totalmente as\u00edncrona, sin usar select(2) ni\n       poll(2) la mayor parte del tiempo.\n\n       El uso de O_ASYNC, F_GETOWN y F_SETOWN es espec\u00edfico de Linux y BSD.  F_GETSIG y F_SETSIG son espec\u00edficos\n       de  Linux.  POSIX  posee E/S as\u00edncrona y la estructura aio_sigevent para conseguir cosas similares; \u00e9stas\n       tambi\u00e9n est\u00e1n disponibles en Linux como parte de la biblioteca de C de GNU (GNU C Library, Glibc).\n\n   Arrendamientos\n       F_SETLEASE y F_GETLEASE (Linux 2.4 y posteriores) se usan (respectivamente) para establecer y obtener  la\n       configuraci\u00f3n  actual  del  arrendamiento del proceso invocador sobre el fichero referenciado por fd.  Un\n       arrendamiento de  fichero  proporciona  un  mecanismo  por  medio  del  cual  al  proceso  que  posee  el\n       arrendamiento (el \"arrendatario\") se le notifica (mediante el env\u00edo de una se\u00f1al) cu\u00e1ndo otro proceso (el\n       \"competidor\") intenta abrir (open(2)) o truncar (truncate(2)) ese fichero.\n\n       F_SETLEASE\n              Establece o elimina un arrendamiento de fichero seg\u00fan qu\u00e9 valor de los siguientes  se  especifique\n              en el entero arg:\n\n              F_RDLCK\n                     Obtiene  un arrendamiento de lectura. Esto har\u00e1 que se nos informe cuando otro proceso abra\n                     el fichero para escribir en \u00e9l o cuando lo trunque.\n\n              F_WRLCK\n                     Obtiene un arrendamiento de escritura. Esto har\u00e1 que se nos  informe  cuando  otro  proceso\n                     abra el fichero (para leer o escribir) o lo trunque. S\u00f3lo se puede colocar un arrendamiento\n                     de escritura en un fichero cuando ning\u00fan otro proceso lo tenga abierto en ese momento.\n\n              F_UNLCK\n                     Elimina nuestro arrendamiento del fichero.\n\n       Un proceso s\u00f3lo puede tener un tipo de arrendamiento sobre un fichero.\n\n       Los arrendamientos s\u00f3lo se pueden obtener para ficheros regulares. Un proceso normal s\u00f3lo  puede  obtener\n       un arrendamiento sobre un fichero cuyo UID coincida con el UID de sistema de ficheros del proceso.\n\n       F_GETLEASE\n              Indica qu\u00e9 tipo de arrendamiento tenemos sobre el fichero referenciado por fd devolviendo F_RDLCK,\n              F_WRLCK o F_UNLCK, lo que indica, respectivamente, que el proceso invocador posee un arrendamiento\n              de  lectura,  de  escritura  o  que  no  posee  arrendamiento alguno sobre el fichero.  (El tercer\n              argumento de fcntl() se omite.)\n\n       Cuando el competidor realiza un  open()  o  truncate()  que  entra  en  conflicto  con  un  arrendamiento\n       establecido  mediante  F_SETLEASE, el n\u00facleo bloquea la llamada al sistema (a menos que se especifique la\n       opci\u00f3n O_NONBLOCK en open(), en cuyo caso la llamada regresa inmediatamente con  el  error  EWOULDBLOCK).\n       El  n\u00facleo  entonces  notifica al arrendatario envi\u00e1ndole una se\u00f1al (SIGIO por omisi\u00f3n).  El arrendatario\n       debe responder a la recepci\u00f3n de esta se\u00f1al haciendo cualquier limpieza que sea necesaria  para  preparar\n       el fichero para que sea accedido por otro proceso (por ejemplo, vaciando los buffers en cach\u00e9) y entonces\n       eliminar su arrendamiento ejecuntado una orden F_SETLEASE que especifique en arg el valor F_UNLCK.\n\n       Si  el  arrendatario  no  libera  el  arrendamiento  antes  del  n\u00famero  de  segundos   especificado   en\n       /proc/sys/fs/lease-break-time  y  la  llamada  al  sistema  del  competidor sigue bloqueada (es decir, el\n       competidor no especific\u00f3 O_NONBLOCK en su llamada open() y la llamada al sistema no ha sido  interrumpida\n       por un manejador de se\u00f1al), entonces el n\u00facleo pone fin al arrendamiento del arrendatario por la fuerza.\n\n       Una  vez  que  se  ha  eliminado  voluntariamente  o  por la fuerza el arrendamiento, y suponiendo que el\n       competidor no ha desbloqueado su llamada al sistema, el n\u00facleo permite continuar a la llamada al  sistema\n       del competidor.\n\n       La  se\u00f1al  por omisi\u00f3n que se usa para informar al arrendatario es SIGIO, pero se puede cambiar usando la\n       orden F_SETSIG de fcntl ().  Si se ejecuta una orden F_SETSIG (incluso una que especifique  SIGIO)  y  el\n       manejador de se\u00f1al se establece usando SA_SIGINFO, el manejador recibir\u00e1 una estructura siginfo_t como su\n       segundo argumento y el campo si_fd de este argumento contendr\u00e1 el descriptor del fichero arrendado que ha\n       sido accedido por otro proceso. (Esto es \u00fatil si el invocador tiene arrendamientos para varios ficheros).\n\n   Notificaci\u00f3n de cambios en ficheros y directorios\n       F_NOTIFY\n              (Linux 2.4 y posteriores) Produce una notificaci\u00f3n cuando cambia el directorio referenciado por fd\n              o cualquiera de los ficheros que contiene. Los eventos a notificar se indican en arg, que  es  una\n              m\u00e1scara de bits que se especifica mediante un O-l\u00f3gico de cero o m\u00e1s de los siguientes bits:\n\n              Bit         Descripci\u00f3n (evento en el directorio)\n              \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n              DN_ACCESS   Se ha accedido a un fichero (read, pread, readv)\n              DN_MODIFY   Se ha modificado un fichero (write, pwrite,\n                          writev, truncate, ftruncate)\n              DN_CREATE   Se ha creado un fichero (open, creat, mknod,\n                          mkdir, link, symlink, rename)\n              DN_DELETE   Se ha borrando un fichero (unlink, rename a\n                          otro directorio, rmdir)\n              DN_RENAME   Se ha cambiado el nombre de un fichero de este\n                          directorio (rename)\n              DN_ATTRIB   Se han cambiado los atributos de un fichero\n                          (chown, chmod, utime[s])\n\n              (Para obtener estas definiciones, se debe define la macro _GNU_SOURCE antes de incluir <fcntl.h>.)\n\n              Las notificaciones de directorio normalmente se reciben una \u00fanica vez (son de tipo ``one-shot'') y\n              la aplicaci\u00f3n debe volver a hacer  el  registro  para  recibir  notificaciones  adicionales.  Otra\n              posibilidad es incluir DN_MULTISHOT en arg, en cuyo caso la notificaci\u00f3n se producir\u00e1 hasta que se\n              elimine expl\u00edcitamente.  Una serie de llamadas que especifican DN_MULTISHOT  es  acumulativa,  con\n              los  eventos  en  arg a\u00f1adi\u00e9ndose al conjunto ya monitorizado.  Para desactivar la notificaci\u00f3n de\n              todos los eventos, haga una llamada F_NOTIFY especificando 0 en arg.\n\n              La notificaci\u00f3n se produce mediante el env\u00edo de una se\u00f1al. La se\u00f1al por omisi\u00f3n es SIGIO, pero  se\n              puede  cambiar  usando  la  orden  F_SETSIG de fcntl().  En el segundo caso, el manejador de se\u00f1al\n              recibe una estructura siginfo_t como su segundo argumento (si el manejador  se  estableci\u00f3  usando\n              SA_SIGINFO)  y  el campo si_fd de esta estructura contiene el descriptor de fichero que produjo la\n              notificaci\u00f3n (\u00fatil cuando se establecen notificaciones en varios directorios).\n\n              Especialmente cuando se usa DN_MULTISHOT, se deber\u00eda usar una se\u00f1al POSIX.1b de tiempo  real  para\n              notificaci\u00f3n, de tal manera que se pueden encolar multiples notificaciones.\n\nVALOR DEVUELTO\n       Para una llamada con \u00e9xito, el valor devuelto depende de la operaci\u00f3n:\n\n       F_DUPFD  El nuevo descriptor.\n\n       F_GETFD  Valor de la bandera.\n\n       F_GETFL  Valor de las banderas.\n\n       F_GETOWN Valor del propietario del descriptor.\n\n       F_GETSIG Valor  de  la  se\u00f1al  enviada  cuando  la  lectura  o  la  escritura son posibles o cero para el\n                comportamiento tradicional con SIGIO.\n\n       Para cualquier otra orden\n                Cero.\n\n       En caso de error el valor devuelto es -1 y se asigna a errno un valor apropiado.\n\n", "ERRORES": "       EACCESS o EAGAIN\n              Se ha prohibido la operaci\u00f3n debido a bloqueos mantenidos por otros procesos.  O se  ha  prohibido\n              la operaci\u00f3n porque el fichero ha sido proyectado (``mapped'') en memoria por otro proceso.\n\n       EDEADLK\n              Se ha detectado que la orden F_SETLKW especificada provocar\u00eda un interbloqueo.\n\n       EFAULT lock est\u00e1 fuera de su espacio de direcciones accesible.\n\n       EBADF  fd  no es un descriptor de fichero abierto o la orden era F_SETLK o F_SETLKW y el modo de apertura\n              del descriptor de fichero no coincide con el tipo de bloqueo solicitado.\n\n       EINTR  Para F_SETLKW, la orden ha sido interrumpida por una se\u00f1al.  Para F_GETLK y F_SETLK, la  orden  ha\n              sido  interrumpida  por  una  se\u00f1al  antes  de que el bloqueo se haya comprobado o adquirido. Esto\n              ocurre con m\u00e1s probabilidad al poner un bloqueo en un fichero  remoto  (por  ejemplo,  un  bloqueo\n              sobre NFS) pero algunas veces puede ocurrir localmente.\n\n       EINVAL Para  F_DUPFD,  arg es negativo o mayor que el valor m\u00e1ximo permitido. Para F_SETSIG, arg no es un\n              n\u00famero de se\u00f1al permitido.\n\n       EMFILE Para F_DUPFD, el proceso ya ha llegado al n\u00famero m\u00e1ximo de descriptores de ficheros abiertos.\n\n       ENOLCK Demasiados bloqueos de segmentos abiertos, la tabla  de  bloqueos  est\u00e1  llena  o  ha  fallado  un\n              protocolo de bloqueos remoto (por ejemplo, un bloqueo sobre NFS).\n\n       EPERM  Se ha intentado quitar la bandera O_APPEND sobre un fichero que tiene activo el atributo de ``s\u00f3lo\n              a\u00f1adir'' (append-only).\n\n", "OBSERVACIONES": "       Los errores devueltos por dup2 son distintos de aqu\u00e9llos dados por F_DUPFD.\n\n       Desde el n\u00facleo 2.0, no hay interacci\u00f3n entre los tipos de bloqueo colocados por flock(2) y fcntl(2).\n\n       POSIX 1003.1-2001 permite que l_len sea negativo. (Y si lo es, el intervalo descrito por el bloqueo cubre\n       los  bytes  desde  l_start+l_len  hasta l_start-1 inclusive.)  Sin embargo, para los n\u00facleos actuales, la\n       llamada al sistema de Linux devuelve EINVAL en esta situaci\u00f3n.\n\n       Otros sistemas tienen m\u00e1s campos en struct flock como, por ejemplo, l_sysid.  Evidentemente,  l_pid  s\u00f3lo\n       no va a ser muy \u00fatil si el proceso que posee el bloqueo puede residir en una m\u00e1quina diferente.\n\nCONFORME A\n       SVID,  AT&T,  POSIX,  X/OPEN,  BSD 4.3. S\u00f3lo las operaciones F_DUPFD, F_GETFD, F_SETFD, F_GETFL, F_SETFL,\n       F_GETLK, F_SETLK y F_SETLKW se especifican en POSIX.1. F_GETOWN y F_SETOWN son BSD-ismos no aceptados  en\n       SVr4; F_GETSIG y F_SETSIG son espec\u00edficos de Linux.  F_NOTIFY, F_GETLEASE y F_SETLEASE son espec\u00edficos de\n       Linux.  (Defina la macro _GNU_SOURCE antes de incluir <fcntl.h> para obtener  estas  definiciones.)   Las\n       banderas  legales  para  F_GETFL/F_SETFL  son  aqu\u00e9llas que acepta open(2) y var\u00edan entre estos sistemas;\n       O_APPEND, O_NONBLOCK, O_RDONLY y O_RDWR son las que se mencionan en POSIX.1. SVr4  admite  algunas  otras\n       opciones y banderas no documentadas aqu\u00ed.\n\n       SVr4 documenta las condiciones de error adicionales EIO, ENOLINK y EOVERFLOW.\n\nV\u00c9ASE TAMBI\u00c9N\n       dup2(2), flock(2), lockf(3), open(2), socket(2)\n\n       Vea tambi\u00e9n locks.txt, mandatory.txt y dnotify.txt en /usr/src/linux/Documentation.\n\nLinux-2.5.18                                       24-04-2002                                           FCNTL(2)\n"},{"NOMBRE": "       fdatasync - sincroniza los datos en memoria de un fichero con los de disco\n\n", "SINOPSIS": "       #include <unistd.h>\n\n       #ifdef _POSIX_SYNCHRONIZED_IO\n\n       int fdatasync(int fd);\n\n       #endif\n\n", "DESCRIPCION": "       fdatasync  vuelca  todos  los  b\u00faferes de datos de un fichero a disco (antes de que regrese la llamada al\n       sistema). Se parece a fsync pero no requiere actualizar metadatos tales como la fecha/hora de acceso.\n\n       Las aplicaciones que acceden a bases de datos o ficheros de registro a menudo escriben  un  fragmento  de\n       datos  peque\u00f1o  (p.  ej.  una l\u00ednea en un fichero de registro) y luego llaman a fsync inmediatamente para\n       asegurarse de que los datos escritos se guarden f\u00edsicamente en el disco duro.  Desafortunadamente,  fsync\n       siempre  iniciar\u00e1 dos operaciones de escritura: una para los datos reci\u00e9n escritos y otra para actualizar\n       la hora de modificaci\u00f3n guardada en el nodo-\u00ed. Si esta hora de modificaci\u00f3n no es una parte conceptual de\n       la transacci\u00f3n, fdatasync puede emplearse para evitar operaciones innecesarias de escritura del nodo-\u00ed en\n       disco.\n\nVALOR DEVUELTO\n       En caso de \u00e9xito, se devuelve cero. En caso de error, -1, y se guarda en errno un valor apropiado.\n\n", "ERRORES": "       EBADF  fd no es un descriptor v\u00e1lido de fichero abierto para escritura.\n\n       EROFS, EINVAL\n              fd pertenece a un fichero especial que no admite sincronizaci\u00f3n.\n\n       EIO    Ha ocurrido un error durante la sincronizaci\u00f3n.\n\n", "FALLOS": "       Actualmente (Linux 2.2) fdatasync equivale a fsync.\n\nCONFORME A\n       POSIX1b (anteriormente, POSIX.4)\n\nV\u00c9ASE TAMBI\u00c9N\n       fsync(2), B.O. Gallmeister, POSIX.4, O'Reilly, pp. 220-223 y 343.\n\nLinux 2.0.32                                      13 abril 1996                                     FDATASYNC(2)\n"},{"NOMBRE": "       flock - manage locks from shell scripts\n\n", "SINOPSIS": "       flock [options] file|directory command [arguments]\n       flock [options] file|directory -c command\n       flock [options] number\n\n", "DESCRIPCION": "       This utility manages flock(2) locks from within shell scripts or from the command line.\n\n       The first and second of the above forms wrap the lock around the execution of a command, in a manner sim\u2010\n       ilar to su(1) or newgrp(1).  They lock a specified file or directory, which is created  (assuming  appro\u2010\n       priate  permissions)  if  it  does  not already exist.  By default, if the lock cannot be immediately ac\u2010\n       quired, flock waits until the lock is available.\n\n       The third form uses an open file by its file descriptor number.  See the examples below for how that  can\n       be used.\n\n", "OPCIONES": "       -c, --command command\n              Pass a single command, without arguments, to the shell with -c.\n\n       -E, --conflict-exit-code number\n              The  exit status used when the -n option is in use, and the conflicting lock exists, or the -w op\u2010\n              tion is in use, and the timeout is reached.  The default value is 1.  The number has to be in  the\n              range of 0 to 255.\n\n       -F, --no-fork\n              Do  not  fork  before  executing command.  Upon execution the flock process is replaced by command\n              which continues to hold the lock. This option is incompatible with --close as there  would  other\u2010\n              wise be nothing left to hold the lock.\n\n       -e, -x, --exclusive\n              Obtain an exclusive lock, sometimes called a write lock.  This is the default.\n\n       -n, --nb, --nonblock\n              Fail  rather than wait if the lock cannot be immediately acquired.  See the -E option for the exit\n              status used.\n\n       -o, --close\n              Close the file descriptor on which the lock is held before executing command.  This is  useful  if\n              command spawns a child process which should not be holding the lock.\n\n       -s, --shared\n              Obtain a shared lock, sometimes called a read lock.\n\n       -u, --unlock\n              Drop a lock.  This is usually not required, since a lock is automatically dropped when the file is\n              closed.  However, it may be required in special cases, for example if the enclosed  command  group\n              may have forked a background process which should not be holding the lock.\n\n       -w, --wait, --timeout seconds\n              Fail  if  the lock cannot be acquired within seconds.  Decimal fractional values are allowed.  See\n              the -E option for the exit status used. The zero number of seconds is interpreted as --nonblock.\n\n       --verbose\n              Report how long it took to acquire the lock, or why the lock could not be obtained.\n\n       -V, --version\n              Display version information and exit.\n\n       -h, --help\n              Display help text and exit.\n\nEXIT STATUS\n       The command uses sysexits.h exit status values for everything, except when using either of the options -n\n       or  -w  which report a failure to acquire the lock with a exit status given by the -E option, or 1 by de\u2010\n       fault.  The exit status given by -E has to be in the range of 0 to 255.\n\n       When using the command variant, and executing the child worked, then the exit status is that of the child\n       command.\n\n", "EJEMPLOS": "       Note that \"shell> \" in examples is a command line prompt.\n\n       shell1> flock /tmp -c cat\n       shell2> flock -w .007 /tmp -c echo; /bin/echo $?\n              Set exclusive lock to directory /tmp and the second command will fail.\n\n       shell1> flock -s /tmp -c cat\n       shell2> flock -s -w .007 /tmp -c echo; /bin/echo $?\n              Set shared lock to directory /tmp and the second command will not fail.  Notice that attempting to\n              get exclusive lock with second command would fail.\n\n       shell> flock -x local-lock-file echo 'a b c'\n              Grab the exclusive lock \"local-lock-file\" before running echo with 'a b c'.\n\n       (\n         flock -n 9 || exit 1\n         # ... commands executed under lock ...\n       ) 9>/var/lock/mylockfile\n              The form is convenient inside shell scripts.  The mode used to open the  file  doesn't  matter  to\n              flock;  using  >  or  >>  allows the lockfile to be created if it does not already exist, however,\n              write permission is required.  Using < requires that the file already exists but only read permis\u2010\n              sion is required.\n\n       [ \"${FLOCKER}\" != \"$0\" ] && exec env FLOCKER=\"$0\" flock -en \"$0\" \"$0\" \"$@\" || :\n              This is useful boilerplate code for shell scripts.  Put it at the top of the shell script you want\n              to lock and it'll automatically lock itself on the first run.  If the env var $FLOCKER is not  set\n              to  the shell script that is being run, then execute flock and grab an exclusive non-blocking lock\n              (using the script itself as the lock file) before re-execing itself with the right arguments.   It\n              also sets the FLOCKER env var to the right value so it doesn't run again.\n\n       shell> exec 4<>/var/lock/mylockfile\n       shell> flock -n 4\n              This  form  is  convenient  for locking a file without spawning a subprocess.  The shell opens the\n              lock file for reading and writing as file descriptor 4, then flock is used to lock the descriptor.\n\n", "AUTOR": "       H. Peter Anvin \u27e8hpa@zytor.com\u27e9\n\n", "COPYRIGHT": "       Copyright \u00a9 2003-2006 H. Peter Anvin.\n       This is free software; see the source for copying conditions.  There is NO warranty; not  even  for  MER\u2010\n       CHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\nSEE ALSO\n       flock(2)\n\n", "DISPONIBILIDAD": "       The  flock command is part of the util-linux package and is available from Linux Kernel Archive \u27e8https://\n       www.kernel.org/pub/linux/utils/util-linux/\u27e9.\n\nutil-linux                                          July 2014                                           FLOCK(1)\n"},{"NOMBRE": "       fork - crean un proceso hijo\n\n", "SINOPSIS": "       #include <sys/types.h>\n       #include <unistd.h>\n\n       pid_t fork(void);\n\n", "DESCRIPCION": "       fork  crea un proceso hijo que difiere de su proceso padre s\u00f3lo en su PID y PPID, y en el hecho de que el\n       uso de recursos est\u00e9 asignado a 0.  Los candados de fichero (file locks) y las se\u00f1ales pendientes  no  se\n       heredan.\n\n       En  linux,  fork est\u00e1 implementado usando p\u00e1ginas de copia-en-escritura (copy-on-write), as\u00ed que la \u00fanica\n       penalizaci\u00f3n en que incurre fork es en el tiempo y memoria requeridos para duplicar las tablas de p\u00e1ginas\n       del padre, y para crear una \u00fanica estructura de tarea (task structure) para el hijo.\n\nVALOR DEVUELTO\n       En  caso de \u00e9xito, se devuelve el PID del proceso hijo en el hilo de ejecuci\u00f3n de su padre, y se devuelve\n       un 0  en el hilo de ejecuci\u00f3n del hijo. En caso de fallo, se devolver\u00e1 un -1 en el contexto del padre, no\n       se crear\u00e1 ning\u00fan proceso hijo, y se pondr\u00e1 en errno un valor apropiado.\n\n", "ERRORES": "       EAGAIN fork  no  puede  reservar sufficiente memoria para copiar las tablas de p\u00e1ginas del padre y alojar\n              una estructura de tarea para el hijo.\n\n       ENOMEM fork no pudo obtener las necesarias estructuras del n\u00facleo  porque  la  cantidad  de  memoria  era\n              escasa.\n\nCONFORME A\n       La llamada al sistema fork es conforme con SVr4, SVID, POSIX, X/OPEN y BSD 4.3.\n\nV\u00c9ASE TAMBI\u00c9N\n       clone(2), execve(2), wait(2)\n\nLinux 1.2.9                                       1 julio 1996                                           FORK(2)\n"},{"NOMBRE": "       alloc_hugepages, free_hugepages - asigna o libera p\u00e1ginas de gran tama\u00f1o\n\n", "SINOPSIS": "       void *alloc_hugepages(int key, void *addr, size_t len, int prot, int flag);\n\n       int free_hugepages(void *addr);\n\n", "DESCRIPCION": "       Las llamadas al sistema alloc_hugepages y free_hugepages fueron introducidas en Linux 2.5.36 y eliminadas\n       de nuevo en la versi\u00f3n 2.5.54.  Exist\u00edan s\u00f3lo para arquitecturas i386 e ia64  (cuando  se  encontraba  la\n       opci\u00f3n  CONFIG_HUGETLB_PAGE).   En Linux 2.4.20 existen los n\u00fameros de las llamadas al sistemas, pero las\n       llamadas devuelven ENOSYS.\n\n       En la arquitectura i386 el hardware de gesti\u00f3n de la memoria maneja p\u00e1ginas ordinarias (4 KiB) y  p\u00e1ginas\n       grandes (2 o 4 MiB). De manera similar, la arquitectura ia64 maneja p\u00e1ginas grandes de distintos tama\u00f1os.\n       Estas llamadas al sistema sirven para ubicar p\u00e1ginas de gran tama\u00f1o en la  memoria  del  proceso  o  para\n       liberarlas.  Las p\u00e1ginas grandes est\u00e1n fijas en memoria, y no son intercambiadas (swapped).\n\n       El par\u00e1metro key es un identificador. Cuando es cero las p\u00e1ginas son privadas, y no son heredadas por los\n       hijos.  Cuando  es  positivo  las  p\u00e1ginas  son  compartidas  con  otras  aplicaciones  usando  el  mismo\n       identificador key, y heredadas por los procesos hijo.\n\n       El  par\u00e1metro  addr de free_hugepages() indica qu\u00e9 p\u00e1gina est\u00e1 siendo liberada - es el valor devuelto por\n       una llamada a alloc_hugepages().  (La memoria es realmente liberada por  primera  vez  cuando  todos  los\n       usuarios la han liberado.)  El par\u00e1metro addr de alloc_hugepages() es una sugerencia, que el n\u00facleo puede\n       o no puede tomar.  Las direcciones deben estar debidamente alineadas.\n\n       El par\u00e1metro len es la longitud del segmento requerido. Debe ser un m\u00faltiplo  del  tama\u00f1o  de  la  p\u00e1gina\n       grande.\n\n       El  par\u00e1metro  prot  especifica  la protecci\u00f3n de memoria del segmento.  Puede ser PROT_READ, PROT_WRITE,\n       PROT_EXEC.\n\n       El par\u00e1metro flag es ignorado, a menos que key sea positivo. En tal caso, si flag es IPC_CREAT,  se  crea\n       un  nuevo segmento de p\u00e1gina grande cuando no existe ninguno con el identificador dado. Si esta opci\u00f3n no\n       est\u00e1 activa, se devuelve ENOENT cuando no existe tal segmento.\n\nVALOR DEVUELTO\n       En caso de \u00e9xito, alloc_hugepages devuelve la direcci\u00f3n virtual asignada, y free_hugepages devuelve cero.\n       En caso de error, se devuelve -1, y se modifica errno con el valor apropiado.\n\n", "ERRORES": "       ENOSYS La llamada al sistema no est\u00e1 soportada por este n\u00facleo.\n\nCONFORME A\n       Esta  llamadas  exist\u00edan  s\u00f3lo  en  Linux  2.5.36 - 2.5.54.  Estas llamadas son espec\u00edficas de Linux para\n       procesadores Intel, y no deber\u00edan ser usadas en  programas  portables.  De  hecho,  los  n\u00fameros  de  las\n       llamadas  al  sistema  est\u00e1n marcados para ser reutilizados, por lo que los programas que las usen pueden\n       comportarse de manera aleatoria con n\u00facleos futuros.\n\n", "ARCHIVOS": "       /proc/sys/vm/nr_hugepages N\u00famero de p\u00e1ginas hugetlb configuradas.  Puede ser le\u00eddo y escrito.\n\n       /proc/meminfo Proporciona informaci\u00f3n del n\u00famero de p\u00e1ginas hugetlb configuradas y de su  tama\u00f1o  en  las\n       tres variables HugePages_Total, HugePages_Free, Hugepagesize.\n\n", "OBSERVACIONES": "       Estas  llamadas  al sistema ya no existen. En la actualidad puede usarse el sistema de ficheros hugetlbfs\n       en su lugar. La memoria contenida en las p\u00e1ginas grandes (si la CPU  las  soporta)  se  obtiene  ubicando\n       ficheros en este sistema de ficheros virtual con mmap.\n\n       El n\u00famero m\u00e1ximo de p\u00e1ginas grandes puede especificarse usando el par\u00e1metro hugepages= en el arranque.\n\nLinux 2.5.36                                     2 febrero 2003                               ALLOC_HUGEPAGES(2)\n"},{"NOMBRE": "       stat, fstat, lstat - obtiene el estado de un fichero\n\n", "SINOPSIS": "       #include <sys/types.h>\n       #include <sys/stat.h>\n       #include <unistd.h>\n\n       int stat(const char *file_name, struct stat *buf);\n       int fstat(int filedes, struct stat *buf);\n       int lstat(const char *file_name, struct stat *buf);\n\n", "DESCRIPCION": "       Estas  funciones  devuelven  informaci\u00f3n  del fichero especificado. No se necesitan derechos de acceso al\n       fichero para conseguir la  informaci\u00f3n  pero  s\u00ed  se  necesitan  derechos  de  b\u00fasqueda  para  todos  los\n       directorios del camino al fichero.\n\n       stat examina el fichero al que apunta file_name y llena buf.\n\n       lstat  es  id\u00e9ntico a stat, salvo en caso de que se trate de un enlace simb\u00f3lico, en cuyo caso se examina\n       el enlace mismo, no el fichero al que hace referencia.\n\n       fstat es id\u00e9ntico a stat, pero s\u00f3lo el fichero abierto apuntado por  filedes  (tal  y  como  lo  devuelve\n       open(2)) es examinado en lugar de file_name.\n\n       Todos devuelven una estructura stat, que contien los siguientes campos:\n\n              struct stat {\n                  dev_t         st_dev;      /* dispositivo */\n                  ino_t         st_ino;      /* inodo */\n                  mode_t        st_mode;     /* protecci\u00f3n */\n                  nlink_t       st_nlink;    /* n\u00famero de enlaces f\u00edsicos */\n                  uid_t         st_uid;      /* ID del usuario propietario */\n                  gid_t         st_gid;      /* ID del grupo propietario */\n                  dev_t         st_rdev;     /* tipo dispositivo (si es\n                                                dispositivo inodo) */\n                  off_t         st_size;     /* tama\u00f1o total, en bytes */\n                  blksize_t     st_blksize;  /* tama\u00f1o de bloque para el\n                                                sistema de ficheros de E/S */\n                  blkcnt_t      st_blocks;   /* n\u00famero de bloques asignados */\n                  time_t        st_atime;    /* hora \u00faltimo acceso */\n                  time_t        st_mtime;    /* hora \u00faltima modificaci\u00f3n */\n                  time_t        st_ctime;    /* hora \u00faltimo cambio */\n              };\n\n       El  valor  st_size da el tama\u00f1o del fichero (si es un fichero regular o un enlace simb\u00f3lico) en bytes. El\n       tama\u00f1o de un enlace simb\u00f3lico es la longitud del nombre de ruta que contiene, sin contar el caracter  NUL\n       final.\n\n       El  valor  st_blocks  da  el  tama\u00f1o  del  fichero  en  bloques  de 512 bytes.  (\u00c9ste puede ser menor que\n       st_size/512 p.e. cuando el fichero tenga huecos.)  El valor st_blksize da el tama\u00f1o de bloque \"preferido\"\n       para  operaciones  de  E/S eficientes sobre el sistema de ficheros.  (Escribir en un fichero en porciones\n       m\u00e1s peque\u00f1as puede producir una secuencia leer-modificar-reescribir ineficiente).\n\n       No todos los sistemas de ficheros en Linux implementan todos  los  campos  de  hora.   Algunos  tipos  de\n       sistemas  de  ficheros  permiten  el  montaje  de  tal  manera que los accesos al fichero no provocan una\n       actualizaci\u00f3n del campo st_atime (Vea `noatime' en mount(8).)\n\n       El campo st_atime es modificado por accesos al fichero, p.e. por execve(2), mknod(2), pipe(2), utime(2) y\n       read(2) (de m\u00e1s de cero bytes). Otras rutinas, como mmap(2), pueden o no actualizar st_atime.\n\n       El  campo  st_mtime  es  modificado por cambios en el fichero, p.e. por mknod(2), truncate(2), utime(2) y\n       write(2) (de m\u00e1s de cero bytes).  Adem\u00e1s, el campo  st_mtime  de  un  directorio  es  modificado  por  la\n       creaci\u00f3n o borrado de ficheros en dicho directorio.  El campo st_mtime no es modificado por cambios en el\n       propietario, grupo, contador de enlaces duros, o modo.\n\n       El campo st_ctime es modificado por  la  escritura  o  por  cambiar  informaci\u00f3n  del  inodo  (es  decir,\n       propietario, grupo, contador de enlaces, modo, etc.).\n\n       Se definen las siguientes macros POSIX para comprobar el tipo de fichero:\n\n              S_ISLNK(m)  es un enlace simb\u00f3lico?\n\n              S_ISREG(m)  un fichero regular?\n\n              S_ISDIR(m)  un directorio?\n\n              S_ISCHR(m)  un dispositivo de caracteres?\n\n              S_ISBLK(m)  un dispositivo de bloques?\n\n              S_ISFIFO(m) una tuber\u00eda nombrada (fifo)?\n\n              S_ISLNK(m)  un enlace simb\u00f3lico? (No presente en POSIX.1-1996.)\n\n              S_ISSOCK(m) un conector (socket)? (No presente en POSIX.1-1996.)\n\n       Se definen las siguientes banderas para el campo st_mode:\n\n       S_IFMT     0017000   m\u00e1scara de bits para los campos de bit del tipo\n                            de fichero (no POSIX)\n       S_IFSOCK   0140000   conector (no POSIX)\n       S_IFLNK    0120000   enlace simb\u00f3lico (no POSIX)\n       S_IFREG    0100000   fichero regular (no POSIX)\n       S_IFBLK    0060000   dispositivo de bloques (no POSIX)\n       S_IFDIR    0040000   directorio (no POSIX)\n       S_IFCHR    0020000   dispositivo de caracteres (no POSIX)\n       S_IFIFO    0010000   fifo o tuber\u00eda nombrada (no POSIX)\n       S_ISUID    0004000   poner bit UID\n       S_ISGID    0002000   poner bit GID\n       S_ISVTX    0001000   sticky bit (no POSIX)\n       S_IRWXU    00700     usuario (propietario del fichero) tiene permisos\n                            de lectura, escritura y ejecuci\u00f3n\n       S_IRUSR    00400     usuario tiene premiso de lectura (igual que\n                            S_IREAD, que no es POSIX)\n       S_IWUSR    00200     usuario tiene premiso de escritura (igual que\n                            S_IWRITE, que no es POSIX)\n       S_IXUSR    00100     usuario tiene premiso de ejecuci\u00f3n (igual que\n                            S_IEXEC, que no es POSIX)\n       S_IRWXG    00070     grupo tiene permisos de lectura, escritura y\n                            ejecuci\u00f3n\n       S_IRGRP    00040     grupo tiene permiso de lectura\n       S_IWGRP    00020     grupo tiene permiso de escritura\n       S_IXGRP    00010     grupo tiene permiso de ejecuci\u00f3n\n       S_IRWXO    00007     otros tienen permisos de lectura, escritura y\n                            ejecuci\u00f3n\n       S_IROTH    00004     otros tienen permiso de lectura\n       S_IWOTH    00002     otros tienen permiso de escritura\n       S_IXOTH    00001     otros tienen permiso de ejecuci\u00f3n\n\n       El  bit  SETGID  (S_ISGID)  tiene  varios usos especiales: para un directorio, indica que se va a usar la\n       sem\u00e1ntica BSD para el directorio: los ficheros creados all\u00ed heredar\u00e1n su GID del directorio, no  del  GID\n       efectivo del proceso que crea cada fichero, y los directorios creados all\u00ed tambi\u00e9n tendr\u00e1n el bit S_ISGID\n       activo.  Para un fichero que no tiene el bit de ejecuci\u00f3n del  grupo  (S_IXGRP)  activo,  indica  bloqueo\n       obligatorio de ficheros/registros.\n\n       El  bit  `sticky'  (S_ISVTX)  en  un directorio significa que un fichero de ese directorio s\u00f3lo puede ser\n       renombrado o borrado por el propietario  del  fichero,  por  el  propietario  del  directorio  y  por  el\n       superusuario.\n\nVALOR DEVUELTO\n       Se devuelve cero si hubo \u00e9xito. Si hubo error, se devuelve -1, y errno es actualizado apropiadamente.\n\n", "ERRORES": "       EBADF  filedes incorrecto.\n\n       ENOENT No existe un componente del camino file_name o el camino es una cadena vac\u00eda.\n\n       ENOTDIR\n              Un componente del camino no es un directorio.\n\n       ELOOP  Se han encontrado demasiados enlaces simb\u00f3licos al recorrer el camino.\n\n       EFAULT Direcci\u00f3n err\u00f3nea.\n\n       EACCES Permiso denegado.\n\n       ENOMEM Fuera de memoria (es decir, memoria del n\u00facleo).\n\n       ENAMETOOLONG\n              Nombre de fichero demasiado largo.\n\nCONFORME A\n       Las  llamadas  stat  y fstat conforman con SVr4, SVID, POSIX, X/OPEN y BSD 4.3. La llamada lstat conforma\n       con 4.3BSD y SVr4.  SVr4 documenta condiciones de error adicionales de fstat: EINTR, ENOLINK y EOVERFLOW.\n       SVr4  documenta  condiciones  de  error  adicionales de stat y lstat: EACCES, EINTR, EMULTIHOP, ENOLINK y\n       EOVERFLOW.  El uso de los campos st_blocks y st_blksize puede ser poco portable. (Fueron introducidos  en\n       BSD.  No  est\u00e1n  especificados  por  POSIX. La interpretaci\u00f3n difiere entre sistemas y posiblemente en un\n       mismo sistema cuando est\u00e1n involucrados montajes NFS).\n\n       POSIX no describe los bits S_IFMT, S_IFSOCK, S_IFLNK,  S_IFREG,  S_IFBLK,  S_IFDIR,  S_IFCHR,  S_IFIFO  y\n       S_ISVTX,  pero  en su lugar demanda el uso de las macros S_ISDIR(), etc. Las macros S_ISLNK y S_ISSOCK no\n       est\u00e1n en POSIX.1-1996, pero ambas formar\u00e1n parte del pr\u00f3ximo est\u00e1ndar POSIX; la primera es de  SVID  4v2,\n       la \u00faltima de SUSv2.\n\n       Unix  V7  (y sistemas posteriores) ten\u00edan S_IREAD, S_IWRITE, S_IEXEC, donde POSIX prescribe los sin\u00f3nimos\n       S_IRUSR, S_IWUSR, S_IXUSR.\n\nOTROS SISTEMAS\n       Valores que han estado (o est\u00e1n) en uso en varios sistemas:\n\n       hex    nombre     ls   octal    descripci\u00f3n\n       f000   S_IFMT          170000   M\u00e1scara para el tipo de fichero\n       0000                   000000   SCO: nodo-i fuera de servicio\n                                       BSD: tipo desconocido\n                                       SVID-v2 y XPG2: tienen tanto 0 como\n                                       0100000 para ficheros ordinarios\n       1000   S_IFIFO    p|   010000   Fifo (tuber\u00eda con nombre)\n       2000   S_IFCHR    c    020000   V7: fichero especial de caracteres\n       3000   S_IFMPC         030000   V7: fichero especial de caracteres\n                                       multiplexados\n       4000   S_IFDIR    d/   040000   V7: directorio\n       5000   S_IFNAM         050000   XENIX: fichero especial con nombre\n                                       con dos subtipos, distinguidos\n                                       por los valores st_rdev 1, 2:\n       0001   S_INSEM    s    000001   XENIX: subtipo sem\u00e1foro de IFNAM\n       0002   S_INSHD    m    000002   XENIX: subtipo datos compartidos\n                                       de IFNAM\n       6000   S_IFBLK    b    060000   V7: fichero especial de bloques\n       7000   S_IFMPB         070000   V7: fichero especial de bloques\n                                       multiplexados\n       8000   S_IFREG    -    100000   V7: fichero regular\n\n       9000   S_IFCMP         110000   VxFS: fichero comprimido\n       9000   S_IFNWK    n    110000   HP-UX: fichero especial de red\n       a000   S_IFLNK    l@   120000   BSD: enlace simb\u00f3lico\n       b000   S_IFSHAD        130000   Solaris: nodo-i sombra para ACL\n                                       (no visto por el espacio de usuario)\n       c000   S_IFSOCK   s=   140000   BSD: conector (tambi\u00e9n \"S_IFSOC\" en VxFS)\n       d000   S_IFDOOR   D>   150000   Solaris: puerta\n       e000   S_IFWHT    w%   160000   BSD: `whiteout'(no usado para nodos-i)\n       0200   S_ISVTX         001000   V7: `sticky bit': salvar el c\u00f3digo\n                                       intercambiado incluso despu\u00e9s de usarse\n                                       SVID-v2: reservado\n                                       SunOS: En ficheros no directorios: no\n                                       colocar en cache este fichero\n                                       SVID-v4.2: En directorios: opci\u00f3n de\n                                       elminaci\u00f3n restringida\n       0400   S_ISGID         002000   V7: SETGID al ejecuctar\n                                       Para directorios: usar sem\u00e1ntica BSD\n                                       para propagaci\u00f3n del GID\n       0400   S_ENFMT         002000   SysV: Aplicar el bloqueo del fichero\n                                       (compartido con S_ISGID)\n       0800   S_ISUID         004000   V7: SETUID al ejecutar\n       0800   S_CDF           004000   HP-UX: el directorio es un fichero\n                                       dependiente del contexto\n\n       Una orden `sticky' apareci\u00f3n en AT&T UNIX Version 32V.\n\nV\u00c9ASE TAMBI\u00c9N\n       chmod(2), chown(2), readlink(2), utime(2)\n\nLinux                                             13 mayo 1998                                           STAT(2)\n"},{"NOMBRE": "       statfs, fstatfs - obtiene estad\u00edsticas del sistema de ficheros\n\n", "SINOPSIS": "       #include <sys/vfs.h>\n\n       int statfs(const char *path, struct statfs *buf);\n       int fstatfs(int fd, struct statfs *buf);\n\n", "DESCRIPCION": "       statfs devuelve informaci\u00f3n de un sistema de ficheros montado.  path el el camino de cualquier fichero en\n       el sistema de ficheros montado.  buf es un puntero a una estructura statfs definida como sigue:\n\n              struct statfs {\n                 long    f_type;     /* tipo sistema ficheros (ver bajo) */\n                 long    f_bsize;    /* tama\u00f1o \u00f3ptimo de bloque\n                                        de transferencia */\n                 long    f_blocks;   /* total de bloques de datos en el sistema\n                                        de ficheros */\n                 long    f_bfree;    /* bloques libres en el sf */\n                 long    f_bavail;   /* bloques libres disponibles para\n                                        no-superusuarios */\n                 long    f_files;    /* total de nodos de ficheros en el sf */\n                 long    f_ffree;    /* nodos de ficheros libres en el sf */\n                 fsid_t  f_fsid;     /* id del sistema de ficheros */\n                 long    f_namelen;  /* longitud m\u00e1xima de nombre de ficheros */\n                 long    f_spare[6]; /* de sobra, para m\u00e1s tarde */\n              };\n\n       Tipos de sistema de ficheros:\n              linux/affs_fs.h:\n                 AFFS_SUPER_MAGIC      0xADFF\n              linux/efs_fs.h:\n                 EFS_SUPER_MAGIC       0x00414A53\n              linux/ext_fs.h:\n                 EXT_SUPER_MAGIC       0x137D\n              linux/ext2_fs.h:\n                 EXT2_OLD_SUPER_MAGIC  0xEF51\n                 EXT2_SUPER_MAGIC      0xEF53\n              linux/hpfs_fs.h:\n                 HPFS_SUPER_MAGIC      0xF995E849\n              linux/iso_fs.h:\n                 ISOFS_SUPER_MAGIC     0x9660\n              linux/minix_fs.h:\n                 MINIX_SUPER_MAGIC     0x137F /* minix orig.*/\n                 MINIX_SUPER_MAGIC2    0x138F /* minix 30 carac.*/\n                 MINIX2_SUPER_MAGIC    0x2468 /* minix V2 */\n                 MINIX2_SUPER_MAGIC2   0x2478 /* minix V2, nombres 30 carac. */\n              linux/msdos_fs.h:\n                 MSDOS_SUPER_MAGIC     0x4d44\n              linux/ncp_fs.h:\n                 NCP_SUPER_MAGIC       0x564c\n              linux/nfs_fs.h:\n                 NFS_SUPER_MAGIC       0x6969\n              linux/proc_fs.h:\n                 PROC_SUPER_MAGIC      0x9fa0\n              linux/smb_fs.h:\n                 SMB_SUPER_MAGIC       0x517B\n              linux/sysv_fs.h:\n                 XENIX_SUPER_MAGIC     0x012FF7B4\n                 SYSV4_SUPER_MAGIC     0x012FF7B5\n                 SYSV2_SUPER_MAGIC     0x012FF7B6\n                 COH_SUPER_MAGIC       0x012FF7B7\n              linux/ufs_fs.h:\n                 UFS_MAGIC             0x00011954\n              linux/xfs_fs.h:\n                 XFS_SUPER_MAGIC       0x58465342\n              linux/xia_fs.h:\n                 _XIAFS_SUPER_MAGIC    0x012FD16D\n\n       Nadie sabe lo que f_fsid se supone que contiene (vea m\u00e1s abajo).\n\n       Los campos no definidos para un sistema de ficheros particular se ponen a 0.  fstatfs devuelve  la  misma\n       informaci\u00f3n sobre un fichero abierto referenciado por el descriptor fd.\n\nVALOR DEVUELTO\n       Si hubo \u00e9xito se devuelve cero. Si hubo error, se devuelve -1, y errno es actualizado apropiadamente.\n\n", "ERRORES": "       Para statfs:\n\n       ENOTDIR\n              Un componente del camino path no es un directorio.\n\n       ENAMETOOLONG\n              path es demasiado largo.\n\n       ENOENT El fichero al que se refiere path no existe.\n\n       EACCES El permiso de b\u00fasqueda se deniega para un componente del camino path.\n\n       ELOOP  Se encontraron demasiados enlaces simb\u00f3licos al traducir path.\n\n       EFAULT buf o path apuntan a una direcci\u00f3n inv\u00e1lida.\n\n       EIO    Ocurri\u00f3 un error de E/S mientras se le\u00eda o escrib\u00eda en el sistema de ficheros.\n\n       ENOMEM No hab\u00eda suficiente memoria disponible en el n\u00facleo.\n\n       ENOSYS El sistema de ficheros sobre el que se encuentra path no soporta statfs.\n\n       Para fstatfs:\n\n       EBADF  fd no es un descriptor de fichero v\u00e1lido.\n\n       EFAULT buf apunta a una direcci\u00f3n inv\u00e1lida.\n\n       EIO    Ocurri\u00f3 un error de E/S mientras se le\u00eda o escrib\u00eda en el sistema de ficheros.\n\n       ENOSYS El sistema de ficheros sobre el que est\u00e1 abierto fd no soporta statfs.\n\nCONFORME A\n       La versi\u00f3n de Linux de statfs est\u00e1 inspirada en la de 4.4BSD (aunque no usan la misma estructura).\n\n   f_fsid\n       Solaris  y  POSIX  1003.1-2001  poseen una llamada al sistema statvfs que devuelve una estructura statvfs\n       (definida en <sys/statvfs.h>) con un campo f_fsid de tipo unsigned long .  Linux, SunOS,  HPUX  y  4.4BSD\n       poseen  una llamada al sistema statfs que devuelve una estructura statfs (definida en <sys/vfs.h>) con un\n       campo f_fsid de tipo fsid_t , donde fsid_t est\u00e1 definido como struct { int val[2]; }.  Lo mismo se aplica\n       para FreeBSD, salvo que utiliza el fichero de cabecera <sys/mount.h>.\n\n       La  idea general es que f_fsid contenga informaci\u00f3n aleatoria de manera que el par (f_fsid,ino) determine\n       un\u00edvocamente un fichero.  Algunos SOs usan (una variante de) el n\u00famero de dispositivo,  o  el  n\u00famero  de\n       dispositivo  combinado  con  el  tipo  de  sistema de ficheros.  Muchos SOs restringen el acceso al campo\n       f_fsid solamente al superusuario (poni\u00e9ndolo a cero para aquellos usuarios sin privilegios), ya que  este\n       campo  es  usado  en  el  manejo  de ficheros del sistema de ficheros cuando es exportado mediante NFS, y\n       conceder acceso a \u00e9l es un problema de seguridad.\n\n       En algunos SOs fsid puede ser usado como segundo par\u00e1metro en la llamada al sistema sysfs().\n\nV\u00c9ASE TAMBI\u00c9N\n       stat(2)\n\nLinux 2.0.30                                     21 agosto 1997                                        STATFS(2)\n"},{"NOMBRE": "       fsync, fdatasync - sincroniza el estado completo en memoria de un fichero con el del disco\n\n", "SINOPSIS": "       #include <unistd.h>\n\n       int fsync(int fd);\n\n       int fdatasync(int fd);\n\n", "DESCRIPCION": "       fsync  copia  todas  las  partes  que  est\u00e1n  en  memoria  de  un  fichero a disco, y espera hasta que el\n       dispositivo avise de que todas las partes se encuentran en  almacenamiento  estable.   Tambi\u00e9n  actualiza\n       informaci\u00f3n  de  estado  de  metadatos.  No  garantiza necesariamente que la entrada en el directorio que\n       contiene el fichero haya llegado tambi\u00e9n a disco.  Para ello se necesita tambi\u00e9n una llamada expl\u00edcita  a\n       fsync sobre el descriptor de fichero del directorio.\n\n       fdatasync  hace  lo mismo que fsync pero solo vac\u00eda los datos de usuario, no los meta datos como el valor\n       mtime o el valor atime.\n\nVALOR DEVUELTO\n       En caso de \u00e9xito, devuelve 0. En caso de error, -1, y la variable errno toma un valor apropiado.\n\n", "ERRORES": "       EBADF  fd no es un descriptor de fichero v\u00e1lido para escribir.\n\n       EROFS, EINVAL\n              fd est\u00e1 enlazado a un fichero especial que no admite sincronizaci\u00f3n.\n\n       EIO    Ha ocurrido un error durante la sincronizaci\u00f3n.\n\n", "OBSERVACIONES": "       En caso de que el disco duro tenga habilitada la escritura en cach\u00e9, los datos pueden no estar  realmente\n       en almacenamiento permanente cuando fsync/fdatasync regrese.\n\n       Cuando  se  monta  un  sistema  de  ficheros  ext2  con  la  opci\u00f3n  sync, las entradas de directorio son\n       sincronizadas impl\u00edcitamente tambi\u00e9n por fsync.\n\n       En versiones del n\u00facleo anteriores a la 2.4, fsync puede ser ineficiente  sobre  ficheros  grandes.   Una\n       alternativa puede ser usar la opci\u00f3n O_SYNC en open(2).\n\nCONFORME A\n       POSIX.1b (anteriormente POSIX.4)\n\nV\u00c9ASE TAMBI\u00c9N\n       bdflush(2), open(2), sync(2), mount(8), update(8), sync(8)\n\nLinux 1.3.85                                      18 abril 2001                                         FSYNC(2)\n"},{"NOMBRE": "       truncate, ftruncate - trunca un fichero a una longitud especificada\n\n", "SINOPSIS": "       #include <unistd.h>\n       #include <sys/types.h>\n\n       int truncate(const char *path, off_t length);\n       int ftruncate(int fd, off_t length);\n\n", "DESCRIPCION": "       Las funciones truncate y ftruncate hacen que el fichero regular cuyo nombre es path o que es referenciado\n       por fd sea truncado a un tama\u00f1o de length bytes.\n\n       Si el fichero era previamente m\u00e1s grande que este tama\u00f1o, los datos extra se pierden.  Si el fichero  era\n       previamente m\u00e1s peque\u00f1o, es extendido, y la zona ampliada es rellenada con bytes cero.\n\n       El puntero del fichero no se modifica.\n\n       Si  el  tama\u00f1o  cambia,  los campos ctime y mtime del fichero son actualizados, y los bits de modo suid y\n       sgid pueden ser limpiados.\n\n       Con ftruncate, el fichero  debe  estar  abierto  para  escritura;  con  truncate,  el  fichero  debe  ser\n       escribible.\n\nVALOR DEVUELTO\n       En caso de \u00e9xito, se devuelve cero. En caso de  error,  se devuelve -1 y se establece el errno apropiado.\n\n", "ERRORES": "       Para truncate:\n\n       EACCES Se deniega el permiso de b\u00fasqueda para un componente del prefijo de la ruta, o el fichero nombrado\n              no puede ser escrito por el usuario.\n\n       EFAULT Path apunta fuera del espacio de direcciones asignado al proceso.\n\n       EFBIG  El argumento length es mayor que el tama\u00f1o m\u00e1ximo de fichero. (XSI)\n\n       EINTR  Se captur\u00f3 una se\u00f1al durante la ejecuci\u00f3n.\n\n       EINVAL El argumento length es negativo o mayor que el tama\u00f1o m\u00e1ximo de fichero.\n\n       EIO    Ocurri\u00f3 un error de E/S mientras se actualizaba el nodo-i.\n\n       EISDIR El fichero nombrado es un directorio.\n\n       ELOOP  Demasiados enlaces simb\u00f3licos en la traducci\u00f3n del nombre de ruta.\n\n       ENAMETOOLONG\n              Un componente de la ruta excede los 255 caracteres, o la ruta completa excede los 1023 caracteres.\n\n       ENOENT El fichero no existe.\n\n       EROFS  El fichero reside en un sistema de ficheros de s\u00f3lo lectura.\n\n       ETXTBSY\n              El fichero es un fichero de procedimientos puros (c\u00f3digo compartido) que se est\u00e1 ejecutando.\n\n       Para ftruncate se aplican los mismos errores, pero en lugar  de  tratar  con  path,  los  errores  pueden\n       ocurrir ahora con fd:\n\n       EBADF  fd no es un descriptor v\u00e1lido.\n\n       EBADF o EINVAL\n              fd no est\u00e1 abierto para escritura.\n\n       EINVAL fd no hace referencia a un fichero regular.\n\nCONFORME A\n       4.4BSD,  SVr4  (estas  funciones  aparecieron  por  primera  vez  en  BSD  4.2).  POSIX 1003.1-1996 posee\n       ftruncate.  POSIX 1003.1-2001 posee tambi\u00e9n truncate, como una extensi\u00f3n de XSI.\n\n       SVr4 documenta para truncate las condiciones de error  adicionales  EMFILE,  EMULTIHP,  ENFILE,  ENOLINK.\n       SVr4 documenta para ftruncate una condici\u00f3n de error adicional EAGAIN.\n\n", "OBSERVACIONES": "       La  descripci\u00f3n  de  arriba  es  para sistemas conformes con XSI.  Para sistemas no conformes con XSI, el\n       est\u00e1ndar POSIX permite dos comportamientos para ftruncate cuando length excede la  longitud  del  fichero\n       (observe  que  truncate  no est\u00e1 especificada en absoluto en tales condiciones): bien devolver un error o\n       extender el fichero.  (La mayor\u00eda de sistemas UNIX siguen el requisito de XSI.)\n\nV\u00c9ASE TAMBI\u00c9N\n       open(2)\n\nLinux                                           21 diciembre 1998                                    TRUNCATE(2)\n"},{"NOMBRE": "       futex - llamada al sistema para bloqueos r\u00e1pidos en espacio de usuario\n\n", "SINOPSIS": "       #include <linux/futex.h>\n\n       #include <sys/time.h>\n\n       int sys_futex (void *futex, int op, int val, const struct timespec *timeout);\n\n", "DESCRIPCION": "       La  llamada al sistema sys_futex proporciona un m\u00e9todo que permite a un programa esperar hasta que cambie\n       el valor de una direcci\u00f3n dada y un m\u00e9todo para despertar a cualquier proceso que est\u00e9 esperando  en  una\n       direcci\u00f3n  particular (aunque las direcciones para una misma zona de memoria en procesos separados pueden\n       no ser iguales, el n\u00facleo las proyecta internamente para que la misma memoria proyectada  en  direcciones\n       distintas  concuerde  para diferentes llamadas sys_futex). T\u00edpicamente se usa para implementar el caso de\n       contienda de un bloqueo en memoria compartida, como se describe en futex(4).\n\n       Cuando una operaci\u00f3n futex(4) termina con contienda en espacio de usuario, es necesario hacer una llamada\n       al  n\u00facleo  para  que  arbitre.  El  arbitraje  puede  significar  o  bloquear  al  proceso  invocador o,\n       contrariamente, despertar a un proceso bloqueado.\n\n       Se espera que los procesos que llamen a esta funci\u00f3n  se  adhieran  a  la  sem\u00e1ntica  que  se  expone  en\n       futex(4).  Ya que esta sem\u00e1ntica supone escribir instrucciones en ensamblador no (trans)portables, esto a\n       su vez probablemente significa que la mayor\u00eda de los usuarios ser\u00e1n de hecho autores de bibliotecas y  no\n       desarrolladores gen\u00e9ricos de aplicaciones.\n\n       Es  necesario que el argumento futex apunte a un entero alineado que almacene el contador. La operaci\u00f3n a\n       ejecutar se pasa a trav\u00e9s del par\u00e1metro op junto con un valor val.\n\n       Actualmente se definen tres operaciones:\n\n       FUTEX_WAIT\n              Esta operaci\u00f3n verifica at\u00f3micamente si la direcci\u00f3n  futex  contiene  todav\u00eda  el  valor  dado  y\n              bloquea  al  proceso a la espera de FUTEX_WAKE en esta direcci\u00f3n futex. Si el argumento timeout no\n              es NULL, su contenido describe la duraci\u00f3n m\u00e1xima de la espera, que es infinita en otro caso. Para\n              futex(4),  esta  llamada  se  ejecuta  si  al  decrementar el contador se obtuvo un valor negativo\n              (indicando contenci\u00f3n) y se bloquear\u00e1 hasta  que  otro  proceso  libere  el  futex  y  ejecute  la\n              operaci\u00f3n FUTEX_WAKE.\n\n       FUTEX_WAKE\n              Esta  operaci\u00f3n despierta, como mucho, val procesos que esperan en esta direcci\u00f3n futex (es decir,\n              dentro de FUTEX_WAIT).  Para futex(4), esta llamada se ejecuta si al incrementar  el  contador  se\n              vio  que hab\u00eda procesos esperando una vez que al futex se le ha asignado el valor 1 (indicando que\n              est\u00e1 disponible).\n\n       FUTEX_FD\n              Para soportar despertares as\u00edncronos, esta operaci\u00f3n asocia un descriptor de fichero con un futex.\n              Si  otro proceso ejecuta un FUTEX_WAKE, el proceso recibir\u00e1 el n\u00famero de se\u00f1al que se pas\u00f3 en val.\n              El proceso invocador debe cerrar el descriptor de fichero devuelto despu\u00e9s de su uso.\n\n              Para evitar condiciones de carrera, el invocador debe comprobar si se  ha  incrementado  el  futex\n              despu\u00e9s de que FUTEX_FD regrese.\n\nVALOR DEVUELTO\n       Dependiendo de la operaci\u00f3n que se haya ejecutado, el valor devuelto puede tener significados diferentes.\n\n       FUTEX_WAIT\n              Devuelve  0  si  el  proceso  fue  despertado  por  una llamada FUTEX_WAKE. En el caso de que haya\n              expirado el plazo, se devuelve ETIMEDOUT. Si el futex no era igual al valor esperado, la operaci\u00f3n\n              devuelve  EWOULDBLOCK.  Las  se\u00f1ales  (u  otros  falsos despertares) hacen que FUTEX_WAIT devuelva\n              EINTR.\n\n       FUTEX_WAKE\n              Devuelve el n\u00famero de procesos despertados.\n\n       FUTEX_FD\n              Devuelve el nuevo descriptor de fichero asociado al futex.\n\n", "OBSERVACIONES": "       Insistimos, los futexes, en su forma m\u00e1s b\u00e1sica, no est\u00e1n pensados como  abstracci\u00f3n  sencilla  para  los\n       usuarios  finales.  Es  de  esperar  que los implementadores sean buenos conocedores de ensamblador y que\n       hayan le\u00eddo los fuentes de la biblioteca de futex en espacio de usuario que se indica m\u00e1s abajo.\n\n", "AUTOR": "       Los futexes fueron dise\u00f1ados e implementados por Hubertus Franke (IBM Thomas J. Watson Research  Center),\n       Matthew  Kirkwood,  Ingo  Molnar (Red Hat) y Rusty Russell (IBM Linux Technology Center). Esta p\u00e1gina fue\n       escrita por Bert Hubert.\n\n", "VERSIONES": "       El soporte inicial para futex se a\u00f1adi\u00f3 a la versi\u00f3n 2.5.7 de Linux pero con una sem\u00e1ntica distinta a  la\n       descrita m\u00e1s arriba. La sem\u00e1ntica actual se encuentra disponible desde la versi\u00f3n 2.5.40 de Linux.\n\nV\u00c9ASE TAMBI\u00c9N\n       futex(4), `Fuss, Futexes and Furwocks: Fast Userlevel Locking in Linux' (actas del Ottawa Linux Symposium\n       2002),         biblioteca         de         ejemplo          de          futex,          futex-*.tar.bz2\n       <URL:ftp://ftp.nl.kernel.org:/pub/linux/kernel/people/rusty/>.\n\n                                                31 diciembre 2002                                       FUTEX(2)\n"},{"NOMBRE": "       getcontext, setcontext - consulta o establece el contexto de usuario\n\n", "SINOPSIS": "       #include <ucontext.h>\n\n       int getcontext(ucontext_t *ucp);\n       int setcontext(const ucontext_t *ucp);\n\n", "DESCRIPCION": "       En  un  entorno  del  tipo  SysV,  se  encuentran  los  dos  tipos  mcontext_t  y ucontext_t definidos en\n       <ucontext.h> y las  cuatro  funciones  getcontext(),  setcontext(),  makecontext()  y  swapcontext()  que\n       permiten  el  intercambio del contexto del nivel de usuario entre m\u00faltiples hilos de control dentro de un\n       proceso.\n\n       El tipo mcontext_t es dependiente de la m\u00e1quina y opaco.  El tipo ucontext_t es una estructura que  tiene\n       al menos los campos siguientes:\n              typedef struct ucontext {\n                   struct ucontext *uc_link;\n                   sigset_t uc_sigmask;\n                   stack_t uc_stack;\n                   mcontext_t uc_mcontext;\n                   ...\n              } ucontext_t;\n       de  los  cuales  sigset_t  y  stack_t est\u00e1n definidos en <signal.h>.  uc_link apunta al contexto que ser\u00e1\n       reanudado cuando termine el contexto actual (en el caso de que el contexto actual haya sido creado usando\n       makecontext()),  uc_sigmask es el conjunto de se\u00f1ales bloqueadas en este contexto (v\u00e9ase sigprocmask(2)),\n       uc_stack es la pila usada por este contexto (v\u00e9ase sigaltstack(2)), y uc_mcontext  es  la  representaci\u00f3n\n       del  contexto  guardado  espec\u00edfica  de  la m\u00e1quina, que incluye los registros de la m\u00e1quina para el hilo\n       invocador.\n\n       La funci\u00f3n getcontext() inicializa la estructura apuntada por ucp al contexto activo actualmente.\n\n       La funci\u00f3n setcontext() restablece el contexto de usuario apuntado por ucp. Si la llamada tiene \u00e9xito  no\n       regresa.  El contexto deber\u00eda haber sido obtenido mediante una llamada a getcontext(), o makecontext(), o\n       pasada como tercer argumento al manejador de se\u00f1ales.\n\n       Si el contexto se obtuvo mediante una llamada a getcontext(), la ejecuci\u00f3n del programa contin\u00faa como  si\n       esta llamada simplemente regresara.\n\n       Si  el contexto fue obtenido mediante una llamada a makecontext(), la ejecuci\u00f3n del programa continua por\n       la llamada a la funci\u00f3n func especificada como segundo argumento en la llamada a  makecontext().   Cuando\n       la funci\u00f3n func regresa, se continua con el miembro uc_link de la estructura ucp especificada como primer\n       argumento en la llamada a makecontext().  Cuando este miembro es NULL, el hilo termina.\n\n       Cuando el contexto se obtiene mediante una llamada a un manejador de se\u00f1ales,  se  sol\u00eda  decir  que  \"la\n       ejecuci\u00f3n  del  programa  continua con la instrucci\u00f3n de programa siguiente a la instrucci\u00f3n interrumpida\n       por la se\u00f1al\". Sin embargo, esta sentencia fue eliminada en SUSv2, y ahora se establece que \"el resultado\n       es indefinido\".\n\nVALOR DEVUELTO\n       Cuando  tiene  \u00e9xito,getcontext() devuelve 0 y setcontext() no regresa. En caso de error, ambas devuelven\n       -1 y modifican errno con el valor apropiado.\n\n", "ERRORES": "       No se definen errores.\n\n", "OBSERVACIONES": "       La primera manifestaci\u00f3n de este mecanismo fue el mecanismo setjmp()/longjmp(). Puesto que no  define  el\n       manejo  del  contexto  de  se\u00f1ales,  el  siguiente paso fue el par sigsetjmp()/siglongjmp().  El presente\n       mecanismo proporciona mucho m\u00e1s control. Por otra parte, no hay un m\u00e9todo  sencillo  de  detectar  si  un\n       regreso  de getcontext() es de la primera llamada o via una llamada a setcontext().  El usuario tiene que\n       inventar su propio mecanismo de `contabilidad' y no se servir\u00e1 una variable de tipo registro ya  que  los\n       registros se restauran.\n\n       Cuando  ocurre una se\u00f1al, el contexto de usuario actual se guarda y el n\u00facleo crea un nuevo contexto para\n       el manejador de se\u00f1ales.  No deje  al  manejador  usar  longjmp()  -  es  indefinido  que  ocurrir\u00eda  con\n       contextos. Use siglongjmp() o setcontext() en su lugar.\n\nCONFORME A\n       SUSv2\n\nV\u00c9ASE TAMBI\u00c9N\n       sigaction(2), sigaltstack(2), sigprocmask(2), longjmp(3), sigsetjmp(3), makecontext(3)\n\nLinux 2.4                                       15 noviembre 2001                                  GETCONTEXT(2)\n"},{"NOMBRE": "       getdents - obtiene las entradas de un directorio\n\n", "SINOPSIS": "       #include <unistd.h>\n       #include <linux/types.h>\n       #include <linux/dirent.h>\n       #include <linux/unistd.h>\n\n       _syscall3(int, getdents, uint, fd, struct dirent *, dirp, uint, count);\n\n       int getdents(unsigned int fd, struct dirent *dirp, unsigned int count);\n\n", "DESCRIPCION": "       getdents  lee  varias  estructuras dirent del directorio se\u00f1alado por el puntero fd en el \u00e1rea de memoria\n       se\u00f1alada por dirp.  El par\u00e1metro count es el tama\u00f1o del \u00e1rea de memoria.\n\n       La  estructura dirent se declara de la siguente manera:\n\n              struct dirent\n              {\n                  long d_ino;               /* n\u00famero de nodo-i */\n                  off_t d_off;              /* desplazamiento al pr\u00f3ximo dirent */\n                  unsigned short d_reclen;  /* longitud de este dirent */\n                  char d_name [NAME_MAX+1]; /* Nombre del fichero (terminado en NUL) */\n              }\n\n       d_ino es un n\u00famero de nodo-i.  d_off es la distancia desde el principio del directorio  al  comienzo  del\n       pr\u00f3ximo  dirent.   d_reclen  es el tama\u00f1o de todo el dirent.  d_name es un nombre de fichero terminado en\n       NUL (el car\u00e1cter de c\u00f3digo 0).\n\n       Esta llamada sustituye a readdir(2).\n\nVALOR DEVUELTO\n       En caso de \u00e9xito de regresa el n\u00famero de bytes le\u00eddos.  Si se llega al final del directorio  se  devuelve\n       0.  En caso de error se devuelve -1, y en la variable errno se pone un valor apropiado.\n\n", "ERRORES": "       EBADF  Descriptor de fichero inv\u00e1lido fd.\n\n       EFAULT El argumento apunta afuera del espacio de direcciones del proceso llamador.\n\n       EINVAL El b\u00fafer del resultado es demasiado peque\u00f1o.\n\n       ENOENT El directorio no existe.\n\n       ENOTDIR\n              El descriptor de fichero no se refiere a un directorio.\n\nCONFORME A\n       SVr4, SVID.  SVr4 documenta las condiciones de error adicionales ENOLINK y EIO.\n\nV\u00c9ASE TAMBI\u00c9N\n       readdir(2), readdir(3).\n\nLinux 1.3.6                                       1 julio 1996                                       GETDENTS(2)\n"},{"NOMBRE": "       getdomainname, setdomainname - obtiene/asigna el nombre del dominio\n\n", "SINOPSIS": "       #include <unistd.h>\n\n       int getdomainname(char *name, size_t len);\n       int setdomainname(const char *name, size_t len);\n\n", "DESCRIPCION": "       Estas  funciones se usan para acceder o cambiar el nombre de dominio del procesador actual.  Si el nombre\n       de dominio acabado en NULL requiere m\u00e1s de len bytes,  getdomainname  devuelve  los  primeros  len  bytes\n       (glibc) o devuelve un error (libc).\n\nVALOR DEVUELTO\n       En caso de \u00e9xito se devuelve 0. En caso de error, -1, y errno toma un valor adecuado.\n\n", "ERRORES": "       EINVAL Para getdomainname bajo libc: name es NULL o name tiene m\u00e1s de len bytes.\n\n       EINVAL Para setdomainname: len era demasiado grande o menor que 0.\n\n       EPERM  Para setdomainname: el invocador no era el superusuario.\n\n       EFAULT Para setdomainname: name apuntaba afuera del espacio de direcciones del usuario.\n\nCONFORME A\n       POSIX  no  especifica  estas  llamadas.   En   Linux,  getdomainname  est\u00e1  implementada  en el \u00e1mbito de\n       bibliotecas mediante la llamada\n\nV\u00c9ASE TAMBI\u00c9N\n       gethostname(2), sethostname(2), uname(2)\n\nLinux 2.0                                        25 agosto 1997                                 GETDOMAINNAME(2)\n"},{"NOMBRE": "       getdtablesize - obtiene el tama\u00f1o de la tabla de descriptores\n\n", "SINOPSIS": "       #include <unistd.h>\n\n       int getdtablesize(void);\n\n", "DESCRIPCION": "       getdtablesize  devuelve  el n\u00famero m\u00e1ximo de ficheros que un proceso puede tener abiertos, uno m\u00e1s que el\n       valor m\u00e1s grande posible para un descriptor de fichero.\n\nVALOR DEVUELTO\n       El l\u00edmite actual de n\u00famero de ficheros abiertos por proceso.\n\n", "OBSERVACIONES": "       getdtablesize est\u00e1 implementada como una funci\u00f3n de la biblioteca libc. La  versi\u00f3n  de  glibc  hace  una\n       llamada  a  getrlimit(2)  y  devuelve el valor l\u00edmite RLIMIT_NOFILE actual, o OPEN_MAX cuando falla.  Las\n       versiones de libc4 y libc5 devuelven OPEN_MAX (fijado a 256 desde Linux 0.98.4).\n\nCONFORME A\n       SVr4, 4.4BSD (la funci\u00f3n getdtablesize apareci\u00f3 por primera vez en BSD 4.2).\n\nV\u00c9ASE TAMBI\u00c9N\n       close(2), dup(2), getrlimit(2), open(2)\n\nLinux 0.99.11                                     15 Abril 2002                                 GETDTABLESIZE(2)\n"},{"NOMBRE": "       getgid, getegid - devuelve la identidad (identificador) del grupo\n\n", "SINOPSIS": "       #include <unistd.h>\n       #include <sys/types.h>\n\n       gid_t getgid(void);\n       gid_t getegid(void);\n\n", "DESCRIPCION": "       getgid devuelve el ID (identificador) real del grupo del proceso actual.\n\n       getegid devuelve el ID 'efectivo' del grupo del proceso actual.\n\n       El  ID  real  se  corresponde  con  el  ID  del  proceso  invocador. El ID efectivo corresponde al bit ID\n       establecido en el fichero que se est\u00e1 ejecutando.\n\n", "ERRORES": "       Estas funciones siempre terminan sin error.\n\nCONFORME A\n       POSIX, BSD 4.3\n\nV\u00c9ASE TAMBI\u00c9N\n       setregid(2), setgid(2)\n\nLinux 0.99.11                                     23 julio 1993                                        GETGID(2)\n"},{"NOMBRE": "       getuid, geteuid - devuelve la identidad del usuario\n\n", "SINOPSIS": "       #include <unistd.h>\n       #include <sys/types.h>\n\n       uid_t getuid(void);\n       uid_t geteuid(void);\n\n", "DESCRIPCION": "       getuid devuelve el identificador de usuario real del proceso actual.\n\n       geteuid devuelve el identificador de usuario efectivo del proceso actual.\n\n       El  identificador  real  corresponde  con  el  del  proceso  invocador. El efectivo se corresponde con el\n       identificador de usuario (\"sticky bit\") del fichero que se est\u00e1 ejecutando.\n\n", "ERRORES": "       Estas funciones siempre funcionan.\n\nCONFORME A\n       POSIX, BSD 4.3.\n\nV\u00c9ASE TAMBI\u00c9N\n       setreuid(2), setuid(2)\n\nLinux 0.99.11                                     23 julio 1993                                        GETUID(2)\n"},{"NOMBRE": "       getgid, getegid - devuelve la identidad (identificador) del grupo\n\n", "SINOPSIS": "       #include <unistd.h>\n       #include <sys/types.h>\n\n       gid_t getgid(void);\n       gid_t getegid(void);\n\n", "DESCRIPCION": "       getgid devuelve el ID (identificador) real del grupo del proceso actual.\n\n       getegid devuelve el ID 'efectivo' del grupo del proceso actual.\n\n       El  ID  real  se  corresponde  con  el  ID  del  proceso  invocador. El ID efectivo corresponde al bit ID\n       establecido en el fichero que se est\u00e1 ejecutando.\n\n", "ERRORES": "       Estas funciones siempre terminan sin error.\n\nCONFORME A\n       POSIX, BSD 4.3\n\nV\u00c9ASE TAMBI\u00c9N\n       setregid(2), setgid(2)\n\nLinux 0.99.11                                     23 julio 1993                                        GETGID(2)\n"},{"NOMBRE": "       getgroups, setgroups - obtiene/asigna la lista de IDs de grupo suplementarios\n\n", "SINOPSIS": "       #include <sys/types.h>\n       #include <unistd.h>\n\n       int getgroups(int size, gid_t list[]);\n\n       #include <grp.h>\n\n       int setgroups(size_t size, const gid_t *list);\n\n", "DESCRIPCION": "       getgroups\n              Se  devuelven  como  mucho  size  identificadores  de  grupo  suplementarios  en  list.  Queda sin\n              especificar si el identificador de grupo efectivo del proceso invocador se  incluye  en  la  lista\n              devuelta.  (As\u00ed,  una  aplicaci\u00f3n deber\u00eda llamar tambi\u00e9n a getegid(2) y a\u00f1adir o eliminar el valor\n              resultante.)  Si size es cero,  list  no  se  modifica,  pero  se  devuelve  el  n\u00famero  total  de\n              identificadores de grupo suplementarios para el proceso.\n\n       setgroups\n              Asigna  los  identificadores  de  grupo suplementarios para el proceso. S\u00f3lo el superusuario puede\n              usar esta funci\u00f3n.\n\nVALOR DEVUELTO\n       getgroups\n              En caso de \u00e9xito, se devuelve el n\u00famero de grupos suplementarios.  En caso de error,  se  devuelve\n              -1 y se pone en errno un valor apropiado.\n\n       setgroups\n              En caso de \u00e9xito, se devuelve 0. Si hay un error, -1, y se pone en errno un valor apropiado.\n\n", "ERRORES": "       EFAULT list tiene una direcci\u00f3n inv\u00e1lida.\n\n       EPERM  Para setgroups, el usuario no es el superusuario.\n\n       EINVAL Para  setgroups,  size  es m\u00e1s grande que NGROUPS (32 para Linux 2.0.32).  Para getgroups, size es\n              menor que el n\u00famero de IDs de grupos suplementarios, pero no es cero.\n\n", "OBSERVACIONES": "       Un proceso puede tener como m\u00e1ximo al menos NGROUPS_MAX identificadores de  grupo  suplementarios  adem\u00e1s\n       del  identificador  de  grupo efectivo (EGID).  El conjunto de identificadores de grupo suplementarios es\n       heredado del proceso padre y puede ser modificado usando setgroups.  El n\u00famero m\u00e1ximo de  identificadores\n       de grupo suplementarios puede averiguarse usando sysconf(3):\n           long ngroups_max;\n           ngroups_max = sysconf(_SC_NGROUPS_MAX);\n       El valor m\u00e1ximo devuelto por getgroups no puede ser mayor que el valor obtenido de esta manera m\u00e1s uno.\n\n       El  prototipo para setgroups est\u00e1 disponible solamente si _BSD_SOURCE est\u00e1 definida (bien expl\u00edcitamente,\n       o impl\u00edcitamente, no definiendo _POSIX_SOURCE o compilando con la opci\u00f3n -ansi).\n\nCONFORME A\n       SVr4, SVID (s\u00f3lo en la distribuci\u00f3n 4; estas llamadas al sistema no estaban presentes en  SVr3),  X/OPEN,\n       4.3BSD.  La  funci\u00f3n  getgroups  est\u00e1  en  POSIX.1.   Puesto  que setgroups requiere privilegios, no est\u00e1\n       cubierta por POSIX.1.\n\nV\u00c9ASE TAMBI\u00c9N\n       initgroups(3), getgid(2), setgid(2)\n\nLinux 2.0.32                                    10 Diciembre 1997                                   GETGROUPS(2)\n"},{"NOMBRE": "       gethostid, sethostid - obtiene o asigna un identificador \u00fanico al anfitri\u00f3n (host) actual.\n\n", "SINOPSIS": "       #include <unistd.h>\n\n       long gethostid(void);\n       int sethostid(long hostid);\n\n", "DESCRIPCION": "       Obtiene  o asigna un identificador \u00fanico de 32-bits para el ordenador actual. El identificador de 32-bits\n       pretende ser \u00fanico entre todos los sistemas  UNIX  existentes.  Este  normalmente  asemeja  la  direcci\u00f3n\n       Internet para el sistema local, dado por gethostbyname(3), y por lo tanto, normalmente nunca necesita ser\n       asignado.\n\n       El uso de la llamada sethostid est\u00e1 restringida al superusuario.\n\n       El argumento hostid se encuentra almacenado en el fichero /etc/hostid.\n\nVALOR DEVUELTO\n       gethostid devuelve el identificador de 32-bits del anfitri\u00f3n (host) actual asignado por sethostid(2).\n\nCONFORME A\n       4.2BSD. Estas funciones se encuentran  en  4.4BSD.  POSIX.1  no  define  estas  funciones,  pero  ISO/IEC\n       9945-1:1990 las menciona en B.4.4.1. SVr4 incluye gethostid pero no sethostid.\n\n", "ARCHIVOS": "       /etc/hostid\n\nV\u00c9ASE TAMBI\u00c9N\n       hostid(1), gethostbyname(3)\n\nLinux 0.99.13                                     1 julio 1996                                      GETHOSTID(2)\n"},{"NOMBRE": "       gethostname, sethostname - obtiene/asigna el nombre del host\n\n", "SINOPSIS": "       #include <unistd.h>\n\n       int gethostname(char *name, size_t len);\n       int sethostname(const char *name, size_t len);\n\n", "DESCRIPCION": "       Estas  funciones  se  usan  para  obtener  o  cambiar  el nombre del host del proceso actual.  La funci\u00f3n\n       gethostname() devuelve un nombre de host acabado en NULL (establecido anteriormente por sethostname()) en\n       el  array  name que tiene una longitud de len bytes.  En el caso en que el nombre de host acabado en NULL\n       no quepa, no se devuelve un error, pero se trunca el nombre de host. Queda sin especificar si  el  nombre\n       de host truncado terminar\u00e1 en NULL.\n\nVALOR DEVUELTO\n       En caso de \u00e9xito devuelve un 0. En caso de error,devuelve un -1, y errno se asigna apropiadamente.\n\n", "ERRORES": "       EINVAL len  es  negativo o, para sethostname, len es mas largo que el m\u00e1ximo de tama\u00f1o permitido, o, para\n              gethostname en Linux/i386, len es mas corto que el tama\u00f1o actual.  (In this last  case  glibc  2.1\n              uses ENAMETOOLONG.)\n\n       EPERM  Para sethostname, realizar la llamada no hace falta estar como superusuario.\n\n       EFAULT name es una direcci\u00f3n inv\u00e1lida.\n\nCONFORME A\n       SVr4,  4.4BSD   (esta  funci\u00f3n  apareci\u00f3  por  primera  vez  en  4.2BSD).   POSIX  1003.1-2001 especifica\n       gethostname pero no sethostname.\n\n", "FALLOS": "       Para muchas combinaciones n\u00facleo Linux / libc gethostname devolver\u00e1 un error en lugar  de  un  nombre  de\n       host truncado.\n\n", "OBSERVACIONES": "       SUSv2  garantiza  que `Los nombres de host est\u00e1n limitados a 255 bytes'.  POSIX 1003.1-2001 garantiza que\n       `Los nombres de host (sin incluir el car\u00e1cter NULL del final) est\u00e1n limitados a HOST_NAME_MAX bytes'.\n\nV\u00c9ASE TAMBI\u00c9N\n       getdomainname(2), setdomainname(2), uname(2)\n\nLinux 2.5.0                                     15 Diciembre 2001                                 GETHOSTNAME(2)\n"},{"NOMBRE": "       get_kernel_syms - recupera s\u00edmbolos exportados del n\u00facleo y de m\u00f3dulos\n\n", "SINOPSIS": "       #include <linux/module.h>\n\n       int get_kernel_syms(struct kernel_sym *tabla);\n\n", "DESCRIPCION": "       Si tabla es NULL, get_kernel_syms devuelve el n\u00famero de s\u00edmbolos disponibles para consultar. En otro caso\n       rellena una tabla de estructuras:\n\n              struct kernel_sym\n              {\n                unsigned long value;\n                char name[60];\n              };\n\n       Los s\u00edmbolos est\u00e1n mezclados con s\u00edmbolos m\u00e1gicos de la forma #nombre-de-m\u00f3dulo donde el n\u00facleo tiene  un\n       nombre  vac\u00edo.   El  valor  asociado  a  un s\u00edmbolo de esta forma es la direcci\u00f3n en la cual el m\u00f3dulo se\n       carga.\n\n       Los s\u00edmbolos exportados de cada m\u00f3dulo siguen su etiqueta m\u00e1gica de m\u00f3dulo y los m\u00f3dulos se devuelven  en\n       orden inverso de su carga.\n\nVALOR DEVUELTO\n       Devuelve el n\u00famero de s\u00edmbolos obtenido. No puede haber error.\n\nV\u00c9ASE TAMBI\u00c9N\n       create_module(2), init_module(2), delete_module(2), query_module(2).\n\n", "FALLOS": "       No  hay  forma de indicar el tama\u00f1o del b\u00fafer reservado para tabla.  Si se han a\u00f1adido s\u00edmbolos al n\u00facleo\n       desde que el programa interrog\u00f3 sobre el tama\u00f1o de la tabla de s\u00edmbolos, la memoria se corromper\u00e1.\n\n       La longitud de los nombres de s\u00edmbolos exportados est\u00e1 limitada a 59.\n\n       Debido a estas  limitaciones,  esta  llamada  al  sistema  est\u00e1  destinada  a  desaparecer  en  favor  de\n       query_module.\n\nLinux                                              26 Dic 1996                                GET_KERNEL_SYMS(2)\n"},{"NOMBRE": "       getpagesize - obtiene el tama\u00f1o de p\u00e1gina de memoria\n\n", "SINOPSIS": "       #include <unistd.h>\n\n       int getpagesize(void);\n\n", "DESCRIPCION": "       La  funci\u00f3n  getpagesize()  devuelve  el  n\u00famero  de bytes de una p\u00e1gina, donde una \"p\u00e1gina\" es lo que se\n       utiliza en la parte de la descripci\u00f3n de mmap(2) que dice que los ficheros son ubicados  en  unidades  de\n       tama\u00f1o de p\u00e1gina.\n\n       El tama\u00f1o del tipo de p\u00e1ginas que usa mmap , se averigua usando\n\n              #include <unistd.h>\n              long sz = sysconf(_SC_PAGESIZE);\n\n       (algunos sistemas tambi\u00e9n permiten el sin\u00f3nimo _SC_PAGE_SIZE por _SC_PAGESIZE), or\n\n              #include <unistd.h>\n              int sz = getpagesize();\n\n", "HISTORIA": "       Esta llamada apareci\u00f3 por primera vez en 4.2BSD.\n\nCONFORME A\n       SVr4,  4.4BSD,  SUSv2.   En  SUSv2  la  llamada  getpagesize() est\u00e1 etiquetada como \"antigua\", y en POSIX\n       1003.1-2001 ha sido eliminada.  HPUX no posee esta llamada..\n\n", "OBSERVACIONES": "       Que getpagesize() est\u00e9 presente como una llamada al sistema de Linux depende de la arquitectura.   Si  lo\n       est\u00e1,  devolver\u00e1  el  s\u00edmbolo del n\u00facleo PAGE_SIZE, que es dependiente de la arquitectura y del modelo de\n       m\u00e1quina.  Generalmente, suelen usarse binarios que son dependientes de la arquitectura pero no del modelo\n       de  m\u00e1quina,  con  el  fin  de tener un \u00fanico binario por arquitectura. Esto significa que un programa de\n       usuario no deber\u00eda incorporar PAGE_SIZE en tiempo de compilaci\u00f3n de un fichero de cabecera, sino usar una\n       llamada  al  sistema  real, al menos en aquellas arquitecturas (como sun4) donde exista esta dependencia.\n       Aqu\u00ed fallan libc4, libc5 y glibc  2.0  porque  su  llamada  getpagesize()  devuelve  un  valor  calculado\n       est\u00e1ticamente,  y  no utiliza una llamada al sistema.  Este aspecto est\u00e1 solucionado en la versi\u00f3n 2.1 de\n       glibc.\n\nV\u00c9ASE TAMBI\u00c9N\n       mmap(2), sysconf(3)\n\nLinux 2.5.0                                     21 diciembre 2001                                 GETPAGESIZE(2)\n"},{"NOMBRE": "       getpeername - obtiene el nombre del conector en el otro extremo\n\n", "SINOPSIS": "       #include <sys/socket.h>\n\n       int getpeername(int s, struct sockaddr *nombre, socklen_t *longinom);\n\n", "DESCRIPCION": "       Getpeername  devuelve  el  nombre  de  la  pareja conectada al conector s.  El par\u00e1metro longinom deber\u00eda\n       inicializarse de forma que indicara la cantidad de espacio a la que  apuntara  nombre.   Al  regresar  la\n       funci\u00f3n,  contendr\u00e1  el  tama\u00f1o  real  del  nombre  devuelto  (en bytes). El nombre se trunca si el b\u00fafer\n       provisto es demasiado peque\u00f1o.\n\nVALOR DEVUELTO\n       En caso de \u00e9xito, se devuelve cero. En caso de error, se  devuelve  -1  y  se  pone  en  errno  un  valor\n       apropiado.\n\n", "ERRORES": "       EBADF  El argumento s no es un descriptor v\u00e1lido.\n\n       ENOTSOCK\n              El argumento s es un fichero, no un conector.\n\n       ENOTCONN\n              El conector no est\u00e1 conectado.\n\n       ENOBUFS\n              No hab\u00eda en el sistema suficientes recursos como para efectuarse la operaci\u00f3n.\n\n       EFAULT El par\u00e1metro nombre apunta a memoria que no est\u00e1 en una zona v\u00e1lida del espacio de direcciones del\n              proceso.\n\nCONFORME A\n       SVr4, 4.4BSD (la llamada al sistema getpeername apareci\u00f3 por vez 1\u00aa en 4.2BSD).\n\n", "NOTA": "       El tercer argumento de getpeername es en realidad un entero (y esto es lo que tienen  BSD  4.*,  libc4  y\n       libc5).  Cierta confusi\u00f3n en POSIX dio como resultado el actual socklen_t.  El est\u00e1ndar propuesto todav\u00eda\n       no ha sido adoptado pero glibc2 ya lo sigue y tambi\u00e9n tiene socklen_t. Vea tambi\u00e9n accept(2).\n\nV\u00c9ASE TAMBI\u00c9N\n       accept(2), bind(2), getsockname(2)\n\nBSD                                               30 julio 1993                                   GETPEERNAME(2)\n"},{"NOMBRE": "       setpgid, getpgid, setpgrp, getpgrp - obtener/establecer el grupo de procesos\n\n", "SINOPSIS": "       #include <unistd.h>\n\n       int setpgid(pid_t pid, pid_t pgid);\n       pid_t getpgid(pid_t pid);\n       int setpgrp(void);\n       pid_t getpgrp(void);\n\n", "DESCRIPCION": "       setpgid  pone  el ID del grupo del proceso especificado por pid a pgid.  Si pid es cero, se emplea el PID\n       del proceso en curso. Si pgid es cero, se emplea el PID del proceso especificado por pid.  Si setpgid  se\n       utiliza  para  mover  un  proceso  de un grupo de procesos a otro (como hacen algunos shells cuando crean\n       tuber\u00edas), ambos grupos de procesos deben formar parte de la misma sesi\u00f3n. En este caso, pgid  especifica\n       el  grupo de procesos existente en el que vamos a entrar, y el ID de sesi\u00f3n de ese grupo de procesos debe\n       coincidir con el ID de sesi\u00f3n del proceso que quiere entrar.\n\n       getpgid devuelve el ID del grupo de proceso del especificado por pid.  Si pid es cero, se emplea  el  PID\n       del proceso en curso.\n\n       La llamada setpgrp() es equivalente a setpgid(0,0).\n\n       De manera similar getpgrp() es equivalente a getpgid(0).  Cada grupo de procesos es miembro de una sesi\u00f3n\n       y cada proceso es miembro de la sesi\u00f3n de la que su grupo de procesos es miembro.\n\n       Los grupos de proceso se emplean para la distribuci\u00f3n de se\u00f1ales, y  por  las  terminales  para  arbitrar\n       peticiones  para  su  entrada:  los  procesos que tienen el mismo grupo de proceso que la terminal son en\n       primer plano y pueden leer, mientras que otros se bloquear\u00e1n con una se\u00f1al si intentan leer.\n\n       Estas llamadas se usan pues por programas como csh(1) para crear grupos de proceso cuando implementan  el\n       control  de  trabajos.   Las  llamadas  TIOCGPGRP  y  TIOCSPGRP  descritas  en termios(3) se emplean para\n       obtener/poner el grupo de proceso de la terminal de control.\n\n       Si una sesi\u00f3n posee una terminal controladora, CLOCAL no est\u00e1 configurada  y  si  se  cierra  la  sesi\u00f3n,\n       entonces  se  enviar\u00e1  una  se\u00f1al  SIGHUP al lider de sesi\u00f3n. Si el lider de sesi\u00f3n existe, se enviar\u00e1 la\n       se\u00f1al SIGHUP a cada proceso del grupo de procesos en primer plano de la terminal controladora.\n\n       Si la terminaci\u00f3n del proceso hace que un grupo de procesos se quede hu\u00e9rfano y si cualquier miembro  del\n       grupo  de  procesos  que  se  acaba  de  quedar hu\u00e9rfano se detiene, entonces se enviar\u00e1 una se\u00f1al SIGHUP\n       seguida de una se\u00f1al SIGCONT a cada proceso en el grupo de procesos que se acaba de quedar hu\u00e9rfano.\n\nVALOR DEVUELTO\n       En caso de \u00e9xito, setpgid y setpgrp devuelven cero. En caso de error.  devuelven  -1  y  ponen  un  valor\n       apropiado en errno.\n\n       getpgid  devuelve  un  grupo  de proceso si acaba bien; -1 en caso de error, y pone un valor apropiado en\n       errno.\n\n       getpgrp siempre devuelve el grupo de proceso actual.\n\n", "ERRORES": "       EINVAL pgid es menor que 0 (setpgid, setpgrp).\n\n       EACCES Se intent\u00f3 cambiar el identificador de grupo de procesos de uno de los hijos del proceso invocador\n              y el proceso hijo ya hab\u00eda realizado una llamada a execve (setpgid, setpgrp).\n\n       EPERM  Se  intent\u00f3  cambiar  el  grupo  de procesos de un proceso a otro grupo en una sesi\u00f3n diferente, o\n              cambiar el identificador de grupo de procesos de uno de los hijos del proceso invocador estando el\n              proceso  hijo en una sesi\u00f3n diferente, o cambiar el identificador de grupo de procesos de un l\u00edder\n              de sesi\u00f3n (setpgid, setpgrp).\n\n       ESRCH  Para getpgid: pid no concuerda con ning\u00fan proceso.  Para setpgid: pid no  se  corresponde  con  el\n              proceso actual ni con uno de sus hijos.\n\nCONFORME A\n       Las  funciones  setpgid  y  getpgrp  siguen  el  est\u00e1ndar POSIX.1.  La funci\u00f3n setpgrp es de BSD 4.2.  La\n       funci\u00f3n getpgid conforma con SVr4.\n\n", "OBSERVACIONES": "       POSIX tom\u00f3 setpgid de la funci\u00f3n BSD setpgrp.  SysV tambi\u00e9n tiene una funci\u00f3n con el mismo  nombre,  pero\n       es id\u00e9ntica a setsid(2).\n\n       Para  obtener  los prototipos bajo glibc, debe definir tanto _XOPEN_SOURCE como _XOPEN_SOURCE_EXTENDED, o\n       usar \"#define _XOPEN_SOURCE n\" para alg\u00fan entero n mayor o igual a 500.\n\nV\u00c9ASE TAMBI\u00c9N\n       getuid(2), setsid(2), tcgetpgrp(3), tcsetpgrp(3), termios(3)\n\nLinux                                             20 enero 2003                                       SETPGID(2)\n"},{"NOMBRE": "       setpgid, getpgid, setpgrp, getpgrp - obtener/establecer el grupo de procesos\n\n", "SINOPSIS": "       #include <unistd.h>\n\n       int setpgid(pid_t pid, pid_t pgid);\n       pid_t getpgid(pid_t pid);\n       int setpgrp(void);\n       pid_t getpgrp(void);\n\n", "DESCRIPCION": "       setpgid  pone  el ID del grupo del proceso especificado por pid a pgid.  Si pid es cero, se emplea el PID\n       del proceso en curso. Si pgid es cero, se emplea el PID del proceso especificado por pid.  Si setpgid  se\n       utiliza  para  mover  un  proceso  de un grupo de procesos a otro (como hacen algunos shells cuando crean\n       tuber\u00edas), ambos grupos de procesos deben formar parte de la misma sesi\u00f3n. En este caso, pgid  especifica\n       el  grupo de procesos existente en el que vamos a entrar, y el ID de sesi\u00f3n de ese grupo de procesos debe\n       coincidir con el ID de sesi\u00f3n del proceso que quiere entrar.\n\n       getpgid devuelve el ID del grupo de proceso del especificado por pid.  Si pid es cero, se emplea  el  PID\n       del proceso en curso.\n\n       La llamada setpgrp() es equivalente a setpgid(0,0).\n\n       De manera similar getpgrp() es equivalente a getpgid(0).  Cada grupo de procesos es miembro de una sesi\u00f3n\n       y cada proceso es miembro de la sesi\u00f3n de la que su grupo de procesos es miembro.\n\n       Los grupos de proceso se emplean para la distribuci\u00f3n de se\u00f1ales, y  por  las  terminales  para  arbitrar\n       peticiones  para  su  entrada:  los  procesos que tienen el mismo grupo de proceso que la terminal son en\n       primer plano y pueden leer, mientras que otros se bloquear\u00e1n con una se\u00f1al si intentan leer.\n\n       Estas llamadas se usan pues por programas como csh(1) para crear grupos de proceso cuando implementan  el\n       control  de  trabajos.   Las  llamadas  TIOCGPGRP  y  TIOCSPGRP  descritas  en termios(3) se emplean para\n       obtener/poner el grupo de proceso de la terminal de control.\n\n       Si una sesi\u00f3n posee una terminal controladora, CLOCAL no est\u00e1 configurada  y  si  se  cierra  la  sesi\u00f3n,\n       entonces  se  enviar\u00e1  una  se\u00f1al  SIGHUP al lider de sesi\u00f3n. Si el lider de sesi\u00f3n existe, se enviar\u00e1 la\n       se\u00f1al SIGHUP a cada proceso del grupo de procesos en primer plano de la terminal controladora.\n\n       Si la terminaci\u00f3n del proceso hace que un grupo de procesos se quede hu\u00e9rfano y si cualquier miembro  del\n       grupo  de  procesos  que  se  acaba  de  quedar hu\u00e9rfano se detiene, entonces se enviar\u00e1 una se\u00f1al SIGHUP\n       seguida de una se\u00f1al SIGCONT a cada proceso en el grupo de procesos que se acaba de quedar hu\u00e9rfano.\n\nVALOR DEVUELTO\n       En caso de \u00e9xito, setpgid y setpgrp devuelven cero. En caso de error.  devuelven  -1  y  ponen  un  valor\n       apropiado en errno.\n\n       getpgid  devuelve  un  grupo  de proceso si acaba bien; -1 en caso de error, y pone un valor apropiado en\n       errno.\n\n       getpgrp siempre devuelve el grupo de proceso actual.\n\n", "ERRORES": "       EINVAL pgid es menor que 0 (setpgid, setpgrp).\n\n       EACCES Se intent\u00f3 cambiar el identificador de grupo de procesos de uno de los hijos del proceso invocador\n              y el proceso hijo ya hab\u00eda realizado una llamada a execve (setpgid, setpgrp).\n\n       EPERM  Se  intent\u00f3  cambiar  el  grupo  de procesos de un proceso a otro grupo en una sesi\u00f3n diferente, o\n              cambiar el identificador de grupo de procesos de uno de los hijos del proceso invocador estando el\n              proceso  hijo en una sesi\u00f3n diferente, o cambiar el identificador de grupo de procesos de un l\u00edder\n              de sesi\u00f3n (setpgid, setpgrp).\n\n       ESRCH  Para getpgid: pid no concuerda con ning\u00fan proceso.  Para setpgid: pid no  se  corresponde  con  el\n              proceso actual ni con uno de sus hijos.\n\nCONFORME A\n       Las  funciones  setpgid  y  getpgrp  siguen  el  est\u00e1ndar POSIX.1.  La funci\u00f3n setpgrp es de BSD 4.2.  La\n       funci\u00f3n getpgid conforma con SVr4.\n\n", "OBSERVACIONES": "       POSIX tom\u00f3 setpgid de la funci\u00f3n BSD setpgrp.  SysV tambi\u00e9n tiene una funci\u00f3n con el mismo  nombre,  pero\n       es id\u00e9ntica a setsid(2).\n\n       Para  obtener  los prototipos bajo glibc, debe definir tanto _XOPEN_SOURCE como _XOPEN_SOURCE_EXTENDED, o\n       usar \"#define _XOPEN_SOURCE n\" para alg\u00fan entero n mayor o igual a 500.\n\nV\u00c9ASE TAMBI\u00c9N\n       getuid(2), setsid(2), tcgetpgrp(3), tcsetpgrp(3), termios(3)\n\nLinux                                             20 enero 2003                                       SETPGID(2)\n"},{"NOMBRE": "       getpid, getppid - obtiene el identificador de proceso\n\n", "SINOPSIS": "       #include <sys/types.h>\n       #include <unistd.h>\n\n       pid_t getpid(void);\n       pid_t getppid(void);\n\n", "DESCRIPCION": "       getpid  devuelve  el  identificador de proceso del proceso actual. (Esto es usado normalmente por rutinas\n       que generan nombres \u00fanicos de ficheros temporales.)  getppid devuelve el  identificador  de  proceso  del\n       padre del proceso actual.\n\nCONFORME A\n       POSIX, BSD 4.3, SVID\n\nV\u00c9ASE TAMBI\u00c9N\n       exec(3), fork(2), kill(2), mkstemp(3), tmpnam(3), tempnam(3), tmpfile(3)\n\nLinux 0.99.11                                     23 Julio 1993                                        GETPID(2)\n"},{"NOMBRE": "       getpid, getppid - obtiene el identificador de proceso\n\n", "SINOPSIS": "       #include <sys/types.h>\n       #include <unistd.h>\n\n       pid_t getpid(void);\n       pid_t getppid(void);\n\n", "DESCRIPCION": "       getpid  devuelve  el  identificador de proceso del proceso actual. (Esto es usado normalmente por rutinas\n       que generan nombres \u00fanicos de ficheros temporales.)  getppid devuelve el  identificador  de  proceso  del\n       padre del proceso actual.\n\nCONFORME A\n       POSIX, BSD 4.3, SVID\n\nV\u00c9ASE TAMBI\u00c9N\n       exec(3), fork(2), kill(2), mkstemp(3), tmpnam(3), tempnam(3), tmpfile(3)\n\nLinux 0.99.11                                     23 Julio 1993                                        GETPID(2)\n"},{"NOMBRE": "       getpriority, setpriority - obtiene/asigna la prioridad de planificaci\u00f3n de un programa\n\n", "SINOPSIS": "       #include <sys/time.h>\n       #include <sys/resource.h>\n\n       int getpriority(int which, int who);\n       int setpriority(int which, int who, int prio);\n\n", "DESCRIPCION": "       La  prioridad  de planificaci\u00f3n del proceso, grupo de procesos o usuario, seg\u00fan se indique en which y who\n       se obtiene con la funci\u00f3n getpriority y  se  asigna  con  setpriority.   Which  puede  ser  PRIO_PROCESS,\n       PRIO_PGRP,  o  PRIO_USER,  y  who  se  interpreta  en funci\u00f3n de which (un indentificador de proceso para\n       PRIO_PROCESS, un indentificador de grupo de procesos para PRIO_PGRP, y un identificador de  usuario  para\n       PRIO_USER).   Un valor cero de who indica (respectivamente) el proceso invocador, el grupo de proceso del\n       proceso invocador, o el identificador de usuario real del proceso invocador.  Prio es un valor que  puede\n       variar  de -20 a 20 (vea la secci\u00f3n Observaciones m\u00e1s abajo) .  La prioridad por defecto es 0; cuanto m\u00e1s\n       baja es la prioridad m\u00e1s favorable es la planificaci\u00f3n.\n\n       La llamada getpriority devuelve la prioridad m\u00e1s alta (el valor num\u00e9rico m\u00e1s bajo)  de  la  que  disfruta\n       cualquiera  de  los  procesos  especificados.  La  llamada setpriority asigna el valor especificado a las\n       prioridades de todos los procesos especificados. S\u00f3lo el superusuario puede decrementar  las  prioridades\n       (haci\u00e9ndolas, por tanto, m\u00e1s altas).\n\nVALOR DEVUELTO\n       Ya  que  getpriority  leg\u00edtimamente  puede  devolver el valor -1, es necesario borrar la variable externa\n       errno antes de la llamada a la funci\u00f3n y comprobar su valor m\u00e1s adelante para  determinar  si  -1  es  un\n       error o un valor leg\u00edtimo.  La funci\u00f3n setpriority devuelve 0 si no hay error o -1 si lo hay.\n\n", "ERRORES": "       ESRCH   No se encontr\u00f3 ning\u00fan proceso que cumpliera con los valores especificados por which y who.\n\n       EINVAL  Which no era PRIO_PROCESS, PRIO_PGRP, ni PRIO_USER.\n\n       Adem\u00e1s de los errores indicados arriba, setpriority puede fallar si:\n\n       EPERM  Se  encontr\u00f3  un  proceso,  pero  ni  el  identificador de usuario efectivo ni el identificador de\n              usuario real del invocador coinciden con su identificador de usuario efectivo.\n\n       EACCES Un no superusuario intent\u00f3 decrementar la prioridad de un proceso.\n\n", "OBSERVACIONES": "       Los detalles sobre la condici\u00f3n para EPERM dependen del sistema.  La descripci\u00f3n dada arriba  es  lo  que\n       dice  SUSv3,  y  parece  ser  seguida  por  todos  los  sistemas  de  tipo  SYSV.   Linux requiere que el\n       identificador de usuario real o efectivo del invocador coincida con el usuario real del proceso  who  (en\n       lugar de su identificador de usuario efectivo).  Todos los sistemas de tipo BSD (SunOS 4.1.3, Ultrix 4.2,\n       BSD 4.3, FreeBSD 4.3, OpenBSD-2.5, ...) requieren que el identificador de usuario efectivo del  invocador\n       coincida con el identificador de usuario real o efectivo del proceso who.\n\n       El  rango  real  de  prioridad  var\u00eda  entre las diferentes versiones del n\u00facleo.  Las versiones de Linux\n       anteriores a la 1.3.36 ten\u00edan -infinito..15. A partir de la versi\u00f3n 1.3.43 se tiene -20..19, y la llamada\n       al sistema getpriority devuelve 40..1 para estos valores (puesto que los n\u00fameros negativos son c\u00f3digos de\n       error).  La llamada de biblioteca convierte N a 20-N.\n\n       Incluir  <sys/time.h>  no  es  obligatorio  hoy  d\u00eda,  pero  incrementa  la  portabilidad.   (De   hecho,\n       <sys/resource.h> define la estructura rusage con campos de tipo struct timeval definida en <sys/time.h>.)\n\nCONFORME A\n       SVr4, 4.4BSD (estas funciones aparecieron por primera vez en 4.2BSD).\n\nV\u00c9ASE TAMBI\u00c9N\n       nice(1), fork(2), renice(8)\n\nP\u00e1gina de Manual BSD                              21 junio 2002                                   GETPRIORITY(2)\n"},{"NOMBRE": "       getresuid, getresgid - devuelve el ID real, efectivo o salvado del usuario o grupo\n\n", "SINOPSIS": "       #include <unistd.h>\n\n       int getresuid(uid_t *ruid, uid_t *euid, uid_t *suid);\n       int getresgid(gid_t *rgid, gid_t *egid, gid_t *sgid);\n\n", "DESCRIPCION": "       getresuid and getresgid (ambos introducidos en Linux 2.1.44) devuelven en ID real, efectivo y salvado del\n       usuario (resp. ID de grupo) del proceso actual.\n\nVALOR DEVUELTO\n       Si es correcto, devuelve el valor 0. Caso de  error,  devuelve  el  valor  -1  y  la  variable  errno  es\n       modificada apropiadamente.\n\n", "ERRORES": "       EFAULT Uno  de  los  argumentos  especific\u00f3  una direcci\u00f3n fuera del rango del espacio de direcciones del\n              programa.\n\nCONFORME A\n       Esta llamada es espec\u00edfica de Linux\n\nV\u00c9ASE TAMBI\u00c9N\n       getuid(2), setuid(2), setreuid(2), setresuid(2)\n\nLinux 2.1.44                                      16 Julio 1997                                     GETRESUID(2)\n"},{"NOMBRE": "       getresuid, getresgid - devuelve el ID real, efectivo o salvado del usuario o grupo\n\n", "SINOPSIS": "       #include <unistd.h>\n\n       int getresuid(uid_t *ruid, uid_t *euid, uid_t *suid);\n       int getresgid(gid_t *rgid, gid_t *egid, gid_t *sgid);\n\n", "DESCRIPCION": "       getresuid and getresgid (ambos introducidos en Linux 2.1.44) devuelven en ID real, efectivo y salvado del\n       usuario (resp. ID de grupo) del proceso actual.\n\nVALOR DEVUELTO\n       Si es correcto, devuelve el valor 0. Caso de  error,  devuelve  el  valor  -1  y  la  variable  errno  es\n       modificada apropiadamente.\n\n", "ERRORES": "       EFAULT Uno  de  los  argumentos  especific\u00f3  una direcci\u00f3n fuera del rango del espacio de direcciones del\n              programa.\n\nCONFORME A\n       Esta llamada es espec\u00edfica de Linux\n\nV\u00c9ASE TAMBI\u00c9N\n       getuid(2), setuid(2), setreuid(2), setresuid(2)\n\nLinux 2.1.44                                      16 Julio 1997                                     GETRESUID(2)\n"},{"NOMBRE": "       getrlimit, getrusage, setrlimit - devuelve/establece el l\u00edmite de recursos y su utilizaci\u00f3n\n\n", "SINOPSIS": "       #include <sys/time.h>\n       #include <sys/resource.h>\n       #include <unistd.h>\n\n       int getrlimit(int resource, struct rlimit *rlim);\n       int getrusage(int who, struct rusage *usage);\n       int setrlimit(int resource, const struct rlimit *rlim);\n\n", "DESCRIPCION": "       getrlimit  y  setrlimit  devuelve / establece el l\u00edmite de recursos, respectivamente.  Cada recurso tiene\n       asociado un l\u00edmite flexible y otro estricto, tal como se define en la  estructura  rlimit  (el  argumento\n       rlim de las rutinas getrlimit() y setrlimit()):\n\n            struct rlimit {\n                rlim_t rlim_cur;   /* L\u00edmite flexible (Soft limit) */\n                rlim_t rlim_max;   /* L\u00edmite estricto (Hard limit)\n                                      (tope para rlim_cur) */\n            };\n\n       El  l\u00edmite flexible es el valor que impone el n\u00facleo para el recurso correspondiente.  El l\u00edmite estricto\n       act\u00faa como un tope para el l\u00edmite flexible: un proceso no  privilegiado  puede  solamente  establecer  su\n       l\u00edmite  flexible  a un valor comprendido entre 0 y el l\u00edmite estricto, y (irreversiblemente) menor que su\n       l\u00edmite estricto.  Un proceso privilegiado puede hacer cualquier cambio sobre ambos valores l\u00edmite.\n\n       El valor RLIM_INFINITY no impone ning\u00fan l\u00edmite sobre un recurso (tanto  en  la  estructura  devuelta  por\n       getrlimit() como en la estructura pasada a setrlimit()).\n\n       resource debe ser uno de los siguientes valores:\n\n       RLIMIT_CPU\n              Tiempo  de  CPU  en segundos.  Cuando el proceso alcanza el l\u00edmite flexible, se le env\u00eda una se\u00f1al\n              SIGXCPU.  La acci\u00f3n por defecto para esta se\u00f1al es terminar el proceso.   Sin  embargo,  la  se\u00f1al\n              puede ser atrapada, y el manejador puede devolver el control al programa principal.  Si el proceso\n              contin\u00faa consumiendo tiempo de CPU, se le enviar\u00e1 SIGXCPU una vez por segundo hasta que se alcance\n              el  l\u00edmite  estricto,  momento  en  el  cual  se  le enviar\u00e1 la se\u00f1al SIGKILL.  (Este \u00faltimo punto\n              describe el comportamiento de Linux 2.2 y 2.4.  Las implementaciones var\u00edan en el  tratamiento  de\n              los  procesos que contin\u00fana consumiendo tiempo de CPU despu\u00e9s de alcanzar el l\u00edmite flexible.  Las\n              aplicaciones portables que necesiten atrapar esta se\u00f1al deber\u00edan realizar una terminaci\u00f3n ordenada\n              despu\u00e9s de recibir la primera se\u00f1al SIGXCPU.)\n\n       RLIMIT_DATA\n              El  tama\u00f1o  m\u00e1ximo  del  segmento de datos del proceso (datos inicializados, no inicializados y el\n              mont\u00edculo).  Este l\u00edmite afecta a las llamadas a brk() and sbrk(), que fallan con el error  ENOMEM\n              al llegarse al l\u00edmite flexible de este recurso.\n\n       RLIMIT_FSIZE\n              El  tama\u00f1o  m\u00e1ximo  de  los ficheros que puede crear el proceso.  Los intentos por sobrepasar este\n              l\u00edmite provocan la comunicaci\u00f3n de una se\u00f1al SIGXFSZ.  Por defecto, esta se\u00f1al termina el proceso,\n              pero un proceso puede atrapar esta se\u00f1al en su lugar, en cuyo caso la llamada al sistema relevante\n              (p.e., write(), truncate()) falla con el error EFBIG.\n\n       RLIMIT_LOCKS\n              Un l\u00edmite sobre el n\u00famero combinado de bloqueos flock() y arrendamientos fcntl() que este  proceso\n              puede establecer (Linux 2.4 y posteriores).\n\n       RLIMIT_MEMLOCK\n              El  n\u00famero  m\u00e1ximo  de  bytes de memoria virtual que pueden ser bloqueados en RAM usando mlock() y\n              mlockall().\n\n       RLIMIT_NOFILE\n              Especifica un valor que es el n\u00famero m\u00e1ximo de descriptor de fichero que  puede  ser  abierto  por\n              este  proceso.   Los intentos de (open(), pipe(), dup(), etc.)  por exceder este l\u00edmite provocar\u00e1n\n              el error EMFILE.\n\n       RLIMIT_NPROC\n              El n\u00famero m\u00e1ximo de procesos que pueden ser creados por  el  identificador  de  usuario  real  del\n              proceso invocador.  Al alcanzar este l\u00edmite, fork() falla con el error EAGAIN.\n\n       RLIMIT_RSS\n              Especifica  el  l\u00edmite  (en  p\u00e1ginas)  del  conjunto  residente  del proceso (el n\u00famero de p\u00e1ginas\n              virtuales residentes en RAM).  Este l\u00edmite s\u00f3lo tiene efecto en Linux  2.4  en  adelante,  y  s\u00f3lo\n              afecta a las llamadas a madvise() especificando MADVISE_WILLNEED.\n\n       RLIMIT_STACK\n              El  tama\u00f1o  m\u00e1ximo de la pila del proceso, en bytes.  Al alcanzar este l\u00edmite, se genera una se\u00f1al\n              SIGSEGV.  Para manejar esta se\u00f1al, un  proceso  debe  emplear  una  pila  de  se\u00f1ales  alternativa\n              (sigaltstack(2)).\n\n       RLIMIT_OFILE es el nombre BSD para RLIMIT_NOFILE.\n\n       getrusage  devuelve  la  utilizaci\u00f3n actual de los recursos, para un who de cualquiera de los siguientes,\n       bien RUSAGE_SELF oo RUSAGE_CHILDREN.\n\n            struct rusage {\n                    struct timeval ru_utime; /* tiempo de usuario utilizado */\n                    struct timeval ru_stime; /* tiempo de sistema utilizado */\n                    long    ru_maxrss;       /* tama\u00f1o m\u00e1ximo de la parte\n                                                establecida como residente */\n                    long    ru_ixrss;        /* tama\u00f1o total de la memoria\n                                                compartida */\n                    long    ru_idrss;        /* tama\u00f1o total de la memoria\n                                                no compartida */\n                    long    ru_isrss;        /* tama\u00f1o de pila no compartido */\n                    long    ru_minflt;       /* peticiones de p\u00e1gina */\n                    long    ru_majflt;       /* fallos de p\u00e1gina */\n                    long    ru_nswap;        /* intercambios */\n                    long    ru_inblock;      /* operaciones de entrada de\n                                                bloques */\n                    long    ru_oublock;      /* operaciones de salida de\n                                                bloques */\n                    long    ru_msgsnd;       /* mensajes enviados */\n                    long    ru_msgrcv;       /* mensajes recibidos */\n                    long    ru_nsignals;     /* se\u00f1ales recibidas */\n                    long    ru_nvcsw;        /* cambios de contexto\n                                                voluntarios */\n                    long    ru_nivcsw;       /* cambios de contexto\n                                                involuntarios */\n            };\n\nVALOR DEVUELTO\n       Si tiene \u00e9xito, devuelve cero. Si hay error, devuelve -1, y errno toma el correspondiente valor.\n\n", "ERRORES": "       EFAULT rlim o usage apuntan fuera del espacio de direcciones accesible.\n\n       EINVAL getrlimit o setrlimit es llamado con un resource err\u00f3neo,  o  getrusage  es  llamado  con  un  who\n              err\u00f3neo.\n\n       EPERM  Un no-superusuario intenta utilizar setrlimit() para incrementar el l\u00edmite `flexible' o `estricto'\n              por encima del l\u00edmite estricto actual, o un superusuario  intenta  incrementar  RLIMIT_NOFILE  por\n              encima del m\u00e1ximo actual del n\u00facleo.\n\nCONFORME A\n       SVr4, BSD 4.3\n\n", "NOTA": "       Incluir  <sys/time.h>  no  es  necesario  actualmente,  pero incrementa la transportabilidad.  (De hecho,\n       struct timeval est\u00e1 definida en <sys/time.h>.)\n\n       En Linux, si la acci\u00f3n asociada a SIGCHLD es SIG_IGN los usos del  recurso  por  los  procesos  hijo  son\n       incluidos autom\u00e1ticamente en el valor devuelto por RUSAGE_CHILDREN, aunque POSIX 1003.1-2001 proh\u00edbe \u00e9sto\n       expl\u00edcitamente.\n\n       La estructura de arriba fue tomada de BSD 4.3 Reno.  No todos los campos son significativos  bajo  Linux.\n       En  la  actualidad  (Linux  2.4) s\u00f3lo los campos ru_utime, ru_stime, ru_minflt, ru_majflt, y ru_nswap son\n       mantenidos.\n\nV\u00c9ASE TAMBI\u00c9N\n       dup(2), fcntl(2), fork(2), mlock(2),  mlockall(2),  mmap(2),  open(2),  quotactl(2),  sbrk(2),  wait3(2),\n       wait4(2), malloc(3), ulimit(3), signal(7)\n\nLinux                                             9 julio 2002                                      GETRLIMIT(2)\n"},{"NOMBRE": "       getrlimit, getrusage, setrlimit - devuelve/establece el l\u00edmite de recursos y su utilizaci\u00f3n\n\n", "SINOPSIS": "       #include <sys/time.h>\n       #include <sys/resource.h>\n       #include <unistd.h>\n\n       int getrlimit(int resource, struct rlimit *rlim);\n       int getrusage(int who, struct rusage *usage);\n       int setrlimit(int resource, const struct rlimit *rlim);\n\n", "DESCRIPCION": "       getrlimit  y  setrlimit  devuelve / establece el l\u00edmite de recursos, respectivamente.  Cada recurso tiene\n       asociado un l\u00edmite flexible y otro estricto, tal como se define en la  estructura  rlimit  (el  argumento\n       rlim de las rutinas getrlimit() y setrlimit()):\n\n            struct rlimit {\n                rlim_t rlim_cur;   /* L\u00edmite flexible (Soft limit) */\n                rlim_t rlim_max;   /* L\u00edmite estricto (Hard limit)\n                                      (tope para rlim_cur) */\n            };\n\n       El  l\u00edmite flexible es el valor que impone el n\u00facleo para el recurso correspondiente.  El l\u00edmite estricto\n       act\u00faa como un tope para el l\u00edmite flexible: un proceso no  privilegiado  puede  solamente  establecer  su\n       l\u00edmite  flexible  a un valor comprendido entre 0 y el l\u00edmite estricto, y (irreversiblemente) menor que su\n       l\u00edmite estricto.  Un proceso privilegiado puede hacer cualquier cambio sobre ambos valores l\u00edmite.\n\n       El valor RLIM_INFINITY no impone ning\u00fan l\u00edmite sobre un recurso (tanto  en  la  estructura  devuelta  por\n       getrlimit() como en la estructura pasada a setrlimit()).\n\n       resource debe ser uno de los siguientes valores:\n\n       RLIMIT_CPU\n              Tiempo  de  CPU  en segundos.  Cuando el proceso alcanza el l\u00edmite flexible, se le env\u00eda una se\u00f1al\n              SIGXCPU.  La acci\u00f3n por defecto para esta se\u00f1al es terminar el proceso.   Sin  embargo,  la  se\u00f1al\n              puede ser atrapada, y el manejador puede devolver el control al programa principal.  Si el proceso\n              contin\u00faa consumiendo tiempo de CPU, se le enviar\u00e1 SIGXCPU una vez por segundo hasta que se alcance\n              el  l\u00edmite  estricto,  momento  en  el  cual  se  le enviar\u00e1 la se\u00f1al SIGKILL.  (Este \u00faltimo punto\n              describe el comportamiento de Linux 2.2 y 2.4.  Las implementaciones var\u00edan en el  tratamiento  de\n              los  procesos que contin\u00fana consumiendo tiempo de CPU despu\u00e9s de alcanzar el l\u00edmite flexible.  Las\n              aplicaciones portables que necesiten atrapar esta se\u00f1al deber\u00edan realizar una terminaci\u00f3n ordenada\n              despu\u00e9s de recibir la primera se\u00f1al SIGXCPU.)\n\n       RLIMIT_DATA\n              El  tama\u00f1o  m\u00e1ximo  del  segmento de datos del proceso (datos inicializados, no inicializados y el\n              mont\u00edculo).  Este l\u00edmite afecta a las llamadas a brk() and sbrk(), que fallan con el error  ENOMEM\n              al llegarse al l\u00edmite flexible de este recurso.\n\n       RLIMIT_FSIZE\n              El  tama\u00f1o  m\u00e1ximo  de  los ficheros que puede crear el proceso.  Los intentos por sobrepasar este\n              l\u00edmite provocan la comunicaci\u00f3n de una se\u00f1al SIGXFSZ.  Por defecto, esta se\u00f1al termina el proceso,\n              pero un proceso puede atrapar esta se\u00f1al en su lugar, en cuyo caso la llamada al sistema relevante\n              (p.e., write(), truncate()) falla con el error EFBIG.\n\n       RLIMIT_LOCKS\n              Un l\u00edmite sobre el n\u00famero combinado de bloqueos flock() y arrendamientos fcntl() que este  proceso\n              puede establecer (Linux 2.4 y posteriores).\n\n       RLIMIT_MEMLOCK\n              El  n\u00famero  m\u00e1ximo  de  bytes de memoria virtual que pueden ser bloqueados en RAM usando mlock() y\n              mlockall().\n\n       RLIMIT_NOFILE\n              Especifica un valor que es el n\u00famero m\u00e1ximo de descriptor de fichero que  puede  ser  abierto  por\n              este  proceso.   Los intentos de (open(), pipe(), dup(), etc.)  por exceder este l\u00edmite provocar\u00e1n\n              el error EMFILE.\n\n       RLIMIT_NPROC\n              El n\u00famero m\u00e1ximo de procesos que pueden ser creados por  el  identificador  de  usuario  real  del\n              proceso invocador.  Al alcanzar este l\u00edmite, fork() falla con el error EAGAIN.\n\n       RLIMIT_RSS\n              Especifica  el  l\u00edmite  (en  p\u00e1ginas)  del  conjunto  residente  del proceso (el n\u00famero de p\u00e1ginas\n              virtuales residentes en RAM).  Este l\u00edmite s\u00f3lo tiene efecto en Linux  2.4  en  adelante,  y  s\u00f3lo\n              afecta a las llamadas a madvise() especificando MADVISE_WILLNEED.\n\n       RLIMIT_STACK\n              El  tama\u00f1o  m\u00e1ximo de la pila del proceso, en bytes.  Al alcanzar este l\u00edmite, se genera una se\u00f1al\n              SIGSEGV.  Para manejar esta se\u00f1al, un  proceso  debe  emplear  una  pila  de  se\u00f1ales  alternativa\n              (sigaltstack(2)).\n\n       RLIMIT_OFILE es el nombre BSD para RLIMIT_NOFILE.\n\n       getrusage  devuelve  la  utilizaci\u00f3n actual de los recursos, para un who de cualquiera de los siguientes,\n       bien RUSAGE_SELF oo RUSAGE_CHILDREN.\n\n            struct rusage {\n                    struct timeval ru_utime; /* tiempo de usuario utilizado */\n                    struct timeval ru_stime; /* tiempo de sistema utilizado */\n                    long    ru_maxrss;       /* tama\u00f1o m\u00e1ximo de la parte\n                                                establecida como residente */\n                    long    ru_ixrss;        /* tama\u00f1o total de la memoria\n                                                compartida */\n                    long    ru_idrss;        /* tama\u00f1o total de la memoria\n                                                no compartida */\n                    long    ru_isrss;        /* tama\u00f1o de pila no compartido */\n                    long    ru_minflt;       /* peticiones de p\u00e1gina */\n                    long    ru_majflt;       /* fallos de p\u00e1gina */\n                    long    ru_nswap;        /* intercambios */\n                    long    ru_inblock;      /* operaciones de entrada de\n                                                bloques */\n                    long    ru_oublock;      /* operaciones de salida de\n                                                bloques */\n                    long    ru_msgsnd;       /* mensajes enviados */\n                    long    ru_msgrcv;       /* mensajes recibidos */\n                    long    ru_nsignals;     /* se\u00f1ales recibidas */\n                    long    ru_nvcsw;        /* cambios de contexto\n                                                voluntarios */\n                    long    ru_nivcsw;       /* cambios de contexto\n                                                involuntarios */\n            };\n\nVALOR DEVUELTO\n       Si tiene \u00e9xito, devuelve cero. Si hay error, devuelve -1, y errno toma el correspondiente valor.\n\n", "ERRORES": "       EFAULT rlim o usage apuntan fuera del espacio de direcciones accesible.\n\n       EINVAL getrlimit o setrlimit es llamado con un resource err\u00f3neo,  o  getrusage  es  llamado  con  un  who\n              err\u00f3neo.\n\n       EPERM  Un no-superusuario intenta utilizar setrlimit() para incrementar el l\u00edmite `flexible' o `estricto'\n              por encima del l\u00edmite estricto actual, o un superusuario  intenta  incrementar  RLIMIT_NOFILE  por\n              encima del m\u00e1ximo actual del n\u00facleo.\n\nCONFORME A\n       SVr4, BSD 4.3\n\n", "NOTA": "       Incluir  <sys/time.h>  no  es  necesario  actualmente,  pero incrementa la transportabilidad.  (De hecho,\n       struct timeval est\u00e1 definida en <sys/time.h>.)\n\n       En Linux, si la acci\u00f3n asociada a SIGCHLD es SIG_IGN los usos del  recurso  por  los  procesos  hijo  son\n       incluidos autom\u00e1ticamente en el valor devuelto por RUSAGE_CHILDREN, aunque POSIX 1003.1-2001 proh\u00edbe \u00e9sto\n       expl\u00edcitamente.\n\n       La estructura de arriba fue tomada de BSD 4.3 Reno.  No todos los campos son significativos  bajo  Linux.\n       En  la  actualidad  (Linux  2.4) s\u00f3lo los campos ru_utime, ru_stime, ru_minflt, ru_majflt, y ru_nswap son\n       mantenidos.\n\nV\u00c9ASE TAMBI\u00c9N\n       dup(2), fcntl(2), fork(2), mlock(2),  mlockall(2),  mmap(2),  open(2),  quotactl(2),  sbrk(2),  wait3(2),\n       wait4(2), malloc(3), ulimit(3), signal(7)\n\nLinux                                             9 julio 2002                                      GETRLIMIT(2)\n"},{"NOMBRE": "       getsid - obtener identificador de sesi\u00f3n\n\n", "SINOPSIS": "       #include <unistd.h>\n\n       pid_t getsid(pid_t pid);\n\n", "DESCRIPCION": "       getsid(0) devuelve el identificador de sesi\u00f3n del proceso invocador.  getsid(p) devuelve el identificador\n       de sesi\u00f3n del proceso con identificador p.  (El identificador de sesi\u00f3n de un proceso es el identificador\n       de  grupo  de  procesos del lider de sesi\u00f3n.)  En caso de error, se devolver\u00e1 (pid_t) -1, y se modificar\u00e1\n       errno con un valor apropiado.\n\n", "ERRORES": "       EPERM  Existe un proceso con el identificador de proceso p , pero no se encuentra en la misma sesi\u00f3n  que\n              el proceso actual, y la implementaci\u00f3n considera \u00e9sto un error.\n\n       ESRCH  No se encontr\u00f3 un proceso con identificador p.\n\nCONFORME A\n       SVr4, POSIX 1003.1-2001.\n\n", "OBSERVACIONES": "       Linux no devuelve el valor EPERM.\n\n       Linux  posee  esta  llamada  al sistema desde la versi\u00f3n 1.3.44.  Existe soporte de libc desde la versi\u00f3n\n       5.2.19 de libc.\n\n       Para obtener el prototipo bajo glibc, defina  tanto  _XOPEN_SOURCE  como  _XOPEN_SOURCE_EXTENDED,  o  use\n       \"#define _XOPEN_SOURCE n\" para alg\u00fan entero n mayor o igual a 500.\n\nV\u00c9ASE TAMBI\u00c9N\n       getpgid(2), setsid(2)\n\nLinux 2.5.0                                     17 diciembre 2001                                      GETSID(2)\n"},{"NOMBRE": "       getsockname - obtener nombre de conexi\u00f3n\n\n", "SINOPSIS": "       #include <sys/socket.h>\n\n       int getsockname(int  s , struct sockaddr * name , socklen_t * namelen )\n\n", "DESCRIPCION": "       Getsockname  devuelve  el  nombre  actual  para  la  conexi\u00f3n  indicada.  El  par\u00e1metro  namelen debe ser\n       inicializado para indicar la cantidad de espacio apuntado por name.  La  devoluci\u00f3n  contiene  el  tama\u00f1o\n       actual del nombre devuelto (en bytes).\n\nVALOR DEVUELTO\n       Si es correcto, devuelve un cero. Si hay error, devuelve -1, y se asigna a errno un valor apropiado.\n\n", "ERRORES": "       EBADF  El argumento s no es un descriptor v\u00e1lido.\n\n       ENOTSOCK\n              El argumento s es un fichero, no una conexi\u00f3n.\n\n       ENOBUFS\n              No hab\u00eda suficientes recursos disponibles en el sistema para llevar a cabo la operaic\u00f3n.\n\n       EFAULT El  parametro  name  apunta  a  una  memoria  que no est\u00e1 dentro de una zona v\u00e1lida del espacio de\n              direcciones del proceso.\n\nCONFORME A\n       SVr4, 4.4BSD (la  funcion  getsockname  apareci\u00f3  en  4.2BSD).   SVr4  documenta  dos  c\u00f3digos  de  error\n       adicionales, ENOMEM y ENOSR.\n\n", "NOTA": "       El  tercer  argumento  de  getsockname es en realidad un entero (y esto es lo que tienen BSD 4.*, libc4 y\n       libc5).  Cierta confusi\u00f3n en POSIX dio como resultado el actual socklen_t.  El est\u00e1ndar propuesto todav\u00eda\n       no ha sido adoptado pero glibc2 ya lo sigue y tambi\u00e9n tiene socklen_t. Vea tambi\u00e9n accept(2).\n\nV\u00c9ASE TAMBI\u00c9N\n       bind(2), socket(2)\n\nP\u00e1gina de Manual BSD                              24 julio 1993                                   GETSOCKNAME(2)\n"},{"NOMBRE": "       getsockopt, setsockopt - obtiene y pone opciones en conectores (sockets)\n\n", "SINOPSIS": "       #include <sys/types.h>\n       #include <sys/socket.h>\n\n       int getsockopt(int s, int nivel, int nomopc, void *valopc, socklen_t *lonopc);\n\n       int setsockopt(int s, int nivel, int nomopc, const void *valopc, socklen_t lonopc);\n\n", "DESCRIPCION": "       Getsockopt y setsockopt manipulan las opciones asociadas a un conector. \u00c9stas pueden existir en m\u00faltiples\n       niveles de protocolo; siempre est\u00e1n presentes en el nivel m\u00e1s alto de conector.\n\n       Al manipular opciones de conector, deben especificarse el nivel en el que reside la opci\u00f3n, y su nombre.\n\n       Para manipular opciones en el nivel de conector, nivel se especifica  como  SOL_SOCKET.   Para  manipular\n       opciones  a  cualquier  otro  nivel,  se  suministra el n\u00famero de protocolo del apropiado que controle la\n       opci\u00f3n. Por ejemplo, para indicar que una opci\u00f3n ha de ser interpretada por el protocolo TCP, nivel  debe\n       ponerse como el n\u00famero de protocolo de TCP; vea getprotoent(3).\n\n       Los  par\u00e1metros  valopc  y  lonopc  se  emplean  para  acceder a valores de opciones de setsockopt.  Para\n       getsockopt identifican a un b\u00fafer en el que se pondr\u00e1 el valor para la opci\u00f3n pedida (u  opciones).  Para\n       getsockopt,  lonopc  es  un  par\u00e1metro  por  referencia,  que  contiene  inicialmente el tama\u00f1o del b\u00fafer\n       apuntado por optval, y que se modifica al acabar la funci\u00f3n  para  contener  el  tama\u00f1o  real  del  valor\n       devuelto. Si no se va a suministrar o devolver un valor de opci\u00f3n, valopc puede ser NULL.\n\n       Nomopc  y  cualesquiera  opciones especificadas se pasan sin interpretar al m\u00f3dulo de protocolo apropiado\n       para su interpretaci\u00f3n. El fichero de cabecera <sys/socket.h>  contiene  definiciones  para  opciones  de\n       nivel  de  conector,  descritas  m\u00e1s abajo. Las opciones a otros niveles de protocolo var\u00edan en formato y\n       nombre; consulte las p\u00e1ginas apropiadas de la secci\u00f3n 4 del Manual.\n\n       La mayor\u00eda de las opciones de nivel-conector utilizan un par\u00e1metro int para valopc.  Para setsockopt,  el\n       par\u00e1metro  debe  ser  distinto  de  cero  para permitir una opci\u00f3n booleana, o cero si la opci\u00f3n va a ser\n       deshabilitada.\n\n       Para una descripci\u00f3n de las opciones disponibles para conectores vea socket(7) y las  p\u00e1ginas  de  manual\n       del protocolo apropiado.\n\nVALOR DEVUELTO\n       Se devuelve cero en caso de \u00e9xito. En caso de error se devuelve -1 y errno toma un valor apropiado.\n\n", "ERRORES": "       EBADF  El argumento s no es un descriptor v\u00e1lido.\n\n       ENOTSOCK\n              El argumento s es un fichero, no un conector.\n\n       ENOPROTOOPT\n              La opci\u00f3n es desconocida al nivel indicado.\n\n       EFAULT La  direcci\u00f3n  apuntada  por  valopc  no  est\u00e1  en  un sitio v\u00e1lido del espacio de direcciones del\n              proceso. Para getsockopt, este error puede tambi\u00e9n ser devuelto si lonopc  no  est\u00e1  en  un  sitio\n              v\u00e1lido del espacio de direcciones del proceso.\n\nCONFORME A\n       SVr4,  4.4BSD  (estas  primitivas  aparecieron por primera vez en 4.2BSD).  SVr4 documenta los c\u00f3digos de\n       error adicionales ENOMEM y ENOSR, pero no documenta las opciones SO_SNDLOWAT, SO_RCVLOWAT, SO_SNDTIMEO ni\n       SO_RCVTIMEO\n\n", "NOTA": "       El  quinto argumento de getsockopt y setsockopt es en realidad un entero [*] (y esto es lo que tienen BSD\n       4.*, libc4 y libc5).  Cierta confusi\u00f3n en POSIX dio como resultado  el  actual  socklen_t.   El  est\u00e1ndar\n       propuesto  todav\u00eda no ha sido adoptado pero glibc2 ya lo sigue y tambi\u00e9n tiene socklen_t [*]. Vea tambi\u00e9n\n       accept(2).\n\n", "FALLOS": "       Algunas de las opciones de conector deber\u00edan ser manejadas a niveles m\u00e1s bajos del sistema.\n\nV\u00c9ASE TAMBI\u00c9N\n       ioctl(2), socket(2), getprotoent(3), protocols(5), socket(7), unix(7), tcp(7)\n\nP\u00e1gina man de Linux                               24 mayo 1999                                     GETSOCKOPT(2)\n"},{"NOMBRE": "       gettid - obtiene el identificador de hilo\n\n", "SINOPSIS": "       #include <sys/types.h>\n       #include <linux/unistd.h>\n\n       _syscall0(pid_t,gettid)\n\n       pid_t gettid(void);\n\n", "DESCRIPCION": "       gettid  devuelve  el  identificador de hilo del proceso actual. \u00c9ste es igual al identificador de proceso\n       (dado por getpid(2)), salvo cuando el proceso forma parte de un grupo de hilos (creado  especificando  la\n       opci\u00f3n  CLONE_THREAD  en  la llamada al sistema clone(2) ). Todos los procesos en el mismo grupo de hilos\n       tienen el mismo identificador de proceso, pero cada uno tiene un \u00fanico identificador de hilo.\n\nCONFORME A\n       gettid es espec\u00edfica de Linux y no  deber\u00eda  ser  utilizada  en  programas  que  se  pretenden  que  sean\n       portables.\n\nV\u00c9ASE TAMBI\u00c9N\n       getpid(2), clone(2), fork(2)\n\nLinux 2.4.20                                     1 febrero 2003                                        GETTID(2)\n"},{"NOMBRE": "       gettimeofday, settimeofday - pone u obtiene la hora\n\n", "SINOPSIS": "       #include <sys/time.h>\n\n       int gettimeofday(struct timeval *tv, struct timezone *tz);\n       int settimeofday(const struct timeval *tv , const struct timezone *tz);\n\n", "DESCRIPCION": "       Las funciones gettimeofday y settimeofday pueden obtener y poner tanto la hora como una zona horaria.  El\n       argumento tv es una estructura timeval, tal como se especifica en /usr/include/sys/time.h:\n\n       struct timeval {\n               long    tv_sec;         /* segundos */\n               long    tv_usec;        /* microsegundos */\n       };\n\n       y da el n\u00famer de segundos y microsegundos desde la  \u00c9poca  (v\u00e9ase  time(2)).   El  argumento  tz  es  una\n       estructura timezone :\n\n       struct timezone {\n               int   tz_minuteswest; /* minutos al O de Greenwich */\n               int   tz_dsttime;     /* tipo de correci\u00f3n horaria invierno/verano */\n       };\n\n       El  uso  de la estructura timezone es obsoleto; el campo tz_dsttime nunca ha sido utilizado en Linux - no\n       lo ha sido y nunca ser\u00e1 soportado por libc o glibc. Todas y cada una de las ocurrencias de este campo  en\n       el  fuente del n\u00facleo (distintas de la declaraci\u00f3n) son un fallo. Por tanto, lo siguiente es puramente de\n       inter\u00e9s hist\u00f3rico.\n\n       El campo tz_dsttime contiene una constante simb\u00f3lica (los valores se dan m\u00e1s abajo)  que  indica  en  qu\u00e9\n       parte  del  a\u00f1o  la `correci\u00f3n horaria invierno/verano' (Daylight Saving Time, DST, tambi\u00e9n conocida como\n       `horario de ahorro energ\u00e9tico') est\u00e1 en vigor.  (Nota: su valor es constante a lo  largo  del  a\u00f1o  -  no\n       indica  si  DST  est\u00e1 o no en vigor, s\u00f3lo selecciona un algoritmo).  Los algoritmos de correcci\u00f3n horaria\n       invierno/verano se definen como sigue:\n\n        DST_NONE       /* no hay */\n        DST_USA        /* estilo EE.UU. */\n        DST_AUST       /* estilo australiano */\n        DST_WET        /* como en Europa Occidental */\n        DST_MET        /* como en Europa Central */\n        DST_EET        /* como en Europa del Este */\n        DST_CAN        /* Canad\u00e1 */\n        DST_GB         /* Gran Breta\u00f1a e Irlanda */\n        DST_RUM        /* Ruman\u00eda */\n        DST_TUR        /* Turqu\u00eda */\n        DST_AUSTALT    /* est. australiano con cambio en 1986 */\n\n       Naturalmente, result\u00f3 ser que el periodo en el que la correcci\u00f3n horaria invierno/verano est\u00e1 en vigor no\n       se  pod\u00eda  dar  mediante  un  simple  algoritmo,  uno  por  pa\u00eds: de hecho, este periodo se determina por\n       decisiones pol\u00edticas impredecibles. Por tanto, este m\u00e9todo de representaci\u00f3n de las zonas horarias se  ha\n       abandonado. Bajo Linux, en una llamada a settimeofday el campo tz_dsttime debe ser cero.\n\n       Bajo  Linux  hay  algunas  sem\u00e1nticas  de  `Warp  clock'  peculariares  asociadas a la llamada al sistema\n       settimeofday si en la primera llamada de todas (despu\u00e9s del arranque) que tenga un argumento tz no  NULL,\n       el  argumento  tv  es  NULL y el campo tz_minuteswest es no cero. En tal caso, se asume que el reloj CMOS\n       est\u00e1 en el horario local y que tiene que ser incrementado en esta cantidad para obtener  el  horario  del\n       sistema UTC. No cabe duda que usar esta caracter\u00edstica es una mala idea.\n\n       Para operar sobre la estructura timeval se definen las siguientes macros:\n       #define timerisset(tvp)\\\n               ((tvp)->tv_sec || (tvp)->tv_usec)\n       #define timercmp(tvp, uvp, cmp)\\\n               ((tvp)->tv_sec cmp (uvp)->tv_sec ||\\\n               (tvp)->tv_sec == (uvp)->tv_sec &&\\\n               (tvp)->tv_usec cmp (uvp)->tv_usec)\n       #define timerclear(tvp)\\\n               ((tvp)->tv_sec = (tvp)->tv_usec = 0)\n\n       Si tv o tz es nulo, la estructura correspondiente no se ajusta ni se devuelve.\n\n       Solamente el super-usuario puede emplear settimeofday.\n\nVALOR DEVUELTO\n       gettimeofday y settimeofday devuelven 0 en caso de \u00e9xito \u00f3 -1 si ocurre un fallo (en cuyo caso errno toma\n       un valor apropiado).\n\n", "ERRORES": "       EPERM  Alguien que no es el super-usuario ha llamado a settimeofday\n\n       EINVAL La zona horaria (o algo m\u00e1s) es inv\u00e1lida.\n\n       EFAULT Uno de tv o tz apuntaba afuera de su espacio de direcciones accesible.\n\nCONFORME A\n       SVr4, BSD 4.3\n\nV\u00c9ASE TAMBI\u00c9N\n       date(1), adjtimex(2), time(2), ctime(3), ftime(3)\n\nLinux 2.0.32                                    10 diciembre 1997                                GETTIMEOFDAY(2)\n"},{"NOMBRE": "       getuid, geteuid - devuelve la identidad del usuario\n\n", "SINOPSIS": "       #include <unistd.h>\n       #include <sys/types.h>\n\n       uid_t getuid(void);\n       uid_t geteuid(void);\n\n", "DESCRIPCION": "       getuid devuelve el identificador de usuario real del proceso actual.\n\n       geteuid devuelve el identificador de usuario efectivo del proceso actual.\n\n       El  identificador  real  corresponde  con  el  del  proceso  invocador. El efectivo se corresponde con el\n       identificador de usuario (\"sticky bit\") del fichero que se est\u00e1 ejecutando.\n\n", "ERRORES": "       Estas funciones siempre funcionan.\n\nCONFORME A\n       POSIX, BSD 4.3.\n\nV\u00c9ASE TAMBI\u00c9N\n       setreuid(2), setuid(2)\n\nLinux 0.99.11                                     23 julio 1993                                        GETUID(2)\n"},{"NOMBRE": "       afs_syscall,  break,  ftime,  gtty,  lock,  mpx,  prof,  profil,  stty,  ulimit - Llamadas al sistema sin\n       implementar\n\n", "SINOPSIS": "       Llamadas al sistema sin implementar.\n\n", "DESCRIPCION": "       Estas llamadas al sistema no est\u00e1n implementadas en la versi\u00f3n 2.4 del n\u00facleo de Linux.\n\nVALOR DEVUELTO\n       Estas llamadas al sistema siempre devuelven -1 y asignan a la variable errno el valor ENOSYS.\n\n", "OBSERVACIONES": "       D\u00e9se cuenta que ftime(3), profil(3) y ulimit(3) se implementan como funciones de biblioteca.\n\n       Algunas llamadas al sistema, como alloc_hugepages(2), free_hugepages(2),  ioperm(2),  iopl(2)  y  vm86(2)\n       s\u00f3lo existen en ciertas arquitecturas.\n\n       Algunas  llamadas  al sistema, como ipc(2) y {create,init,delete}_module(2) s\u00f3lo existen cuando el n\u00facleo\n       de Linux se construy\u00f3 con soporte para ellas.\n\nV\u00c9ASE TAMBI\u00c9N\n       obsolete(2)\n\nLinux 2.4                                         12 junio 1998                                 UNIMPLEMENTED(2)\n"},{"NOMBRE": "       idle - deja inactivo al proceso 0\n\n", "SINOPSIS": "       #include <unistd.h>\n\n       int idle(void);\n\n", "DESCRIPCION": "       idle  es  una llamada al sistema interna utilizada durante el arranque del sistema.  Marca las p\u00e1ginas de\n       memoria del proceso intercambiables y entra en el bucle principal del planificador.  idle nunca regresa.\n\n       S\u00f3lo el proceso 0 puede llamar a idle.  Cualquier  proceso  de  usuario,  incluso  uno  con  permisos  de\n       superusuario, recibir\u00e1 el valor EPERM.\n\nVALOR DEVUELTO\n       idle nunca regresa para el proceso 0, y siempre devuelve el valor -1 para un proceso de usuario.\n\n", "ERRORES": "       EPERM  Siempre, para un proceso de usuario.\n\nCONFORME A\n       Esta funci\u00f3n es especifica de Linux y no debe ser utilizada en programas que se espera sean portables.\n\n", "OBSERVACIONES": "       Desde 2.3.13 esta llamada al sistema ya no existe.\n\nLinux 1.1.46                                     21 agosto 1994                                          IDLE(2)\n"},{"NOMBRE": "       outb, outw, outl, outsb, outsw, outsl - salida por puerto\n       inb, inw, inl, insb, insw, insl - entrada desde puerto\n       outb_p, outw_p, outl_p, inb_p, inw_p, inl_p - E/S pausada\n\n", "DESCRIPCION": "       Esta  familia  de  funciones  se  emplea  para  hacer  entrada  y salida de bajo nivel por puertos. Est\u00e1n\n       dise\u00f1adas principalmente para uso interno del n\u00facleo, pero pueden ser  empleadas  desde  el  espacio  del\n       usuario.\n\n       Usted  ha  de  compilar  con  -O  o -O2 o similar. Las funciones est\u00e1n definidas como macros en l\u00ednea del\n       preprocesador, y no ser\u00e1n sustituidas sin la opci\u00f3n de optimizaci\u00f3n activada, provocando  referencias  no\n       resueltas en tiempo de enlazado.\n\n       Usted  ha  de  emplear  ioperm(2)  o  alternativamente  iopl(2)  para  decirle al n\u00facleo que permita a la\n       aplicaci\u00f3n en el espacio de usuario el acceso a los puertos de E/S  en  cuesti\u00f3n.  Si  no  hace  esto  la\n       aplicaci\u00f3n recibir\u00e1 un fallo de segmento.\n\nCONFORME A\n       outb  y  familia  son espec\u00edficas del hardware. Los argumentos puerto y valor est\u00e1n en orden opuesto a la\n       mayor\u00eda de implementaciones de DOS.\n\nV\u00c9ASE TAMBI\u00c9N\n       ioperm(2), iopl(2)\n\nLinux                                           29 Noviembre 1995                                        OUTB(2)\n"},{"NOMBRE": "       outb, outw, outl, outsb, outsw, outsl - salida por puerto\n       inb, inw, inl, insb, insw, insl - entrada desde puerto\n       outb_p, outw_p, outl_p, inb_p, inw_p, inl_p - E/S pausada\n\n", "DESCRIPCION": "       Esta  familia  de  funciones  se  emplea  para  hacer  entrada  y salida de bajo nivel por puertos. Est\u00e1n\n       dise\u00f1adas principalmente para uso interno del n\u00facleo, pero pueden ser  empleadas  desde  el  espacio  del\n       usuario.\n\n       Usted  ha  de  compilar  con  -O  o -O2 o similar. Las funciones est\u00e1n definidas como macros en l\u00ednea del\n       preprocesador, y no ser\u00e1n sustituidas sin la opci\u00f3n de optimizaci\u00f3n activada, provocando  referencias  no\n       resueltas en tiempo de enlazado.\n\n       Usted  ha  de  emplear  ioperm(2)  o  alternativamente  iopl(2)  para  decirle al n\u00facleo que permita a la\n       aplicaci\u00f3n en el espacio de usuario el acceso a los puertos de E/S  en  cuesti\u00f3n.  Si  no  hace  esto  la\n       aplicaci\u00f3n recibir\u00e1 un fallo de segmento.\n\nCONFORME A\n       outb  y  familia  son espec\u00edficas del hardware. Los argumentos puerto y valor est\u00e1n en orden opuesto a la\n       mayor\u00eda de implementaciones de DOS.\n\nV\u00c9ASE TAMBI\u00c9N\n       ioperm(2), iopl(2)\n\nLinux                                           29 Noviembre 1995                                        OUTB(2)\n"},{"NOMBRE": "       init_module - inicializa una entrada de m\u00f3dulo cargable\n\n", "SINOPSIS": "       #include <linux/module.h>\n\n       int init_module(const char *name, struct module *image);\n\n", "DESCRIPCION": "       init_module  carga  la  imagen del m\u00f3dulo relocalizado en el espacio del n\u00facleo y ejecuta la funci\u00f3n init\n       del m\u00f3dulo.\n\n       La imagen del m\u00f3dulo comienza con una estructura de m\u00f3dulo seguida por  c\u00f3digo  y  datos  apropiados.  La\n       estructura de m\u00f3dulo se define as\u00ed:\n\n              struct module\n              {\n                unsigned long size_of_struct;\n                struct module *next;\n                const char *name;\n                unsigned long size;\n                long usecount;\n                unsigned long flags;\n                unsigned int nsyms;\n                unsigned int ndeps;\n                struct module_symbol *syms;\n                struct module_ref *deps;\n                struct module_ref *refs;\n                int (*init)(void);\n                void (*cleanup)(void);\n                const struct exception_table_entry *ex_table_start;\n                const struct exception_table_entry *ex_table_end;\n              #ifdef __alpha__\n                unsigned long gp;\n              #endif\n              };\n\n       Se  espera  que  todos  los punteros, a excepci\u00f3n de next y refs, apunten dentro del cuerpo del m\u00f3dulo, y\n       est\u00e9n inicializados adecuadamente al espacio del n\u00facleo, p.ej. relocalizados con el resto del m\u00f3dulo.\n\n       Esta llamada de sistema s\u00f3lo esta abierta al superusuario.\n\nVALOR DEVUELTO\n       Si hay \u00e9xito, se devuelve cero. Si hay alg\u00fan error, se devuelve -1 y errno es actualizado.\n\n", "ERRORES": "       EPERM  El usuario no es el superusuario.\n\n       ENOENT No existe ning\u00fan m\u00f3dulo con ese nombre.\n\n       EINVAL Alguna entrada de image se llen\u00f3 incorrectamente, image->name no  se  corresponde  con  el  nombre\n              original  del  m\u00f3dulo,  alguna  entrada  de image->deps no se corresponde con un m\u00f3dulo cargado, o\n              alguna otra inconsistencia similar.\n\n       EBUSY  La rutina de inicializaci\u00f3n del m\u00f3dulo fall\u00f3.\n\n       EFAULT name o image est\u00e1 fuera del espacio de direcciones accesible al programa.\n\nV\u00c9ASE TAMBI\u00c9N\n       create_module(2), delete_module(2), query_module(2).\n\nLinux 2.1.17                                       26 Dic 1996                                    INIT_MODULE(2)\n"},{"NOMBRE": "       outb, outw, outl, outsb, outsw, outsl - salida por puerto\n       inb, inw, inl, insb, insw, insl - entrada desde puerto\n       outb_p, outw_p, outl_p, inb_p, inw_p, inl_p - E/S pausada\n\n", "DESCRIPCION": "       Esta  familia  de  funciones  se  emplea  para  hacer  entrada  y salida de bajo nivel por puertos. Est\u00e1n\n       dise\u00f1adas principalmente para uso interno del n\u00facleo, pero pueden ser  empleadas  desde  el  espacio  del\n       usuario.\n\n       Usted  ha  de  compilar  con  -O  o -O2 o similar. Las funciones est\u00e1n definidas como macros en l\u00ednea del\n       preprocesador, y no ser\u00e1n sustituidas sin la opci\u00f3n de optimizaci\u00f3n activada, provocando  referencias  no\n       resueltas en tiempo de enlazado.\n\n       Usted  ha  de  emplear  ioperm(2)  o  alternativamente  iopl(2)  para  decirle al n\u00facleo que permita a la\n       aplicaci\u00f3n en el espacio de usuario el acceso a los puertos de E/S  en  cuesti\u00f3n.  Si  no  hace  esto  la\n       aplicaci\u00f3n recibir\u00e1 un fallo de segmento.\n\nCONFORME A\n       outb  y  familia  son espec\u00edficas del hardware. Los argumentos puerto y valor est\u00e1n en orden opuesto a la\n       mayor\u00eda de implementaciones de DOS.\n\nV\u00c9ASE TAMBI\u00c9N\n       ioperm(2), iopl(2)\n\nLinux                                           29 Noviembre 1995                                        OUTB(2)\n"},{"NOMBRE": "       outb, outw, outl, outsb, outsw, outsl - salida por puerto\n       inb, inw, inl, insb, insw, insl - entrada desde puerto\n       outb_p, outw_p, outl_p, inb_p, inw_p, inl_p - E/S pausada\n\n", "DESCRIPCION": "       Esta  familia  de  funciones  se  emplea  para  hacer  entrada  y salida de bajo nivel por puertos. Est\u00e1n\n       dise\u00f1adas principalmente para uso interno del n\u00facleo, pero pueden ser  empleadas  desde  el  espacio  del\n       usuario.\n\n       Usted  ha  de  compilar  con  -O  o -O2 o similar. Las funciones est\u00e1n definidas como macros en l\u00ednea del\n       preprocesador, y no ser\u00e1n sustituidas sin la opci\u00f3n de optimizaci\u00f3n activada, provocando  referencias  no\n       resueltas en tiempo de enlazado.\n\n       Usted  ha  de  emplear  ioperm(2)  o  alternativamente  iopl(2)  para  decirle al n\u00facleo que permita a la\n       aplicaci\u00f3n en el espacio de usuario el acceso a los puertos de E/S  en  cuesti\u00f3n.  Si  no  hace  esto  la\n       aplicaci\u00f3n recibir\u00e1 un fallo de segmento.\n\nCONFORME A\n       outb  y  familia  son espec\u00edficas del hardware. Los argumentos puerto y valor est\u00e1n en orden opuesto a la\n       mayor\u00eda de implementaciones de DOS.\n\nV\u00c9ASE TAMBI\u00c9N\n       ioperm(2), iopl(2)\n\nLinux                                           29 Noviembre 1995                                        OUTB(2)\n"},{"NOMBRE": "       outb, outw, outl, outsb, outsw, outsl - salida por puerto\n       inb, inw, inl, insb, insw, insl - entrada desde puerto\n       outb_p, outw_p, outl_p, inb_p, inw_p, inl_p - E/S pausada\n\n", "DESCRIPCION": "       Esta  familia  de  funciones  se  emplea  para  hacer  entrada  y salida de bajo nivel por puertos. Est\u00e1n\n       dise\u00f1adas principalmente para uso interno del n\u00facleo, pero pueden ser  empleadas  desde  el  espacio  del\n       usuario.\n\n       Usted  ha  de  compilar  con  -O  o -O2 o similar. Las funciones est\u00e1n definidas como macros en l\u00ednea del\n       preprocesador, y no ser\u00e1n sustituidas sin la opci\u00f3n de optimizaci\u00f3n activada, provocando  referencias  no\n       resueltas en tiempo de enlazado.\n\n       Usted  ha  de  emplear  ioperm(2)  o  alternativamente  iopl(2)  para  decirle al n\u00facleo que permita a la\n       aplicaci\u00f3n en el espacio de usuario el acceso a los puertos de E/S  en  cuesti\u00f3n.  Si  no  hace  esto  la\n       aplicaci\u00f3n recibir\u00e1 un fallo de segmento.\n\nCONFORME A\n       outb  y  familia  son espec\u00edficas del hardware. Los argumentos puerto y valor est\u00e1n en orden opuesto a la\n       mayor\u00eda de implementaciones de DOS.\n\nV\u00c9ASE TAMBI\u00c9N\n       ioperm(2), iopl(2)\n\nLinux                                           29 Noviembre 1995                                        OUTB(2)\n"},{"NOMBRE": "       outb, outw, outl, outsb, outsw, outsl - salida por puerto\n       inb, inw, inl, insb, insw, insl - entrada desde puerto\n       outb_p, outw_p, outl_p, inb_p, inw_p, inl_p - E/S pausada\n\n", "DESCRIPCION": "       Esta  familia  de  funciones  se  emplea  para  hacer  entrada  y salida de bajo nivel por puertos. Est\u00e1n\n       dise\u00f1adas principalmente para uso interno del n\u00facleo, pero pueden ser  empleadas  desde  el  espacio  del\n       usuario.\n\n       Usted  ha  de  compilar  con  -O  o -O2 o similar. Las funciones est\u00e1n definidas como macros en l\u00ednea del\n       preprocesador, y no ser\u00e1n sustituidas sin la opci\u00f3n de optimizaci\u00f3n activada, provocando  referencias  no\n       resueltas en tiempo de enlazado.\n\n       Usted  ha  de  emplear  ioperm(2)  o  alternativamente  iopl(2)  para  decirle al n\u00facleo que permita a la\n       aplicaci\u00f3n en el espacio de usuario el acceso a los puertos de E/S  en  cuesti\u00f3n.  Si  no  hace  esto  la\n       aplicaci\u00f3n recibir\u00e1 un fallo de segmento.\n\nCONFORME A\n       outb  y  familia  son espec\u00edficas del hardware. Los argumentos puerto y valor est\u00e1n en orden opuesto a la\n       mayor\u00eda de implementaciones de DOS.\n\nV\u00c9ASE TAMBI\u00c9N\n       ioperm(2), iopl(2)\n\nLinux                                           29 Noviembre 1995                                        OUTB(2)\n"},{"NOMBRE": "       outb, outw, outl, outsb, outsw, outsl - salida por puerto\n       inb, inw, inl, insb, insw, insl - entrada desde puerto\n       outb_p, outw_p, outl_p, inb_p, inw_p, inl_p - E/S pausada\n\n", "DESCRIPCION": "       Esta  familia  de  funciones  se  emplea  para  hacer  entrada  y salida de bajo nivel por puertos. Est\u00e1n\n       dise\u00f1adas principalmente para uso interno del n\u00facleo, pero pueden ser  empleadas  desde  el  espacio  del\n       usuario.\n\n       Usted  ha  de  compilar  con  -O  o -O2 o similar. Las funciones est\u00e1n definidas como macros en l\u00ednea del\n       preprocesador, y no ser\u00e1n sustituidas sin la opci\u00f3n de optimizaci\u00f3n activada, provocando  referencias  no\n       resueltas en tiempo de enlazado.\n\n       Usted  ha  de  emplear  ioperm(2)  o  alternativamente  iopl(2)  para  decirle al n\u00facleo que permita a la\n       aplicaci\u00f3n en el espacio de usuario el acceso a los puertos de E/S  en  cuesti\u00f3n.  Si  no  hace  esto  la\n       aplicaci\u00f3n recibir\u00e1 un fallo de segmento.\n\nCONFORME A\n       outb  y  familia  son espec\u00edficas del hardware. Los argumentos puerto y valor est\u00e1n en orden opuesto a la\n       mayor\u00eda de implementaciones de DOS.\n\nV\u00c9ASE TAMBI\u00c9N\n       ioperm(2), iopl(2)\n\nLinux                                           29 Noviembre 1995                                        OUTB(2)\n"},{"NOMBRE": "       intro - Introducci\u00f3n a \u00f3rdenes de usuario\n\n", "DESCRIPCION": "       Este cap\u00edtulo describe \u00f3rdenes de usuario.\n\n", "AUTOR": "       Busque  en  la cabecera de cada p\u00e1gina del Manual el autor o autores y las condiciones sobre los derechos\n       de copia. \u00a1Observe que \u00e9stos pueden ser diferentes de una p\u00e1gina a otra!\n\nLinux                                          24 de Julio de 1993                                      INTRO(1)\n"},{"NOMBRE": "       outb, outw, outl, outsb, outsw, outsl - salida por puerto\n       inb, inw, inl, insb, insw, insl - entrada desde puerto\n       outb_p, outw_p, outl_p, inb_p, inw_p, inl_p - E/S pausada\n\n", "DESCRIPCION": "       Esta  familia  de  funciones  se  emplea  para  hacer  entrada  y salida de bajo nivel por puertos. Est\u00e1n\n       dise\u00f1adas principalmente para uso interno del n\u00facleo, pero pueden ser  empleadas  desde  el  espacio  del\n       usuario.\n\n       Usted  ha  de  compilar  con  -O  o -O2 o similar. Las funciones est\u00e1n definidas como macros en l\u00ednea del\n       preprocesador, y no ser\u00e1n sustituidas sin la opci\u00f3n de optimizaci\u00f3n activada, provocando  referencias  no\n       resueltas en tiempo de enlazado.\n\n       Usted  ha  de  emplear  ioperm(2)  o  alternativamente  iopl(2)  para  decirle al n\u00facleo que permita a la\n       aplicaci\u00f3n en el espacio de usuario el acceso a los puertos de E/S  en  cuesti\u00f3n.  Si  no  hace  esto  la\n       aplicaci\u00f3n recibir\u00e1 un fallo de segmento.\n\nCONFORME A\n       outb  y  familia  son espec\u00edficas del hardware. Los argumentos puerto y valor est\u00e1n en orden opuesto a la\n       mayor\u00eda de implementaciones de DOS.\n\nV\u00c9ASE TAMBI\u00c9N\n       ioperm(2), iopl(2)\n\nLinux                                           29 Noviembre 1995                                        OUTB(2)\n"},{"NOMBRE": "       outb, outw, outl, outsb, outsw, outsl - salida por puerto\n       inb, inw, inl, insb, insw, insl - entrada desde puerto\n       outb_p, outw_p, outl_p, inb_p, inw_p, inl_p - E/S pausada\n\n", "DESCRIPCION": "       Esta  familia  de  funciones  se  emplea  para  hacer  entrada  y salida de bajo nivel por puertos. Est\u00e1n\n       dise\u00f1adas principalmente para uso interno del n\u00facleo, pero pueden ser  empleadas  desde  el  espacio  del\n       usuario.\n\n       Usted  ha  de  compilar  con  -O  o -O2 o similar. Las funciones est\u00e1n definidas como macros en l\u00ednea del\n       preprocesador, y no ser\u00e1n sustituidas sin la opci\u00f3n de optimizaci\u00f3n activada, provocando  referencias  no\n       resueltas en tiempo de enlazado.\n\n       Usted  ha  de  emplear  ioperm(2)  o  alternativamente  iopl(2)  para  decirle al n\u00facleo que permita a la\n       aplicaci\u00f3n en el espacio de usuario el acceso a los puertos de E/S  en  cuesti\u00f3n.  Si  no  hace  esto  la\n       aplicaci\u00f3n recibir\u00e1 un fallo de segmento.\n\nCONFORME A\n       outb  y  familia  son espec\u00edficas del hardware. Los argumentos puerto y valor est\u00e1n en orden opuesto a la\n       mayor\u00eda de implementaciones de DOS.\n\nV\u00c9ASE TAMBI\u00c9N\n       ioperm(2), iopl(2)\n\nLinux                                           29 Noviembre 1995                                        OUTB(2)\n"},{"NOMBRE": "       ioctl - controlar dispositivo\n\n", "SINOPSIS": "       #include <sys/ioctl.h>\n\n       int ioctl(int d, int request, ...);\n\n", "DESCRIPCION": "       La  funci\u00f3n  ioctl  manipula  los  par\u00e1metros  subyacentes  de ficheros especiales. En particular, muchas\n       caracter\u00edsticas operacionales de los ficheros  especiales  de  caracteres  (verbigracia  las  terminales)\n       pueden controlarse con llamadas a ioctl.  El argumento d debe ser un descriptor de fichero abierto.\n\n       El  segundo  argumento  es un c\u00f3digo de solicitud que depende del dispositivo.  El tercer argumento es un\n       puntero a memoria sin tipo. Es tradicionalmente char *argp (desde  los  d\u00edas  antes  de  que  void  *  se\n       considerara c\u00f3digo C v\u00e1lido), y as\u00ed se le llamar\u00e1 en este documento.\n\n       Una  peticion  de  ioctl  tiene  codificada  en  s\u00ed misma si el argumento es un par\u00e1metro de entrada o de\n       salida, y el tama\u00f1o del argumento argp en bytes.  En el fichero  de  cabecera  <sys/ioctl.h>  se  definen\n       macros empleadas al especificar una peticion de ioctl.\n\nVALOR DEVUELTO\n       Normalmente,  se  devuelve  cero  en  caso  de \u00e9xito.  Unos pocos ioctls usan el valor de retorno como un\n       par\u00e1metro de salida y devuelven un valor no negativo en caso de \u00e9xito.  En caso de error, se devuelve -1,\n       y se pone en errno un valor apropiado.\n\n", "ERRORES": "       EBADF  d no es un descriptor v\u00e1lido.\n\n       EFAULT argp referencia a una zona de memoria inaccesible.\n\n       ENOTTY d no est\u00e1 asociado con un dispositivo especial de caracteres.\n\n       ENOTTY La petici\u00f3n especificada no se aplica a la clase de objeto que referencia el descriptor d.\n\n       EINVAL Peticion o argp no es v\u00e1lido.\n\nCONFORME A\n       Ning\u00fan  est\u00e1ndar en particular. Los argumentos, valores devueltos y sem\u00e1ntica de ioctl(2) var\u00edan seg\u00fan el\n       controlador de dispositivo en cuesti\u00f3n (la llamada se usa como un recogedor para las operaciones  que  no\n       encajen  claramente en el modelo de flujos de E/S de Unix). Vea ioctl_list(2) para una lista de muchas de\n       las llamadas conocidas a ioctl.  La funci\u00f3n ioctl apareci\u00f3 por primera vez en Unix de AT&T Versi\u00f3n 7.\n\nV\u00c9ASE TAMBI\u00c9N\n       execve(2), fcntl(2), ioctl_list(2), mt(4), sd(4), tty(4)\n\nBSD                                            21 Septiembre 2000                                       IOCTL(2)\n"},{"NOMBRE": "       ioctl_list - lista de llamadas ioctl del n\u00facleo Linux/i386\n\n", "INTRODUCCION": "       Esto  es  Ioctl List 1.3.27, una lista de llamadas a ioctl para el n\u00facleo de Linux/i386 1.3.27.  Contiene\n       421 ioctl's de /usr/include/{asm,linux}/*.h.  Para cada ioctl, listo su valor num\u00e9rico, su  nombre  y  el\n       tipo de su argumento.\n\n       Un  tipo  de  argumento  de  la  forma  'const struct fu *' significa que el argumento es entrada para el\n       n\u00facleo. 'struct fu' significa que del n\u00facleo se extrae el argumento. Si el  n\u00facleo  emplea  el  argumento\n       para entrada y salida, esto se marca con // E-S.\n\n       Algunas  ioctl's  toman m\u00e1s argumentos o devuelven m\u00e1s valores que una simple estructura. \u00c9stas se marcan\n       con // M\u00c1S y se documentan m\u00e1s adelante en una secci\u00f3n separada.\n\n       Esta lista est\u00e1 incompleta. No incluye:\n\n           -- Ioctl's definidas internamente en el n\u00facleo ('scsi_ioctl.h').\n           -- Ioctl's definidas en m\u00f3dulos distribuidos separadamente del n\u00facleo.\n\n       Y, por supuesto, puedo haber cometido errores y omisiones.\n\n       Por favor mande por electrocorreo cambios y comentarios a\n       <mec@duracef.shout.net>. Estoy interesado particularmente en m\u00f3dulos\n       cargables que definan sus propias ioctl's. Si Ud. conoce un tal\n       m\u00f3dulo, d\u00edgame de d\u00f3nde puedo obtenerlo por FTP, e incluir\u00e9 sus\n       ioctl's en mi pr\u00f3xima distribuci\u00f3n.\n\n       // Tabla principal.\n\n       // <include/asm-i386/socket.h>\n       0x00008901  FIOSETOWN              const int *\n       0x00008902  SIOCSPGRP              const int *\n       0x00008903  FIOGETOWN              int *\n       0x00008904  SIOCGPGRP              int *\n       0x00008905  SIOCATMARK             int *\n       0x00008906  SIOCGSTAMP             timeval *\n\n       // <include/asm-i386/termios.h>\n       0x00005401  TCGETS            struct termios *\n       0x00005402  TCSETS            const struct termios *\n       0x00005403  TCSETSW           const struct termios *\n       0x00005404  TCSETSF           const struct termios *\n       0x00005405  TCGETA            struct termio *\n       0x00005406  TCSETA            const struct termio *\n       0x00005407  TCSETAW           const struct termio *\n       0x00005408  TCSETAF           const struct termio *\n       0x00005409  TCSBRK            int\n       0x0000540A  TCXONC            int\n       0x0000540B  TCFLSH            int\n       0x0000540C  TIOCEXCL               void\n       0x0000540D  TIOCNXCL               void\n       0x0000540E  TIOCSCTTY              int\n       0x0000540F  TIOCGPGRP              pid_t *\n       0x00005410  TIOCSPGRP              const pid_t *\n       0x00005411  TIOCOUTQ               int *\n       0x00005412  TIOCSTI           const char *\n       0x00005413  TIOCGWINSZ             struct winsize *\n       0x00005414  TIOCSWINSZ             const struct winsize *\n       0x00005415  TIOCMGET               int *\n       0x00005416  TIOCMBIS               const int *\n       0x00005417  TIOCMBIC               const int *\n       0x00005418  TIOCMSET               const int *\n       0x00005419  TIOCGSOFTCAR      int *\n       0x0000541A  TIOCSSOFTCAR      const int *\n       0x0000541B  FIONREAD               int *\n       0x0000541B  TIOCINQ           int *\n       0x0000541C  TIOCLINUX              const char *             // MORE\n       0x0000541D  TIOCCONS               void\n       0x0000541E  TIOCGSERIAL            struct serial_struct *\n       0x0000541F  TIOCSSERIAL            const struct serial_struct *\n       0x00005420  TIOCPKT           const int *\n       0x00005421  FIONBIO           const int *\n       0x00005422  TIOCNOTTY              void\n       0x00005423  TIOCSETD               const int *\n       0x00005424  TIOCGETD               int *\n       0x00005425  TCSBRKP           int\n       0x00005426  TIOCTTYGSTRUCT         struct tty_struct *\n       0x00005450  FIONCLEX               void\n       0x00005451  FIOCLEX           void\n       0x00005452  FIOASYNC               const int *\n       0x00005453  TIOCSERCONFIG          void\n       0x00005454  TIOCSERGWILD      int *\n       0x00005455  TIOCSERSWILD      const int *\n       0x00005456  TIOCGLCKTRMIOS         struct termios *\n       0x00005457  TIOCSLCKTRMIOS         const struct termios *\n       0x00005458  TIOCSERGSTRUCT         struct async_struct *\n       0x00005459  TIOCSERGETLSR          int *\n       0x0000545A  TIOCSERGETMULTI        struct serial_multiport_struct *\n       0x0000545B  TIOCSERSETMULTI        const struct serial_multiport_struct *\n\n       // <include/linux/ax25.h>\n       0x000089E0  SIOCAX25GETUID         const struct sockaddr_ax25 *\n       0x000089E1  SIOCAX25ADDUID         const struct sockaddr_ax25 *\n       0x000089E2  SIOCAX25DELUID         const struct sockaddr_ax25 *\n       0x000089E3  SIOCAX25NOUID          const int *\n       0x000089E4  SIOCAX25DIGCTL         const int *\n       0x000089E5  SIOCAX25GETPARMS       struct ax25_parms_struct *    // I-O\n       0x000089E6  SIOCAX25SETPARMS       const struct ax25_parms-struct *\n\n       // <include/linux/cdk.h>\n       0x00007314  STL_BINTR              void\n       0x00007315  STL_BSTART             void\n       0x00007316  STL_BSTOP              void\n       0x00007317  STL_BRESET             void\n\n       // <include/linux/cdrom.h>\n       0x00005301  CDROMPAUSE             void\n       0x00005302  CDROMRESUME            void\n       0x00005303  CDROMPLAYMSF      const struct cdrom_msf *\n       0x00005304  CDROMPLAYTRKIND        const struct cdrom_ti *\n       0x00005305  CDROMREADTOCHDR        struct cdrom_tochdr *\n       0x00005306  CDROMREADTOCENTRY      struct cdrom_tocentry *       // I-O\n       0x00005307  CDROMSTOP              void\n       0x00005308  CDROMSTART             void\n       0x00005309  CDROMEJECT             void\n       0x0000530A  CDROMVOLCTRL      const struct cdrom_volctrl *\n       0x0000530B  CDROMSUBCHNL      struct cdrom_subchnl *        // I-O\n       0x0000530C  CDROMREADMODE2         const struct cdrom_msf * // MORE\n       0x0000530D  CDROMREADMODE1         const struct cdrom_msf * // MORE\n       0x0000530E  CDROMREADAUDIO         const struct cdrom_read_audio *    // MORE\n       0x0000530F  CDROMEJECT_SW          int\n       0x00005310  CDROMMULTISESSION      struct cdrom_multisession *   // I-O\n       0x00005311  CDROM_GET_UPC          struct { char [8]; } *\n       0x00005312  CDROMRESET             void\n       0x00005313  CDROMVOLREAD      struct cdrom_volctrl *\n       0x00005314  CDROMREADRAW      const struct cdrom_msf * // MORE\n       0x00005315  CDROMREADCOOKED        const struct cdrom_msf * // MORE\n       0x00005316  CDROMSEEK              const struct cdrom_msf *\n\n       // <include/linux/cm206.h>\n       0x00002000  CM206CTL_GET_STAT      int\n       0x00002001  CM206CTL_GET_LAST_STAT int\n\n       // <include/linux/cyclades.h>\n       0x00435901  CYGETMON               struct cyclades_monitor *\n       0x00435902  CYGETTHRESH            int *\n       0x00435903  CYSETTHRESH            int\n       0x00435904  CYGETDEFTHRESH         int *\n       0x00435905  CYSETDEFTHRESH         int\n       0x00435906  CYGETTIMEOUT      int *\n       0x00435907  CYSETTIMEOUT      int\n       0x00435908  CYGETDEFTIMEOUT        int *\n       0x00435909  CYSETDEFTIMEOUT        int\n\n       // <include/linux/ext2_fs.h>\n       0x80046601  EXT2_IOC_GETFLAGS      int *\n       0x40046602  EXT2_IOC_SETFLAGS      const int *\n       0x80047601  EXT2_IOC_GETVERSION         int *\n       0x40047602  EXT2_IOC_SETVERSION         const int *\n\n       // <include/linux/fd.h>\n       0x00000000  FDCLRPRM               void\n       0x00000001  FDSETPRM               const struct floppy_struct *\n       0x00000002  FDDEFPRM               const struct floppy_struct *\n       0x00000003  FDGETPRM               struct floppy_struct *\n       0x00000004  FDMSGON           void\n       0x00000005  FDMSGOFF               void\n       0x00000006  FDFMTBEG               void\n       0x00000007  FDFMTTRK               const struct format_descr *\n       0x00000008  FDFMTEND               void\n       0x0000000A  FDSETEMSGTRESH         int\n       0x0000000B  FDFLUSH           void\n       0x0000000C  FDSETMAXERRS      const struct floppy_max_errors *\n       0x0000000E  FDGETMAXERRS      struct floppy_max_errors *\n       0x00000010  FDGETDRVTYP            struct { char [16]; } *\n       0x00000014  FDSETDRVPRM            const struct floppy_drive_params *\n       0x00000015  FDGETDRVPRM            struct floppy_drive_params *\n       0x00000016  FDGETDRVSTAT      struct floppy_drive_struct *\n       0x00000017  FDPOLLDRVSTAT          struct floppy_drive_struct *\n       0x00000018  FDRESET           int\n       0x00000019  FDGETFDCSTAT      struct floppy_fdc_state *\n       0x0000001B  FDWERRORCLR            void\n       0x0000001C  FDWERRORGET            struct floppy_write_errors *\n       0x0000001E  FDRAWCMD               struct floppy_raw_cmd *  // MORE   // I-O\n       0x00000028  FDTWADDLE              void\n\n       // <include/linux/fs.h>\n       0x0000125D  BLKROSET               const int *\n       0x0000125E  BLKROGET               int *\n       0x0000125F  BLKRRPART              void\n       0x00001260  BLKGETSIZE             int *\n       0x00001261  BLKFLSBUF              void\n       0x00001262  BLKRASET               int\n       0x00001263  BLKRAGET               int *\n       0x00000001  FIBMAP            int *                    // I-O\n       0x00000002  FIGETBSZ               int *\n\n       // <include/linux/hdreg.h>\n       0x00000301  HDIO_GETGEO            struct hd_geometry *\n       0x00000302  HDIO_GET_UNMASKINTR         int *\n       0x00000304  HDIO_GET_MULTCOUNT          int *\n       0x00000307  HDIO_GET_IDENTITY      struct hd_driveid *\n       0x00000308  HDIO_GET_KEEPSETTINGS  int *\n       0x00000309  HDIO_GET_CHIPSET       int *\n       0x0000030A  HDIO_GET_NOWERR        int *\n       0x0000030B  HDIO_GET_DMA      int *\n       0x0000031F  HDIO_DRIVE_CMD         int *                    // I-O\n       0x00000321  HDIO_SET_MULTCOUNT          int\n       0x00000322  HDIO_SET_UNMASKINTR         int\n       0x00000323  HDIO_SET_KEEPSETTINGS  int\n       0x00000324  HDIO_SET_CHIPSET       int\n       0x00000325  HDIO_SET_NOWERR        int\n       0x00000326  HDIO_SET_DMA      int\n\n       // <include/linux/if_eql.h>\n       0x000089F0  EQL_ENSLAVE            struct ifreq *      // MORE // I-O\n       0x000089F1  EQL_EMANCIPATE         struct ifreq *      // MORE // I-O\n       0x000089F2  EQL_GETSLAVECFG        struct ifreq *      // MORE // I-O\n       0x000089F3  EQL_SETSLAVECFG        struct ifreq *      // MORE // I-O\n       0x000089F4  EQL_GETMASTRCFG        struct ifreq *      // MORE // I-O\n       0x000089F5  EQL_SETMASTRCFG        struct ifreq *      // MORE // I-O\n\n       // <include/linux/if_plip.h>\n       0x000089F0  SIOCDEVPLIP            struct ifreq *           // I-O\n\n       // <include/linux/if_ppp.h>\n       0x00005490  PPPIOCGFLAGS      int *\n       0x00005491  PPPIOCSFLAGS      const int *\n       0x00005492  PPPIOCGASYNCMAP        int *\n       0x00005493  PPPIOCSASYNCMAP        const int *\n       0x00005494  PPPIOCGUNIT            int *\n       0x00005495  PPPIOCSINPSIG          const int *\n       0x00005497  PPPIOCSDEBUG      const int *\n       0x00005498  PPPIOCGDEBUG      int *\n       0x00005499  PPPIOCGSTAT            struct ppp_stats *\n       0x0000549A  PPPIOCGTIME            struct ppp_ddinfo *\n       0x0000549B  PPPIOCGXASYNCMAP       struct { int [8]; } *\n       0x0000549C  PPPIOCSXASYNCMAP       const struct { int [8]; } *\n       0x0000549D  PPPIOCSMRU             const int *\n       0x0000549E  PPPIOCRASYNCMAP        const int *\n       0x0000549F  PPPIOCSMAXCID          const int *\n\n       // <include/linux/ipx.h>\n       0x000089E0  SIOCAIPXITFCRT         const char *\n       0x000089E1  SIOCAIPXPRISLT         const char *\n       0x000089E2  SIOCIPXCFGDATA         struct ipx_config_data *\n\n       // <include/linux/kd.h>\n       0x00004B60  GIO_FONT               struct { char [8192]; } *\n       0x00004B61  PIO_FONT               const struct { char [8192]; } *\n       0x00004B6B  GIO_FONTX              struct console_font_desc *  // MORE I-O\n       0x00004B6C  PIO_FONTX              const struct console_font_desc * //MORE\n       0x00004B70  GIO_CMAP               struct { char [48]; } *\n       0x00004B71  PIO_CMAP               const struct { char [48]; }\n       0x00004B2F  KIOCSOUND              int\n       0x00004B30  KDMKTONE               int\n       0x00004B31  KDGETLED               char *\n       0x00004B32  KDSETLED               int\n       0x00004B33  KDGKBTYPE              char *\n       0x00004B34  KDADDIO           int                 // MORE\n       0x00004B35  KDDELIO           int                 // MORE\n       0x00004B36  KDENABIO               void                // MORE\n       0x00004B37  KDDISABIO              void                // MORE\n       0x00004B3A  KDSETMODE              int\n       0x00004B3B  KDGETMODE              int *\n       0x00004B3C  KDMAPDISP              void                // MORE\n       0x00004B3D  KDUNMAPDISP            void                // MORE\n       0x00004B40  GIO_SCRNMAP            struct { char [E_TABSZ]; } *\n       0x00004B41  PIO_SCRNMAP            const struct { char [E_TABSZ]; } *\n       0x00004B69  GIO_UNISCRNMAP         struct { short [E_TABSZ]; } *\n       0x00004B6A  PIO_UNISCRNMAP         const struct { short [E_TABSZ]; } *\n       0x00004B66  GIO_UNIMAP             struct unimapdesc * // MORE   // I-O\n       0x00004B67  PIO_UNIMAP             const struct unimapdesc *     // MORE\n       0x00004B68  PIO_UNIMAPCLR          const struct unimapinit *\n       0x00004B44  KDGKBMODE              int *\n       0x00004B45  KDSKBMODE              int\n       0x00004B62  KDGKBMETA              int *\n       0x00004B63  KDSKBMETA              int\n       0x00004B64  KDGKBLED               int *\n       0x00004B65  KDSKBLED               int\n       0x00004B46  KDGKBENT               struct kbentry *         // I-O\n       0x00004B47  KDSKBENT               const struct kbentry *\n       0x00004B48  KDGKBSENT              struct kbsentry *        // I-O\n       0x00004B49  KDSKBSENT              const struct kbsentry *\n       0x00004B4A  KDGKBDIACR             struct kbdiacrs *\n       0x00004B4B  KDSKBDIACR             const struct kbdiacrs *\n       0x00004B4C  KDGETKEYCODE      struct kbkeycode *       // I-O\n       0x00004B4D  KDSETKEYCODE      const struct kbkeycode *\n       0x00004B4E  KDSIGACCEPT            int\n\n       // <include/linux/lp.h>\n       0x00000601  LPCHAR            int\n       0x00000602  LPTIME            int\n       0x00000604  LPABORT           int\n       0x00000605  LPSETIRQ               int\n       0x00000606  LPGETIRQ               int *\n       0x00000608  LPWAIT            int\n       0x00000609  LPCAREFUL              int\n       0x0000060A  LPABORTOPEN            int\n       0x0000060B  LPGETSTATUS            int *\n       0x0000060C  LPRESET           void\n       0x0000060D  LPGETSTATS             struct lp_stats *\n\n       // <include/linux/mroute.h>\n       0x000089E0  SIOCGETVIFCNT          struct sioc_vif_req *         // I-O\n       0x000089E1  SIOCGETSGCNT      struct sioc_sg_req *          // I-O\n\n       // <include/linux/mtio.h>\n       0x40086D01  MTIOCTOP               const struct mtop *\n       0x801C6D02  MTIOCGET               struct mtget *\n       0x80046D03  MTIOCPOS               struct mtpos *\n       0x80206D04  MTIOCGETCONFIG         struct mtconfiginfo *\n       0x40206D05  MTIOCSETCONFIG         const struct mtconfiginfo *\n\n       // <include/linux/netrom.h>\n       0x000089E0  SIOCNRGETPARMS         struct nr_parms_struct * // I-O\n       0x000089E1  SIOCNRSETPARMS         const struct nr_parms_struct *\n       0x000089E2  SIOCNRDECOBS      void\n       0x000089E3  SIOCNRRTCTL            const int *\n\n       // <include/linux/sbpcd.h>\n       0x00009000  DDIOCSDBG              const int *\n       0x00005382  CDROMAUDIOBUFSIZ       int\n\n       // <include/linux/scc.h>\n       0x00005470  TIOCSCCINI             void\n       0x00005471  TIOCCHANINI            const struct scc_modem *\n       0x00005472  TIOCGKISS              struct ioctl_command *        // I-O\n       0x00005473  TIOCSKISS              const struct ioctl_command *\n       0x00005474  TIOCSCCSTAT            struct scc_stat *\n\n       // <include/linux/scsi.h>\n       0x00005382  SCSI_IOCTL_GET_IDLUN   struct { int [2]; } *\n       0x00005383  SCSI_IOCTL_TAGGED_ENABLE    void\n       0x00005384  SCSI_IOCTL_TAGGED_DISABLE   void\n       0x00005385  SCSI_IOCTL_PROBE_HOST  const int *              // MORE\n\n       // <include/linux/smb_fs.h>\n       0x80027501  SMB_IOC_GETMOUNTUID         uid_t *\n\n       // <include/linux/sockios.h>\n       0x0000890B  SIOCADDRT              const struct rtentry *        // MORE\n       0x0000890C  SIOCDELRT              const struct rtentry *        // MORE\n       0x00008910  SIOCGIFNAME            char []\n       0x00008911  SIOCSIFLINK            void\n       0x00008912  SIOCGIFCONF            struct ifconf *          // MORE   // I-O\n       0x00008913  SIOCGIFFLAGS      struct ifreq *           // I-O\n       0x00008914  SIOCSIFFLAGS      const struct ifreq *\n       0x00008915  SIOCGIFADDR            struct ifreq *           // I-O\n       0x00008916  SIOCSIFADDR            const struct ifreq *\n       0x00008917  SIOCGIFDSTADDR         struct ifreq *           // I-O\n       0x00008918  SIOCSIFDSTADDR         const struct ifreq *\n       0x00008919  SIOCGIFBRDADDR         struct ifreq *           // I-O\n       0x0000891A  SIOCSIFBRDADDR         const struct ifreq *\n       0x0000891B  SIOCGIFNETMASK         struct ifreq *           // I-O\n       0x0000891C  SIOCSIFNETMASK         const struct ifreq *\n       0x0000891D  SIOCGIFMETRIC          struct ifreq *           // I-O\n       0x0000891E  SIOCSIFMETRIC          const struct ifreq *\n       0x0000891F  SIOCGIFMEM             struct ifreq *           // I-O\n       0x00008920  SIOCSIFMEM             const struct ifreq *\n       0x00008921  SIOCGIFMTU             struct ifreq *           // I-O\n       0x00008922  SIOCSIFMTU             const struct ifreq *\n       0x00008923  OLD_SIOCGIFHWADDR      struct ifreq *           // I-O\n       0x00008924  SIOCSIFHWADDR          const struct ifreq *          // MORE\n       0x00008925  SIOCGIFENCAP      int *\n       0x00008926  SIOCSIFENCAP      const int *\n       0x00008927  SIOCGIFHWADDR          struct ifreq *           // I-O\n       0x00008929  SIOCGIFSLAVE      void\n       0x00008930  SIOCSIFSLAVE      void\n       0x00008931  SIOCADDMULTI      const struct ifreq *\n       0x00008932  SIOCDELMULTI      const struct ifreq *\n       0x00008940  SIOCADDRTOLD      void\n       0x00008941  SIOCDELRTOLD      void\n       0x00008950  SIOCDARP               const struct arpreq *\n       0x00008951  SIOCGARP               struct arpreq *               // I-O\n       0x00008952  SIOCSARP               const struct arpreq *\n       0x00008960  SIOCDRARP              const struct arpreq *\n       0x00008961  SIOCGRARP              struct arpreq *               // I-O\n       0x00008962  SIOCSRARP              const struct arpreq *\n       0x00008970  SIOCGIFMAP             struct ifreq *           // I-O\n       0x00008971  SIOCSIFMAP             const struct ifreq *\n\n       // <include/linux/soundcard.h>\n       0x00005100  SNDCTL_SEQ_RESET       void\n       0x00005101  SNDCTL_SEQ_SYNC        void\n       0xC08C5102  SNDCTL_SYNTH_INFO      struct synth_info *      // I-O\n       0xC0045103  SNDCTL_SEQ_CTRLRATE         int *                    // I-O\n       0x80045104  SNDCTL_SEQ_GETOUTCOUNT int *\n       0x80045105  SNDCTL_SEQ_GETINCOUNT  int *\n       0x40045106  SNDCTL_SEQ_PERCMODE         void\n       0x40285107  SNDCTL_FM_LOAD_INSTR   const struct sbi_instrument *\n       0x40045108  SNDCTL_SEQ_TESTMIDI         const int *\n       0x40045109  SNDCTL_SEQ_RESETSAMPLES     const int *\n       0x8004510A  SNDCTL_SEQ_NRSYNTHS         int *\n       0x8004510B  SNDCTL_SEQ_NRMIDIS          int *\n       0xC074510C  SNDCTL_MIDI_INFO       struct midi_info *       // I-O\n       0x4004510D  SNDCTL_SEQ_THRESHOLD   const int *\n       0xC004510E  SNDCTL_SYNTH_MEMAVL         int *                    // I-O\n       0x4004510F  SNDCTL_FM_4OP_ENABLE   const int *\n       0xCFB85110  SNDCTL_PMGR_ACCESS          struct patmgr_info *          // I-O\n       0x00005111  SNDCTL_SEQ_PANIC       void\n       0x40085112  SNDCTL_SEQ_OUTOFBAND   const struct seq_event_rec *\n       0xC0045401  SNDCTL_TMR_TIMEBASE         int *                    // I-O\n       0x00005402  SNDCTL_TMR_START       void\n       0x00005403  SNDCTL_TMR_STOP        void\n       0x00005404  SNDCTL_TMR_CONTINUE         void\n       0xC0045405  SNDCTL_TMR_TEMPO       int *                    // I-O\n       0xC0045406  SNDCTL_TMR_SOURCE      int *                    // I-O\n       0x40045407  SNDCTL_TMR_METRONOME   const int *\n       0x40045408  SNDCTL_TMR_SELECT      int *                    // I-O\n       0xCFB85001  SNDCTL_PMGR_IFACE      struct patmgr_info *          // I-O\n       0xC0046D00  SNDCTL_MIDI_PRETIME         int *                    // I-O\n       0xC0046D01  SNDCTL_MIDI_MPUMODE         const int *\n       0xC0216D02  SNDCTL_MIDI_MPUCMD          struct mpu_command_rec * // I-O\n       0x00005000  SNDCTL_DSP_RESET       void\n       0x00005001  SNDCTL_DSP_SYNC        void\n       0xC0045002  SNDCTL_DSP_SPEED       int *                    // I-O\n       0xC0045003  SNDCTL_DSP_STEREO      int *                    // I-O\n       0xC0045004  SNDCTL_DSP_GETBLKSIZE  int *                    // I-O\n       0xC0045006  SOUND_PCM_WRITE_CHANNELS    int *                    // I-O\n       0xC0045007  SOUND_PCM_WRITE_FILTER int *                    // I-O\n       0x00005008  SNDCTL_DSP_POST        void\n       0xC0045009  SNDCTL_DSP_SUBDIVIDE   int *                    // I-O\n       0xC004500A  SNDCTL_DSP_SETFRAGMENT int *                    // I-O\n       0x8004500B  SNDCTL_DSP_GETFMTS          int *\n       0xC0045005  SNDCTL_DSP_SETFMT      int *                    // I-O\n       0x800C500C  SNDCTL_DSP_GETOSPACE   struct audio_buf_info *\n       0x800C500D  SNDCTL_DSP_GETISPACE   struct audio_buf_info *\n       0x0000500E  SNDCTL_DSP_NONBLOCK         void\n       0x80045002  SOUND_PCM_READ_RATE         int *\n       0x80045006  SOUND_PCM_READ_CHANNELS     int *\n       0x80045005  SOUND_PCM_READ_BITS         int *\n       0x80045007  SOUND_PCM_READ_FILTER  int *\n       0x00004300  SNDCTL_COPR_RESET      void\n       0xCFB04301  SNDCTL_COPR_LOAD       const struct copr_buffer *\n       0xC0144302  SNDCTL_COPR_RDATA      struct copr_debug_buf *       // I-O\n       0xC0144303  SNDCTL_COPR_RCODE      struct copr_debug_buf *       // I-O\n       0x40144304  SNDCTL_COPR_WDATA      const struct copr_debug_buf *\n       0x40144305  SNDCTL_COPR_WCODE      const struct copr_debug_buf *\n       0xC0144306  SNDCTL_COPR_RUN        struct copr_debug_buf *       // I-O\n       0xC0144307  SNDCTL_COPR_HALT       struct copr_debug_buf *       // I-O\n       0x4FA44308  SNDCTL_COPR_SENDMSG         const struct copr_msg *\n       0x8FA44309  SNDCTL_COPR_RCVMSG          struct copr_msg *\n       0x80044D00  SOUND_MIXER_READ_VOLUME     int *\n       0x80044D01  SOUND_MIXER_READ_BASS  int *\n       0x80044D02  SOUND_MIXER_READ_TREBLE     int *\n       0x80044D03  SOUND_MIXER_READ_SYNTH int *\n       0x80044D04  SOUND_MIXER_READ_PCM   int *\n       0x80044D05  SOUND_MIXER_READ_SPEAKER    int *\n       0x80044D06  SOUND_MIXER_READ_LINE  int *\n       0x80044D07  SOUND_MIXER_READ_MIC   int *\n       0x80044D08  SOUND_MIXER_READ_CD         int *\n       0x80044D09  SOUND_MIXER_READ_IMIX  int *\n       0x80044D0A  SOUND_MIXER_READ_ALTPCM     int *\n       0x80044D0B  SOUND_MIXER_READ_RECLEV     int *\n       0x80044D0C  SOUND_MIXER_READ_IGAIN int *\n       0x80044D0D  SOUND_MIXER_READ_OGAIN int *\n       0x80044D0E  SOUND_MIXER_READ_LINE1 int *\n       0x80044D0F  SOUND_MIXER_READ_LINE2 int *\n       0x80044D10  SOUND_MIXER_READ_LINE3 int *\n       0x80044D1C  SOUND_MIXER_READ_MUTE  int *\n       0x80044D1D  SOUND_MIXER_READ_ENHANCE    int *\n       0x80044D1E  SOUND_MIXER_READ_LOUD  int *\n       0x80044DFF  SOUND_MIXER_READ_RECSRC     int *\n       0x80044DFE  SOUND_MIXER_READ_DEVMASK    int *\n       0x80044DFD  SOUND_MIXER_READ_RECMASK    int *\n       0x80044DFB  SOUND_MIXER_READ_STEREODEVS int *\n       0x80044DFC  SOUND_MIXER_READ_CAPS  int *\n       0xC0044D00  SOUND_MIXER_WRITE_VOLUME    int *                    // I-O\n       0xC0044D01  SOUND_MIXER_WRITE_BASS int *                    // I-O\n       0xC0044D02  SOUND_MIXER_WRITE_TREBLE    int *                    // I-O\n       0xC0044D03  SOUND_MIXER_WRITE_SYNTH     int *                    // I-O\n       0xC0044D04  SOUND_MIXER_WRITE_PCM  int *                    // I-O\n       0xC0044D05  SOUND_MIXER_WRITE_SPEAKER   int *                    // I-O\n       0xC0044D06  SOUND_MIXER_WRITE_LINE int *                    // I-O\n       0xC0044D07  SOUND_MIXER_WRITE_MIC  int *                    // I-O\n       0xC0044D08  SOUND_MIXER_WRITE_CD   int *                    // I-O\n       0xC0044D09  SOUND_MIXER_WRITE_IMIX int *                    // I-O\n       0xC0044D0A  SOUND_MIXER_WRITE_ALTPCM    int *                    // I-O\n       0xC0044D0B  SOUND_MIXER_WRITE_RECLEV    int *                    // I-O\n       0xC0044D0C  SOUND_MIXER_WRITE_IGAIN     int *                    // I-O\n       0xC0044D0D  SOUND_MIXER_WRITE_OGAIN     int *                    // I-O\n       0xC0044D0E  SOUND_MIXER_WRITE_LINE1     int *                    // I-O\n       0xC0044D0F  SOUND_MIXER_WRITE_LINE2     int *                    // I-O\n       0xC0044D10  SOUND_MIXER_WRITE_LINE3     int *                    // I-O\n       0xC0044D1C  SOUND_MIXER_WRITE_MUTE int *                    // I-O\n       0xC0044D1D  SOUND_MIXER_WRITE_ENHANCE   int *                    // I-O\n       0xC0044D1E  SOUND_MIXER_WRITE_LOUD int *                    // I-O\n       0xC0044DFF  SOUND_MIXER_WRITE_RECSRC    int *                    // I-O\n\n       // <include/linux/umsdos_fs.h>\n       0x000004D2  UMSDOS_READDIR_DOS          struct umsdos_ioctl *         // I-O\n       0x000004D3  UMSDOS_UNLINK_DOS      const struct umsdos_ioctl *\n       0x000004D4  UMSDOS_RMDIR_DOS       const struct umsdos_ioctl *\n       0x000004D5  UMSDOS_STAT_DOS        struct umsdos_ioctl *         // I-O\n       0x000004D6  UMSDOS_CREAT_EMD       const struct umsdos_ioctl *\n       0x000004D7  UMSDOS_UNLINK_EMD      const struct umsdos_ioctl *\n       0x000004D8  UMSDOS_READDIR_EMD          struct umsdos_ioctl *         // I-O\n       0x000004D9  UMSDOS_GETVERSION      struct umsdos_ioctl *\n       0x000004DA  UMSDOS_INIT_EMD        void\n       0x000004DB  UMSDOS_DOS_SETUP       const struct umsdos_ioctl *\n       0x000004DC  UMSDOS_RENAME_DOS      const struct umsdos_ioctl *\n\n       // <include/linux/vt.h>\n       0x00005600  VT_OPENQRY             int *\n       0x00005601  VT_GETMODE             struct vt_mode *\n       0x00005602  VT_SETMODE             const struct vt_mode *\n       0x00005603  VT_GETSTATE            struct vt_stat *\n       0x00005604  VT_SENDSIG             void\n       0x00005605  VT_RELDISP             int\n       0x00005606  VT_ACTIVATE            int\n       0x00005607  VT_WAITACTIVE          int\n       0x00005608  VT_DISALLOCATE         int\n       0x00005609  VT_RESIZE              const struct vt_sizes *\n       0x0000560A  VT_RESIZEX             const struct vt_consize *\n\n       // M\u00e1s argumentos.\n\n       Algunas ioctl's toman un puntero a una estructura que contiene\n       punteros adicionales. \u00c9stas se documentan aqu\u00ed en orden alfab\u00e9tico.\n\n       CDROMREADAUDIO toma un puntero de entrada 'const struct cdrom_read_audio *'.\n       El campo 'buf' apunta a un b\u00fafer de salida de longitud 'nframes *\n       CD_FRAMESIZE_RAW'.\n\n       CDROMREADCOOKED, CDROMREADMODE1, CDROMREADMODE2 y CDROMREADRAW toman\n       un puntero de entrada 'const struct cdrom_msf *'.  Utilizan el mismo\n       puntero como un puntero de salida a 'char []'. La longitud var\u00eda seg\u00fan\n       la petici\u00f3n. Para CDROMREADMODE1, la mayor\u00eda de los controladores\n       emplean 'CD_FRAMESIZE', pero el controlador del Optics Storage utiliza\n       en su lugar 'OPT_BLOCKSIZE' (ambos tienen el valor num\u00e9rico 2048).\n\n                CDROMREADCOOKED      char [CD_FRAMESIZE]\n                CDROMREADMODE1       char [CD_FRAMESIZE or OPT_BLOCKSIZE]\n                CDROMREADMODE2       char [CD_FRAMESIZE_RAW0]\n                CDROMREADRAW         char [CD_FRAMESIZE_RAW]\n\n       EQL_ENSLAVE, EQL_EMANCIPATE, EQL_GETSLAVECFG, EQL_SETSLAVECFG,\n       EQL_GETMASTERCFG y EQL_SETMASTERCFG toman una 'struct ifreq *'.\n       El campo 'ifr_data' es un puntero a otra estructura como sigue:\n\n                EQL_ENSLAVE               const struct slaving_request *\n                EQL_EMANCIPATE       const struct slaving_request *\n                EQL_GETSLAVECFG      struct slave_config *         // E-S\n                EQL_SETSLAVECFG      const struct slave_config *\n                EQL_GETMASTERCFG          struct master_config *\n                EQL_SETMASTERCFG          const struct master_config *\n\n       FDRAWCMD toma una 'struct floppy raw_cmd *'.  Si 'flags & FD_RAW_WRITE'\n       es no cero, entonces 'data' apunta a un b\u00fafer de entrada de longitud 'length'.\n       Si 'flags & FD_RAW_READ' es no cero, entonces 'data' apunta a un b\u00fafer\n       de salida de longitud 'length'.\n\n       GIO_FONTX y PIO_FONTX toman una 'struct console_font_desc *' o una\n        'const struct console_font_desc *', respectivamente.  'chardata'\n       apunta a un b\u00fafer de 'char [charcount]'.  Esto es un b\u00fafer de salida\n       para GIO_FONTX y de entrada para PIO_FONTX.\n\n       GIO_UNIMAP y PIO_UNIMAP toman una 'struct unimapdesc *' o una\n        'const struct unimapdesc *', respectivamente.  'entries' apunta a un\n       b\u00fafer de 'struct unipair [entry_ct]'.  Esto es un b\u00fafer de salida para\n       GIO_UNIMAP y de entrada para PIO_UNIMAP.\n\n       KDADDIO, KDDELIO, KDDISABIO y KDENABIO habilitan o inhabilitan acceso\n       a puertos de E/S. Son esencialmente interfaces alternativas para 'ioperm'.\n\n       KDMAPDISP y KDUNMAPDISP habilitan o inhabilitan asociaciones de\n       memoria o acceso a puertos de E/S. No est\u00e1n implementadas en el n\u00facleo.\n\n       SCSI_IOCTL_PROBE_HOST toma un puntero de entrada 'const int *', que es\n       una longitud. Utiliza el mismo puntero como un puntero de salida a un\n       b\u00fafer 'char []' de esta longitud.\n\n       SIOCADDRT y SIOCDELRT toman un puntero de entrada cuyo tipo depende\n       del protocolo:\n\n                La mayor\u00eda de ellos       const struct rtentry *\n                AX.25           const struct ax25_route *\n                NET/ROM              const struct nr_route_struct *\n\n       SIOCGIFCONF toma una 'struct ifconf *'.  El campo 'ifc_buf' apunta a\n       un b\u00fafer de longitud 'ifc_len' bytes, en el cual el n\u00facleo escribe una\n       lista de tipo 'struct ifreq []'.\n\n       SIOCSIFHWADDR toma un puntero de entrada cuyo tipo depende del protocolo:\n\n                La mayor\u00eda de ellos       const struct ifreq *\n                AX.25           const char [AX25_ADDR_LEN]\n\n       TIOCLINUX toma un 'const char *'.  Lo emplea para distinguir varios\n       sub-casos independientes. En la tabla de abajo, 'N + fu' significa 'foo' tras\n       un relleno de N bytes.  'struct selection' se define impl\u00edcitamente en\n        'drivers/char/selection.c'\n\n                TIOCLINUX-2               1 + const struct selection *\n                TIOCLINUX-3               void\n                TIOCLINUX-4               void\n                TIOCLINUX-5               4 + const struct { long [8]; } *\n                TIOCLINUX-6               char *\n                TIOCLINUX-7               char *\n                TIOCLINUX-10         1 + const char *\n\n       // Ioctl's duplicadas\n\n       Esta lista no incluye ioctl's en el rango de   SIOCDEVPRIVATE a\n       SIOCPROTOPRIVATE.\n\n       0x00000001  FDSETPRM               FIBMAP\n       0x00000002  FDDEFPRM               FIGETBSZ\n       0x00005382  CDROMAUDIOBUFSIZ       SCSI_IOCTL_GET_IDLUN\n       0x00005402  SNDCTL_TMR_START       TCSETS\n       0x00005403  SNDCTL_TMR_STOP        TCSETSW\n       0x00005404  SNDCTL_TMR_CONTINUE         TCSETSF\n\nLinux 1.3                                      17 septiembre 1995                                  IOCTL_LIST(2)\n"},{"NOMBRE": "       ioperm - establece permisos en los puertos de entrada/salida\n\n", "SINOPSIS": "       #include <unistd.h> /* para libc5 */\n       #include <sys/io.h> /* para glibc */\n\n       int ioperm(unsigned long desde, unsigned long num, int encender);\n\n", "DESCRIPCION": "       Ioperm  establece  los  bits de permiso de acceso a los puertos para el proceso para num bytes, empezando\n       desde la direcci\u00f3n del puerto desde, al valor encender.  El empleo  de  ioperm  requiere  privilegios  de\n       root.\n\n       Solamente  se pueden especificar de esta manera los primeros 0x3ff puertos de E/S. Para m\u00e1s puertos, debe\n       emplearse la funci\u00f3n iopl.  Los permisos no se heredan en un fork(), pero s\u00ed est\u00e1n en un exec(). Esto  es\n       \u00fatil para proporcionar permisos de acceso a puertos a tareas no privilegiadas.\n\nVALOR DEVUELTO\n       En  caso  de  \u00e9xito,  se  devuelve  cero.  En  caso de error, se devuelve -1, y se pone en errno un valor\n       apropiado.\n\nCONFORME A\n       ioperm es espec\u00edfico de Linux y no deber\u00eda emplearse en programas pretendidamente transportables.\n\n", "OBSERVACIONES": "       Libc5 la trata como una llamada al sistema y posee un  prototipo  en  <unistd.h>.   Glibc1  no  tiene  un\n       prototipo.  Glibc2  posee  un  prototipo tanto en <sys/io.h> como en <sys/perm.h>.  Evite el \u00faltimo, s\u00f3lo\n       est\u00e1 disponible en la arquitectura i386.\n\nV\u00c9ASE TAMBI\u00c9N\n       iopl(2)\n\nLinux                                            22 Octubre 1996                                       IOPERM(2)\n"},{"NOMBRE": "       iopl - cambia nivel de privilegio de E/S\n\n", "SINOPSIS": "       #include <sys/io.h>\n\n       int iopl(int nivel);\n\n", "DESCRIPCION": "       iopl cambia el nivel de privilegio de E/S del proceso en curso, seg\u00fan se especifique en nivel.\n\n       Esta  llamada  es  necesaria  para permitir a los servidores X compatibles con las tarjetas de v\u00eddeo 8514\n       ejecutarse en Linux. Puesto que estos servidores X Window requieren acceso a todos los 65536  puertos  de\n       E/S, la llamada a ioperm no basta.\n\n       Adem\u00e1s de otorgar acceso sin restricciones a los puertos de E/S, la ejecuci\u00f3n a un nivel de privilegio de\n       E/S m\u00e1s alto tambi\u00e9n permite al proceso inhabilitar las interrupciones. Esto probablemente  echar\u00e1  abajo\n       el sistema, y no se recomienda pues.\n\n       Los permisos son heredados por fork() y exec().\n\n       El nivel de privilegio de E/S para un proceso normal es 0.\n\nVALOR DEVUELTO\n       En  caso  de  \u00e9xito,  se  devuelve  cero.  En  caso de error, se devuelve -1, y se pone en errno un valor\n       apropiado.\n\n", "ERRORES": "       EINVAL nivel es mayor que 3.\n\n       EPERM  El usuario no es el s\u00faper-usuario.\n\nCONFORME A\n       iopl es espec\u00edfico de Linux y no deber\u00eda emplearse en programas pretendidamente transportables.\n\n", "OBSERVACIONES": "       Libc5 la trata como una llamada al sistema y posee un  prototipo  en  <unistd.h>.   Glibc1  no  tiene  un\n       prototipo.  Glibc2  posee  un  prototipo tanto en <sys/io.h> como en <sys/perm.h>.  Evite el \u00faltimo, s\u00f3lo\n       est\u00e1 disponible en la arquitectura i386.\n\nV\u00c9ASE TAMBI\u00c9N\n       ioperm(2)\n\nLinux 0.99.11                                     24 julio 1997                                          IOPL(2)\n"},{"NOMBRE": "       ipc - llamadas al sistema de IPC de System V\n\n", "SINOPSIS": "       int ipc(unsigned int llamada, int primero, int segundo, int tercero, void *ptr, long quinto);\n\n", "DESCRIPCION": "       ipc() es un punto de entrada al n\u00facleo com\u00fan para las llamadas IPC de System V para mensajes, sem\u00e1foros y\n       memoria compartida.  El argumento llamada determina a qu\u00e9 funci\u00f3n de IPC  se  ha  de  llamar;  los  otros\n       argumentos se pasan tal cuales a la llamada apropiada.\n\n       Los  programas  de  usuario  deber\u00edan llamar a las funciones apropiadas por sus nombres usuales. S\u00f3lo los\n       implementadores de la biblioteca est\u00e1ndar y los buenos programadores  del  n\u00facleo  necesitan  conocer  la\n       existencia de ipc().\n\nCONFORME A\n       ipc() es espec\u00edfica de Linux, y no deber\u00eda emplearse en programas pretendidamente transportables.\n\nV\u00c9ASE TAMBI\u00c9N\n       msgctl(2),   msgget(2),  msgrcv(2),  msgsnd(2),  semctl(2),  semget(2),  semop(2),  shmat(2),  shmctl(2),\n       shmdt(2), shmget(2)\n\nLinux 1.2.4                                      22 Octubre 1996                                          IPC(2)\n"},{"NOMBRE": "       kill - terminate a process\n\n", "SINOPSIS": "       kill [-signal|-s signal|-p] [-q value] [-a] [--timeout milliseconds signal] [--] pid|name...\n       kill -l [number] | -L\n\n", "DESCRIPCION": "       The command kill sends the specified signal to the specified processes or process groups.\n\n       If  no  signal is specified, the TERM signal is sent.  The default action for this signal is to terminate\n       the process.  This signal should be used in preference to the KILL signal (number 9), since a process may\n       install a handler for the TERM signal in order to perform clean-up steps before terminating in an orderly\n       fashion.  If a process does not terminate after a TERM signal has been sent, then the KILL signal may  be\n       used;  be  aware that the latter signal cannot be caught, and so does not give the target process the op\u2010\n       portunity to perform any clean-up before terminating.\n\n       Most modern shells have a builtin kill command, with a usage rather similar to that of  the  command  de\u2010\n       scribed here.  The --all, --pid, and --queue options, and the possibility to specify processes by command\n       name, are local extensions.\n\n       If signal is 0, then no actual signal is sent, but error checking is still performed.\n\n", "ARGUMENTOS": "       The list of processes to be signaled can be a mixture of names and PIDs.\n\n       pid    Each pid can be expressed in one of the following ways:\n\n              n      where n is larger than 0.  The process with PID n is signaled.\n\n              0      All processes in the current process group are signaled.\n\n              -1     All processes with a PID larger than 1 are signaled.\n\n              -n     where n is larger than 1.  All processes in process group n are signaled.  When an argument\n                     of  the form '-n' is given, and it is meant to denote a process group, either a signal must\n                     be specified first, or the argument must be preceded by a '--' option, otherwise it will be\n                     taken as the signal to send.\n\n       name   All processes invoked using this name will be signaled.\n\n", "OPCIONES": "       -s, --signal signal\n              The signal to send.  It may be given as a name or a number.\n\n       -l, --list [number]\n              Print  a  list  of signal names, or convert the given signal number to a name.  The signals can be\n              found in /usr/include/linux/signal.h.\n\n       -L, --table\n              Similar to -l, but it will print signal names and their corresponding numbers.\n\n       -a, --all\n              Do not restrict the command-name-to-PID conversion to processes with the same UID as  the  present\n              process.\n\n       -p, --pid\n              Only print the process ID (PID) of the named processes, do not send any signals.\n\n       --verbose\n              Print PID(s) that will be signaled with kill along with the signal.\n\n       -q, --queue value\n              Send  the  signal using sigqueue(3) rather than kill(2).  The value argument is an integer that is\n              sent along with the signal.  If the receiving process has installed a handler for this signal  us\u2010\n              ing  the  SA_SIGINFO flag to sigaction(2), then it can obtain this data via the si_sigval field of\n              the siginfo_t structure.\n\n       --timeout milliseconds signal\n              Send a signal defined in the usual way to a process, followed by  an  additional  signal  after  a\n              specified  delay.   The  --timeout option causes kill to wait for a period defined in milliseconds\n              before sending a follow-up signal to the process.  This feature is  implemented  using  the  Linux\n              kernel  PID file descriptor feature in order to guarantee that the follow-up signal is sent to the\n              same process or not sent if the process no longer exists.\n\n              Note that the operating system may re-use PIDs and implementing an equivalent feature in  a  shell\n              using  kill  and  sleep  would be subject to races whereby the follow-up signal might be sent to a\n              different process that used a recycled PID.\n\n              The --timeout option can be specified multiple times: the signals are sent sequentially  with  the\n              specified timeouts.  The --timeout option can be combined with the --queue option.\n\n              As  an  example, the following command sends the signals QUIT, TERM and KILL in sequence and waits\n              for 1000 milliseconds between sending the signals:\n\n                  kill --verbose --timeout 1000 TERM --timeout 1000 KILL \\\n                          --signal QUIT 12345\n\nEXIT STATUS\n       kill has the following exit status values:\n\n              0      success\n              1      failure\n              64     partial success (when more than one process specified)\n\n", "NOTA": "       Although it is possible to specify the TID (thread ID, see gettid(2)) of one of the threads in  a  multi\u2010\n       threaded  process  as the argument of kill, the signal is nevertheless directed to the process (i.e., the\n       entire thread group).  In other words, it is not possible to send a  signal  to  an  explicitly  selected\n       thread in a multithreaded process.  The signal will be delivered to an arbitrarily selected thread in the\n       target process that is not blocking the signal.  For more details, see signal(7) and the  description  of\n       CLONE_THREAD in clone(2).\n\n       Various shells provide a builtin kill command that is preferred in relation to the kill(1) executable de\u2010\n       scribed by this manual.  The easiest way to ensure one is executing the command described in this page is\n       to use the full path when calling the command, for example: /bin/kill --version\n\n", "AUTOR": "       Salvatore Valente \u27e8svalente@mit.edu\u27e9\n       Karel Zak \u27e8kzak@redhat.com\u27e9\n\n       The original version was taken from BSD 4.4.\n\nSEE ALSO\n       bash(1), tcsh(1), sigaction(2), kill(2), sigqueue(3), signal(7)\n\n", "DISPONIBILIDAD": "       The  kill  command is part of the util-linux package and is available from Linux Kernel Archive \u27e8https://\n       www.kernel.org/pub/linux/utils/util-linux/\u27e9.\n\nutil-linux                                        November 2019                                          KILL(1)\n"},{"NOMBRE": "       killpg - enviar una se\u00f1al a un grupo de procesos\n\n", "SINOPSIS": "       #include <signal.h>\n\n       int killpg(int pgrp, int sig);\n\n", "DESCRIPCION": "       Killpg  env\u00eda  la  se\u00f1al sig al grupo de procesos pgrp.  V\u00e9ase sigaction(2) para una lista de se\u00f1ales. Si\n       pgrp es 0, killpg env\u00eda la se\u00f1al al grupo de procesos del proceso que env\u00eda la se\u00f1al.\n\n       El proceso que env\u00eda, y los miembros del grupo de procesos deben tener  todos  el  mismo  ID  de  usuario\n       efectivo,  o  el  que  env\u00eda  debe ser superusuario.  Como excepci\u00f3n, la se\u00f1al de continuar SIGCONT puede\n       enviarse a cualquier proceso que sea descendiente del proceso actual.\n\nVALOR DEVUELTO\n       Si hay \u00e9xito, se devuelve cero. Si hubo error, se devuelve -1, y errno se actualiza apropiadamente.\n\n", "ERRORES": "       EINVAL Sig no es un n\u00famero de se\u00f1al v\u00e1lido.\n\n       ESRCH  No se encuentran procesos en el grupo de procesos especificado por pgrp.\n\n       ESRCH  El grupo de procesos se di\u00f3 como 0, pero el proceso que env\u00eda no tiene grupo de procesos.\n\n       EPERM  El proceso que env\u00eda no es superusuario, y uno o m\u00e1s de los procesos objetivo tiene ID de  usuario\n              efectivo diferente del ID del proceso que env\u00eda.\n\nCONFORME A\n       SVr4, 4.4BSD (La llamada killpg apareci\u00f3 por primera vez en BSD 4.0).\n\nV\u00c9ASE TAMBI\u00c9N\n       kill(2), getpgrp(2), signal(2)\n\nP\u00e1gina de manual de BSD                           23 julio 1993                                        KILLPG(2)\n"},{"NOMBRE": "       chown, fchown, lchown - cambian el propietario de un fichero\n\n", "SINOPSIS": "       #include <sys/types.h>\n       #include <unistd.h>\n\n       int chown(const char *path, uid_t owner, gid_t group);\n       int fchown(int fd, uid_t owner, gid_t group);\n       int lchown(const char *path, uid_t owner, gid_t group);\n\n", "DESCRIPCION": "       Cambia el propietario del fichero especificado por path o fd.  Solamente el superusuario puede cambiar el\n       propietario de un fichero.  El propietario de un fichero puede  cambiar  el  grupo  de  dicho  fichero  a\n       cualquier grupo al que dicho usuario pertenezca. El superusuario puede cambiar el grupo arbitrariamente.\n\n       Si a owner o group se asigna -1, entonces dicho ID no se altera.\n\n       Cuando  un no superusuario cambia el propietario o grupo de un fichero ejecutable, se limpian los bits de\n       modo S_ISUID y S_ISGID. POSIX no especifica si esto tambi\u00e9n debe ocurrir cuando el  superusuario  realiza\n       un  chown;  el  comportamiento  de  Linux  depende  de la versi\u00f3n del n\u00facleo. En el caso de un fichero no\n       ejecutable para el grupo (con el bit S_IXGRP limpio) el bit S_ISGID indica un bloqueo obligatorio y no se\n       limpia al ejecutar chown.\n\nVALOR DEVUELTO\n       En  caso  de \u00e9xito, devuelve 0. Si se encuentra alg\u00fan error, devuelve -1, y a errno se le asigna un valor\n       apropiado.\n\n", "ERRORES": "       Dependiendo del sistema de ficheros, se pueden generar otros errores.  Los  errores  m\u00e1s  generales  para\n       chown son:\n\n       EPERM  El UID efectivo no coincide con el propietario del fichero, y no es cero; o el propietario (owner)\n              o grupo (group) han sido especificados incorrectamente.\n\n       EROFS  El fichero en cuesti\u00f3n reside en un sistema de ficheros de s\u00f3lo lectura.\n\n       EFAULT path apunta fuera de su espacio de direcciones accesible.\n\n       ENAMETOOLONG\n              path es demasiado largo.\n\n       ENOENT El fichero no existe.\n\n       ENOMEM No hab\u00eda suficiente memoria disponible en el n\u00facleo.\n\n       ENOTDIR\n              Un componente del camino path no es un directorio.\n\n       EACCES Permiso de busqueda denegado en un componente del camino (path).\n\n       ELOOP  Se encontraron demasiados enlaces simb\u00f3licos al resolver path.\n\n       Los errores comunes para fchown se listan a continuaci\u00f3n:\n\n       EBADF  El descriptor no es v\u00e1lido.\n\n       ENOENT Lea nota anterior.\n\n       EPERM  Lea nota anterior.\n\n       EROFS  Lea nota anterior.\n\n       EIO    Ocurri\u00f3 un error de E/S de bajo nivel mientras se modificaba el nodo-i.\n\n", "OBSERVACIONES": "       En las versiones de Linux anteriores a la 2.1.81 (y distintas de la 2.1.46), chown no segu\u00eda los  enlaces\n       simb\u00f3licos.   Desde  la  versi\u00f3n  2.1.81  de  Linux chown sigue los enlaces simb\u00f3licos y existe una nueva\n       llamada al sistema, lchown, que no sigue los enlaces simb\u00f3licos.  Desde la versi\u00f3n 2.1.86 de Linux,  esta\n       nueva  llamada  (que  tiene  la misma sem\u00e1ntica que la antigua chown) tiene el mismo n\u00famero de llamada al\n       sistema y chown obtiene el n\u00famero reci\u00e9n introducido.\n\n       El     prototipo     para     fchown     s\u00f3lo     est\u00e1     disponible     si     se      ha      definido\n       _BSD_SOURCE(bienexpl\u00edcitamente,oexpl\u00edcitamente,alnodefinir  _POSIX_SOURCE  o  compilando  con  la  opci\u00f3n\n       -ansi).\n\nCONFORME A\n       La llamada chown es conforme a SVr4, SVID, POSIX y X/OPEN.  La versi\u00f3n de esta  llamada  en  4.4BSD  s\u00f3lo\n       puede  ser  usada  por  el superusuario (es decir, los usuarios ordinarios no pueden dar ficheros a otros\n       usuarios).  SVr4 documenta otras condiciones de error como EINVAL, EINTR, ENOLINK y  EMULTIHOP,  pero  no\n       ENOMEM.  POSIX.1 no documenta las codiciones de error ENOMEM ni ELOOP.\n\n       La  llamada  fchown  es conforme a 4.4BSD y SVr4.  SVr4 documenta adem\u00e1s las condiciones de error EINVAL,\n       EIO, EINTR y ENOLINK.\n\n", "RESTRICCIONES": "       La sem\u00e1ntica de chown() es violada deliberadamente en los sistemas de ficheros NFS que han habilitado  la\n       asociaci\u00f3n  del  UID.  Adem\u00e1s,  se  viola la sem\u00e1ntica de todas las llamadas al sistema que acceden a los\n       contenidos de los ficheros ya que chown()  pueden  producir  la  revocaci\u00f3n  de  acceso  inmediata  sobre\n       ficheros  ya  abiertos. La ocultaci\u00f3n (caching) en los clientes puede producir retrasos entre el instante\n       en que la propiedad ha sido cambiada para permitir el acceso de un  usuario  y  el  instante  en  que  el\n       fichero puede realmente ser accedido por el usuario en otros clientes.\n\nV\u00c9ASE TAMBI\u00c9N\n       chmod(2), flock(2).\n\nLinux 2.1.81                                      18 mayo 1997                                          CHOWN(2)\n"},{"NOMBRE": "       link - call the link function to create a link to a file\n\n", "SINOPSIS": "       link FILE1 FILE2\n       link OPTION\n\n", "DESCRIPCION": "       Call the link function to create a link named FILE2 to an existing FILE1.\n\n       --help display this help and exit\n\n       --version\n              output version information and exit\n\n", "AUTOR": "       Written by Michael Stone.\n\nREPORTING BUGS\n       GNU coreutils online help: <https://www.gnu.org/software/coreutils/>\n       Report any translation bugs to <https://translationproject.org/team/>\n\n", "COPYRIGHT": "       Copyright  \u00a9  2020  Free  Software  Foundation,  Inc.   License  GPLv3+:  GNU  GPL  version  3  or  later\n       <https://gnu.org/licenses/gpl.html>.\n       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to  the  extent\n       permitted by law.\n\nSEE ALSO\n       link(2)\n\n       Full documentation <https://www.gnu.org/software/coreutils/link>\n       or available locally via: info '(coreutils) link invocation'\n\nGNU coreutils 8.32                                  July 2021                                            LINK(1)\n"},{"NOMBRE": "       listen - espera conexiones en un conector (socket)\n\n", "SINOPSIS": "       #include <sys/socket.h>\n\n       int listen(int s, int backlog);\n\n", "DESCRIPCION": "       Para  aceptar  conexiones,  primero  se crea un conector con socket(2), luego se especifica con listen el\n       deseo de aceptar conexiones entrantes y un l\u00edmite de la cola para dichas conexiones,  y  por  \u00faltimo  las\n       conexiones  son aceptadas mediante accept(2).  La llamada listen se aplica solamente a conectores de tipo\n       SOCK_STREAM o SOCK_SEQPACKET.\n\n       El par\u00e1metro backlog define la longitud m\u00e1xima a la que puede llegar la cola de conexiones pendientes. Si\n       una  petici\u00f3n  de  conexi\u00f3n  llega  estando  la  cola  llena,  el  cliente puede recibir un error con una\n       indicaci\u00f3n de ECONNREFUSED o, si el protocolo subyacente acepta retransmisiones, la petici\u00f3n puede no ser\n       tenida en cuenta, de forma que un reintento tenga \u00e9xito.\n\n", "OBSERVACIONES": "       El  comportamiento  del  par\u00e1metro  backlog sobre conectores TCP ha cambiado con la versi\u00f3n 2.2 de Linux.\n       Ahora indica la longitud de la cola para conectores establecidos completamente que esperan ser aceptados,\n       en  lugar del n\u00famero de peticiones de conexi\u00f3n incompletas. La longitud m\u00e1xima de la cola para conectores\n       incompletos se puede configurar  con  la  sysctl  tcp_max_syn_backlog.   Cuando  los  \"syncookies\"  est\u00e1n\n       activos,  no  existe  una longitud m\u00e1xima l\u00f3gica y la configuraci\u00f3n de esta sysctl se ignora.  Vea tcp(7)\n       para m\u00e1s informaci\u00f3n.\n\nVALOR DEVUELTO\n       En caso de \u00e9xito, se devuelve cero. En caso de error, se  devuelve  -1  y  se  pone  en  errno  un  valor\n       apropiado.\n\n", "ERRORES": "       EADDRINUSE\n              Otro conector ya se encuentra escuchando en el mismo puerto.\n\n       EBADF  El argumento s no es un descriptor v\u00e1lido.\n\n       ENOTSOCK\n              El argumento s no es un conector.\n\n       EOPNOTSUPP\n              El conector no es de un tipo que admita la operaci\u00f3n listen.\n\nCONFORME A\n       Single Unix, 4.4BSD, borrador POSIX 1003.1g. La llamada a funci\u00f3n listen apareci\u00f3 por 1\u00aa vez en 4.2BSD.\n\n", "FALLOS": "       Si  el conector es de tipo AF_INET y el argumento backlog es mayor que la constante SOMAXCONN (128 en 2.0\n       y 2.2), se trunca silenciosamente a SOMAXCONN.  Para aplicaciones transportables, no conf\u00ede en este valor\n       puesto que BSD (y algunos sistemas derivados de BSD) limitan backlog a 5.\n\nV\u00c9ASE TAMBI\u00c9N\n       accept(2), connect(2), socket(2)\n\nBSD                                              22 octubre 1996                                       LISTEN(2)\n"},{"NOMBRE": "       _llseek - reposiciona el puntero de lectura/escritura\n\n", "SINOPSIS": "       #include <unistd.h>\n\n       #include <linux/unistd.h>\n\n       _syscall5(int, _llseek, uint, fd, ulong, hi, ulong, lo, loff_t *, res, uint, wh);\n\n       int  _llseek(unsigned  int  fd,  unsigned  long  offset_high,  unsigned  long offset_low, loff_t *result,\n       unsigned int whence);\n\n", "DESCRIPCION": "       La funci\u00f3n _llseek reposiciona el  puntero  del  descriptor  de  fichero  fd  hasta  (offset_high<<32)  |\n       offset_low bytes respecto al inicio del fichero, la posici\u00f3n actual del puntero, o del final del fichero,\n       dependiendo de si whence es SEEK_SET,  SEEK_CUR,  o  SEEK_END,  respectivamente.   Devuelve  la  posici\u00f3n\n       resultante en el argumento result.\n\nVALOR DEVUELTO\n       Si  no  se produce ningun error, _llseek devuelve 0. Si se produce, se devuelve el valor -1 y se asigna a\n       errno un valor que indica el tipo de error que se ha producido.\n\n", "ERRORES": "       EBADF  fd no es un descriptor de fichero abierto.\n\n       EINVAL whence no es v\u00e1lido.\n\nCONFORME A\n       Esta funci\u00f3n es espec\u00edfica de Linux, y no deber\u00eda usarse por programas que deban de ser portables.\n\nV\u00c9ASE TAMBI\u00c9N\n       lseek(2)\n\nLinux 1.2.9                                       10 Junio 1995                                        LLSEEK(2)\n"},{"NOMBRE": "       _llseek - reposiciona el puntero de lectura/escritura\n\n", "SINOPSIS": "       #include <unistd.h>\n\n       #include <linux/unistd.h>\n\n       _syscall5(int, _llseek, uint, fd, ulong, hi, ulong, lo, loff_t *, res, uint, wh);\n\n       int  _llseek(unsigned  int  fd,  unsigned  long  offset_high,  unsigned  long offset_low, loff_t *result,\n       unsigned int whence);\n\n", "DESCRIPCION": "       La funci\u00f3n _llseek reposiciona el  puntero  del  descriptor  de  fichero  fd  hasta  (offset_high<<32)  |\n       offset_low bytes respecto al inicio del fichero, la posici\u00f3n actual del puntero, o del final del fichero,\n       dependiendo de si whence es SEEK_SET,  SEEK_CUR,  o  SEEK_END,  respectivamente.   Devuelve  la  posici\u00f3n\n       resultante en el argumento result.\n\nVALOR DEVUELTO\n       Si  no  se produce ningun error, _llseek devuelve 0. Si se produce, se devuelve el valor -1 y se asigna a\n       errno un valor que indica el tipo de error que se ha producido.\n\n", "ERRORES": "       EBADF  fd no es un descriptor de fichero abierto.\n\n       EINVAL whence no es v\u00e1lido.\n\nCONFORME A\n       Esta funci\u00f3n es espec\u00edfica de Linux, y no deber\u00eda usarse por programas que deban de ser portables.\n\nV\u00c9ASE TAMBI\u00c9N\n       lseek(2)\n\nLinux 1.2.9                                       10 Junio 1995                                        LLSEEK(2)\n"},{"NOMBRE": "       afs_syscall,  break,  ftime,  gtty,  lock,  mpx,  prof,  profil,  stty,  ulimit - Llamadas al sistema sin\n       implementar\n\n", "SINOPSIS": "       Llamadas al sistema sin implementar.\n\n", "DESCRIPCION": "       Estas llamadas al sistema no est\u00e1n implementadas en la versi\u00f3n 2.4 del n\u00facleo de Linux.\n\nVALOR DEVUELTO\n       Estas llamadas al sistema siempre devuelven -1 y asignan a la variable errno el valor ENOSYS.\n\n", "OBSERVACIONES": "       D\u00e9se cuenta que ftime(3), profil(3) y ulimit(3) se implementan como funciones de biblioteca.\n\n       Algunas llamadas al sistema, como alloc_hugepages(2), free_hugepages(2),  ioperm(2),  iopl(2)  y  vm86(2)\n       s\u00f3lo existen en ciertas arquitecturas.\n\n       Algunas  llamadas  al sistema, como ipc(2) y {create,init,delete}_module(2) s\u00f3lo existen cuando el n\u00facleo\n       de Linux se construy\u00f3 con soporte para ellas.\n\nV\u00c9ASE TAMBI\u00c9N\n       obsolete(2)\n\nLinux 2.4                                         12 junio 1998                                 UNIMPLEMENTED(2)\n"},{"NOMBRE": "       lseek - reposiciona el puntero de lectura/escritura de un fichero\n\n", "SINOPSIS": "       #include <sys/types.h>\n       #include <unistd.h>\n\n       off_t lseek(int fildes, off_t offset, int whence);\n\n", "DESCRIPCION": "       La  funci\u00f3n  lseek  reposiciona  el  puntero  del descriptor de fichero fildes con el argumento offset de\n       acuerdo con la directiva whence as follows:\n\n       SEEK_SET\n              El puntero se coloca a offset bytes.\n\n       SEEK_CUR\n              El n\u00famero de bytes indicado en offset se suma a la direcci\u00f3n actual y el puntero se coloca  en  la\n              direcci\u00f3n resultante.\n\n       SEEK_END\n              El puntero se coloca al final del fichero m\u00e1s offset bytes.\n\n       La  funci\u00f3n  lseek  permite  colocar  el  puntero de fichero despu\u00e9s del final de fichero.  Si despu\u00e9s se\n       escriben datos en este punto, las lecturas siguientes de datos dentro del hueco que  se  forma  devuelven\n       ceros (hasta que realmente se escriban datos dentro de ese hueco).\n\nVALOR DEVUELTO\n       En  el  caso de una ejecuci\u00f3n correcta, lseek devuelve la posici\u00f3n del puntero resultante medida en bytes\n       desde el principio del fichero. Si se produce un error, se devuelve el valor  (off_t)-1  y  en  errno  se\n       coloca el tipo de error.\n\n", "ERRORES": "       EBADF  fildes no es un descriptor de fichero abierto.\n\n       ESPIPE fildes est\u00e1 asociado a una tuber\u00eda, socket, o FIFO.\n\n       EINVAL whence no es un valor adecuado.\n\nCONFORME A\n       SVr4, POSIX, BSD 4.3\n\n", "RESTRICCIONES": "       Algunos  dispositivos  son  incapaces  de buscar y POSIX no especifica qu\u00e9 dispositivos deben soportar la\n       b\u00fasqueda.\n\n       Restricciones espec\u00edficas de Linux: el uso de lseek sobre un dispositivo tty (terminal) devuelve  ESPIPE.\n       Otros  sistemas  devuelven el n\u00famero de caracteres escritos, usando SEEK_SET para establecer el contador.\n       Algunos dispositivos, como por ejemplo /dev/null, no provocan el error ESPIPE, pero devuelven un  puntero\n       cuyo valor es indefinido.\n\n", "OBSERVACIONES": "       La  utilizaci\u00f3n  de whence en este documento es incorrecta en ingl\u00e9s, pero se usa por motivos hist\u00f3ricos.\n       Cuando convierta c\u00f3digo antiguo, sustituya los valores para whence con las siguientes macros:\n\n       antiguo    nuevo\n       0         SEEK_SET\n       1         SEEK_CUR\n       2         SEEK_END\n       L_SET     SEEK_SET\n       L_INCR    SEEK_CUR\n\n       L_XTND    SEEK_END\n\n       SVR1-3 devuelve long en lugar de off_t, BSD devuelve int.\n\n       Observe que los descriptores de fichero creados con dup(2) o  fork(2)  comparten  el  puntero  actual  de\n       fichero, por lo que reposicionarse sobre tales ficheros puede estar sujeto a condiciones de carrera.\n\nV\u00c9ASE TAMBI\u00c9N\n       dup(2), fork(2), open(2), fseek(3)\n\nLinux                                             17 enero 1998                                         LSEEK(2)\n"},{"NOMBRE": "       stat, fstat, lstat - obtiene el estado de un fichero\n\n", "SINOPSIS": "       #include <sys/types.h>\n       #include <sys/stat.h>\n       #include <unistd.h>\n\n       int stat(const char *file_name, struct stat *buf);\n       int fstat(int filedes, struct stat *buf);\n       int lstat(const char *file_name, struct stat *buf);\n\n", "DESCRIPCION": "       Estas  funciones  devuelven  informaci\u00f3n  del fichero especificado. No se necesitan derechos de acceso al\n       fichero para conseguir la  informaci\u00f3n  pero  s\u00ed  se  necesitan  derechos  de  b\u00fasqueda  para  todos  los\n       directorios del camino al fichero.\n\n       stat examina el fichero al que apunta file_name y llena buf.\n\n       lstat  es  id\u00e9ntico a stat, salvo en caso de que se trate de un enlace simb\u00f3lico, en cuyo caso se examina\n       el enlace mismo, no el fichero al que hace referencia.\n\n       fstat es id\u00e9ntico a stat, pero s\u00f3lo el fichero abierto apuntado por  filedes  (tal  y  como  lo  devuelve\n       open(2)) es examinado en lugar de file_name.\n\n       Todos devuelven una estructura stat, que contien los siguientes campos:\n\n              struct stat {\n                  dev_t         st_dev;      /* dispositivo */\n                  ino_t         st_ino;      /* inodo */\n                  mode_t        st_mode;     /* protecci\u00f3n */\n                  nlink_t       st_nlink;    /* n\u00famero de enlaces f\u00edsicos */\n                  uid_t         st_uid;      /* ID del usuario propietario */\n                  gid_t         st_gid;      /* ID del grupo propietario */\n                  dev_t         st_rdev;     /* tipo dispositivo (si es\n                                                dispositivo inodo) */\n                  off_t         st_size;     /* tama\u00f1o total, en bytes */\n                  blksize_t     st_blksize;  /* tama\u00f1o de bloque para el\n                                                sistema de ficheros de E/S */\n                  blkcnt_t      st_blocks;   /* n\u00famero de bloques asignados */\n                  time_t        st_atime;    /* hora \u00faltimo acceso */\n                  time_t        st_mtime;    /* hora \u00faltima modificaci\u00f3n */\n                  time_t        st_ctime;    /* hora \u00faltimo cambio */\n              };\n\n       El  valor  st_size da el tama\u00f1o del fichero (si es un fichero regular o un enlace simb\u00f3lico) en bytes. El\n       tama\u00f1o de un enlace simb\u00f3lico es la longitud del nombre de ruta que contiene, sin contar el caracter  NUL\n       final.\n\n       El  valor  st_blocks  da  el  tama\u00f1o  del  fichero  en  bloques  de 512 bytes.  (\u00c9ste puede ser menor que\n       st_size/512 p.e. cuando el fichero tenga huecos.)  El valor st_blksize da el tama\u00f1o de bloque \"preferido\"\n       para  operaciones  de  E/S eficientes sobre el sistema de ficheros.  (Escribir en un fichero en porciones\n       m\u00e1s peque\u00f1as puede producir una secuencia leer-modificar-reescribir ineficiente).\n\n       No todos los sistemas de ficheros en Linux implementan todos  los  campos  de  hora.   Algunos  tipos  de\n       sistemas  de  ficheros  permiten  el  montaje  de  tal  manera que los accesos al fichero no provocan una\n       actualizaci\u00f3n del campo st_atime (Vea `noatime' en mount(8).)\n\n       El campo st_atime es modificado por accesos al fichero, p.e. por execve(2), mknod(2), pipe(2), utime(2) y\n       read(2) (de m\u00e1s de cero bytes). Otras rutinas, como mmap(2), pueden o no actualizar st_atime.\n\n       El  campo  st_mtime  es  modificado por cambios en el fichero, p.e. por mknod(2), truncate(2), utime(2) y\n       write(2) (de m\u00e1s de cero bytes).  Adem\u00e1s, el campo  st_mtime  de  un  directorio  es  modificado  por  la\n       creaci\u00f3n o borrado de ficheros en dicho directorio.  El campo st_mtime no es modificado por cambios en el\n       propietario, grupo, contador de enlaces duros, o modo.\n\n       El campo st_ctime es modificado por  la  escritura  o  por  cambiar  informaci\u00f3n  del  inodo  (es  decir,\n       propietario, grupo, contador de enlaces, modo, etc.).\n\n       Se definen las siguientes macros POSIX para comprobar el tipo de fichero:\n\n              S_ISLNK(m)  es un enlace simb\u00f3lico?\n\n              S_ISREG(m)  un fichero regular?\n\n              S_ISDIR(m)  un directorio?\n\n              S_ISCHR(m)  un dispositivo de caracteres?\n\n              S_ISBLK(m)  un dispositivo de bloques?\n\n              S_ISFIFO(m) una tuber\u00eda nombrada (fifo)?\n\n              S_ISLNK(m)  un enlace simb\u00f3lico? (No presente en POSIX.1-1996.)\n\n              S_ISSOCK(m) un conector (socket)? (No presente en POSIX.1-1996.)\n\n       Se definen las siguientes banderas para el campo st_mode:\n\n       S_IFMT     0017000   m\u00e1scara de bits para los campos de bit del tipo\n                            de fichero (no POSIX)\n       S_IFSOCK   0140000   conector (no POSIX)\n       S_IFLNK    0120000   enlace simb\u00f3lico (no POSIX)\n       S_IFREG    0100000   fichero regular (no POSIX)\n       S_IFBLK    0060000   dispositivo de bloques (no POSIX)\n       S_IFDIR    0040000   directorio (no POSIX)\n       S_IFCHR    0020000   dispositivo de caracteres (no POSIX)\n       S_IFIFO    0010000   fifo o tuber\u00eda nombrada (no POSIX)\n       S_ISUID    0004000   poner bit UID\n       S_ISGID    0002000   poner bit GID\n       S_ISVTX    0001000   sticky bit (no POSIX)\n       S_IRWXU    00700     usuario (propietario del fichero) tiene permisos\n                            de lectura, escritura y ejecuci\u00f3n\n       S_IRUSR    00400     usuario tiene premiso de lectura (igual que\n                            S_IREAD, que no es POSIX)\n       S_IWUSR    00200     usuario tiene premiso de escritura (igual que\n                            S_IWRITE, que no es POSIX)\n       S_IXUSR    00100     usuario tiene premiso de ejecuci\u00f3n (igual que\n                            S_IEXEC, que no es POSIX)\n       S_IRWXG    00070     grupo tiene permisos de lectura, escritura y\n                            ejecuci\u00f3n\n       S_IRGRP    00040     grupo tiene permiso de lectura\n       S_IWGRP    00020     grupo tiene permiso de escritura\n       S_IXGRP    00010     grupo tiene permiso de ejecuci\u00f3n\n       S_IRWXO    00007     otros tienen permisos de lectura, escritura y\n                            ejecuci\u00f3n\n       S_IROTH    00004     otros tienen permiso de lectura\n       S_IWOTH    00002     otros tienen permiso de escritura\n       S_IXOTH    00001     otros tienen permiso de ejecuci\u00f3n\n\n       El  bit  SETGID  (S_ISGID)  tiene  varios usos especiales: para un directorio, indica que se va a usar la\n       sem\u00e1ntica BSD para el directorio: los ficheros creados all\u00ed heredar\u00e1n su GID del directorio, no  del  GID\n       efectivo del proceso que crea cada fichero, y los directorios creados all\u00ed tambi\u00e9n tendr\u00e1n el bit S_ISGID\n       activo.  Para un fichero que no tiene el bit de ejecuci\u00f3n del  grupo  (S_IXGRP)  activo,  indica  bloqueo\n       obligatorio de ficheros/registros.\n\n       El  bit  `sticky'  (S_ISVTX)  en  un directorio significa que un fichero de ese directorio s\u00f3lo puede ser\n       renombrado o borrado por el propietario  del  fichero,  por  el  propietario  del  directorio  y  por  el\n       superusuario.\n\nVALOR DEVUELTO\n       Se devuelve cero si hubo \u00e9xito. Si hubo error, se devuelve -1, y errno es actualizado apropiadamente.\n\n", "ERRORES": "       EBADF  filedes incorrecto.\n\n       ENOENT No existe un componente del camino file_name o el camino es una cadena vac\u00eda.\n\n       ENOTDIR\n              Un componente del camino no es un directorio.\n\n       ELOOP  Se han encontrado demasiados enlaces simb\u00f3licos al recorrer el camino.\n\n       EFAULT Direcci\u00f3n err\u00f3nea.\n\n       EACCES Permiso denegado.\n\n       ENOMEM Fuera de memoria (es decir, memoria del n\u00facleo).\n\n       ENAMETOOLONG\n              Nombre de fichero demasiado largo.\n\nCONFORME A\n       Las  llamadas  stat  y fstat conforman con SVr4, SVID, POSIX, X/OPEN y BSD 4.3. La llamada lstat conforma\n       con 4.3BSD y SVr4.  SVr4 documenta condiciones de error adicionales de fstat: EINTR, ENOLINK y EOVERFLOW.\n       SVr4  documenta  condiciones  de  error  adicionales de stat y lstat: EACCES, EINTR, EMULTIHOP, ENOLINK y\n       EOVERFLOW.  El uso de los campos st_blocks y st_blksize puede ser poco portable. (Fueron introducidos  en\n       BSD.  No  est\u00e1n  especificados  por  POSIX. La interpretaci\u00f3n difiere entre sistemas y posiblemente en un\n       mismo sistema cuando est\u00e1n involucrados montajes NFS).\n\n       POSIX no describe los bits S_IFMT, S_IFSOCK, S_IFLNK,  S_IFREG,  S_IFBLK,  S_IFDIR,  S_IFCHR,  S_IFIFO  y\n       S_ISVTX,  pero  en su lugar demanda el uso de las macros S_ISDIR(), etc. Las macros S_ISLNK y S_ISSOCK no\n       est\u00e1n en POSIX.1-1996, pero ambas formar\u00e1n parte del pr\u00f3ximo est\u00e1ndar POSIX; la primera es de  SVID  4v2,\n       la \u00faltima de SUSv2.\n\n       Unix  V7  (y sistemas posteriores) ten\u00edan S_IREAD, S_IWRITE, S_IEXEC, donde POSIX prescribe los sin\u00f3nimos\n       S_IRUSR, S_IWUSR, S_IXUSR.\n\nOTROS SISTEMAS\n       Valores que han estado (o est\u00e1n) en uso en varios sistemas:\n\n       hex    nombre     ls   octal    descripci\u00f3n\n       f000   S_IFMT          170000   M\u00e1scara para el tipo de fichero\n       0000                   000000   SCO: nodo-i fuera de servicio\n                                       BSD: tipo desconocido\n                                       SVID-v2 y XPG2: tienen tanto 0 como\n                                       0100000 para ficheros ordinarios\n       1000   S_IFIFO    p|   010000   Fifo (tuber\u00eda con nombre)\n       2000   S_IFCHR    c    020000   V7: fichero especial de caracteres\n       3000   S_IFMPC         030000   V7: fichero especial de caracteres\n                                       multiplexados\n       4000   S_IFDIR    d/   040000   V7: directorio\n       5000   S_IFNAM         050000   XENIX: fichero especial con nombre\n                                       con dos subtipos, distinguidos\n                                       por los valores st_rdev 1, 2:\n       0001   S_INSEM    s    000001   XENIX: subtipo sem\u00e1foro de IFNAM\n       0002   S_INSHD    m    000002   XENIX: subtipo datos compartidos\n                                       de IFNAM\n       6000   S_IFBLK    b    060000   V7: fichero especial de bloques\n       7000   S_IFMPB         070000   V7: fichero especial de bloques\n                                       multiplexados\n       8000   S_IFREG    -    100000   V7: fichero regular\n\n       9000   S_IFCMP         110000   VxFS: fichero comprimido\n       9000   S_IFNWK    n    110000   HP-UX: fichero especial de red\n       a000   S_IFLNK    l@   120000   BSD: enlace simb\u00f3lico\n       b000   S_IFSHAD        130000   Solaris: nodo-i sombra para ACL\n                                       (no visto por el espacio de usuario)\n       c000   S_IFSOCK   s=   140000   BSD: conector (tambi\u00e9n \"S_IFSOC\" en VxFS)\n       d000   S_IFDOOR   D>   150000   Solaris: puerta\n       e000   S_IFWHT    w%   160000   BSD: `whiteout'(no usado para nodos-i)\n       0200   S_ISVTX         001000   V7: `sticky bit': salvar el c\u00f3digo\n                                       intercambiado incluso despu\u00e9s de usarse\n                                       SVID-v2: reservado\n                                       SunOS: En ficheros no directorios: no\n                                       colocar en cache este fichero\n                                       SVID-v4.2: En directorios: opci\u00f3n de\n                                       elminaci\u00f3n restringida\n       0400   S_ISGID         002000   V7: SETGID al ejecuctar\n                                       Para directorios: usar sem\u00e1ntica BSD\n                                       para propagaci\u00f3n del GID\n       0400   S_ENFMT         002000   SysV: Aplicar el bloqueo del fichero\n                                       (compartido con S_ISGID)\n       0800   S_ISUID         004000   V7: SETUID al ejecutar\n       0800   S_CDF           004000   HP-UX: el directorio es un fichero\n                                       dependiente del contexto\n\n       Una orden `sticky' apareci\u00f3n en AT&T UNIX Version 32V.\n\nV\u00c9ASE TAMBI\u00c9N\n       chmod(2), chown(2), readlink(2), utime(2)\n\nLinux                                             13 mayo 1998                                           STAT(2)\n"},{"NOMBRE": "       madvise - aconseja sobre el uso de memoria\n\n", "SINOPSIS": "       #include <sys/mman.h>\n\n       int madvise(void *start, size_t length, int advice);\n\n", "DESCRIPCION": "       La llamada al sistema madvise aconseja al n\u00facleo sobre como manejar la paginaci\u00f3n de entrada/salida en el\n       rango de direcciones que comienza en start y tiene de longitud length bytes.  Permite  a  una  aplicaci\u00f3n\n       decirle  al n\u00facleo como espera usar algunas zonas de memoria compartida o mapeada, para que as\u00ed el n\u00facleo\n       pueda elegir las t\u00e9cnicas apropiadas de pre-lectura y cach\u00e9.  Esta llamada no influye en la sem\u00e1ntica  de\n       la  aplicaci\u00f3n  (excepto  en  el  caso de MADV_DONTNEED), pero puede influir en su rendimiento. El n\u00facleo\n       puede ignorar libremente este consejo.\n\n       El consejo se indica en el par\u00e1metro advice que puede tomar los valores\n\n       MADV_NORMAL\n              Trato no especial. \u00c9ste es el valor por defecto.\n\n       MADV_RANDOM\n              Espera las referencias a p\u00e1ginas en orden aleatorio.  (Por tanto, la pre-lectura puede  ser  menos\n              \u00fatil de lo habitual.)\n\n       MADV_SEQUENTIAL\n              Espera  las  referencias  a p\u00e1ginas en orden secuencial.  (Por tanto, las p\u00e1ginas en el rango dado\n              pueden ser accedidas con pre-lectura y liberadas poco despu\u00e9s del acceso.)\n\n       MADV_WILLNEED\n              Espera alg\u00fan acceso en un futuro cercano.  (Por tanto, ser\u00eda buena idea leer algunas  p\u00e1ginas  por\n              adelantado.)\n\n       MADV_DONTNEED\n              No  esperes ning\u00fan acceso en un futuro cercano (por el momento, la aplicaci\u00f3n ha terminado de usar\n              el rango especificado, por lo que el n\u00facleo puede liberar recursos asociados  a  la  misma).   Los\n              accesos  siguientes  a p\u00e1ginas en este rango tendr\u00e1n exito, pero producir\u00e1n o bien que se vuelva a\n              cargar el contenido de memoria desde el fichero mapeado subyacente (v\u00e9ase  mmap)  o  bien  p\u00e1ginas\n              llenas de ceros para mapeos sin fichero subyacente.\n\nVALOR DEVUELTO\n       En  caso  de  \u00e9xito  madvise  devuelve  cero. En caso de error, devuelve -1 y modifica errno con el valor\n       apropiado.\n\n", "ERRORES": "       EINVAL el valor len es negativo, start no se encuentra en un l\u00edmite de p\u00e1gina,  advice  no  es  un  valor\n              v\u00e1lido,   o   la   aplicaci\u00f3n  est\u00e1  intentado  liberar  p\u00e1ginas  bloqueadas  o  compartidas  (con\n              MADV_DONTNEED).\n\n       ENOMEM las direcciones en el rango especificado no est\u00e1n mapeadas actualmente, o est\u00e1n fuera del rango de\n              direcciones del proceso.\n\n       ENOMEM (para MADV_WILLNEED) Memoria insuficiente - paginaci\u00f3n fallida.\n\n       EIO    (para  MADV_WILLNEED)  La  paginaci\u00f3n  de  esta  \u00e1rea  exceder\u00eda el tama\u00f1o m\u00e1ximo para el conjunto\n              residente.\n\n       EBADF  existe la correspondencia, pero el \u00e1rea mapeada no se corresponde con un fichero.\n\n       EAGAIN un recurso del n\u00facleo est\u00e1 temporalmente no disponible.\n\nOBSERVACIONES LINUX\n       La implementaci\u00f3n actual de Linux (2.4.0) ve esta llamada al sistema m\u00e1s  como  una  orden  que  como  un\n       consejo  y por lo tanto puede devolver un error cuando no puede llevar a cabo lo que habitualmente podr\u00eda\n       en respuesta a este consejo. (V\u00e9ase la descripci\u00f3n de ERRORES arriba.)   \u00c9ste  es  un  comportamiento  no\n       \u00e9standar.\n\n       La implementaci\u00f3n de Linux requiere que la direcci\u00f3n start comienze en un l\u00edmite de p\u00e1gina, y permite que\n       length sea cero. Si algunas partes del rango de direcciones especificado no est\u00e1n mapeadas, la versi\u00f3n de\n       Linux de madvise las ignora y aplica la llamada sobre el resto (pero devuelve ENOMEM como deber\u00eda ser).\n\n", "HISTORIA": "       La funci\u00f3n madvise apareci\u00f3 por primera vez en 4.4BSD.\n\nCONFORME A\n       POSIX.1b (POSIX.4).  POSIX 1003.1-2001 describe posix_madvise con las constantes POSIX_MADV_NORMAL, etc.,\n       con un comportamiento parecido al descrito aqu\u00ed. Hay un posix_fadvise similar para acceso a ficheros.\n\nV\u00c9ASE TAMBI\u00c9N\n       getrlimit(2), mmap(2), mincore(2), mprotect(2), msync(2), munmap(2)\n\nLinux 2.4.5                                       10 junio 2001                                       MADVISE(2)\n"},{"NOMBRE": "       mincore - obtiene informaci\u00f3n de qu\u00e9 p\u00e1ginas est\u00e1n en memoria\n\n", "SINOPSIS": "       #include <unistd.h>\n       #include <sys/mman.h>\n\n       int mincore(void *start, size_t length, unsigned char *vec);\n\n", "DESCRIPCION": "       La  funci\u00f3n  mincore  solicita un vector describiendo qu\u00e9 p\u00e1ginas de un fichero est\u00e1n en memoria y pueden\n       ser le\u00eddas sin acceder a disco. El n\u00facleo suministrar\u00e1 los datos para los length bytes  siguientes  a  la\n       direcci\u00f3n  start.   Cuando  regrese,  el n\u00facleo habr\u00e1 rellenado vec con bytes, de los cuales el bit menos\n       significativo indica si una p\u00e1gina est\u00e1 residente en memoria.\n\n       Para que mincore tenga \u00e9xito, start debe estar situada en un l\u00edmite de  p\u00e1gina.  Es  responsabilidad  del\n       invocador  redondear  este valor a la p\u00e1gina m\u00e1s cercana. El par\u00e1metro length no necesita ser un m\u00faltiplo\n       del tama\u00f1o de p\u00e1gina. El vector vec debe ser lo suficientemente  grande  para  contener  length/PAGE_SIZE\n       bytes.  El tama\u00f1o de p\u00e1gina puede obtenerse con getpagesize(2).\n\nVALOR DEVUELTO\n       En  caso de \u00e9xito, mincore devuelve cero.  En caso de error, se devuelve -1, y errno es modificado con el\n       valor apropiado.\n\n", "ERRORES": "       EAGAIN el n\u00facleo se ha quedado temporalmente sin recursos\n\n       EINVAL start no es m\u00faltiplo del tama\u00f1o de p\u00e1gina, o len tiene un valor no positivo\n\n       EFAULT vec apunta a una direcci\u00f3n inv\u00e1lida\n\n       ENOMEM address a address + length contiene memoria sin ubicar, o la memoria no es parte de un fichero.\n\n", "FALLOS": "       mincore deber\u00eda devolver un vector de bits y no un vector de bytes, A  partir  de  la  versi\u00f3n  2.4.5  de\n       Linux,  no es posible obtener informaci\u00f3n sobre la residencia en memoria de p\u00e1ginas no respaldadas por un\n       fichero.  En otras palabras, una llamada a mincore sobre una  regi\u00f3n  an\u00f3nima  devuelta  por  mmap(2)  no\n       funciona  y  asigna  a  errno  el  valor  ENOMEM. A menos que las p\u00e1ginas est\u00e9n bloqueadas en memoria, el\n       contenido de vec puede estar desfasado para cuando alcancen el espacio de usuario.\n\nCONFORME A\n       mincore no parece ser parte de POSIX o de la Single Unix Specification.\n\n", "HISTORIA": "       La funci\u00f3n mincore() apareci\u00f3 por primera vez en 4.4BSD.\n\n", "DISPONIBILIDAD": "       Presente desde Linux 2.3.99pre1 y glibc 2.2.\n\nV\u00c9ASE TAMBI\u00c9N\n       getpagesize(2), mmap(2)\n\nLinux 2.4.5                                       3 junio 2001                                        MINCORE(2)\n"},{"NOMBRE": "       mkdir - crea directorios\n\n", "SINOPSIS": "       mkdir [opciones] directorio...\n\n       Opciones de POSIX: [-p] [-m modo]\n\n       Opciones de GNU (en la forma m\u00e1s corta): [-p] [-m modo] [--verbose] [--help] [--version] [--]\n\n", "DESCRIPCION": "       mkdir crea directorios con los nombres especificados.\n\n       De  forma  predeterminada,  los  permisos  de  los  directorios creados son 0777 (`a+rwx') menos los bits\n       puestos a 1 en la umask.\n\n", "OPCIONES": "       -m modo, --mode=modo\n              Establece los permisos de los directorios creados a modo, que puede ser simb\u00f3lico como en chmod(1)\n              y entonces emplea el modo predeterminado como el punto de partida.\n\n       -p, --parents\n              Crea  los  directorios  padre  que  falten  para cada argumento directorio.  Los permisos para los\n              directorios padre se ponen a la umask modificada por `u+rwx'.  No  hace  caso  de  argumentos  que\n              correspondan a directorios existentes. (As\u00ed, si existe un directorio /a, entonces `mkdir /a' es un\n              error, pero `mkdir -p /a' no lo es.)\n\n       --verbose\n              Muestra un mensaje para cada directorio creado. Esto es m\u00e1s \u00fatil con --parents.\n\nOPCIONES EST\u00c1NDARES DE GNU\n       --help Muestra un mensaje en la salida est\u00e1ndar sobre el modo de empleo y acaba con estado de \u00e9xito.\n\n       --version\n              Muestra en la salida est\u00e1ndar informaci\u00f3n sobre la versi\u00f3n, y luego acaba con estado de \u00e9xito.\n\n       --     Termina con la lista de opciones.\n\n", "ENTORNO": "       Las variables LANG, LC_ALL, LC_CTYPE y LC_MESSAGES tienen los significados usuales.\n\nCONFORME A\n       POSIX 1003.2.\n\n", "OBSERVACIONES": "       Esta p\u00e1gina describe mkdir seg\u00fan se encuentra en el paquete fileutils-4.0; otras versiones pueden diferir\n       un  poco.  Env\u00ede  por  correo electr\u00f3nico correcciones y adiciones a la direcci\u00f3n aeb@cwi.nl.  Informe de\n       fallos en el programa a fileutils-bugs@gnu.ai.mit.edu.\n\nGNU fileutils 4.0                               Noviembre de 1998                                       MKDIR(1)\n"},{"NOMBRE": "       mknod - crea ficheros especiales de bloques o caracteres\n\n", "SINOPSIS": "       mknod [opciones] nombre {bc} mayor menor\n       mknod [opciones] nombre p\n\n       Opciones de GNU (en la forma m\u00e1s corta): [-m modo] [--help] [--version] [--]\n\n", "DESCRIPCION": "       mknod  crea  un  FIFO  (tuber\u00eda  con  nombre),  un  fichero especial de bloques, o un fichero especial de\n       caracteres, con el nombre especificado.\n\n       Un fichero especial es una tripleta (booleano, entero, entero) almacenado en el sistema de ficheros.   El\n       valor  l\u00f3gico  escoge  entre fichero especial de caracteres y fichero especial de bloque. Los dos enteros\n       son los n\u00fameros de dispositivo mayor y menor.\n\n       As\u00ed, un fichero especial casi no ocupa sitio en el disco, y se emplea s\u00f3lo para la  comunicaci\u00f3n  con  el\n       sistema  operativo,  no  para  almacenamiento  de  datos.  A menudo los ficheros especiales se refieren a\n       dispositivos f\u00edsicos (disco, cinta, terminal, impresora) o a servicios del sistema  operativo  (dev/null,\n       /dev/random).\n\n       Los ficheros especiales de bloque son dispositivos similares a discos (donde se puede acceder a los datos\n       dado un n\u00famero de bloque, y p.ej. tiene sentido tener un cach\u00e9 de bloques).  Todos los otros dispositivos\n       son  ficheros  especiales  de  caracteres.  (Hace tiempo la distinci\u00f3n era diferente: la E/S a un fichero\n       especial de caracteres ser\u00eda sin b\u00fafer, y a un fichero especial de bloques, con b\u00fafer.)\n\n       La orden mknod es la que crea ficheros de este tipo.\n\n       El argumento que sigue a nombre especifica el tipo de fichero a construir:\n\n              p      para un FIFO\n\n              b      para un fichero especial de bloques (con b\u00fafer)\n\n              c      para un fichero especial de caracteres (sin b\u00faferes)\n\n       La versi\u00f3n de GNU de mknod permite que u (`unbuffered') sea un sin\u00f3nimo de c.\n\n       Cuando se construye un fichero especial de bloques o caracteres, hay que dar tras el tipo del fichero los\n       n\u00fameros  de  dispositivo  mayor  y  menor  (en  base diez, o en octal con un 0 inicial; la versi\u00f3n de GNU\n       tambi\u00e9n permite en hexadecimal con 0x inicial).  Por omisi\u00f3n, los permisos de los  ficheros  creados  son\n       0666 (`a+rw') menos los bits puestos a 1 en la umask.\n\n", "OPCIONES": "       -m modo, --mode=modo\n              Establece  los permisos de los ficheros creados a modo, que es simb\u00f3lico como en chmod(1) y emplea\n              el modo predeterminado como punto de partida.\n\nOPCIONES EST\u00c1NDARES DE GNU\n       --help Muestra un mensaje en la salida est\u00e1ndar sobre el modo de empleo y acaba con estado de \u00e9xito.\n\n       --version\n              Muestra en la salida est\u00e1ndar informaci\u00f3n sobre la versi\u00f3n, y luego acaba con estado de \u00e9xito.\n\n       --     Termina con la lista de opciones.\n\n", "ENTORNO": "       Las variables LANG, LC_ALL, LC_CTYPE y LC_MESSAGES tienen los significados usuales.\n\nCONFORME A\n       POSIX no describe esta orden puesto que no es transportable. y recomienda emplear  mkfifo(1)  para  hacer\n       FIFOs.  SVID tiene una orden /etc/mknod con la sintaxis de arriba, pero sin la opci\u00f3n de modo.\n\n", "OBSERVACIONES": "       En  un  sistema  Linux  (versi\u00f3n  1.3.22 o m\u00e1s nueva) el fichero /usr/src/linux/Documentation/devices.tex\n       contiene una lista de dispositivos con su nombre, tipo y n\u00fameros mayor y menor.\n\n       La presente p\u00e1gina describe mknod seg\u00fan se encuentra en el paquete fileutils-4.0; otras versiones  pueden\n       diferir  un  poco.  Env\u00ede  por  correo  electr\u00f3nico  correcciones  y adiciones a la direcci\u00f3n aeb@cwi.nl.\n       Informe de fallos en el programa a fileutils-bugs@gnu.ai.mit.edu.\n\nV\u00c9ASE TAMBI\u00c9N\n       chmod(1), mkfifo(1), mknod(2).\n\nGNU fileutils 4.0                               Noviembre de 1998                                       MKNOD(1)\n"},{"NOMBRE": "       mlock - desactiva la paginaci\u00f3n para algunas zonas de memoria\n\n", "SINOPSIS": "       #include <sys/mman.h>\n\n       int mlock(const void *addr, size_t len);\n\n", "DESCRIPCION": "       mlock  desactiva  la  paginaci\u00f3n  para la memoria en el grupo de direcciones que comienza en la direcci\u00f3n\n       addr con longitud len bytes. Se garantiza que todas las p\u00e1ginas que contienen algunas de esas direcciones\n       estar\u00e1n  residentes  en  RAM  cuando  la llamada al sistema mlock termine sin error y permanecer\u00e1n en RAM\n       hasta que dichas p\u00e1ginas sean desbloquedadas con  munlock  o  munlockall,  hasta  que  las  p\u00e1ginas  sean\n       desalojadas  v\u00eda  munmap, o hasta que termine el proceso o comience otro programa con exec.  Los procesos\n       hijos creados mediante fork no heredan los bloqueos de p\u00e1ginas.\n\n       El bloqueo de memoria tiene dos aplicaciones fundamentales: algoritmos en  tiempo  real  y  procesado  de\n       datos  de  alta seguridad. Las aplicaciones en tiempo real requieren una temporizaci\u00f3n determinista, y la\n       paginaci\u00f3n es una de las causas principales de retardos inesperados en la ejecuci\u00f3n de  programas,  junto\n       con  la  planificaci\u00f3n (scheduling). Las aplicaciones en tiempo real suelen conmutar a un planificador en\n       tiempo real con sched_setscheduler.  El software de seguridad criptogr\u00e1fico a menudo  trabaja  con  bytes\n       cr\u00edticos tales como contrase\u00f1as o claves secretas. Como resultado de la paginaci\u00f3n, estos secretos pueden\n       ser transferidos a un medio de almacenamiento de intercambio persistente, donde podr\u00eda ser le\u00eddo  por  el\n       enemigo mucho despu\u00e9s de que el programa de seguridad haya borrado los secretos de la RAM y terminado.\n\n       Los  bloqueos  de  memoria  no  son  acumulativos,  es decir, si una p\u00e1gina ha sido bloqueda varias veces\n       mediante llamadas a mlock o mlockall ser\u00e1 desbloqueada con una simple llamada a  munlock  para  el  rango\n       correspondiente  o  con  munlockall.   Las  p\u00e1ginas  que son asociadas a varias zonas o a varios procesos\n       permanecen bloqueadas en RAM mientras lo est\u00e9n por alguna zona o proceso.\n\n       En los sistemas POSIX con mlock y munlock disponibles, se define _POSIX_MEMLOCK_RANGE en <unistd.h> y  el\n       valor de PAGESIZE de <limits.h> indica el n\u00famero de bytes por p\u00e1gina.\n\n", "OBSERVACIONES": "       Con  la  llamada  al  sistema  de  Linux, addr se redondea hacia abajo autom\u00e1ticamente hacia el l\u00edmite de\n       p\u00e1gina m\u00e1s cercano.  Sin embargo, POSIX 1003.1-2001 permite una implementaci\u00f3n que requiere que addr est\u00e9\n       en situado un l\u00edmite de p\u00e1gina, por lo que las aplicaciones deber\u00edan asegurar este requisito.\n\nVALOR DEVUELTO\n       En  caso  de \u00e9xito, mlock devuelve cero. Si hay error, se devuelve -1, errno se activa convenientemente y\n       no se realiza ning\u00fan cambio en ning\u00fan bloqueo en el espacio de direcciones del proceso.\n\n", "ERRORES": "       ENOMEM Alguna parte del rango de direcciones  no  corresponde  a  p\u00e1ginas  asociadas  en  el  espacio  de\n              direcciones  del  proceso  o  el  proceso  intent\u00f3  exceder el n\u00famero m\u00e1ximo de p\u00e1ginas bloqueadas\n              permitido.\n\n       EPERM  El proceso invocador no tiene los privilegios necesarios. S\u00f3lo se permite bloquear p\u00e1ginas  a  los\n              procesos del superusuario.\n\n       EINVAL len no era un n\u00famero positivo.\n\nCONFORME A\n       POSIX.1b, SVr4.  SVr4 a\u00f1ade un c\u00f3digo de error adicional (EAGAIN).\n\nV\u00c9ASE TAMBI\u00c9N\n       mlockall(2), munlock(2), munlockall(2), munmap(2), setrlimit(2)\n\nLinux 1.3.43                                    26 noviembre 1995                                       MLOCK(2)\n"},{"NOMBRE": "       mlockall - desactiva la paginaci\u00f3n para el proceso invocador\n\n", "SINOPSIS": "       #include <sys/mman.h>\n\n       int mlockall(int flags);\n\n", "DESCRIPCION": "       mlockall  desactiva  la  paginaci\u00f3n  para  todas  las  p\u00e1ginas asociadas en el espacio de direcciones del\n       proceso que hace la llamada. Esto incluye las p\u00e1ginas del c\u00f3digo, de los datos y del  segmento  de  pila,\n       as\u00ed  como  las  bibliotecas  compartidas,  datos  de  n\u00facleo  en espacio de usuario, memoria compartida y\n       ficheros asociados a memoria. Se garantiza que todas las p\u00e1ginas  asociadas  estar\u00e1n  en  RAM  cuando  la\n       llamada  al  sistema  mlockall  regrese  con  \u00e9xito, y se garantiza que permanecer\u00e1n en RAM hasta que las\n       p\u00e1ginas se desbloqueen de nuevo mediante munlock o munlockall o hasta que el proceso  termine  o  empiece\n       otro  programa debido a la llamada exec.  Los procesos hijos no heredan bloqueos de p\u00e1gina a trav\u00e9s de un\n       fork.\n\n       El bloqueo de memoria tiene dos aplicaciones principales: algoritmos de tiempo real  y  procesamiento  de\n       datos  de  alta  seguridad.  Las  aplicaciones en tiempo real requieren tiempos deterministas, y, como la\n       planificaci\u00f3n, la paginaci\u00f3n es una de las principales causas de retrasos inesperados en la ejecuci\u00f3n  de\n       programas. Las aplicaciones de tiempo real normalmente tambi\u00e9n cambiar\u00e1n a un planificador de tiempo real\n       con sched_setscheduler.  Los programas de seguridad criptogr\u00e1ficos a menudo manejan bytes  cr\u00edticos  como\n       contrase\u00f1as  o  claves  secretas  como estructuras de datos. Como resultado de la paginaci\u00f3n, estos datos\n       secretos pueden transferirse a un medio de almacenamiento permanente como resultado del trasiego  (swap),\n       donde  podr\u00edan  ser accesibles al enemigo bastante tiempo despu\u00e9s de que el programa de seguridad hubiera\n       terminado y borrado los datos secretos de la  RAM.  Para  aplicaciones  de  seguridad,  s\u00f3lo  tienen  que\n       bloquearse partes peque\u00f1as de la memoria, para lo cual se dispone de mlock.\n\n       El  par\u00e1metro  flags  puede  construirse  aplicando  el  operador  l\u00f3gico de bits O (OR) a las siguientes\n       constantes:\n\n       MCL_CURRENT Bloquea todas las p\u00e1ginas que est\u00e1n asociadas actualmente en el espacio  de  direcciones  del\n                   proceso.\n\n       MCL_FUTURE  Bloquea  todas  las  p\u00e1ginas  que  en el futuro se asociar\u00e1n en el espacio de direcciones del\n                   proceso. \u00c9stas podr\u00edan ser, por ejemplo, p\u00e1ginas nuevas requeridas  por  una  pila  y  mont\u00f3n\n                   crecientes as\u00ed como nuevos ficheros asociados a memoria o regiones de memoria compartida.\n\n       Si  se  ha  especifiado  MCL_FUTURE  y  el  n\u00famero de p\u00e1ginas bloqueadas excede el l\u00edmite superior de las\n       p\u00e1ginas bloqueadas permitidas, entonces la llamada al  sistema  que  haya  causado  la  nueva  asociaci\u00f3n\n       fallar\u00e1 con ENOMEM.  Si estas nuevas p\u00e1ginas han sido asociadas por la pila creciente, entonces el n\u00facleo\n       denegar\u00e1 la expansi\u00f3n de la pila y mandar\u00e1 una se\u00f1al SIGSEGV.\n\n       Los procesos en tiempo real deber\u00edan reservar bastantes p\u00e1ginas bloqueadas antes de entrar en la  secci\u00f3n\n       cr\u00edtica  de  tiempo, de forma que ninguna llamada a funci\u00f3n pueda provocar un fallo de p\u00e1gina. Esto puede\n       lograrse llamando a una funci\u00f3n que tenga una variable autom\u00e1tica suficientemente grande y que escriba en\n       la  memoria  ocupada  por  este  vector  grande,  para  tocar estas p\u00e1ginas de la pila. De esta forma, se\n       asociar\u00e1n bastantes p\u00e1ginas para la pila y se pueden bloquear en la RAM. Las escrituras falsas asegurar\u00e1n\n       que ni siquiera ocurran fallos de p\u00e1gina de copia-en-escritura en la secci\u00f3n cr\u00edtica.\n\n       Los  bloqueos  de  memoria  no  se  apilan;  esto  es, las p\u00e1ginas que hayan sido bloqueadas varias veces\n       mediante llamadas a mlockall o a mlock se desbloquear\u00e1n con una simple llamada a munlockall.  Las p\u00e1ginas\n       que  est\u00e9n  asociadas a varias localizaciones o por varios procesos permanecen bloqueadas en RAM mientras\n       que est\u00e9n bloqueadas al menos en una localizaci\u00f3n o al menos por un proceso.\n\n       En sistemas POSIX en los cuales est\u00e9n disponibles mlockall y  munlockall,  se  define  _POSIX_MEMLOCK  en\n       <unistd.h>.\n\nVALOR DEVUELTO\n       En  caso  de \u00e9xito, mlockall devuelve cero. En caso de error, se devuelve -1 y se pone un valor apropiado\n       en errno.\n\n", "ERRORES": "       ENOMEM El proceso intent\u00f3 excederse en el n\u00famero m\u00e1ximo de p\u00e1ginas bloqueadas permitido.\n\n       EPERM  El proceso que hace la llamada no tiene los privilegios apropiados.  S\u00f3lo  los  procesos  de  root\n              tienen permiso para bloquear p\u00e1ginas.\n\n       EINVAL Se han especificado flags desconocidos.\n\nCONFORME A\n       POSIX.1b, SVr4.   SVr4 documenta un c\u00f3digo de error adicional, EAGAIN.\n\nV\u00c9ASE TAMBI\u00c9N\n       munlockall(2), mlock(2), munlock(2)\n\nLinux 1.3.43                                    26 noviembre 1995                                    MLOCKALL(2)\n"},{"NOMBRE": "       mmap2 - ubica ficheros o dispositivos en memoria\n\n", "SINOPSIS": "       #include <sys/mman.h>\n       #include <syscall.h>\n\n       _syscall6(void *, start, size_t, length, int, prot, int, flags, int, fd, off_t, pgoffset);\n\n       void * mmap2(void *start, size_t length, int prot, int flags, int fd, off_t pgoffset);\n\n       #endif\n\n", "DESCRIPCION": "       La  funci\u00f3n  mmap2  opera  exactamente  de  la  misma  manera  que mmap(2), salvo que el \u00faltimo argumento\n       especifica el desplazamiento dentro del fichero en unidades del tama\u00f1o de p\u00e1gina del sistema (en lugar de\n       bytes).   \u00c9sto  permite  a  las  aplicaciones  que  usan  un  off_t de 32-bit ubicar ficheros m\u00e1s grandes\n       (t\u00edpicamente hasta 2^44 bytes).\n\n", "OBSERVACIONES": "       La funci\u00f3n mmap2 est\u00e1 disponible desde la versi\u00f3n 2.3.31 de Linux.  Es espec\u00edfica de Linux, y deber\u00eda ser\n       evitada  en  aplicaciones  portables.  V\u00e9ase tambi\u00e9n la funci\u00f3n mmap64() que es parte del LFS (Large File\n       Summit).\n\nV\u00c9ASE TAMBI\u00c9N\n       getpagesize(2), mmap(2), mremap(2), msync(2), shm_open(2)\n\nLinux 2.3.31                                      31 enero 2002                                         MMAP2(2)\n"},{"NOMBRE": "       mmap, munmap - ubica o elimina ficheros o dispositivos en memoria\n\n", "SINOPSIS": "       #include <sys/mman.h>\n\n       caddr_t mmap(void *start, size_t length, int prot , int flags, int fd, off_t offset);\n\n       int munmap(void *start, size_t length);\n\nDESCRIPCI\u00c3\u0093  N\n       La  funci\u00c3\u00b3n  mmap intenta ubicar length bytes comenzando en el desplazamiento offset desde el fichero (u\n       otro objeto) especificado por el descriptor de fichero fd en memoria, preferiblemente  en  la  direcci\u00c3\u00b3n\n       start.   Esta \u00c3\u00baltima direcci\u00c3\u00b3n es una sugerencia y normalmente se especifica como 0.  El lugar donde es\n       ubicado el objeto es devuelto por mmap, y nunca vale 0.  El argumento prot  describe  la  protecci\u00c3\u00b3n  de\n       memoria  deseada.  (y  no  debe  entrar  en  conflicto  con el modo de apertura del fichero). Puede valer\n       PROT_NONE o ser la combinaci\u00f3n mediante la operaci\u00f3n OR de una o m\u00e1s de las otras banderas PROT_*.\n\n       PROT_EXEC  Las p\u00c3\u00a1ginas deben ser ejecutadas.\n\n       PROT_READ  Las p\u00c3\u00a1ginas deben ser le\u00c3das.\n\n       PROT_WRITE Las p\u00c3\u00a1ginas deben ser escritas.\n\n       PROT_NONE  Las p\u00c3\u00a1ginas no pueden ser accedidas.\n\n       El par\u00c3\u00a1metro flags especifica el tipo de  objeto  insertado,  las  opciones  de  asociaci\u00c3\u00b3n  y  si  las\n       modificaciones hechas a la copia insertada en memoria son privadas al proceso o son compartidas por otras\n       referencias. Tiene los bits:\n\n       MAP_FIXED  No seleccionar una direcci\u00c3\u00b3n diferente a la especificada.  Si la direcci\u00c3\u00b3n  especificada  no\n                  puede  ser utilizada, mmap fallar\u00c3\u00a1. Si MAP_FIXED es especificado, start debe ser un m\u00c3\u00baltiplo\n                  del tama\u00c3\u00b1o de p\u00c3\u00a1gina. Utilizar esta opci\u00c3\u00b3n es desaconsejable.\n\n       MAP_SHARED Comparte este \u00c3\u00a1rea con todos los otros objetos que se\u00c3\u00b1alan a este objeto.  Almacenar  en  la\n                  regi\u00f3n es equivalente a escribir en el fichero.  El fichero puede no actualizarse hasta que se\n                  llame a msync(2) o munmap(2).\n\n       MAP_PRIVATE\n                  Crear un \u00c3\u00a1rea privada \"copy-on-write\".  Almacenar en la regi\u00f3n no afecta al fichero original.\n                  Es indefinido si los cambios hechos al fichero despu\u00e9s de la llamada a mmap son visibles en la\n                  regi\u00f3n mapeada.\n\n       Debe especificarse exactamente uno de los par\u00c3\u00a1metros MAP_SHARED o MAP_PRIVATE.\n\n       Los tres par\u00c3\u00a1metros anteriores est\u00c3\u00a1n descritos  en  POSIX.1b  (formalmente  POSIX.4)  y  Linux  tambi\u00e9n\n       reconoce los siguientes par\u00e1metros no est\u00e1ndares:\n\n       MAP_DENYWRITE\n              Este  par\u00e1metro  es  ignorado.   (Anteriormente, indicaba que los intentos de escritura al fichero\n              subyacente deber\u00edan fallar con ETXTBUSY. Pero \u00e9sto  era  fuente  de  ataques  de  denegaci\u00f3n  -de-\n              servicio.)\n\n       MAP_EXECUTABLE\n              Este par\u00e1metro es ignorado.\n\n       MAP_NORESERVE\n              (Usado  junto  con  MAP_PRIVATE.)  No  reserva  p\u00e1ginas  del  espacio  de  intercambio  para  esta\n              correspondencia. Cuando se reserva espacio de intercambio, se tiene la garant\u00eda de que es  posible\n              modificar  esta regi\u00f3n privada.  Cuando no se reserva puede obtenerse una violaci\u00f3n de segmento al\n              escribir si no hay memoria disponible.\n\n       MAP_LOCKED\n              Este par\u00e1metro es ignorado.\n\n       MAP_GROWSDOWN\n              Usado para pilas. Indica al sistema VM del n\u00facleo que la correspondencia podr\u00eda  extenderse  hacia\n              abajo en memoria.\n\n       MAP_ANONYMOUS\n              La  correspondencia  no  est\u00e1  respaldada  por  ning\u00fan  fichero;  los  argumentos  fd y offset son\n              ignorados. Este par\u00e1metro conjuntamente con MAP_SHARED est\u00e1 implementado desde Linux 2.4.\n\n       MAP_ANON\n              Sin\u00f3nimo para MAP_ANONYMOUS. Desaconsejado.\n\n       MAP_FILE\n              Par\u00e1metro de compatibilidad. Ignorado.\n\n       MAP_32BIT\n              Ubica la correspondencia dentro de los primeros 2 GB del espacio de direcciones del  proceso.   Es\n              ignorado cuando MAP_FIXED est\u00e1 activo. Este par\u00e1metro est\u00e1 soportado actualmente s\u00f3lo sobre x86-64\n              para programas de 64 bits.\n\n       Algunos  sistemas  documentan  los  par\u00e1metros  adicionales  MAP_AUTOGROW,  MAP_AUTORESRV,  MAP_COPY,   y\n       MAP_LOCAL.\n\n       fd  debe  ser  un  descriptor  de  fichero v\u00e1lido, a menos que MAP_ANONYMOUS est\u00e9 activo, en cuyo caso el\n       argumento es ignorado.\n\n       offset debe ser un m\u00faltiplo del tama\u00f1o de p\u00e1gina como lo devuelve getpagesize(2).\n\n       La memoria asociada con mmap es conservada  despu\u00e9s de fork(2), con los mismos atributos.\n\n       Un fichero es ubicado en m\u00faltiplos del tama\u00f1o de p\u00e1gina. Para un fichero que no sea m\u00faltiplo  del  tama\u00f1o\n       de  p\u00e1gina,  la  memoria  restante es puesta a cero cuando se ubica, y las escrituras a esa regi\u00f3n no son\n       llevadas al fichero. El efecto de cambiar el tama\u00f1o del  fichero  subyacente  a  una  correspondencia  en\n       aquellas p\u00e1ginas que correspondan a regiones a\u00f1adidas o eliminadas del fichero es indefinido.\n\n       La  llamada  al sistema munmap borra las ubicaciones para el rango de direcciones especificado, y produce\n       referencias a las direcciones dentro del rango a fin de generar referencias  a  memoria  inv\u00c3\u00a1lidas.   La\n       regi\u00f3n  es  tambi\u00e9n  desubicada  autom\u00e1ticamente  cuando  el  proceso  termina. Por otra parte, cerrar el\n       descriptor de fichero no desubica la regi\u00f3n.\n\n       La direcci\u00f3n start debe ser un m\u00faltiplo del tama\u00f1o de p\u00e1gina. Todas las p\u00e1ginas que contengan  una  parte\n       del  rango indicado son desubicadas, y referencias posteriores a estas p\u00e1ginas generar\u00e1n una violaci\u00f3n de\n       segmento. No se considera un error si el rango indicado no contiene p\u00e1ginas con correspondencia.\n\n       Para correspondencias respaldadas por fichero, el campo  st_atime  para  el  fichero  ubicado  puede  ser\n       actualizado  en  cualquier instante entre la llamada mmap() y la desubicaci\u00f3n correspondiente; la primera\n       referencia a una p\u00e1gina con correspondencia actualizar\u00e1 el campo si no lo ha sido ya.\n\n       Los campos st_ctime y st_mtime para un fichero ubicado con PROT_WRITE  y  MAP_SHARED  ser\u00e1n  actualizados\n       despu\u00e9s  de  una  escritura a la regi\u00f3n ubicada, y antes de una llamada posterior a msync() con la opci\u00f3n\n       MS_SYNC o MS_ASYNC, si alguna procede.\n\nVALOR DEVUELTO\n       Si ha funcionado mmap devuelve un puntero al \u00c3\u00a1rea reservada.  En caso de error, es devuelto -1, y  errno\n       es  modificado  apropiadamente.   Si  ha funcionado munmap devuelve 0, si hay error -1, y errno es fijada\n       (probablemente a EINVAL).\n\n", "OBSERVACIONES": "       Es dependiente de la arquitectura si PROT_READ incluye a PROT_EXEC o no. Los programas portables deber\u00edan\n       siempre activar PROT_EXEC si intentan ejecutar c\u00f3digo en la nueva regi\u00f3n ubicada.\n\n", "ERRORES": "       EBADF  fd no es un descriptor de fichero v\u00c3\u00a1lido (y MAP_ANONYMOUS no ha sido fijado).\n\n       EACCES Un descriptor de fichero hace referencia a un fichero no regular.  O bien se solicit\u00f3 MAP_PRIVATE,\n              pero fd no est\u00e1 abierto para lectura.  O bien se solicit\u00f3 MAP_SHARED  y  PROT_WRITE  est\u00e1  activo,\n              pero  fd  no est\u00e1 abierto en modo lectura/escritura (O_RDWR).  O bien PROT_WRITE est\u00e1 activo, pero\n              el fichero es s\u00f3lo para a\u00f1adir.\n\n       EINVAL No es correcto start o length o offset.  (E.g., son demasiado grandes, o no  est\u00c3\u00a1n  alineados  en\n              los l\u00c3mites de un valor m\u00c3\u00baltiplo de PAGESIZE).\n\n       ETXTBSY\n              MAP_DENYWRITE fue fijado pero el objeto especificado por fd est\u00c3\u00a1 abierto para escritura.\n\n       EAGAIN El fichero ha sido bloqueado, o se ha bloqueado una cantidad excesiva de memoria.\n\n       ENOMEM No  hay  memoria  disponible,  o  el  n\u00famero  m\u00e1ximo  de  correspondencias del proceso habr\u00eda sido\n              excedido.\n\n       ENODEV El sistema de ficheros subyacente del  fichero  especificado  no  soporta  la  correspondencia  de\n              memoria.\n\n       El uso de una regi\u00f3n ubicada puede resultar en estas se\u00f1ales:\n\n       SIGSEGV\n              Intento de escritura en una regi\u00f3n especificada a mmap como solo-lectura.\n\n       SIGBUS Intento  de acceso a una porci\u00f3n del buffer que no se corresponde con el fichero (por ejemplo, m\u00e1s\n              all\u00e1 del fin del fichero, incluyendo el caso en el que otro proceso ha truncado el fichero).\n\nCONFORME A\n       SVr4, POSIX.1b (formalmente POSIX.4), 4.4BSD, SUSv2.  SVr4  documenta  los  c\u00c3\u00b3digos  de  error  ENXIO  y\n       ENODEV.  SUSv2 documenta ls c\u00f3digos de error adicionales EMFILE y EOVERFLOW.\n\n       MAP_32BIT es una extensi\u00f3n de Linux.\n\nV\u00c3\u0089  ASE TAMBI\u00c3\u0089  N\n       getpagesize(2),  mmap2(2),  mremap(2),  msync(2),  shm_open(2),  B.O. Gallmeister, POSIX.4, O'Reilly, pp.\n       128-129 and 389-391.\n\nLinux 2.3.51                                      25 marzo 2000                                          MMAP(2)\n"},{"NOMBRE": "       modify_ldt - obtiene o pone ldt\n\n", "SINOPSIS": "       #include <linux/ldt.h>\n       #include <linux/unistd.h>\n\n       _syscall3(int, modify_ldt, int, func, void *, ptr, unsigned long, bytecount)\n\n       int modify_ldt(int func, void *ptr, unsigned long bytecount);\n\n", "DESCRIPCION": "       modify_ldt  lee  o  escribe la tabla local de descriptores (ldt) para un proceso.  La ldt es una tabla de\n       gesti\u00f3n de memoria por proceso empleada por el procesador i386. Para m\u00e1s informaci\u00f3n  sobre  esta  tabla,\n       consulte un manual del procesador 386 de Intel.\n\n       Cuando  func  es  0,  modify_ldt  lee  la ldt de la zona de memoria apuntada por ptr.  El n\u00famero de bytes\n       le\u00eddos es el menor de bytecount y el tama\u00f1o actual de la ldt.\n\n       Cuando func es 1, modify_ldt modifica una entrada de ldt.  ptr apunta a una estructura modify_ldt_ldt_s y\n       bytecount debe igualar el tama\u00f1o de esta estructura.\n\nVALOR DEVUELTO\n       En caso de \u00e9xito, modify_ldt devuelve o el n\u00famero real de bytes le\u00eddos (cuando lee) \u00f3 0 (cuando escribe).\n       Si falla, modify_ldt devuelve -1 y da un valor apropiado a errno.\n\n", "ERRORES": "       ENOSYS func no es ni 0 ni 1.\n\n       EINVAL ptr es 0, o func es 1 y bytecount no es igual al tama\u00f1o de la estructura modify_ldt_ldt_s, o  func\n              es 1 y la nueva entrada de ldt tiene valores no v\u00e1lidos.\n\n       EFAULT ptr apunta afuera del espacio de direcciones.\n\nCONFORME A\n       Esta llamada es espec\u00edfica de Linux y no deber\u00eda emplearse en programas que pretendan ser transportables.\n\nV\u00c9ASE TAMBI\u00c9N\n       vm86(2)\n\nLinux                                             22 Julio 1995                                    MODIFY_LDT(2)\n"},{"NOMBRE": "       mount - monta un sistema de ficheros\n\n", "SINOPSIS": "       mount [-hV]\n\n       mount -a [-fFnrsvw] [-t tipo-sfv]\n       mount [-fnrsvw] [-o opciones [,...]] dispositivo | dir\n       mount [-fnrsvw] [-t tipo-sfv] [-o opciones] dispositivo dir\n\n", "DESCRIPCION": "       Todos  los  ficheros  accesibles  en  un  sistema Unix est\u00e1n dispuestos en un gran \u00e1rbol, la jerarqu\u00eda de\n       ficheros, con la ra\u00edz en /.  Estos ficheros pueden estar distribuidos sobre varios dispositivos. La orden\n       mount  sirve para pegar el sistema de ficheros encontrado en alg\u00fan dispositivo al gran \u00e1rbol de ficheros.\n       De modo an\u00e1logo pero al rev\u00e9s, la orden umount(8) lo despegar\u00e1 de \u00e9l de nuevo.\n\n       La forma m\u00e1s normal de la orden mount es\n              mount -t tipo dispositivo dir\n       Esto le dice al n\u00facleo que anexe el sistema de ficheros que encuentre en dispositivo  (que  es  del  tipo\n       tipo) al directorio dir.  Los contenidos anteriores (si hab\u00eda), as\u00ed como el propietario y permisos de dir\n       se vuelven invisibles (est\u00e1n ocultos, tapados), y mientras este sistema de ficheros  permanezca  montado,\n       el  nombre  de camino dir, tambi\u00e9n llamado punto de montaje, se refiere a la ra\u00edz del sistema de ficheros\n       en dispositivo.\n\n       Tres formas de llamada no montan realmente nada:\n              mount -h\n       muestra un mensaje de ayuda;\n              mount -V\n       muestra una cadena de caracteres relativa a la versi\u00f3n; y un solo\n              mount [-t tipo]\n       lista todos los sistemas de ficheros montados (del tipo tipo) --vea m\u00e1s adelante--.\n\n       El sistema de ficheros proc no est\u00e1 asociado a ning\u00fan dispositivo o fichero especial, y cuando se  monte,\n       se  puede  emplear  una  palabra arbitraria, como proc, en vez de una especificaci\u00f3n de dispositivo.  (La\n       elecci\u00f3n personal none es menos afortunada: el mensaje de error `none busy'  (nadie  [est\u00e1]  ocupado)  de\n       umount puede confundir.)\n\n       La  mayor\u00eda  de  dispositivos  se  indican  mediante  un nombre de fichero (de un dispositivo especial de\n       bloques), como /dev/sda1, pero hay otras posibilidades. Por ejemplo, en el caso de un  montaje  por  NFS,\n       dispositivo puede ser algo como knuth.cwi.nl:/dir.\n\n       El  fichero  /etc/fstab (vea fstab(5)), puede contener renglones que describan qu\u00e9 dispositivos se montan\n       usualmente d\u00f3nde, empleando cu\u00e1les opciones. Este fichero se emplea de tres formas:\n\n       (i) La orden\n              mount -a [-t tipo]\n       (usualmente dado en un gui\u00f3n de arranque) hace que todos los sistemas de ficheros  mencionados  en  fstab\n       (del  tipo  adecuado)  se  monten  como se indique, excepto aqu\u00e9llos cuya l\u00ednea contenga la palabra clave\n       noauto.  A\u00f1adir la opci\u00f3n -F har\u00e1 que mount se bifurque, de forma que los sistemas de ficheros se  monten\n       simult\u00e1neamente, en paralelo.\n\n       (ii)  Cuando  se monte un sistema de ficheros mencionado en fstab, basta con dar s\u00f3lo el dispositivo o el\n       punto de montaje.\n\n       (iii) Normalmente, s\u00f3lo el superusuario puede montar sistemas de  ficheros.  Sin  embargo,  cuando  fstab\n       contiene  la  opci\u00f3n  user  en  una  l\u00ednea,  entonces  cualquiera  puede  montar  el  distema de ficheros\n       correspondiente.\n\n       As\u00ed, dada la l\u00ednea\n              /dev/cdrom  /cdrom  iso9660  ro,user,noauto,unhide\n       cualquier usuario puede montar el sistema de ficheros de tipo iso9660 encontrado en su CD-ROM mediante la\n       orden\n              mount /dev/cdrom\n       o\n              mount /cdrom\n       Para m\u00e1s detalles, vea fstab(5).\n\n       Los  programas  mount y umount mantienen una lista de los sistemas de ficheros montados actualmente en el\n       fichero /etc/mtab.  Si no se dan argumentos a mount,  se  muestra  esta  lista.   Cuando  el  sistema  de\n       ficheros  proc  est\u00e9  montado (digamos en /proc), los ficheros /etc/mtab y /proc/mounts tienen contenidos\n       muy similares. El primero tiene algo m\u00e1s de informaci\u00f3n, como las opciones de montaje empleadas, pero  no\n       est\u00e1  necesariamente  al  d\u00eda (cf. la opci\u00f3n -n m\u00e1s abajo). Es posible reemplazar /etc/mtab por un enlace\n       simb\u00f3lico a /proc/mounts, pero de esta forma se perder\u00e1 algo de informaci\u00f3n, y en particular trabajar con\n       el dispositivo de bucle ser\u00e1 menos conveniente.\n\n", "OPCIONES": "       El  conjunto completo de opciones empleadas por una llamada de mount se determina primeramente extrayendo\n       las opciones para el sistema  de  ficheros  desde  la  tabla  de  fstab,  luego  aplicando  las  opciones\n       especificadas al argumento -o, y finalmente aplicando una opci\u00f3n -r o -w cuando est\u00e9 presente.\n\n       Opciones disponibles para la orden mount:\n\n       -V     Saca la versi\u00f3n.\n\n       -h     Muestra un mensaje de ayuda.\n\n       -v     Modo prolijo.\n\n       -a     Monta todos los sistemas de ficheros (de los tipos dados) mencionados en fstab.\n\n       -F     (Empleado  en  conjunci\u00f3n  con -a.)  Bifurca una nueva encarnaci\u00f3n de mount para cada dispositivo.\n              Esto efectuar\u00e1 los montajes en diferentes dispositivos o servidores  de  NFS  en  paralelo.   Esto\n              tiene  la ventaja de que es m\u00e1s r\u00e1pido; tambi\u00e9n las esperas en NFS van en paralelo. Una desventaja\n              es que los montajes se hacen en un orden no definido. As\u00ed, Ud. no puede  emplear  esta  opci\u00f3n  si\n              quiere montar tanto /usr como /usr/spool.\n\n       -f     Causa  que  todo  se  haga excepto la llamada al sistema real; en otras palabras, esto no monta el\n              sistema de ficheros, es un ``enga\u00f1o'' (fake). Esta opci\u00f3n es \u00fatil en conjunci\u00f3n con la otra opci\u00f3n\n              -v  para  determinar  lo  que  la orden mount est\u00e1 intentando hacer. Tambi\u00e9n se puede emplear para\n              a\u00f1adir entradas para dispositivos que fueron montados anteriormente con la opci\u00f3n -n.\n\n       -n     Monta sin escribir en /etc/mtab.  Esto es necesario por ejemplo cuando /etc est\u00e1 en un sistema  de\n              ficheros de lectura exclusiva.\n\n       -s     Tolera  opciones de montaje medio malas en vez de fallar. Esto har\u00e1 que se pasen por alto opciones\n              de montaje no admitidas por un tipo de sistema de ficheros.  No todos  los  sistemas  de  ficheros\n              admiten  esta  opci\u00f3n.  Esta  opci\u00f3n  existe  para  dar soporte al automontador de Linux basado en\n              autofs.\n\n       -r     Monta el sistema de ficheros de lectura exclusiva. Un sin\u00f3nimo es -o ro.\n\n       -w     Monta el sistema de ficheros de lectura y escritura. Esto es lo predeterminado. Un sin\u00f3nimo es  -o\n              rw.\n\n       -t tipo-sfv\n              El  argumento  que sigue a -t se emplea para indicar el tipo del sistema de ficheros. Los tipos de\n              sistemas de ficheros que se soportan actualmente  se  listan  en  /usr/src/linux/fs/filesystems.c:\n              minix,  ext,  ext2, xiafs, hpfs, msdos, umsdos, vfat, proc, nfs, iso9660, smbfs, ncpfs, affs, ufs,\n              romfs, sysv, xenix, coherent.  Note que los tres \u00faltimos son equivalentes y que xenix  y  coherent\n              se  quitar\u00e1n  en un futuro no muy lejano: emplee sysv siempre en su lugar. Desde la versi\u00f3n 2.1.21\n              del n\u00facleo, los tipos ext y xiafs ya no existen.\n\n              El tipo iso9660 es el predeterminado. Si no se da la opci\u00f3n -t o si se especifica el tipo auto, se\n              mira  el  s\u00faper-bloque  para  ver  el  tipo del sistema de ficheros (se soportan minix, ext, ext2,\n              xiafs, iso9660, romfs).  Si esta prueba falla y /proc/filesystems existe,  entonces  se  intentar\u00e1\n              con  todos  los sistemas de ficheros listados all\u00ed, excepto aqu\u00e9llos etiquetados \"nodev\" (como por\n              ejemplo proc y nfs).\n\n              Observe que el tipo auto puede ser \u00fatil para disquetes montados por  usuarios.   Advertencia:  las\n              pruebas  emplean una heur\u00edstica (la presencia de `magia' apropiada) y podr\u00edan reconocer un tipo de\n              sistemas de ficheros equivocado.\n\n              Se puede especificar m\u00e1s de un tipo en una lista de tipos separados por comas.  La  lista  de  los\n              tipos  de  sistemas  de ficheros puede prefijarse por no para especificar los tipos de sistemas de\n              ficheros sobre los que no se deber\u00e1 tomar ninguna opci\u00f3n.  (Esto puede tener sentido con la opci\u00f3n\n              -a.)\n\n              Por ejemplo, la orden:\n                     mount -a -t nomsdos,ext\n              monta todos los sistemas de ficheros listados en /etc/fstab excepto los de tipo msdos o ext.\n\n       -o     Las  opciones  se  especifican mediante la bandera -o seguida por una ristra de opciones separadas\n              por comas.  Algunas de estas opciones s\u00f3lo son \u00fatiles cuando aparecen en  el  fichero  /etc/fstab.\n              Las siguientes opciones se aplican a cualquier sistema de ficheros que se est\u00e9 montando:\n\n              async  Toda la E/S al sistema de ficheros deber\u00eda hacerse as\u00edncronamente.\n\n              atime  Actualizar el tiempo de acceso al nodo-\u00ed para cada acceso. Esto es lo predeterminado.\n\n              auto   Puede montarse con la opci\u00f3n -a.\n\n              defaults\n                     Emplear las opciones predeterminadas: rw, suid, dev, exec, auto, nouser y async.\n\n              dev    Interpretar dispositivos especiales de caracteres o bloques en el sistema de ficheros.\n\n              exec   Permitir la ejecuci\u00f3n de binarios.\n\n              noatime\n                     No  actualizar  los  tiempos de acceso a nodo-\u00ed en este sistema de ficheros (p.ej., para un\n                     acceso m\u00e1s r\u00e1pido en el directorio de  `spool'  de  las  noticias  o  grupos  de  discusi\u00f3n\n                     (`news') para hacer m\u00e1s r\u00e1pido un servidor de noticias).\n\n              noauto S\u00f3lo  puede  montarse  expl\u00edcitamente  (esto  es,  la  opci\u00f3n  -a no har\u00e1 que el sistema de\n                     ficheros se monte).\n\n              nodev  No interpretar o reconocer dispositivos o ficheros especiales de bloques  o  caracteres  en\n                     este sistema de ficheros.\n\n              noexec No  permitir  la ejecuci\u00f3n de ning\u00fan binario en el sistema de ficheros montado. Esta opci\u00f3n\n                     puede ser \u00fatil para un servidor que tiene sistemas de ficheros que contienen binarios  para\n                     otras arquitecturas distintas de la suya.\n\n              nosuid No permitir el efecto de los bits SUID ni SGID.\n\n              nouser Prohibir  a un usuario ordinario (esto es, distinto de root) montar el sistema de ficheros.\n                     Esto es lo predeterminado.\n\n              remount\n                     Intentar re-montar un sistema de ficheros  ya  montado.  Esto  se  emplea  com\u00fanmente  para\n                     cambiar  las opciones de montaje en un sistema de ficheros, especialmente para que se pueda\n                     escribir en un sistema de ficheros que estaba de lectura exclusiva.\n\n              ro     Montar el sistema de ficheros de lectura exclusiva.\n\n              rw     Montar el sistema de ficheros de lectura y escritura.\n\n              suid   Permitir el efecto de los bits SUID y SGID.\n\n              sync   Toda la E/S al sistema de ficheros deber\u00eda hacerse s\u00edncronamente.\n\n              user   Permitir a un usuario ordinario montar el sistema de  ficheros.  Esta  opci\u00f3n  implica  las\n                     opciones noexec, nosuid y nodev (a menos que se sustituyan por otras subsiguientes, como en\n                     la l\u00ednea de opciones user,exec,dev,suid).\n\nOPCIONES DE MONTAJE ESPEC\u00cdFICAS DE SISTEMAS DE FICHEROS\n       Las siguientes opciones se aplican solamente a ciertos sistemas de ficheros. Las  hemos  clasificado  por\n       sistemas de ficheros. Todas siguen a la bandera -o.\n\nOpciones de montaje para affs\n       uid=valor y gid=valor\n              Establecen  el  propietario y grupo del ra\u00edz del sistema de ficheros (predeterminados: uid = gid =\n              0, pero con la opci\u00f3n uid o gid sin especificar el valor, se toma el uid o el gid del  proceso  en\n              curso).\n\n       setuid=valor y setgid=valor\n              Establecen el propietario y el grupo de todos los ficheros.\n\n       mode=valor\n              Establece el modo de todos los ficheros a valor & 0777 descartando los permisos originales.  A\u00f1ade\n              permiso de paso a los directorios que lo tengan de lectura.  El valor se da en octal.\n\n       protect\n              No permitir ning\u00fan cambio en los bits de protecci\u00f3n del sistema de ficheros.\n\n       usemp  Poner el uid y gid de la ra\u00edz del sistema de ficheros al uid y gid del punto de montaje  a  partir\n              del primer sync o umount, y luego borrar esta opci\u00f3n. Extra\u00f1o...\n\n       verbose\n              Mostrar un mensaje informativo para cada montaje con \u00e9xito.\n\n       prefix=cadena\n              Prefijo empleado antes del nombre del volumen, cuando se sigue un enlace.\n\n       volume=cadena\n              Prefijo (de como mucho 30 de longitud) empleado antes de `/' cuando se sigue un enlace simb\u00f3lico.\n\n       reserved=valor\n              (Valor predeterminado: 2.) N\u00famero de bloques no usados al principio del dispositivo.\n\n       root=valor\n              Para dar expl\u00edcitamente la localizaci\u00f3n del bloque ra\u00edz.\n\n       bs=valor\n              Para dar el tama\u00f1o de bloque. Los valores permitidos son 512, 1024, 2048 y 4096.\n\n       grpquota / noquota / quota / usrquota\n              Estas opciones se aceptan pero no tienen efecto.\n\nOpciones de montaje para coherent\n       Ninguna.\n\nOpciones de montaje para ext\n       Ninguna.   Advierta  que el sistema de ficheros `ext' est\u00e1 anticuado. No lo use.  Desde la versi\u00f3n 2.1.21\n       de Linux, extfs ya no forma parte de los fuentes del n\u00facleo.\n\nOpciones de montaje para ext2\n       El sistema de ficheros `ext2' es el sistema de ficheros est\u00e1ndar.  Debido a un fallo  del  n\u00facleo,  puede\n       montarse con cualquier opci\u00f3n de montaje. Esto se corrigi\u00f3 en Linux 2.0.4.\n\n       bsddf / minixdf\n              Establece  el  comportamiento para la llamada al sistema statfs.  El comportamiento con minixdf es\n              devolver en el campo f_blocks el n\u00famero total de bloques del sistema de ficheros, mientras que  el\n              comportamiento  con  bsddf  (que es el predeterminado) es sustraer los bloques de arriba empleados\n              por el sistema de ficheros ext2 y no disponibles para almacenamiento de ficheros. As\u00ed:\n\n       % mount /k -o minixdf; df /k; umount /k\n       Filesystem   1024-blocks  Used Available Capacity Mounted on\n       /dev/sda6      2630655   86954  2412169      3%   /k\n       % mount /k -o bsddf; df /k; umount /k\n       Filesystem   1024-blocks  Used Available Capacity Mounted on\n       /dev/sda6      2543714      13  2412169      0%   /k\n\n       (Advierta que este ejemplo muestra que uno puede a\u00f1adir opciones en la linea de \u00f3rdenes  a  las  opciones\n       dadas en /etc/fstab.)\n\n       check / check=normal / check=strict\n              Establece  el nivel de comprobaciones. Cuando al menos una de estas opciones se da (y check=normal\n              est\u00e1 puesta de forma predeterminada), se comprueban los mapas de bits de  los  nodos-\u00ed  y  de  los\n              bloques  cuando  se  realiza  el montaje (lo cual puede llevar medio minuto o algo as\u00ed en un disco\n              grande).  Con comprobaci\u00f3n estricta (strict), la desasignaci\u00f3n de bloques comprueba que el  bloque\n              a liberar est\u00e9 en la zona de datos.\n\n       check=none / nocheck\n              No se realiza ninguna comprobaci\u00f3n.\n\n       debug  Muestra informaci\u00f3n de depuraci\u00f3n en cada (re-)montaje.\n\n       errors=continue / errors=remount-ro / errors=panic\n              Define  el  comportamiento  cuando  se  encuentra  un  error.   (O  bien no hace caso de errores y\n              simplemente marca el sistema de ficheros como err\u00f3neo y contin\u00faa, o bien re-monta  el  sistema  de\n              ficheros  como  de  lectura  exclusiva,  o  bien  se  produce un p\u00e1nico y se para el sistema.)  Lo\n              predeterminado est\u00e1 establecido en el s\u00faper-bloque del sistema  de  ficheros,  y  puede  cambiarse\n              empleando tune2fs(8).\n\n       grpid o bsdgroups / nogrpid o sysvgroups\n              Estas  opciones  definen  qu\u00e9  identificador  de grupo recibe un fichero reci\u00e9n creado.  Cuando se\n              establece grpid, toma el GID del directorio en el que se crea; de otro modo  (el  predeterminado),\n              toma  el  FSGID  del  proceso en curso, a menos que el directorio tenga activado el bit setgid, en\n              cuyo caso toma el GID del directorio padre, y tambi\u00e9n toma  el  bit  setgid  si  es  \u00e9l  mismo  un\n              directorio.\n\n       resgid=n y resuid=n\n              El  sistema de ficheros ext2 reserva un cierto porcentaje del espacio disponible (por omisi\u00f3n el 5\n              %, consulte mke2fs(8) y tune2fs(8)).  Estas opciones  determinan  qui\u00e9n  puede  usar  los  bloques\n              reservados.   (En  pocas palabras: cualquiera que tenga el UID especificado, o pertenezca al grupo\n              especificado.)\n\n       sb=n   En vez del bloque n\u00famero 1, usa el bloque n como s\u00faper-bloque. Esto podr\u00eda ser de utilidad  cuando\n              el  sistema  de  ficheros  resultara da\u00f1ado. Usualmente, las copias del s\u00faper-bloque se encuentran\n              cada 8192 bloques: en los bloques 1, 8193, 16385, ...  (De esta forma, uno llega a tener cientos o\n              incluso  miles  de  copias  del  s\u00faper-bloque en un sistema de ficheros grande. No conozco ninguna\n              opci\u00f3n de mke2fs que haga que se escriban menos copias.)\n\n       grpquota / noquota / quota / usrquota\n              Estas opciones se aceptan pero no se tienen en cuenta.\n\nOpciones de montaje para fat\n       (Nota: fat no es un sistema de ficheros separado, sino una parte com\u00fan de los sistemas de ficheros msdos,\n       umsdos y vfat.)\n\n       blocksize=512 / blocksize=1024\n              Establece el tama\u00f1o de bloque (el predeterminado es 512).\n\n       uid=valor y gid=valor\n              Establece  el propietario y grupo de todos los ficheros. (Por omisi\u00f3n: el UID y GID del proceso en\n              curso.)\n\n       umask=valor\n              Establece la umask (la m\u00e1scara de  bits  de  los  permisos  que  no  est\u00e1n  presentes).  El  valor\n              predeterminado es el de la umask del proceso en curso. El valor se da en octal.\n\n       check=valor\n              Se  puede  escoger tres niveles diferentes de elecci\u00f3n (en cuanto al comportamiento con nombres de\n              ficheros):\n\n              r[elaxed]\n                     Se aceptan y tratan por igual las letras  may\u00fasculas  y  las  min\u00fasculas,  las  partes  con\n                     nombres  largos  se truncan (p.ej.: nombremuylargo.fuubar se convierte en nombremu.fuu), se\n                     aceptan en cada parte del nombre (nombre y extensi\u00f3n) espacios iniciales y por medio.\n\n              n[ormal]\n                     Como \"relaxed\", pero se rechazan muchos caracteres especiales (*, ?,  <,  espacios,  etc.).\n                     Esto es el comportamiento predeterminado.\n\n              s[trict]\n                     Como  \"normal\",  pero  los  nombres  no  pueden  contener  partes  largas  y los caracteres\n                     especiales que de vez en cuando se usan en Linux pero  no  son  aceptados  por  MS-DOS,  se\n                     rechazan (+, =, espacios, etc.).\n\n       conv=b[inary] / conv=t[ext] / conv=a[uto]\n              El  sistema  de ficheros fat puede efectuar conversiones CR/LF <--> NL (formato de texto de MS-DOS\n              a/desde formato de texto UNIX) en el n\u00facleo. Se dispone de los siguientes modos de conversi\u00f3n.\n\n              binary Ninguna traducci\u00f3n. Esto es lo predeterminado.\n\n              text   Traducci\u00f3n CR/LF <--> NL en todos los ficheros.\n\n              auto   Traducci\u00f3n CR/LF <--> NL en todos los ficheros que no tengan una  extensi\u00f3n  \"binaria  bien\n                     conocida\".   La  lista  de  extensiones  conocidas  se  puede  encontrar  al  principio  de\n                     /usr/src/linux/fs/fat/misc.c (en 2.0, la lista es: exe, com, bin, app, sys, drv, ovl,  ovr,\n                     obj,  lib,  dll,  pif  (c\u00f3digo  de  programas);  arc,  zip,  lha,  lzh,  zoo,  tar,  z, arj\n                     (archivadores comunes); tz, taz, tzp, tpz (abreviaturas de tar.Z y tar.zip), gz,  tgz,  deb\n                     (archivos  comprimidos  con  gzip,  paquetes  tar.gz y Debian); gif, bmp, tif, gl, jpg, pcx\n                     (formatos gr\u00e1ficos); tfm, vf, gf, pk, pxl y dvi (relativos a TeX)).\n\n              Los programas que hagan lseek's computados no querr\u00e1n que el  n\u00facleo  efect\u00fae  una  conversi\u00f3n  de\n              texto como \u00e9stas. Mucha gente ha arruinado sus datos por esta traducci\u00f3n. \u00a1Tenga cuidado!\n\n              Para  sistemas  de  ficheros montados en modo binario, se dispone de una herramienta de conversi\u00f3n\n              (fromdos/todos).\n\n       debug  Activa la bandera debug.  Se mostrar\u00e1n una cadena de versi\u00f3n y una lista de par\u00e1metros del sistema\n              de ficheros (estos datos tambi\u00e9n se muestran si los par\u00e1metros resultan ser inconsistentes).\n\n       fat=12 / fat=16\n              Especifica  una FAT de 12 \u00f3 de 16 bits. Esto sustituye a la rutina de detecci\u00f3n autom\u00e1tica de tipo\n              de FAT. \u00a1Utilice esta opci\u00f3n con cuidado!\n\n       quiet  Activa la bandera quiet.  Intentos de hacer chown o chmod en ficheros no devuelven errores, aunque\n              fallen. \u00a1Utilice esta opci\u00f3n con cuidado!\n\n       sys_immutable, showexec, dots, nodots, dotsOK=[yes|no]\n              Varios intentos equivocados de forzar convenciones Unix o DOS sobre un sistema de ficheros FAT.\n\nOpciones de montaje para hpfs\n       uid=valor y gid=valor\n              Establece  el propietario y grupo de todos los ficheros. (Por omisi\u00f3n: el UID y GID del proceso en\n              curso.)\n\n       umask=valor\n              Establece la umask (la m\u00e1scara de  bits  de  los  permisos  que  no  est\u00e1n  presentes).  El  valor\n              predeterminado es el de la umask del proceso en curso. El valor se da en octal.\n\n       case=lower / case=asis\n              Convierte  todos  los  nombres  de  ficheros a min\u00fasculas (lower) o los deja tal cual (asis). (Por\n              omisi\u00f3n: case=lower.)\n\n       conv=binary / conv=text / conv=auto\n              Para conv=text, elimina algunos CRs aleatorios (en particular, todos los seguidos  de  NL)  cuando\n              lee  un fichero.  Para conv=auto, escoge m\u00e1s o menos aleatoriamente entre conv=binary y conv=text.\n              Para conv=binary,  simplemente  lee  lo  que  est\u00e1  en  el  fichero.  Esto  es  el  comportamiento\n              predeterminado.\n\n       nocheck\n              No para abruptamente el montaje cuando ciertas comprobaciones de consistencia fallen.\n\nOpciones de montaje para iso9660\n       Los  nombres  de  fichero  normales  iso9660 aparecen en un formato 8.3 (esto es, con restricciones en la\n       longitud de los nombres de fichero como en DOS), y adem\u00e1s  todos  los  caracteres  est\u00e1n  en  may\u00fasculas.\n       Asimismo  no  hay  nada previsto para due\u00f1os de ficheros, protecciones, n\u00famero de enlaces, provisi\u00f3n para\n       dispositivos de caracteres o bloques, etc.\n\n       Rock Ridge es una extensi\u00f3n a iso9660 que  proporciona  todas  estas  caracter\u00edsticas  t\u00edpicas  de  Unix.\n       B\u00e1sicamente  hay  extensiones  en  cada  registro  de  directorio  que  proporcionan  toda la informaci\u00f3n\n       adicional, y cuando Rock Ridge est\u00e1 en uso, el sistema de ficheros es indistinguible  de  un  sistema  de\n       ficheros UNIX normal (de lectura exclusiva, por supuesto).\n\n       norock Desactiva el uso de las extensiones Rock Ridge, incluso si est\u00e1n disponibles. Cf. map.\n\n       check=r[elaxed] / check=s[trict]\n              Con  check=relaxed, un nombre de fichero se convierte primero a min\u00fasculas antes de que se efect\u00fae\n              la b\u00fasqueda. Esto probablemente s\u00f3lo tiene sentido en conjunci\u00f3n con norock  y  map=normal.   (Por\n              omisi\u00f3n: check=strict.)\n\n       uid=valor y gid=valor\n              Da  a  todos  los  ficheros  en  el  sistema  de  ficheros  los  IDs indicados de usuario o grupo,\n              posiblemente sustituyendo la informaci\u00f3n encontrada en las extensiones Rock Ridge.  (Por  omisi\u00f3n:\n              uid=0,gid=0.)\n\n       map=n[ormal] / map=o[ff]\n              Para  vol\u00famenes  que  no  son  Rock  Ridge, la traducci\u00f3n de nombres \"normal\" convierte las letras\n              may\u00fasculas a min\u00fasculas ASCII, quita un `;1' del final, y convierte `;' a `.'.  Con map=off no  se\n              realiza ninguna traducci\u00f3n de nombre. Vea norock.  (Por omisi\u00f3n: map=normal.)\n\n       mode=valor\n              Para  vol\u00famenes  que  no  son Rock Ridge, da a todos los ficheros el modo (permisos) indicado. (El\n              predeterminado: permiso de lectura para todo el mundo.)  Desde Linux 2.1.37 uno ya no necesita m\u00e1s\n              especificar el modo en base diez. (La base ocho se indica mediante un 0 inicial.)\n\n       unhide Muestra tambi\u00e9n ficheros ocultos y asociados.\n\n       block=[512|1024|2048]\n              Establece el tama\u00f1o de bloque al valor indicado.  (Por omisi\u00f3n: block=1024.)\n\n       conv=a[uto] / conv=b[inary] / conv=m[text] / conv=t[ext]\n              (Por  omisi\u00f3n:  conv=binary.)   Desde  Linux 1.3.54 esta opci\u00f3n ya no tiene ning\u00fan efecto.  (Y los\n              valores distintos de binary sol\u00edan ser muy peligrosos, llevando a menudo a  corrupci\u00f3n  silenciosa\n              de datos.)\n\n       cruft  Si el byte alto de la longitud de fichero contiene otra basura, active esta opci\u00f3n de montaje para\n              no hacer caso de los bits de orden alto de la longitud de fichero. Esto implica que un fichero  no\n              puede ser mayor de 16 MB. La opci\u00f3n `cruft' se establece autom\u00e1ticamente si el CD-ROM entero tiene\n              un tama\u00f1o raro (negativo, o de m\u00e1s de 800 MB). Tambi\u00e9n se pone  sola  cuando  se  ven  n\u00fameros  de\n              secuencia del volumen distintos de 0 \u00f3 1.\n\nOpciones de montaje para minix\n       Ninguna.\n\nOpciones de montaje para msdos\n       Vea  las  opciones  de  montaje  para  fat.   Si el sistema de ficheros msdos detecta una inconsistencia,\n       informa del error y pone el sistema de ficheros de lectura exclusiva. El sistema  de  ficheros  se  puede\n       hacer de nuevo de lectura y escritura re-mont\u00e1ndolo.\n\nOpciones de montaje para ncp\n       Justo  como  nfs,  la  implementaci\u00f3n ncp espera un argumento binario (una struct ncp_mount_data) para la\n       llamada al sistema mount. Este argumento se construye mediante ncpmount(8) y la versi\u00f3n actual  de  mount\n       (2.6h) no conoce nada sobre ncp.\n\nOpciones de montaje para nfs\n       En  vez  de una cadena de opciones textual, analizada por el n\u00facleo, el sistema de ficheros nfs espera un\n       argumento binario de  tipo  struct  nfs_mount_data.   El  propio  programa  mount  analiza  las  opciones\n       siguientes  de  la  forma  `etiqueta=valor',  y  las  pone en la estructura mencionada: rsize=n, wsize=n,\n       timeo=n,  retrans=n,  acregmin=n,  acregmax=n,  acdirmin=n,  acdirmax=n,  actimeo=n,   retry=n,   port=n,\n       mountport=n,  mounthost=nombre,  mountprog=n,  mountvers=n,  nfsprog=n,  nfsvers=n,  namlen=n.  La opci\u00f3n\n       addr=n se acepta pero no se tiene en cuenta.  Asimismo se reconocen las  siguientes  opciones  booleanas,\n       posiblemente  precedidas  por  no:  bg,  fg,  soft, hard, intr, posix, cto, ac, tcp, udp, lock.  Para m\u00e1s\n       detalles, consulte nfs(5).\n\n       Entre las opciones especialmente \u00fatiles se incluyen\n\n       rsize=8192,wsize=8192\n              Esto har\u00e1 que su conexi\u00f3n NFS sea mucho m\u00e1s r\u00e1pida que con el tama\u00f1o de  b\u00fafer  predeterminado  de\n              1024.\n\n       hard   El programa que acceda a un fichero en un sistema de ficheros montado por NFS se colgar\u00e1 cuando el\n              servidor falle. El proceso no puede interrumpirse ni matarse a menos que uno  tambi\u00e9n  especifique\n              intr.   Cuando el servidor NFS est\u00e9 de nuevo disponible el programa continuar\u00e1 por donde estuviera\n              como si nada. Esto es probablemente lo que uno quiere.\n\n       soft   Esta opci\u00f3n permite al n\u00facleo esperar un rato y rendirse despu\u00e9s si el servidor  NFS  no  responde\n              durante  un  tiempo  determinado.  El  tiempo  se puede especificar con timeo=tiempo.  Esta opci\u00f3n\n              podr\u00eda ser de utilidad si su servidor NFS no respondiera a veces, o si fuera rearrancado  mientras\n              alg\u00fan  proceso  estuviera intentando obtener un fichero de \u00e9l. Usualmente lo que hace es causar un\n              mont\u00f3n de problemas.\n\n       nolock No emplear el mecanismo de candados. No arrancar el duende lockd.\n\nOpciones de montaje para proc\n       uid=valor y gid=valor\n              Estas opciones se reconocen, pero no tienen ning\u00fan efecto por lo que he podido ver.\n\nOpciones de montaje para romfs\n       Ninguna.\n\nOpciones de montaje para smbfs\n       Justo como nfs, la implementaci\u00f3n smb espera un argumento binario (una  struct  smb_mount_data)  para  la\n       llamada  al  sistema mount. Este argumento se construye mediante smbmount(8) y la versi\u00f3n actual de mount\n       (2.6h) no sabe nada acerca de smb.\n\nOpciones de montaje para sysv\n       Ninguna.\n\nOpciones de montaje para ufs\n       Ninguna.\n\nOpciones de montaje para umsdos\n       Vea las opciones de montaje para msdos.  La opci\u00f3n dotsOK est\u00e1 expl\u00edcitamente muerta en umsdos.\n\nOpciones de montaje para vfat\n       Antes de nada, las opciones de montaje para fat se reconocen todas.  La opci\u00f3n dotsOK est\u00e1 expl\u00edcitamente\n       anulada en vfat.  Adem\u00e1s de todo eso, est\u00e1n\n\n       uni_xlate\n              Traduce  caracteres  Unicode no manejados a secuencias de escape especiales. Esto le permite hacer\n              copias de respaldo y restaurar ficheros cuyos nombres se han creado con  caracteres  Unicode.  Sin\n              esta  opci\u00f3n,  se  emplea  un  `?'  cuando no hay traducci\u00f3n posible. El car\u00e1cter de escape es `:'\n              porque es ilegal en el sistema de ficheros vfat. La secuencia de escape que se usa, donde u es  el\n              car\u00e1cter Unicode, es: ':', (u & 0x3f), ((u>>6) & 0x3f), (u>>12).\n\n       posix  Permite la coexistencia de dos ficheros cuyos nombres s\u00f3lo se diferencien en la caja tipogr\u00e1fica.\n\n       nonumtail\n              Trata  primero  de  construir  un  nombre  corto  sin  n\u00famero  de  secuencia,  antes  de  intentar\n              nombre~n\u00fam.ext.\n\nOpciones de montaje para xenix\n       Ninguna.\n\nOpciones de montaje para xiafs\n       Ninguna. Aunque no hay nada malo en xiafs, no se usa mucho, y no est\u00e1 mantenido ya. Probablemente uno  no\n       deber\u00eda usarlo.  Desde la versi\u00f3n de Linux 2.1.21, xiafs ya no forma parte de los fuentes del n\u00facleo.\n\nEL DISPOSITIVO DE BUCLE\n       Un posible tipo m\u00e1s es un montaje a trav\u00e9s del dispositivo de bucle. Por ejemplo, la orden\n\n         mount /tmp/fdimage /mnt -t msdos -o loop=/dev/loop3,blocksize=1024\n\n       establecer\u00e1  que  el  dispositivo  de  bucle /dev/loop3 corresponder\u00e1 al fichero /tmp/fdimage, y entonces\n       monta este dispositivo en /mnt.  Este tipo de montaje conoce tres opciones, de  nombres  loop,  offset  y\n       encryption,  que  son  realmente  opciones  de  losetup(8).   Si  no  se  menciona  expl\u00edcitamente ning\u00fan\n       dispositivo de bucle (sino que simplemente  se  da  una  opci\u00f3n  `-o  loop'),  entonces  mount  intentar\u00e1\n       encontrar alg\u00fan dispositivo de bucle en desuso y lo utilizar\u00e1.\n\n", "ARCHIVOS": "       /etc/fstab tabla de sistemas de ficheros\n       /etc/mtab tabla de sistemas de ficheros montados\n       /etc/mtab~ fichero candado\n       /etc/mtab.tmp fichero temporal\n\nV\u00c9ASE TAMBI\u00c9N\n       mount(2),  umount(2),  fstab(5), umount(8), swapon(8), nfs(5), mountd(8), nfsd(8), mke2fs(8), tune2fs(8),\n       losetup(8)\n\n", "FALLOS": "       Es posible que un sistema de ficheros corrupto cause una parada desastrosa.\n\n       Algunos sistemas de ficheros de Linux no admiten -o sync (el ext2fs s\u00ed soporta actualizaciones  s\u00edncronas\n       (al estilo BSD) cuando se monta con la opci\u00f3n sync).\n\n       La  opci\u00f3n  -o  remount  puede  no  ser  capaz  de  cambiar  par\u00e1metros  de montaje (todos los par\u00e1metros\n       espec\u00edficos de ext2fs, excepto sb, se pueden cambiar con un remount,  por  ejemplo,  pero  no  se  pueden\n       cambiar gid o umask para el fatfs).\n\n", "HISTORIA": "       Una orden mount apareci\u00f3 en la Versi\u00f3n 6 del UNIX de AT&T.\n\nLinux 2.0                                      14 Septiembre 1997                                       MOUNT(8)\n"},{"NOMBRE": "       mprotect - controla el tipo de acceso permitido sobre una regi\u00f3n de memoria\n\n", "SINOPSIS": "       #include <sys/mman.h>\n\n       int mprotect(const void *addr, size_t len, int prot);\n\n", "DESCRIPCION": "       mprotect  controla  la  forma  en  que  una  secci\u00f3n  de  memoria puede ser accedida.  Si un acceso no es\n       permitido por la protecci\u00f3n dada, el programa recibe un SIGSEGV.\n\n       prot es un O-l\u00f3gico a nivel de bits de los siguientes valores:\n\n       PROT_NONE  La memoria no puede ser accedida de ninguna forma.\n\n       PROT_READ  La memoria puede ser le\u00edda.\n\n       PROT_WRITE La memoria puede ser escrita.\n\n       PROT_EXEC  La memoria puede contener c\u00f3digo ejecutable.\n\n       La nueva protecci\u00f3n reemplaza cualquier protecci\u00f3n existente.  Por ejemplo,  si  la  memoria  hab\u00eda  sido\n       previamente  marcada  PROT_READ,  y  mprotect se llama entonces con prot igual a PROT_WRITE, no se prodr\u00e1\n       leer.\n\nVALOR DEVUELTO\n       En caso de \u00e9xito, mprotect devuelve cero.  En caso de error, se devuelve -1, y se asigna a errno un valor\n       apropiado.\n\n", "ERRORES": "       EINVAL addr no es un puntero v\u00e1lido, o no es un m\u00faltiplo de PAGESIZE.\n\n       EFAULT La memoria no puede ser accedida.\n\n       EACCES La  memoria  no  permite el acceso especificado.  Esto puede ocurrir si, por ejemplo, asocia a una\n              zona de memoria mediante mmap(2) un fichero al cual s\u00f3lo tiene acceso de lectura y pide a mprotect\n              que lo marque PROT_WRITE.\n\n       ENOMEM No se han podido reservar estructuras internas del n\u00facleo.\n\n", "EJEMPLOS": "       #include <stdio.h>\n       #include <stdlib.h>\n       #include <errno.h>\n       #include <sys/mman.h>\n\n       #include <limits.h>    /* por PAGESIZE */\n       #ifndef PAGESIZE\n       #define PAGESIZE 4096\n       #endif\n\n       int\n       main(void)\n       {\n           char *p;\n           char c;\n\n           /* Reserva un b\u00faffer; por defecto, tendr\u00e1\n              protecci\u00f3n PROT_READ|PROT_WRITE. */\n           p = malloc(1024+PAGESIZE-1);\n           if (!p) {\n               perror(\"malloc: imposible reservar 1024 bytes\");\n               exit(errno);\n           }\n\n           /* Alinear a una direcci\u00f3n m\u00faltiplo de PAGESIZE,\n              suponiendo que sea una potencia de 2 */\n           p = (char *)(((int) p + PAGESIZE-1) & ~(PAGESIZE-1));\n\n           c = p[666];         /* Leer; bien */\n           p[666] = 42;        /* Escribir; bien */\n\n           /* Marca el b\u00faffer como de s\u00f3lo-lectura. */\n           if (mprotect(p, 1024, PROT_READ)) {\n               perror(\"mprotect: imposible cambiar protecci\u00f3n\");\n               exit(errno);\n           }\n\n           c = p[666];         /* Leer; bien */\n           p[666] = 42;        /* Escribir; el programa recibe SIGSEGV\n                                  y muere*/\n\n           exit(0);\n       }\n\nCONFORME A\n       SVr4,  POSIX.1b (formalmente POSIX.4).  SVr4 define un c\u00f3digo de error adicional, EAGAIN. Las condiciones\n       de error de SVr4 coinciden debidamente con las de Linux.  POSIX.1b dice que mprotect s\u00f3lo puede ser usada\n       sobre regiones de memoria obtenidas desde mmap(2).\n\nV\u00c9ASE TAMBI\u00c9N\n       mmap(2)\n\nLinux 2.0                                         31 mayo 1997                                       MPROTECT(2)\n"},{"NOMBRE": "       afs_syscall,  break,  ftime,  gtty,  lock,  mpx,  prof,  profil,  stty,  ulimit - Llamadas al sistema sin\n       implementar\n\n", "SINOPSIS": "       Llamadas al sistema sin implementar.\n\n", "DESCRIPCION": "       Estas llamadas al sistema no est\u00e1n implementadas en la versi\u00f3n 2.4 del n\u00facleo de Linux.\n\nVALOR DEVUELTO\n       Estas llamadas al sistema siempre devuelven -1 y asignan a la variable errno el valor ENOSYS.\n\n", "OBSERVACIONES": "       D\u00e9se cuenta que ftime(3), profil(3) y ulimit(3) se implementan como funciones de biblioteca.\n\n       Algunas llamadas al sistema, como alloc_hugepages(2), free_hugepages(2),  ioperm(2),  iopl(2)  y  vm86(2)\n       s\u00f3lo existen en ciertas arquitecturas.\n\n       Algunas  llamadas  al sistema, como ipc(2) y {create,init,delete}_module(2) s\u00f3lo existen cuando el n\u00facleo\n       de Linux se construy\u00f3 con soporte para ellas.\n\nV\u00c9ASE TAMBI\u00c9N\n       obsolete(2)\n\nLinux 2.4                                         12 junio 1998                                 UNIMPLEMENTED(2)\n"},{"NOMBRE": "       mremap - re-asocia una direcci\u00f3n de memoria virtual\n\n", "SINOPSIS": "       #include <unistd.h>\n       #include <sys/mman.h>\n\n       void *mremap(void *vieja_dir, size_t viejo_tam , size_t nuevo_tam, unsigned long flags);\n\n", "DESCRIPCION": "       mremap  expande (o encoge) una asociaci\u00f3n existente de memoria, movi\u00e9ndola potencialmente a la vez (seg\u00fan\n       se controle por el argumento flags y seg\u00fan el espacio de direcciones virtuales disponible).\n\n       vieja_dir es la direcci\u00f3n antigua del bloque de memoria virtual que  Ud.  quiere  expandir  (o  encoger).\n       Observe  que  vieja_dir tiene que tener alineamiento de p\u00e1gina. viejo_tam es el antiguo tama\u00f1o del bloque\n       de memoria virtual. nuevo_tam es el tama\u00f1o pedido del bloque de memoria virtual tras el cambio de tama\u00f1o.\n\n       El argumento flags es un mapa de bits de opciones.\n\n       En Linux la memoria se divide en p\u00e1ginas. Un proceso de usuario tiene (uno o) varios segmentos de memoria\n       virtual lineales. Cada segmento de memoria virtual tiene una o m\u00e1s asociaciones a p\u00e1ginas de memoria real\n       (en la tabla de p\u00e1ginas). Cada segmento de memoria  virtual  tiene  su  propia  protecci\u00f3n  (derechos  de\n       acceso),  que pueden producir una violaci\u00f3n de segmento si a la memoria se accede incorrectamente (p.ej.,\n       por escribir en un segmento de lectura exclusiva). Acceder a  memoria  virtual  fuera  de  los  segmentos\n       tambi\u00e9n producir\u00e1 una violaci\u00f3n de segmento.\n\n       mremap  emplea  el  esquema  de tabla de p\u00e1ginas de Linux.  mremap cambia la asociaci\u00f3n entre direcciones\n       virtuales y p\u00e1ginas de memoria. Esto puede emplearse para implementar un realloc muy eficiente.\n\n", "FLAGS": "       MREMAP_MAYMOVE\n              indica si la operaci\u00f3n, en vez de fallar, deber\u00eda cambiar la direcci\u00f3n virtual  si  el  cambio  de\n              tama\u00f1o no puede hacerse en el espacio virtual actual.\n\nVALOR DEVUELTO\n       En  caso  de  \u00e9xito, mremap devuelve un puntero a la nueva \u00e1rea de memoria virtual.  En caso de error, se\n       devuelve -1 y se pone un valor apropiado en errno.\n\n", "ERRORES": "       EINVAL Se ha dado un argumento inv\u00e1lido. Lo m\u00e1s probable  es  que  vieja_dir  no  tenga  alineamiento  de\n              p\u00e1gina.\n\n       EFAULT \"Segmentation  fault\",  o  sea,  \"fallo  de  segmento\".  Alguna  direcci\u00f3n  del  rango vieja_dir a\n              vieja_dir+viejo_tam es una direcci\u00f3n de memoria virtual inv\u00e1lida para este proceso.   Tambi\u00e9n  uno\n              puede  obtener  EFAULT  incluso  si existen asociaciones que cubren el espacio entero pedido, pero\n              esas asociaciones son de tipos diferentes.\n\n       EAGAIN El segmento de memoria est\u00e1 bloqueado y no puede re-asociarse.\n\n       ENOMEM El \u00e1rea  de  memoria  no  puede  expandirse  en  la  direcci\u00f3n  virtual  en  curso,  y  la  opci\u00f3n\n              MREMAP_MAYMOVE no est\u00e1 puesta en flags.  O bien, no hay bastante memoria (virtual) disponible.\n\n", "OBSERVACIONES": "       Con  las  cabeceras  actuales  de  glibc,  para obtener la definici\u00f3n de MREMAP_MAYMOVE, necesita definir\n       _GNU_SOURCE antes de incluir <sys/mman.h>.\n\nCONFORME A\n       Esta llamada es espec\u00edfica de Linux, y no deber\u00eda emplearse en programas que se pretendan transportables.\n       4.2BSD  ten\u00eda  una llamada igual (nunca implementada realmente) mremap(2) con una sem\u00e1ntica completamente\n       diferente.\n\nV\u00c9ASE TAMBI\u00c9N\n       getpagesize(2), realloc(3), malloc(3), brk(2), sbrk(2), mmap(2)\n\n       Su libro de texto favorito de Sistemas Operativos para m\u00e1s informaci\u00f3n sobre  la  memoria  paginada.  Por\n       ejemplo:  Sistemas  Operativos Modernos por Andrew S. Tannenbaum, Inside Linux por Randolf Bentson, o The\n       Design of the UNIX Operating System por Maurice J. Bach.\n\nLinux 1.3.87                                      12 Abril 1996                                        MREMAP(2)\n"},{"NOMBRE": "       msgctl - operaciones para el control de mensajes\n\n", "SINOPSIS": "       nf #include <sys/types.h> #include <sys/ipc.h> #include <sys/msg.h>\n\n       int msgctl(int msqid, int cmd, struct msqid_ds *buf);\n\n", "DESCRIPCION": "       Esta funci\u00f3n ejecuta la operaci\u00f3n especificada por cmd en la cola de mensajes con el identificador msqid.\n       Valores legales para cmd son:\n\n       IPC_STAT\n              Copia informaci\u00f3n desde la estructura de  datos  mensaje  asociada  con  msqid  en  la  estructura\n              apuntada por buf.  El invocador debe tener permiso de lectura en la cola de mensajes.\n\n       IPC_SET\n              Escribe los valores de algunos miembros de la estructura msqid_ds apuntada por buf a la estructura\n              de datos cola de mensajes, actualizando su componente msg_ctime  Los  siguientes  miembros  de  la\n              estructura pueden ser actualizados:\n\n                   msg_perm.uid\n                   msg_perm.gid\n                   msg_perm.mode  /* solo los 9 bits m\u00e1s bajos */\n                   msg_qbytes\n\n              El proceso invocador debe tener los privilegios adecuados (probablemente, root) o su identificador\n              de usuario efectivo debe ser aquel del creador (msg_perm.cuid) o del propietario (msg_perm.uid) de\n              la  cola  de  mensajes.   Se requieres privilegios adecuados (probablemente, root) para superar el\n              valor msg_qbytes por encima del valor del sistema MSGMNB.\n\n       IPC_RMID\n              Elimina la cola de mensajes y sus estructuras de datos asociadas despertando a todos los  procesos\n              en  espera  de  lectura  o  escritura  (devolviendo un valor de error y asignando a errno el valor\n              EIDRM).  El proceso invocador debe tener los privilegios  adecuados  (probablemente,  root)  o  su\n              identificador  de  usuario  efectivo  debe  ser  aquel del creador o del propietario de la cola de\n              mensajes.\n\nVALOR DEVUELTO\n       Si ha funcionado, el valor devuelto sera 0, en otro caso -1 con errno indicando el error\n\n", "ERRORES": "       Ante un error errno sera fijado a uno de los siguientes valores:\n\n       EACCES     El argumento cmd es igual a IPC_STAT pero el proceso invocador no tiene  permisos  de  lectura\n                  sobre la cola de mensajes msqid.\n\n       EFAULT     El  argumento  cmd  tiene el valor IPC_SET o IPC_STAT pero la direcci\u00f3n apuntada por buf no es\n                  accesible.\n\n       EIDRM      La cola de mensajes ha sido eliminada.\n\n       EINVAL     Valor incorrecto de cmd o msqid.\n\n       EPERM      El argumento cmd tiene el valor  IPC_SET  o  IPC_RMID  pero  el  proceso  invocador  no  tiene\n                  suficientes privilegios para ejecutar la orden.\n\n", "OBSERVACIONES": "       Las  llamadas  IPC_INFO, MSG_STAT y MSG_INFO son utilizadas por el programa ipcs(8) a fin de proporcionar\n       informaci\u00f3n de los recursos asignados.  En el futuro esto puede ser modificado segun  las  necesitades  o\n       trasladado al interfaz /proc.\n\n       Varios  campos  de  la  estructura  msqid_ds eran de tipo entero corto bajo Linux 2.2 y se convirtieron a\n       enteros largos bajo Linux 2.4. Para sacar provecho de \u00e9sto, una recompilaci\u00f3n  bajo  glibc-2.1.91  o  una\n       versi\u00f3n  posterior  deber\u00eda  bastar.   (El  n\u00facleo  distingue las llamadas antiguas de las nuevas por una\n       bandera IPC_64 en cmd.)\n\nCONFORME A\n       SVr4, SVID.  SVID no documenta el error EIDRM.\n\nV\u00c9ASE TAMBI\u00c9N\n       ipc(5), msgget(2), msgsnd(2), msgrcv(2)\n\nLinux 2.4.1                                      18 febrero 2001                                       MSGCTL(2)\n"},{"NOMBRE": "       msgget - devuelve el identificador para una cola de mensajes\n\n", "SINOPSIS": "       #include <sys/types.h>\n       #include <sys/ipc.h>\n       #include <sys/msg.h>\n\n       int msgget(key_t key, int msgflg);\n\n", "DESCRIPCION": "       La  funci\u00f3n  devuelve  el identificador de la cola de mensajes asociada a key.  Se crea una nueva cola de\n       mensajes si key tiene el valor IPC_PRIVATE, o si key no es IPC_PRIVATE pero no  existe  ninguna  cola  de\n       mensajes  asociada  a  key,  y  IPC_CREAT  se inserta en msgflg (esto es, msgflg&IPC_CREAT es distinto de\n       cero).  La presencia en msgflg de los campos IPC_CREAT y IPC_EXCL desempe\u00f1an el mismo papel, con respecto\n       a  la  existencia  de  la  cola de mensajes, que O_CREAT y O_EXCL en el argumento \"mode\" de la llamada al\n       sistema open(2), es decir, la funci\u00f3n msgget falla si msgflg inserta IPC_CREAT y IPC_EXCL y ya esiste una\n       cola de mensajes para key.\n\n       En  la  creaci\u00f3n,  los  9 bits m\u00e1s bajos del argumento msgflg definen los permisos de acceso a la cola de\n       mensajes.  Estos bits para los permisos tienen la misma forma y sem\u00e1ntica que  los  de  los  permisos  de\n       acceso en las llamadas al sistema open(2) o creat(2) (Los permisos de ejecuci\u00f3n no son usados.)\n\n       Si  se  crea  una  nueva  cola  de  mensajes, la llamada al sistema inicializa la estructura de datos del\n       sistema para la cola msqid_ds como se muestra:\n\n              msg_perm.cuid y msg_perm.uid son  fijados  al  identificador  del  usuario  efectivo  del  proceso\n              invocador.\n\n              msg_perm.cgid y msg_perm.gid son fijados al identificador de grupo efectivo del proveso invocador.\n\n              Los 9 bits m\u00e1s bajo de msg_perm.mode son fijados a los 9 bits m\u00e1s bajos de msgflg.\n\n              msg_qnum, msg_lspid, msg_lrpid, msg_stime y msg_rtime son puestos a 0.\n\n              msg_ctime contendr\u00e1 la hora actual\n\n              msg_qbytes ser\u00e1 igual al l\u00edmite impuesto por el sistema MSGMNB.\n\n       Si  la  cola de mensajes ya existe, se verifican los permisos de acceso, y ser realiza una comprobaci\u00f3n a\n       fin de verificar si est\u00e1 marcada para su destrucci\u00f3n.\n\nVALOR DEVUELTO\n       Si ha funcionado correctamente, devuelve el idenficador para la cola de mensajes (un entero no negativo),\n       en otro caso -1 con errno indicando el error.\n\n", "ERRORES": "       En caso de error, errno tendr\u00e1 uno de los siguientes valores:\n\n       EACCES     Existe una cola de mensajes para key, pero el proceso no tiene permiso de acceso a la cola.\n\n       EEXIST     Existe una cola de mensajes para key y msgflg contiene IPC_CREAT y IPC_EXCL.\n\n       ENOENT     No existe una cola de mensajes para key y msgflg no contiene IPC_CREAT.\n\n       ENOMEM     Una  cola  de mensajes ha de ser creada pero el sistema no contiene suficiente memoria para la\n                  nueva estructura de datos.\n\n       ENOSPC     Una cola de mensajes ha de ser creada pero el l\u00edmite del sistema  para  el  m\u00e1ximo  n\u00famero  de\n                  colas de mensajes (MSGMNI) ser\u00e1 superado.\n\n", "OBSERVACIONES": "       IPC_PRIVATE  no  es un campo de tipo bandera, es del tipo key_t.  Si este valor especial es utilizado por\n       key, la llamada al sistema ignorar\u00e1 todo excepto los 9 bits de menor orden de msgflg  y  crea  una  nueva\n       cola de mensajes (si ha funcionado).\n\n       Lo siguiente es una limitaci\u00f3n en los recursos del sistema que afecta a la llamada msgget\n\n       MSGMNI     N\u00famero m\u00e1ximo de colas de mensajes soportadas por el sistema: depende de la pol\u00edtica tomada.\n\n", "FALLOS": "       La  elecci\u00f3n  del  nombre  IPC_PRIVATE puede que fuera desafortunada, IPC_NEW mostrar\u00eda m\u00e1s claramente su\n       funci\u00f3n.\n\nCONFORME A\n       SVr4, SVID.  Hasta la versi\u00f3n 2.3.20 Linux devolv\u00eda EIDRM cuando se llamaba a  msgget  con  una  cola  de\n       mensajes planificada para ser borrada.\n\nV\u00c9ASE TAMBI\u00c9N\n       ftok(3), ipc(5), msgctl(2), msgsnd(2), msgrcv(2)\n\nLinux 0.99.13                                   1 noviembre 1993                                       MSGGET(2)\n"},{"NOMBRE": "       msgop - operaciones con mensajes\n\n", "SINOPSIS": "       #include <sys/types.h>\n       #include <sys/ipc.h>\n       #include <sys/msg.h>\n\n       int msgsnd(int msqid, struct msgbuf *msgp, size_t msgsz, int msgflg);\n\n       ssize_t msgrcv(int msqid, struct msgbuf *msgp, size_t msgsz, long msgtyp, int msgflg);\n\n", "DESCRIPCION": "       Para  enviar  o  recibir  un  mensaje, el proceso invocador reserva una estructura de la siguiente manera\n       gen\u00e9rica:\n\n            struct msgbuf {\n                 long mtype;     /* tipo de msj., debe ser > 0 */\n                 char mtext[1];  /* datos del mensaje */\n            };\n\n       El campo mtext es un vector (u otra estructura) cuyo tama\u00f1o viene determinado por msgsz, un valor  entero\n       no  negativo.   Los  mensajes  de longitud cero (p.e., sin campo mtext) est\u00e1n permitidos.  El campo mtype\n       debe tener un valor entero estrictamente positivo que puede ser empleado por el proceso receptor para  la\n       selecci\u00f3n de mensaje (vea la secci\u00f3n sobre msgrcv).\n\n       El proceso invocador debe tener permiso de escritura para enviar, y de lectura para recibir un mensaje en\n       la cola.\n\n       La llamada al sistema msgsnd a\u00f1ade una copia del mensaje apuntado por msgp a  la  cola  de  mensaje  cuyo\n       identificador se especifica por el valor de msqid.\n\n       Si  hay suficiente espacio disponible en la cola, msgsnd termina con \u00e9xito inmediatamente.  (La capacidad\n       de la cola est\u00e1 definida por el campo msg_bytes en la estructura de datos asociada a la cola de mensajes.\n       Durante  la  creaci\u00f3n  de  la  cola este campo es inicializado a MSGMNB bytes, pero este l\u00edmite puede ser\n       modificado usando msgctl.)  Si no hay suficiente espacio disponible en la  cola,  el  comportamiento  por\n       defecto  de  msgsnd  es  bloquearse  hasta  que se disponga del espacio.  Si IPC_NOWAIT est\u00e1 contenida en\n       msgflg la llamada falla con el error EAGAIN.\n\n       Una llamada msgsnd bloqueada puede fallar tambi\u00e9n si la cola es eliminada (en  tal  caso  la  llamada  al\n       sistema  falla  poniendo  el  valor  EIDRM en errno), o si se atrapa una se\u00f1al (en tal caso la llamada al\n       sistem  falla  poniendo  el  valor  EINTR  en  errno).   (msgsnd  y  msgrcv  no  son  nunca   reiniciadas\n       autom\u00e1ticamente  despu\u00e9s  de  haber  sido  interrumpidas  por  un  manejador de se\u00f1ales, a pesar de haber\n       especificado la opci\u00f3n SA_RESTART cuando se estableci\u00f3 el manejador de se\u00f1ales.)\n\n       Tras la terminaci\u00f3n con \u00e9xito de la llamada, la estructura de datos de la cola de mensajes  se  actualiza\n       como sigue:\n\n              msg_lspid toma el valor del PID del proceso invocador.\n\n              msg_qnum se incrementa en una unidad.\n\n              msg_stime toma el valor de la hora actual.\n\n       La  llamada al sistema msgrcv lee un mensaje de la cola de mensajes especificada por msqid y lo guarda en\n       la estructura msgbuf apuntada por el argumento msgp, borrando el mensaje leido de la cola.\n\n       El argumento msgsz especifica el tama\u00f1o m\u00e1ximo en bytes para el miembro mtext de la  estructura  apuntada\n       por  el  argumento  msgp.   Si  el  texto  del  mensaje tiene una longitud mayor de msgsz, entonces si el\n       argumento msgflg contiene MSG_NOERROR, el texto del mensaje se truncar\u00e1 (y la parte truncada se perder\u00e1),\n       y  si  no, el mensaje no se borra de la cola y la llamada al sistema falla regresando y poniendo el valor\n       E2BIG en errno.\n\n       El argumento msgtyp especifica el tipo de mensaje pedido como se muestra a continuaci\u00f3n:\n\n              Si msgtyp es 0, entonces se lee el primer mensaje de la cola.\n\n              Si msgtyp es mayor que 0, entonces se lee el primer mensaje en la cola del tipo msgtyp a menos que\n              MSG_EXCEPT estuviera contenido en msgflg, en cuyo caso se lee el primer mensaje en la cola de tipo\n              distinto a msgtyp.\n\n              Si msgtyp es menor que 0, entonces se leer\u00e1 el primer mensaje en la cola  con  el  tipo  m\u00e1s  bajo\n              menor o igual al valor absoluto de msgtyp.\n\n       El  argumento  msgflg  continene  ninguna,  una  o  m\u00e1s  (engarz\u00e1ndolas  con el operador OR) de entre las\n       siguientes opciones:\n\n              IPC_NOWAIT Para retorno inmediato si no hay en la cola ning\u00fan mensaje del tipo pedido. La  llamada\n              al sistema falla con el valor ENOMSG en errno.\n\n              MSG_EXCEPT  Empleado  con  msgtyp  mayor  que 0 para leer el primer mensaje en la cola con tipo de\n              mensaje diferente de msgtyp.\n\n              MSG_NOERROR Para truncar el texto del mensaje si es mayor que msgsz bytes.\n\n       Si no hay disponible un mensaje del tipo pedido e IPC_NOWAIT no est\u00e1  contenido  en  msgflg,  el  proceso\n       invocador se bloquea hasta que ocurra una de las siguientes condiciones:\n\n              Un mensaje del tipo deseado se ponga en la cola.\n\n              La  cola  de mensajes se borre del sistema.  En este caso la llamada al sistema falla con el valor\n              EIDRM en errno.\n\n              El proceso invocador captura una se\u00f1al.  En este caso la llamada al sistema  falla  con  el  valor\n              EINTR en errno.\n\n       Tras la terminaci\u00f3n con \u00e9xito, la estructura de datos de la cola de mensajes se actualiza como sigue:\n\n              msg_lrpid toma el valor del PID del proceso invocador.\n\n              msg_qnum se decrementa en una unidad.\n\n              msg_rtime toma el valor de la hora actual.\n\nVALOR DEVUELTO\n       En  caso  de  fallo  ambas  funciones devuelven -1 con errno indicando el error, en caso contrario msgsnd\n       devuelve 0 y msgrvc devuelve el n\u00famero de bytes realmente copiados en el vector mtext.\n\n", "ERRORES": "       Si msgsnd falla, cuando la funci\u00f3n regresa, errno coger\u00e1 uno de entre los siguientes valores:\n\n       EAGAIN     El mensaje no puede ser enviado  debido  al  l\u00edmite  para  la  cola  de  msg_qbytes  bytes,  e\n                  IPC_NOWAIT estaba contenido en mgsflg.\n\n       EACCES     El proceso invocador no tiene permisos de escritura en la cola de mensajes.\n\n       EFAULT     La direcci\u00f3n apuntada por msgp no es accesible.\n\n       EIDRM      La cola de mensajes fue borrada.\n\n       EINTR      Durmiendo  a  la  espera  de  una  condici\u00f3n de cola de mensajes llena, el proceso captur\u00f3 una\n                  se\u00f1al.\n\n       EINVAL     Valor inv\u00e1lido para msqid, o  valor no positivo de mtype, o valor inv\u00e1lido para  msgsz  (menor\n                  que 0 \u00f3 mayor que el valor del sistema MSGMAX).\n\n       ENOMEM     El sistema no tiene bastante memoria para hacer una copia del msgbuf suministrado.\n\n       Si msgrcv falla, cuando la funci\u00f3n regresa, errno tomar\u00e1 uno de entre los valores siguientes:\n\n       E2BIG      La  longitud  del  texto  del  mensaje  es  mayor que msgsz y MSG_NOERROR no est\u00e1 contenido en\n                  msgflg.\n\n       EACCES     El proceso invocador no tiene permiso de lectura en la cola de mensajes.\n\n       EFAULT     La direcci\u00f3n apuntada por msgp no es accesible.\n\n       EIDRM      Mientras el proceso estaba durmiento en espera de recibir un mensaje, la cola de mensajes  fue\n                  borrada.\n\n       EINTR      Mientras  el  proceso estaba durmiento en espera de recibir un mensaje, el proceso recibi\u00f3 una\n                  se\u00f1al que tuvo que ser capturada.\n\n       EINVAL     Valor ilegal de msgqid, o msgsz menor que 0.\n\n       ENOMSG     IPC_NOWAIT estaba contenido en msgflg y no exist\u00eda ning\u00fan mensaje del  tipo  requerido  en  la\n                  cola de mensajes.\n\n", "OBSERVACIONES": "       Los siguientes son l\u00edmites del sistema que afectan a la llamada al sistema msgsnd:\n\n       MSGMAX     Tama\u00f1o m\u00e1ximo para un texto de mensaje: la implementaci\u00f3n pone esta valor a 8192 bytes.\n\n       MSGMNB     Tama\u00f1o  m\u00e1ximo  predeterminado en bytes de una cola de mensaje: 16384 bytes.  El super-usuario\n                  puede incrementar el tama\u00f1o de una cola de mensajes m\u00e1s all\u00e1 de MSGMNB a trav\u00e9s de la  llamada\n                  al sistema msgctl.\n\n       La  implementaci\u00f3n  no  tiene  l\u00edmites  intr\u00ednsecos  para  el n\u00famero m\u00e1ximo, del sistema, de cabeceras de\n       mensaje (MSGTQL) ni para el tama\u00f1o m\u00e1ximo, del sistema, en bytes, de la zona com\u00fan de mensajes (MSGPOOL).\n\nCONFORME A\n       SVr4, SVID.\n\n", "NOTA": "       El argumento de tipo puntero est\u00e1 declarado como struct msgbuf * en libc4, libc5, glibc 2.0,  glibc  2.1.\n       Est\u00e1 declarado como void * (const void * para msgsnd()) en glibc 2.2, siguiendo el est\u00e1ndar SUSv2.\n\nV\u00c9ASE TAMBI\u00c9N\n       ipc(5), msgctl(2), msgget(2), msgrcv(2), msgsnd(2)\n\nLinux 2.4.18                                      1 junio 2002                                          MSGOP(2)\n"},{"NOMBRE": "       msgop - operaciones con mensajes\n\n", "SINOPSIS": "       #include <sys/types.h>\n       #include <sys/ipc.h>\n       #include <sys/msg.h>\n\n       int msgsnd(int msqid, struct msgbuf *msgp, size_t msgsz, int msgflg);\n\n       ssize_t msgrcv(int msqid, struct msgbuf *msgp, size_t msgsz, long msgtyp, int msgflg);\n\n", "DESCRIPCION": "       Para  enviar  o  recibir  un  mensaje, el proceso invocador reserva una estructura de la siguiente manera\n       gen\u00e9rica:\n\n            struct msgbuf {\n                 long mtype;     /* tipo de msj., debe ser > 0 */\n                 char mtext[1];  /* datos del mensaje */\n            };\n\n       El campo mtext es un vector (u otra estructura) cuyo tama\u00f1o viene determinado por msgsz, un valor  entero\n       no  negativo.   Los  mensajes  de longitud cero (p.e., sin campo mtext) est\u00e1n permitidos.  El campo mtype\n       debe tener un valor entero estrictamente positivo que puede ser empleado por el proceso receptor para  la\n       selecci\u00f3n de mensaje (vea la secci\u00f3n sobre msgrcv).\n\n       El proceso invocador debe tener permiso de escritura para enviar, y de lectura para recibir un mensaje en\n       la cola.\n\n       La llamada al sistema msgsnd a\u00f1ade una copia del mensaje apuntado por msgp a  la  cola  de  mensaje  cuyo\n       identificador se especifica por el valor de msqid.\n\n       Si  hay suficiente espacio disponible en la cola, msgsnd termina con \u00e9xito inmediatamente.  (La capacidad\n       de la cola est\u00e1 definida por el campo msg_bytes en la estructura de datos asociada a la cola de mensajes.\n       Durante  la  creaci\u00f3n  de  la  cola este campo es inicializado a MSGMNB bytes, pero este l\u00edmite puede ser\n       modificado usando msgctl.)  Si no hay suficiente espacio disponible en la  cola,  el  comportamiento  por\n       defecto  de  msgsnd  es  bloquearse  hasta  que se disponga del espacio.  Si IPC_NOWAIT est\u00e1 contenida en\n       msgflg la llamada falla con el error EAGAIN.\n\n       Una llamada msgsnd bloqueada puede fallar tambi\u00e9n si la cola es eliminada (en  tal  caso  la  llamada  al\n       sistema  falla  poniendo  el  valor  EIDRM en errno), o si se atrapa una se\u00f1al (en tal caso la llamada al\n       sistem  falla  poniendo  el  valor  EINTR  en  errno).   (msgsnd  y  msgrcv  no  son  nunca   reiniciadas\n       autom\u00e1ticamente  despu\u00e9s  de  haber  sido  interrumpidas  por  un  manejador de se\u00f1ales, a pesar de haber\n       especificado la opci\u00f3n SA_RESTART cuando se estableci\u00f3 el manejador de se\u00f1ales.)\n\n       Tras la terminaci\u00f3n con \u00e9xito de la llamada, la estructura de datos de la cola de mensajes  se  actualiza\n       como sigue:\n\n              msg_lspid toma el valor del PID del proceso invocador.\n\n              msg_qnum se incrementa en una unidad.\n\n              msg_stime toma el valor de la hora actual.\n\n       La  llamada al sistema msgrcv lee un mensaje de la cola de mensajes especificada por msqid y lo guarda en\n       la estructura msgbuf apuntada por el argumento msgp, borrando el mensaje leido de la cola.\n\n       El argumento msgsz especifica el tama\u00f1o m\u00e1ximo en bytes para el miembro mtext de la  estructura  apuntada\n       por  el  argumento  msgp.   Si  el  texto  del  mensaje tiene una longitud mayor de msgsz, entonces si el\n       argumento msgflg contiene MSG_NOERROR, el texto del mensaje se truncar\u00e1 (y la parte truncada se perder\u00e1),\n       y  si  no, el mensaje no se borra de la cola y la llamada al sistema falla regresando y poniendo el valor\n       E2BIG en errno.\n\n       El argumento msgtyp especifica el tipo de mensaje pedido como se muestra a continuaci\u00f3n:\n\n              Si msgtyp es 0, entonces se lee el primer mensaje de la cola.\n\n              Si msgtyp es mayor que 0, entonces se lee el primer mensaje en la cola del tipo msgtyp a menos que\n              MSG_EXCEPT estuviera contenido en msgflg, en cuyo caso se lee el primer mensaje en la cola de tipo\n              distinto a msgtyp.\n\n              Si msgtyp es menor que 0, entonces se leer\u00e1 el primer mensaje en la cola  con  el  tipo  m\u00e1s  bajo\n              menor o igual al valor absoluto de msgtyp.\n\n       El  argumento  msgflg  continene  ninguna,  una  o  m\u00e1s  (engarz\u00e1ndolas  con el operador OR) de entre las\n       siguientes opciones:\n\n              IPC_NOWAIT Para retorno inmediato si no hay en la cola ning\u00fan mensaje del tipo pedido. La  llamada\n              al sistema falla con el valor ENOMSG en errno.\n\n              MSG_EXCEPT  Empleado  con  msgtyp  mayor  que 0 para leer el primer mensaje en la cola con tipo de\n              mensaje diferente de msgtyp.\n\n              MSG_NOERROR Para truncar el texto del mensaje si es mayor que msgsz bytes.\n\n       Si no hay disponible un mensaje del tipo pedido e IPC_NOWAIT no est\u00e1  contenido  en  msgflg,  el  proceso\n       invocador se bloquea hasta que ocurra una de las siguientes condiciones:\n\n              Un mensaje del tipo deseado se ponga en la cola.\n\n              La  cola  de mensajes se borre del sistema.  En este caso la llamada al sistema falla con el valor\n              EIDRM en errno.\n\n              El proceso invocador captura una se\u00f1al.  En este caso la llamada al sistema  falla  con  el  valor\n              EINTR en errno.\n\n       Tras la terminaci\u00f3n con \u00e9xito, la estructura de datos de la cola de mensajes se actualiza como sigue:\n\n              msg_lrpid toma el valor del PID del proceso invocador.\n\n              msg_qnum se decrementa en una unidad.\n\n              msg_rtime toma el valor de la hora actual.\n\nVALOR DEVUELTO\n       En  caso  de  fallo  ambas  funciones devuelven -1 con errno indicando el error, en caso contrario msgsnd\n       devuelve 0 y msgrvc devuelve el n\u00famero de bytes realmente copiados en el vector mtext.\n\n", "ERRORES": "       Si msgsnd falla, cuando la funci\u00f3n regresa, errno coger\u00e1 uno de entre los siguientes valores:\n\n       EAGAIN     El mensaje no puede ser enviado  debido  al  l\u00edmite  para  la  cola  de  msg_qbytes  bytes,  e\n                  IPC_NOWAIT estaba contenido en mgsflg.\n\n       EACCES     El proceso invocador no tiene permisos de escritura en la cola de mensajes.\n\n       EFAULT     La direcci\u00f3n apuntada por msgp no es accesible.\n\n       EIDRM      La cola de mensajes fue borrada.\n\n       EINTR      Durmiendo  a  la  espera  de  una  condici\u00f3n de cola de mensajes llena, el proceso captur\u00f3 una\n                  se\u00f1al.\n\n       EINVAL     Valor inv\u00e1lido para msqid, o  valor no positivo de mtype, o valor inv\u00e1lido para  msgsz  (menor\n                  que 0 \u00f3 mayor que el valor del sistema MSGMAX).\n\n       ENOMEM     El sistema no tiene bastante memoria para hacer una copia del msgbuf suministrado.\n\n       Si msgrcv falla, cuando la funci\u00f3n regresa, errno tomar\u00e1 uno de entre los valores siguientes:\n\n       E2BIG      La  longitud  del  texto  del  mensaje  es  mayor que msgsz y MSG_NOERROR no est\u00e1 contenido en\n                  msgflg.\n\n       EACCES     El proceso invocador no tiene permiso de lectura en la cola de mensajes.\n\n       EFAULT     La direcci\u00f3n apuntada por msgp no es accesible.\n\n       EIDRM      Mientras el proceso estaba durmiento en espera de recibir un mensaje, la cola de mensajes  fue\n                  borrada.\n\n       EINTR      Mientras  el  proceso estaba durmiento en espera de recibir un mensaje, el proceso recibi\u00f3 una\n                  se\u00f1al que tuvo que ser capturada.\n\n       EINVAL     Valor ilegal de msgqid, o msgsz menor que 0.\n\n       ENOMSG     IPC_NOWAIT estaba contenido en msgflg y no exist\u00eda ning\u00fan mensaje del  tipo  requerido  en  la\n                  cola de mensajes.\n\n", "OBSERVACIONES": "       Los siguientes son l\u00edmites del sistema que afectan a la llamada al sistema msgsnd:\n\n       MSGMAX     Tama\u00f1o m\u00e1ximo para un texto de mensaje: la implementaci\u00f3n pone esta valor a 8192 bytes.\n\n       MSGMNB     Tama\u00f1o  m\u00e1ximo  predeterminado en bytes de una cola de mensaje: 16384 bytes.  El super-usuario\n                  puede incrementar el tama\u00f1o de una cola de mensajes m\u00e1s all\u00e1 de MSGMNB a trav\u00e9s de la  llamada\n                  al sistema msgctl.\n\n       La  implementaci\u00f3n  no  tiene  l\u00edmites  intr\u00ednsecos  para  el n\u00famero m\u00e1ximo, del sistema, de cabeceras de\n       mensaje (MSGTQL) ni para el tama\u00f1o m\u00e1ximo, del sistema, en bytes, de la zona com\u00fan de mensajes (MSGPOOL).\n\nCONFORME A\n       SVr4, SVID.\n\n", "NOTA": "       El argumento de tipo puntero est\u00e1 declarado como struct msgbuf * en libc4, libc5, glibc 2.0,  glibc  2.1.\n       Est\u00e1 declarado como void * (const void * para msgsnd()) en glibc 2.2, siguiendo el est\u00e1ndar SUSv2.\n\nV\u00c9ASE TAMBI\u00c9N\n       ipc(5), msgctl(2), msgget(2), msgrcv(2), msgsnd(2)\n\nLinux 2.4.18                                      1 junio 2002                                          MSGOP(2)\n"},{"NOMBRE": "       msgop - operaciones con mensajes\n\n", "SINOPSIS": "       #include <sys/types.h>\n       #include <sys/ipc.h>\n       #include <sys/msg.h>\n\n       int msgsnd(int msqid, struct msgbuf *msgp, size_t msgsz, int msgflg);\n\n       ssize_t msgrcv(int msqid, struct msgbuf *msgp, size_t msgsz, long msgtyp, int msgflg);\n\n", "DESCRIPCION": "       Para  enviar  o  recibir  un  mensaje, el proceso invocador reserva una estructura de la siguiente manera\n       gen\u00e9rica:\n\n            struct msgbuf {\n                 long mtype;     /* tipo de msj., debe ser > 0 */\n                 char mtext[1];  /* datos del mensaje */\n            };\n\n       El campo mtext es un vector (u otra estructura) cuyo tama\u00f1o viene determinado por msgsz, un valor  entero\n       no  negativo.   Los  mensajes  de longitud cero (p.e., sin campo mtext) est\u00e1n permitidos.  El campo mtype\n       debe tener un valor entero estrictamente positivo que puede ser empleado por el proceso receptor para  la\n       selecci\u00f3n de mensaje (vea la secci\u00f3n sobre msgrcv).\n\n       El proceso invocador debe tener permiso de escritura para enviar, y de lectura para recibir un mensaje en\n       la cola.\n\n       La llamada al sistema msgsnd a\u00f1ade una copia del mensaje apuntado por msgp a  la  cola  de  mensaje  cuyo\n       identificador se especifica por el valor de msqid.\n\n       Si  hay suficiente espacio disponible en la cola, msgsnd termina con \u00e9xito inmediatamente.  (La capacidad\n       de la cola est\u00e1 definida por el campo msg_bytes en la estructura de datos asociada a la cola de mensajes.\n       Durante  la  creaci\u00f3n  de  la  cola este campo es inicializado a MSGMNB bytes, pero este l\u00edmite puede ser\n       modificado usando msgctl.)  Si no hay suficiente espacio disponible en la  cola,  el  comportamiento  por\n       defecto  de  msgsnd  es  bloquearse  hasta  que se disponga del espacio.  Si IPC_NOWAIT est\u00e1 contenida en\n       msgflg la llamada falla con el error EAGAIN.\n\n       Una llamada msgsnd bloqueada puede fallar tambi\u00e9n si la cola es eliminada (en  tal  caso  la  llamada  al\n       sistema  falla  poniendo  el  valor  EIDRM en errno), o si se atrapa una se\u00f1al (en tal caso la llamada al\n       sistem  falla  poniendo  el  valor  EINTR  en  errno).   (msgsnd  y  msgrcv  no  son  nunca   reiniciadas\n       autom\u00e1ticamente  despu\u00e9s  de  haber  sido  interrumpidas  por  un  manejador de se\u00f1ales, a pesar de haber\n       especificado la opci\u00f3n SA_RESTART cuando se estableci\u00f3 el manejador de se\u00f1ales.)\n\n       Tras la terminaci\u00f3n con \u00e9xito de la llamada, la estructura de datos de la cola de mensajes  se  actualiza\n       como sigue:\n\n              msg_lspid toma el valor del PID del proceso invocador.\n\n              msg_qnum se incrementa en una unidad.\n\n              msg_stime toma el valor de la hora actual.\n\n       La  llamada al sistema msgrcv lee un mensaje de la cola de mensajes especificada por msqid y lo guarda en\n       la estructura msgbuf apuntada por el argumento msgp, borrando el mensaje leido de la cola.\n\n       El argumento msgsz especifica el tama\u00f1o m\u00e1ximo en bytes para el miembro mtext de la  estructura  apuntada\n       por  el  argumento  msgp.   Si  el  texto  del  mensaje tiene una longitud mayor de msgsz, entonces si el\n       argumento msgflg contiene MSG_NOERROR, el texto del mensaje se truncar\u00e1 (y la parte truncada se perder\u00e1),\n       y  si  no, el mensaje no se borra de la cola y la llamada al sistema falla regresando y poniendo el valor\n       E2BIG en errno.\n\n       El argumento msgtyp especifica el tipo de mensaje pedido como se muestra a continuaci\u00f3n:\n\n              Si msgtyp es 0, entonces se lee el primer mensaje de la cola.\n\n              Si msgtyp es mayor que 0, entonces se lee el primer mensaje en la cola del tipo msgtyp a menos que\n              MSG_EXCEPT estuviera contenido en msgflg, en cuyo caso se lee el primer mensaje en la cola de tipo\n              distinto a msgtyp.\n\n              Si msgtyp es menor que 0, entonces se leer\u00e1 el primer mensaje en la cola  con  el  tipo  m\u00e1s  bajo\n              menor o igual al valor absoluto de msgtyp.\n\n       El  argumento  msgflg  continene  ninguna,  una  o  m\u00e1s  (engarz\u00e1ndolas  con el operador OR) de entre las\n       siguientes opciones:\n\n              IPC_NOWAIT Para retorno inmediato si no hay en la cola ning\u00fan mensaje del tipo pedido. La  llamada\n              al sistema falla con el valor ENOMSG en errno.\n\n              MSG_EXCEPT  Empleado  con  msgtyp  mayor  que 0 para leer el primer mensaje en la cola con tipo de\n              mensaje diferente de msgtyp.\n\n              MSG_NOERROR Para truncar el texto del mensaje si es mayor que msgsz bytes.\n\n       Si no hay disponible un mensaje del tipo pedido e IPC_NOWAIT no est\u00e1  contenido  en  msgflg,  el  proceso\n       invocador se bloquea hasta que ocurra una de las siguientes condiciones:\n\n              Un mensaje del tipo deseado se ponga en la cola.\n\n              La  cola  de mensajes se borre del sistema.  En este caso la llamada al sistema falla con el valor\n              EIDRM en errno.\n\n              El proceso invocador captura una se\u00f1al.  En este caso la llamada al sistema  falla  con  el  valor\n              EINTR en errno.\n\n       Tras la terminaci\u00f3n con \u00e9xito, la estructura de datos de la cola de mensajes se actualiza como sigue:\n\n              msg_lrpid toma el valor del PID del proceso invocador.\n\n              msg_qnum se decrementa en una unidad.\n\n              msg_rtime toma el valor de la hora actual.\n\nVALOR DEVUELTO\n       En  caso  de  fallo  ambas  funciones devuelven -1 con errno indicando el error, en caso contrario msgsnd\n       devuelve 0 y msgrvc devuelve el n\u00famero de bytes realmente copiados en el vector mtext.\n\n", "ERRORES": "       Si msgsnd falla, cuando la funci\u00f3n regresa, errno coger\u00e1 uno de entre los siguientes valores:\n\n       EAGAIN     El mensaje no puede ser enviado  debido  al  l\u00edmite  para  la  cola  de  msg_qbytes  bytes,  e\n                  IPC_NOWAIT estaba contenido en mgsflg.\n\n       EACCES     El proceso invocador no tiene permisos de escritura en la cola de mensajes.\n\n       EFAULT     La direcci\u00f3n apuntada por msgp no es accesible.\n\n       EIDRM      La cola de mensajes fue borrada.\n\n       EINTR      Durmiendo  a  la  espera  de  una  condici\u00f3n de cola de mensajes llena, el proceso captur\u00f3 una\n                  se\u00f1al.\n\n       EINVAL     Valor inv\u00e1lido para msqid, o  valor no positivo de mtype, o valor inv\u00e1lido para  msgsz  (menor\n                  que 0 \u00f3 mayor que el valor del sistema MSGMAX).\n\n       ENOMEM     El sistema no tiene bastante memoria para hacer una copia del msgbuf suministrado.\n\n       Si msgrcv falla, cuando la funci\u00f3n regresa, errno tomar\u00e1 uno de entre los valores siguientes:\n\n       E2BIG      La  longitud  del  texto  del  mensaje  es  mayor que msgsz y MSG_NOERROR no est\u00e1 contenido en\n                  msgflg.\n\n       EACCES     El proceso invocador no tiene permiso de lectura en la cola de mensajes.\n\n       EFAULT     La direcci\u00f3n apuntada por msgp no es accesible.\n\n       EIDRM      Mientras el proceso estaba durmiento en espera de recibir un mensaje, la cola de mensajes  fue\n                  borrada.\n\n       EINTR      Mientras  el  proceso estaba durmiento en espera de recibir un mensaje, el proceso recibi\u00f3 una\n                  se\u00f1al que tuvo que ser capturada.\n\n       EINVAL     Valor ilegal de msgqid, o msgsz menor que 0.\n\n       ENOMSG     IPC_NOWAIT estaba contenido en msgflg y no exist\u00eda ning\u00fan mensaje del  tipo  requerido  en  la\n                  cola de mensajes.\n\n", "OBSERVACIONES": "       Los siguientes son l\u00edmites del sistema que afectan a la llamada al sistema msgsnd:\n\n       MSGMAX     Tama\u00f1o m\u00e1ximo para un texto de mensaje: la implementaci\u00f3n pone esta valor a 8192 bytes.\n\n       MSGMNB     Tama\u00f1o  m\u00e1ximo  predeterminado en bytes de una cola de mensaje: 16384 bytes.  El super-usuario\n                  puede incrementar el tama\u00f1o de una cola de mensajes m\u00e1s all\u00e1 de MSGMNB a trav\u00e9s de la  llamada\n                  al sistema msgctl.\n\n       La  implementaci\u00f3n  no  tiene  l\u00edmites  intr\u00ednsecos  para  el n\u00famero m\u00e1ximo, del sistema, de cabeceras de\n       mensaje (MSGTQL) ni para el tama\u00f1o m\u00e1ximo, del sistema, en bytes, de la zona com\u00fan de mensajes (MSGPOOL).\n\nCONFORME A\n       SVr4, SVID.\n\n", "NOTA": "       El argumento de tipo puntero est\u00e1 declarado como struct msgbuf * en libc4, libc5, glibc 2.0,  glibc  2.1.\n       Est\u00e1 declarado como void * (const void * para msgsnd()) en glibc 2.2, siguiendo el est\u00e1ndar SUSv2.\n\nV\u00c9ASE TAMBI\u00c9N\n       ipc(5), msgctl(2), msgget(2), msgrcv(2), msgsnd(2)\n\nLinux 2.4.18                                      1 junio 2002                                          MSGOP(2)\n"},{"NOMBRE": "       msync - sincroniza un fichero con un mapa de memoria\n\n", "SINOPSIS": "       #include <unistd.h>\n       #include <sys/mman.h>\n\n       #ifdef _POSIX_MAPPED_FILES\n       #ifdef _POSIX_SYNCHRONIZED_IO\n\n       int msync(void *comienzo, size_t longitud, int flags);\n\n       #endif\n       #endif\n\n", "DESCRIPCION": "       msync  vuelca  a  disco  los  cambios  hechos en la copia en memoria de un fichero que ha sido mapeado en\n       memoria empleando mmap (2).  Sin la utilizaci\u00f3n de esta llamada no est\u00e1 garantizado que  los  cambios  se\n       escriban  de vuelta antes de que se llame a munmap (2).  Para ser m\u00e1s precisos, se actualiza la parte del\n       fichero que corresponde al \u00e1rea de memoria que empieza en  comienzo  y  tiene  de  tama\u00f1o  longitud.   El\n       argumento  flags  puede tener a 1 los bits MS_ASYNC, MS_SYNC y MS_INVALIDATE, pero no a la vez MS_ASYNC y\n       MS_SYNC.  MS_ASYNC planifica una actualizaci\u00f3n para m\u00e1s adelante, pero la llamada regresa inmediatamente.\n       MS_SYNC pide una actualizaci\u00f3n y espera que se complete.  MS_INVALIDATE pide invalidar cualesquiera otros\n       mapeos del mismo fichero (de forma que puedan actualizarse con los valores frescos reci\u00e9n escritos).\n\nVALOR DEVUELTO\n       En caso de \u00e9xito se devuelve 0. En caso de error se devuelve -1 y se pone un valor apropiado en errno.\n\n", "ERRORES": "       EINVAL comienzo no es m\u00faltiplo de PAGESIZE, o cualquier  bit  distinto  de  MS_ASYNC  |  MS_INVALIDATE  |\n              MS_SYNC est\u00e1 a 1 en flags.\n\n       EFAULT La memoria indicada (o parte de ella) no ha sido mapeada.\n\nCONFORME A\n       POSIX.1b (anteriormente POSIX.4)\n\nV\u00c9ASE TAMBI\u00c9N\n       mmap(2), B.O. Gallmeister, POSIX.4, O'Reilly, pp. 128-129 y 389-391.\n\nLinux 2.0.32                                      12 Abril 1996                                         MSYNC(2)\n"},{"NOMBRE": "       munlock - vuelve a habilitar la paginaci\u00f3n para algunas partes de la memoria\n\n", "SINOPSIS": "       #include <sys/mman.h>\n\n       int munlock(const void *addr, size_t len);\n\n", "DESCRIPCION": "       munlock  vuelve  a  activar  la paginaci\u00f3n para la zona de memoria que cae en el rango que comienza en la\n       direcci\u00f3n addr con longitud len bytes. Todas las p\u00e1ginas que contienen una parte  del  rango  de  memoria\n       especificado  pueden  ser  movidas  de  nuevo por el n\u00facleo al espacio de intercambio (swap) externo tras\n       llamar a munlock.\n\n       Los bloqueos de memoria no se apilan; esto es, las p\u00e1ginas que han sido bloqueadas algunas veces mediante\n       llamadas  a  mlock  o  a  mlockall  ser\u00e1n  desbloqueadas  por  una  sola  llamada a munlock para el rango\n       correspondiente, o por munlockall.  Las p\u00e1ginas que  est\u00e1n  asociadas  a  varios  lugares  o  por  varios\n       procesos  permanecen  bloqueadas en RAM mientras est\u00e9n bloqueadas por lo menos en un lugar o por al menos\n       un proceso.\n\n       En sistemas POSIX en los que mlock y munlock est\u00e9n disponibles, se  define  en  <unistd.h>  la  constante\n       _POSIX_MEMLOCK_RANGE, y PAGESIZE, en <limits.h>, indica el n\u00famero de bytes por cada p\u00e1gina.\n\nVALOR DEVUELTO\n       En  caso  de  \u00e9xito,  munlock  devuelve  cero.  En caso de error, devuelve -1 y se pone en errno un valor\n       apropiado, y no tiene lugar ning\u00fan cambio a ning\u00fan bloqueo en el espacio de direcciones del proceso.\n\n", "ERRORES": "       ENOMEM Parte del rango de direcciones especificado no corresponde a p\u00e1ginas asociadas en  el  espacio  de\n              direcciones del proceso.\n\n       EINVAL len no era un n\u00famero positivo.\n\nCONFORME A\n       POSIX.1b, SVr4\n\nV\u00c9ASE TAMBI\u00c9N\n       mlock(2), mlockall(2), munlockall(2)\n\nLinux 1.3.43                                    26 noviembre 1995                                     MUNLOCK(2)\n"},{"NOMBRE": "       munlockall - vuelve a activar la paginaci\u00f3n para el proceso invocador\n\n", "SINOPSIS": "       #include <sys/mman.h>\n\n       int munlockall(void);\n\n", "DESCRIPCION": "       munlockall  vuelve  a  habilitar la paginaci\u00f3n para todas las p\u00e1ginas asociadas al espacio de direcciones\n       del proceso que hace esta llamada.\n\n       Los bloqueos de memoria no se apilan; esto es, las p\u00e1ginas que han sido bloqueadas algunas veces mediante\n       llamadas  a  mlock  o  a  mlockall  ser\u00e1n  desbloqueadas  por  una  sola  llamada a munlock para el rango\n       correspondiente, o por munlockall.  Las p\u00e1ginas que  est\u00e1n  asociadas  a  varios  lugares  o  por  varios\n       procesos  permanecen  bloqueadas en RAM mientras est\u00e9n bloqueadas por lo menos en un lugar o por al menos\n       un proceso.\n\n       En sistemas POSIX en los que mlock y munlock est\u00e9n disponibles, se  define  en  <unistd.h>  la  constante\n       _POSIX_MEMLOCK.\n\nVALOR DEVUELTO\n       En  caso  de  \u00e9xito,  munlockall  devuelve  cero.  En  caso de error devuelve -1 y pone en errno un valor\n       apropiado.\n\nCONFORME A\n       POSIX.1b, SVr4\n\nV\u00c9ASE TAMBI\u00c9N\n       mlockall(2), mlock(2), munlock(2)\n\nLinux 1.3.43                                    26 noviembre 1995                                  MUNLOCKALL(2)\n"},{"NOMBRE": "       mmap, munmap - ubica o elimina ficheros o dispositivos en memoria\n\n", "SINOPSIS": "       #include <sys/mman.h>\n\n       caddr_t mmap(void *start, size_t length, int prot , int flags, int fd, off_t offset);\n\n       int munmap(void *start, size_t length);\n\nDESCRIPCI\u00c3\u0093  N\n       La  funci\u00c3\u00b3n  mmap intenta ubicar length bytes comenzando en el desplazamiento offset desde el fichero (u\n       otro objeto) especificado por el descriptor de fichero fd en memoria, preferiblemente  en  la  direcci\u00c3\u00b3n\n       start.   Esta \u00c3\u00baltima direcci\u00c3\u00b3n es una sugerencia y normalmente se especifica como 0.  El lugar donde es\n       ubicado el objeto es devuelto por mmap, y nunca vale 0.  El argumento prot  describe  la  protecci\u00c3\u00b3n  de\n       memoria  deseada.  (y  no  debe  entrar  en  conflicto  con el modo de apertura del fichero). Puede valer\n       PROT_NONE o ser la combinaci\u00f3n mediante la operaci\u00f3n OR de una o m\u00e1s de las otras banderas PROT_*.\n\n       PROT_EXEC  Las p\u00c3\u00a1ginas deben ser ejecutadas.\n\n       PROT_READ  Las p\u00c3\u00a1ginas deben ser le\u00c3das.\n\n       PROT_WRITE Las p\u00c3\u00a1ginas deben ser escritas.\n\n       PROT_NONE  Las p\u00c3\u00a1ginas no pueden ser accedidas.\n\n       El par\u00c3\u00a1metro flags especifica el tipo de  objeto  insertado,  las  opciones  de  asociaci\u00c3\u00b3n  y  si  las\n       modificaciones hechas a la copia insertada en memoria son privadas al proceso o son compartidas por otras\n       referencias. Tiene los bits:\n\n       MAP_FIXED  No seleccionar una direcci\u00c3\u00b3n diferente a la especificada.  Si la direcci\u00c3\u00b3n  especificada  no\n                  puede  ser utilizada, mmap fallar\u00c3\u00a1. Si MAP_FIXED es especificado, start debe ser un m\u00c3\u00baltiplo\n                  del tama\u00c3\u00b1o de p\u00c3\u00a1gina. Utilizar esta opci\u00c3\u00b3n es desaconsejable.\n\n       MAP_SHARED Comparte este \u00c3\u00a1rea con todos los otros objetos que se\u00c3\u00b1alan a este objeto.  Almacenar  en  la\n                  regi\u00f3n es equivalente a escribir en el fichero.  El fichero puede no actualizarse hasta que se\n                  llame a msync(2) o munmap(2).\n\n       MAP_PRIVATE\n                  Crear un \u00c3\u00a1rea privada \"copy-on-write\".  Almacenar en la regi\u00f3n no afecta al fichero original.\n                  Es indefinido si los cambios hechos al fichero despu\u00e9s de la llamada a mmap son visibles en la\n                  regi\u00f3n mapeada.\n\n       Debe especificarse exactamente uno de los par\u00c3\u00a1metros MAP_SHARED o MAP_PRIVATE.\n\n       Los tres par\u00c3\u00a1metros anteriores est\u00c3\u00a1n descritos  en  POSIX.1b  (formalmente  POSIX.4)  y  Linux  tambi\u00e9n\n       reconoce los siguientes par\u00e1metros no est\u00e1ndares:\n\n       MAP_DENYWRITE\n              Este  par\u00e1metro  es  ignorado.   (Anteriormente, indicaba que los intentos de escritura al fichero\n              subyacente deber\u00edan fallar con ETXTBUSY. Pero \u00e9sto  era  fuente  de  ataques  de  denegaci\u00f3n  -de-\n              servicio.)\n\n       MAP_EXECUTABLE\n              Este par\u00e1metro es ignorado.\n\n       MAP_NORESERVE\n              (Usado  junto  con  MAP_PRIVATE.)  No  reserva  p\u00e1ginas  del  espacio  de  intercambio  para  esta\n              correspondencia. Cuando se reserva espacio de intercambio, se tiene la garant\u00eda de que es  posible\n              modificar  esta regi\u00f3n privada.  Cuando no se reserva puede obtenerse una violaci\u00f3n de segmento al\n              escribir si no hay memoria disponible.\n\n       MAP_LOCKED\n              Este par\u00e1metro es ignorado.\n\n       MAP_GROWSDOWN\n              Usado para pilas. Indica al sistema VM del n\u00facleo que la correspondencia podr\u00eda  extenderse  hacia\n              abajo en memoria.\n\n       MAP_ANONYMOUS\n              La  correspondencia  no  est\u00e1  respaldada  por  ning\u00fan  fichero;  los  argumentos  fd y offset son\n              ignorados. Este par\u00e1metro conjuntamente con MAP_SHARED est\u00e1 implementado desde Linux 2.4.\n\n       MAP_ANON\n              Sin\u00f3nimo para MAP_ANONYMOUS. Desaconsejado.\n\n       MAP_FILE\n              Par\u00e1metro de compatibilidad. Ignorado.\n\n       MAP_32BIT\n              Ubica la correspondencia dentro de los primeros 2 GB del espacio de direcciones del  proceso.   Es\n              ignorado cuando MAP_FIXED est\u00e1 activo. Este par\u00e1metro est\u00e1 soportado actualmente s\u00f3lo sobre x86-64\n              para programas de 64 bits.\n\n       Algunos  sistemas  documentan  los  par\u00e1metros  adicionales  MAP_AUTOGROW,  MAP_AUTORESRV,  MAP_COPY,   y\n       MAP_LOCAL.\n\n       fd  debe  ser  un  descriptor  de  fichero v\u00e1lido, a menos que MAP_ANONYMOUS est\u00e9 activo, en cuyo caso el\n       argumento es ignorado.\n\n       offset debe ser un m\u00faltiplo del tama\u00f1o de p\u00e1gina como lo devuelve getpagesize(2).\n\n       La memoria asociada con mmap es conservada  despu\u00e9s de fork(2), con los mismos atributos.\n\n       Un fichero es ubicado en m\u00faltiplos del tama\u00f1o de p\u00e1gina. Para un fichero que no sea m\u00faltiplo  del  tama\u00f1o\n       de  p\u00e1gina,  la  memoria  restante es puesta a cero cuando se ubica, y las escrituras a esa regi\u00f3n no son\n       llevadas al fichero. El efecto de cambiar el tama\u00f1o del  fichero  subyacente  a  una  correspondencia  en\n       aquellas p\u00e1ginas que correspondan a regiones a\u00f1adidas o eliminadas del fichero es indefinido.\n\n       La  llamada  al sistema munmap borra las ubicaciones para el rango de direcciones especificado, y produce\n       referencias a las direcciones dentro del rango a fin de generar referencias  a  memoria  inv\u00c3\u00a1lidas.   La\n       regi\u00f3n  es  tambi\u00e9n  desubicada  autom\u00e1ticamente  cuando  el  proceso  termina. Por otra parte, cerrar el\n       descriptor de fichero no desubica la regi\u00f3n.\n\n       La direcci\u00f3n start debe ser un m\u00faltiplo del tama\u00f1o de p\u00e1gina. Todas las p\u00e1ginas que contengan  una  parte\n       del  rango indicado son desubicadas, y referencias posteriores a estas p\u00e1ginas generar\u00e1n una violaci\u00f3n de\n       segmento. No se considera un error si el rango indicado no contiene p\u00e1ginas con correspondencia.\n\n       Para correspondencias respaldadas por fichero, el campo  st_atime  para  el  fichero  ubicado  puede  ser\n       actualizado  en  cualquier instante entre la llamada mmap() y la desubicaci\u00f3n correspondiente; la primera\n       referencia a una p\u00e1gina con correspondencia actualizar\u00e1 el campo si no lo ha sido ya.\n\n       Los campos st_ctime y st_mtime para un fichero ubicado con PROT_WRITE  y  MAP_SHARED  ser\u00e1n  actualizados\n       despu\u00e9s  de  una  escritura a la regi\u00f3n ubicada, y antes de una llamada posterior a msync() con la opci\u00f3n\n       MS_SYNC o MS_ASYNC, si alguna procede.\n\nVALOR DEVUELTO\n       Si ha funcionado mmap devuelve un puntero al \u00c3\u00a1rea reservada.  En caso de error, es devuelto -1, y  errno\n       es  modificado  apropiadamente.   Si  ha funcionado munmap devuelve 0, si hay error -1, y errno es fijada\n       (probablemente a EINVAL).\n\n", "OBSERVACIONES": "       Es dependiente de la arquitectura si PROT_READ incluye a PROT_EXEC o no. Los programas portables deber\u00edan\n       siempre activar PROT_EXEC si intentan ejecutar c\u00f3digo en la nueva regi\u00f3n ubicada.\n\n", "ERRORES": "       EBADF  fd no es un descriptor de fichero v\u00c3\u00a1lido (y MAP_ANONYMOUS no ha sido fijado).\n\n       EACCES Un descriptor de fichero hace referencia a un fichero no regular.  O bien se solicit\u00f3 MAP_PRIVATE,\n              pero fd no est\u00e1 abierto para lectura.  O bien se solicit\u00f3 MAP_SHARED  y  PROT_WRITE  est\u00e1  activo,\n              pero  fd  no est\u00e1 abierto en modo lectura/escritura (O_RDWR).  O bien PROT_WRITE est\u00e1 activo, pero\n              el fichero es s\u00f3lo para a\u00f1adir.\n\n       EINVAL No es correcto start o length o offset.  (E.g., son demasiado grandes, o no  est\u00c3\u00a1n  alineados  en\n              los l\u00c3mites de un valor m\u00c3\u00baltiplo de PAGESIZE).\n\n       ETXTBSY\n              MAP_DENYWRITE fue fijado pero el objeto especificado por fd est\u00c3\u00a1 abierto para escritura.\n\n       EAGAIN El fichero ha sido bloqueado, o se ha bloqueado una cantidad excesiva de memoria.\n\n       ENOMEM No  hay  memoria  disponible,  o  el  n\u00famero  m\u00e1ximo  de  correspondencias del proceso habr\u00eda sido\n              excedido.\n\n       ENODEV El sistema de ficheros subyacente del  fichero  especificado  no  soporta  la  correspondencia  de\n              memoria.\n\n       El uso de una regi\u00f3n ubicada puede resultar en estas se\u00f1ales:\n\n       SIGSEGV\n              Intento de escritura en una regi\u00f3n especificada a mmap como solo-lectura.\n\n       SIGBUS Intento  de acceso a una porci\u00f3n del buffer que no se corresponde con el fichero (por ejemplo, m\u00e1s\n              all\u00e1 del fin del fichero, incluyendo el caso en el que otro proceso ha truncado el fichero).\n\nCONFORME A\n       SVr4, POSIX.1b (formalmente POSIX.4), 4.4BSD, SUSv2.  SVr4  documenta  los  c\u00c3\u00b3digos  de  error  ENXIO  y\n       ENODEV.  SUSv2 documenta ls c\u00f3digos de error adicionales EMFILE y EOVERFLOW.\n\n       MAP_32BIT es una extensi\u00f3n de Linux.\n\nV\u00c3\u0089  ASE TAMBI\u00c3\u0089  N\n       getpagesize(2),  mmap2(2),  mremap(2),  msync(2),  shm_open(2),  B.O. Gallmeister, POSIX.4, O'Reilly, pp.\n       128-129 and 389-391.\n\nLinux 2.3.51                                      25 marzo 2000                                          MMAP(2)\n"},{"NOMBRE": "       nanosleep - hace una pausa en la ejecuci\u00f3n durante un tiempo especificado\n\n", "SINOPSIS": "       #include <time.h>\n\n       int nanosleep(const struct timespec *req, struct timespec *rem);\n\n", "DESCRIPCION": "       nanosleep  retarda la ejecuci\u00f3n del programa durante al menos el tiempo especificado en *req.  La funci\u00f3n\n       puede regresar antes si se ha mandado una se\u00f1al al proceso. En este  caso,  devuelve  -1,  pone  errno  a\n       EINTR, y escribe el tiempo restante en la estructura apuntada por rem a menos que rem sea NULL.  El valor\n       de *rem puede emplearse para llamar a nanosleep de nuevo y completar la pausa especificada.\n\n       La estructura timespec se emplea para especificar intervalos de tiempo con precisi\u00f3n de  nanosegundo.  Se\n       especifica en <time.h> y tiene la forma\n\n              struct timespec\n              {\n                      time_t  tv_sec;         /* segundos */\n                      long    tv_nsec;        /* nanosegundos */\n              };\n\n       El valor del campo de nanosegundos debe estar en el rango de 0 a 999 999 999.\n\n       Comparado  con  sleep(3)  y  usleep(3),  nanosleep  tiene  la ventaja de no afectar a ninguna se\u00f1al, est\u00e1\n       normalizado por POSIX, proporciona una resoluci\u00f3n del temporizador mayor, y permite que un `sleep' que ha\n       sido interrumpido por una se\u00f1al contin\u00fae m\u00e1s f\u00e1cilmente.\n\n", "ERRORES": "       En  caso de un error o excepci\u00f3n, la llamada al sistema nanosleep devuelve -1 en vez de 0 y pone en errno\n       uno de los valores siguientes:\n\n       EINTR  La pausa ha sido interrumpida por una se\u00f1al no bloqueante que  ha  sido  mandada  al  proceso.  El\n              tiempo restante de sue\u00f1o ha sido escrito en *rem de modo que el proceso pueda llamar f\u00e1cilmente de\n              nuevo a nanosleep para continuar as\u00ed con la pausa.\n\n       EINVAL El valor en el campo tv_nsec no estaba en el rango de 0 a  999 999 999  \u00f3  tv_sec  era  un  n\u00famero\n              negativo.\n\n", "FALLOS": "       La implementaci\u00f3n actual de nanosleep est\u00e1 basada en el mecanismo normal del temporizador del n\u00facleo, que\n       tiene una resoluci\u00f3n de 1/HZ s (i.e., 10 ms  en  Linux/i386  y  1 ms  en  Linux/Alpha).   Por  lo  tanto,\n       nanosleep  hace una pausa siempre de al menos el tiempo especificado, empero puede tardar hasta 10 ms m\u00e1s\n       hasta que el proceso sea de nuevo ejecutable. Por la misma raz\u00f3n, el valor devuelto en *rem en el caso de\n       una se\u00f1al enviada, se redondea normalmente al siguiente m\u00faltiplo m\u00e1s grande de 1/HZ s.\n\n       Como  algunas aplicaciones requieren pausas mucho m\u00e1s precisas (p. ej., para controlar alg\u00fan hardware que\n       requiere respuestas en tiempo real), nanosleep tambi\u00e9n es capaz de pausas cortas de alta precisi\u00f3n. Si el\n       proceso  se  planifica  bajo  una  pol\u00edtica  de tiempo real como SCHED_FIFO o SCHED_RR, entonces se har\u00e1n\n       pausas de hasta 2 ms como las esperas ocupadas con precisi\u00f3n de microsegundo.\n\nCONFORME A\n       POSIX.1b (antes, POSIX.4).\n\nV\u00c9ASE TAMBI\u00c9N\n       sleep(3), usleep(3), sched_setscheduler(2), timer_create(2)\n\nLinux 2.0.30                                      10 abril 1996                                     NANOSLEEP(2)\n"},{"NOMBRE": "       select, pselect, FD_CLR, FD_ISSET, FD_SET, FD_ZERO - multiplexaci\u00f3n de E/S s\u00edncrona\n\n", "SINOPSIS": "       /* Seg\u00fan POSIX 1003.1-2001 */\n       #include <sys/select.h>\n\n       /* Seg\u00fan est\u00e1ndares anteriores */\n       #include <sys/time.h>\n       #include <sys/types.h>\n       #include <unistd.h>\n\n       int select(int n, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, struct timeval *timeout);\n\n       int  pselect(int n, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, const struct timespec *timeout,\n       const sigset_t *sigmask);\n\n       FD_CLR(int fd, fd_set *set);\n       FD_ISSET(int fd, fd_set *set);\n       FD_SET(int fd, fd_set *set);\n       FD_ZERO(fd_set *set);\n\n", "DESCRIPCION": "       Las funciones select y pselect esperan a que un n\u00famero de descriptores de fichero cambien de estado.\n\n       Su funci\u00f3n es id\u00e9ntica, con tres diferencias:\n\n       (i)    La funci\u00f3n select usa un plazo de espera (timeout)  que es de tipo struct timeval (con segundos  y\n              microsegundos), mientras pselect usa el tipo struct timespec (con segundos y nanosegundos).\n\n       (ii)   La  funci\u00f3n  select  puede  actualizar  el  par\u00e1metro  timeout para indicar el tiempo sobrante. La\n              funci\u00f3n pselect no modifica este par\u00e1metro.\n\n       (iii)  La funci\u00f3n select no tiene par\u00e1metro sigmask , y se comporta como pselect llamada con el argumento\n              sigmask a NULL.\n\n       Se  miran  tres  conjuntos  independientes de descriptores. Aqu\u00e9llos listados en readfds ser\u00e1n observados\n       para ver si hay caracteres que llegan a estar disponibles para lectura (m\u00e1s concretamente,  para  ver  si\n       una operaci\u00f3n de lectura no se bloquear\u00e1 - en particular, un descriptor de fichero est\u00e1 tambi\u00e9n preparado\n       en fin-de-fichero), aqu\u00e9llos en writefds ser\u00e1n observados para ver si una operaci\u00f3n de  escritura  no  se\n       bloquear\u00e1,  y  aqu\u00e9llos  en exceptfds ser\u00e1n observados para ver si ocurren excepciones. En caso de \u00e9xito,\n       los conjuntos se modifican en marcha para indicar qu\u00e9 descriptores cambiaron realmente su estado.\n\n       Se proporcionan cuatro macros para manipular los conjuntos.  FD_ZERO  limpiar\u00e1  un  conjunto.   FD_SET  y\n       FD_CLR  a\u00f1aden  o  borran un descriptor dado a o de un conjunto.  FD_ISSET mira a ver si un descriptor es\n       parte del conjunto; esto es \u00fatil despu\u00e9s de que select regrese.\n\n       n es el descriptor con el n\u00famero m\u00e1s alto en cualquiera de los tres conjuntos, m\u00e1s 1.\n\n       timeout es un l\u00edmite superior de la cantidad de tiempo transcurrida antes de que  select  regrese.  Puede\n       ser  cero,  causando  que  select  regrese  inmediatamente. Si timeout es NULL (no hay tiempo de espera),\n       select puede bloquear indefinidamente.\n\n       sigmask es un puntero a una m\u00e1scara de se\u00f1ales (vea sigprocmask(2)); si  es  distinto  de  NULL,  pselect\n       reemplaza en primer lugar la m\u00e1scara de se\u00f1ales actual por aquella a la que apunta sigmask, luego hace la\n       funcion `select',  y por \u00faltimo restablece la m\u00e1scara de se\u00f1ales original de nuevo.\n\n       La idea de pselect es que si alguien quiere esperar un evento, bien una se\u00f1al o cualquier otra cosa sobre\n       un  descriptor  de  fichero,  se  necesita  una  comprobaci\u00f3n at\u00f3mica para evitar condiciones de carrera.\n       (Suponga que el manejador de se\u00f1ales fija una opci\u00f3n global y regresa. Despu\u00e9s una comprobaci\u00f3n  de  esta\n       opci\u00f3n  seguida de una llamada a select() podr\u00eda colgarse indefinidamente si la se\u00f1al lleg\u00f3 justo despu\u00e9s\n       de la comprobaci\u00f3n pero justo antes de la llamada. Por otra parte, pselect le permite bloquear se\u00f1ales en\n       primer lugar, manejar las se\u00f1ales que hayan llegado,  y despu\u00e9s llamar a pselect() con la m\u00e1scara sigmask\n       deseada, evitando la condici\u00f3n de carrera.)  Puesto que en la actualidad Linux no cuenta con una  llamada\n       al sistema pselect() , la rutina actual de glibc2 todav\u00eda tiene este defecto.\n\n   El plazo de espera o timeout\n       Las estructuras de tiempo involucradas est\u00e1n definidas en <sys/time.h> y tienen el siguiente aspecto\n\n              struct timeval {\n                  long    tv_sec;         /* segundos */\n                  long    tv_usec;        /* microsegundos */\n              };\n\n       and\n\n              struct timespec {\n                  long    tv_sec;         /* segundo */\n                  long    tv_nsec;        /* nanosegundos */\n              };\n\n       (Sin embargo,  lea m\u00e1s abajo sobre las versiones de POSIX 1003.1-2001.)\n\n       Hay  alg\u00fan c\u00f3digo por ah\u00ed que llama a select con los tres conjuntos vac\u00edos, n cero, y un timeout distinto\n       de cero como una forma transportable y curiosa de dormir con una precisi\u00f3n por debajo del segundo.\n\n       En Linux, timeout se modifica para reflejar la cantidad  de  tiempo  no  dormido;  la  mayor\u00eda  de  otras\n       implementaciones  no  hacen  esto.  Esto  produce  problemas cuando el c\u00f3digo de Linux que lee timeout se\n       transporta a otros sistemas operativos, y cuando se transporta a Linux c\u00f3digo que  reutiliza  una  struct\n       timeval  para  varias  selects  en  un  bucle  sin reinicializarla. Considere que timeout est\u00e1 indefinido\n       despu\u00e9s de que select regrese.\n\nVALOR DEVUELTO\n       En caso de \u00e9xito, select y pselect devuelven el n\u00famero de descriptores contenidos  en  los  conjuntos  de\n       descriptores,  que puede ser cero si el tiempo de espera expira antes de que ocurra algo interesante.  En\n       caso de error, se devuelve -1, y se pone un valor apropiado en errno; los  conjuntos  y  timeout  estar\u00e1n\n       indefinidos, as\u00ed que no conf\u00ede en sus contenidos tras un error.\n\n", "ERRORES": "       EBADF  Se ha dado un descriptor de fichero inv\u00e1lido en uno de los conjuntos.\n\n       EINTR  Se ha capturado una se\u00f1al no bloqueante.\n\n       EINVAL n es negativo o el valor contenido en timeout no es v\u00e1lido.\n\n       ENOMEM select no ha sido capaz de reservar memoria para las tablas internas.\n\n", "EJEMPLOS": "       #include <stdio.h>\n       #include <sys/time.h>\n       #include <sys/types.h>\n       #include <unistd.h>\n\n       int\n       main(void) {\n           fd_set rfds;\n           struct timeval tv;\n           int valret;\n\n           /* Mirar stdin (df 0) para ver si tiene entrada */\n           FD_ZERO(&rfds);\n           FD_SET(0, &rfds);\n           /* Esperar hasta 5 s */\n           tv.tv_sec = 5;\n           tv.tv_usec = 0;\n\n           valret = select(1, &rfds, NULL, NULL, &tv);\n           /* \u00a1No confiar ahora en el valor de tv! */\n\n           if (valret)\n               printf(\"Los datos ya est\u00e1n disponibles.\\n\");\n               /* FD_ISSET(0, &rfds) ser\u00e1 verdadero */\n           else\n               printf(\"Ning\u00fan dato en 5 segundos.\\n\");\n\n           return 0;\n       }\n\nCONFORME A\n       4.4BSD  (la  funci\u00f3n  select apareci\u00f3 por primera vez en 4.2BSD). Generalmente es transportable a o desde\n       sistemas no-BSD que admitan clones de la capa de z\u00f3calos de BSD  (incluyendo  variantes  System  V).  Sin\n       embargo,  observe que la variante System V normalmente pone la variable de espera antes de salir, pero la\n       variante BSD no.\n\n       La funci\u00f3n pselect est\u00e1 definida en IEEE Std 1003.1g-2000 (POSIX.1g), y parte de POSIX  1003.1-2001.   Se\n       encuentra  en  glibc2.1  y  posteriores.   Glibc2.0 posee una funci\u00f3n con este nombre, que sin embargo no\n       acepta un par\u00e1metro sigmask.\n\n", "OBSERVACIONES": "       fd_set es un buffer de tama\u00f1o fijo. Ejecutar FD_CLR o FD_SET con un valor de fd que sea negativo o  igual\n       o  mayor  que  FD_SETSIZE  tendr\u00e1  un  comportamiento  indefinido.   Adem\u00e1s, POSIX requiere que fd sea un\n       descriptor de fichero v\u00e1lido.\n\n       En lo que se refiere a los tipos involucrados, lo habitual es  que  los  dos  campos  de  una  estructura\n       timeval  sean  de  tipo  long (como se muestra abajo), y la estructura est\u00e9 definida en <sys/time.h>.  La\n       postura de POSIX 1003.1-2001 es\n\n              struct timeval {\n                  time_t         tv_sec;     /* segundos */\n                  suseconds_t    tv_usec;    /* microsegundos */\n              };\n\n       donde la estructura est\u00e1 definida en <sys/select.h> y los tipos  de  datos  time_t  y  suseconds_t  est\u00e1n\n       definidos en <sys/types.h>.\n\n       En  lo  que  se refiere a prototipos, lo habitual es incluir el fichero de cabecera <time.h> para select.\n       La postura de POSIX 1003.1-2001 es incluir el fichero <sys/select.h> para  select  y  pselect.   Libc4  y\n       libc5 no poseen una cabecera <sys/select.h> ; bajo glibc 2.0 y posteriores esta cabecera s\u00ed existe.  Bajo\n       glibc 2.0, proporciona incondicionalemente el prototipo incorrecto para  pselect,  bajo  glibc  2.1-2.2.1\n       proporciona  pselect  cuando  _GNU_SOURCE  est\u00e1  definido,  bajo  glibc 2.2.2-2.2.4 lo proporciona cuando\n       _XOPEN_SOURCE est\u00e1 definido y tiene un valor de 600 o mayor.  Sin duda, desde POSIX 1003.1-2001,  deber\u00eda\n       dar el prototipo por defecto.\n\nV\u00c9ASE TAMBI\u00c9N\n       Para un tutorial detallado con ejemplos, vea select_tut(2).\n\n       Para una mera descripci\u00f3n, vea accept(2), connect(2), poll(2), read(2), recv(2), send(2), sigprocmask(2),\n       write(2)\n\nLinux 2.4                                        9 febrero 2001                                        SELECT(2)\n"},{"NOMBRE": "       nfsservctl - interfaz de llamada al sistema para el demonio del n\u00facleo nfs\n\n", "SINOPSIS": "       #include <linux/nfsd/syscall.h>\n\n       nfsservctl(int cmd, struct nfsctl_arg *argp, union nfsctl_res *resp);\n\n", "DESCRIPCION": "       /*\n        * \u00c9stas son las \u00f3rdenes comprendidas por nfsctl().\n        */\n       #define NFSCTL_SVC              0       /* Esto es un proceso servidor. */\n       #define NFSCTL_ADDCLIENT        1       /* A\u00f1adir un cliente NFS. */\n       #define NFSCTL_DELCLIENT        2       /* Quitar un cliente NFS. */\n       #define NFSCTL_EXPORT           3       /* exportar un sistema de ficheros. */\n       #define NFSCTL_UNEXPORT         4       /* dejar de exportar un s.f. */\n       #define NFSCTL_UGIDUPDATE       5       /* actualizar un mapa uid/gid cliente. */\n       #define NFSCTL_GETFH            6       /* obtener un fh (usado por mountd) */\n\n       struct nfsctl_arg {\n               int                     ca_version;     /* salvaguarda */\n               union {\n                       struct nfsctl_svc       u_svc;\n                       struct nfsctl_client    u_client;\n                       struct nfsctl_export    u_export;\n                       struct nfsctl_uidmap    u_umap;\n                       struct nfsctl_fhparm    u_getfh;\n                       unsigned int            u_debug;\n               } u;\n       }\n\n       union nfsctl_res {\n               struct knfs_fh          cr_getfh;\n               unsigned int            cr_debug;\n       };\n\nVALOR DEVUELTO\n       En caso de \u00e9xito se devuelve 0. En caso de error se devuelve -1 y errno toma un valor apropiado.\n\nCONFORME A\n       Esta llamada es espec\u00edfica de Linux.\n\nLinux 2.0.30                                      16 Julio 1997                                    NFSSERVCTL(2)\n"},{"NOMBRE": "       nice - ejecuta un programa con la prioridad de planificaci\u00f3n modificada\n\n", "SINOPSIS": "       nice [-n adjustment] [-adjustment] [--adjustment=adjustment] [--help] [--version] [command [arg...]]\n\n", "DESCRIPCION": "       Esta  documentaci\u00f3n  no  va  a  ser  mantenida  a  partir  de ahora y puede ser inexacta o incompleta. La\n       documentaci\u00f3n Texinfo es ahora la fuente autorizada.\n\n       Esta p\u00e1gina de manual documenta la versi\u00f3n de GNU de nice.  N\u00f3tese que muchos shells disponen de comandos\n       propios con el mismo nombre y con similares funcionalidades.\n\n       Si  no se a\u00f1aden argumentos, nice imprime la prioridad de planificaci\u00f3n actual, que es heredada.  De otra\n       modo, nice ejecuta el comando (command) dado con la prioridad de planificaci\u00f3n ajustada.  Si no se  a\u00f1ade\n       un ajuste (adjustment), la prioridad del comando es incrementada en 10. El superusuario puede especificar\n       ajustes negativos. La prioridad puede ser ajustada por nice en el rango entre -20 (la prioridad m\u00e1s alta)\n       a 19 (la m\u00e1s baja).\n\n   OPCIONES\n       -n adjustment, -adjustment, --adjustment=adjustment\n              A\u00f1ade el ajuste dado (adjustment) en vez de 10 a la prioridad del comando.\n\n       --help Imprime por la salida est\u00e1ndar un mensaje de ayuda sobre el uso y termina satisfactoriamente.\n\n       --version\n              Imprime por la salida est\u00e1ndar informaci\u00f3n sobre la versi\u00f3n y termina satisfactoriamente.\n\nFSF                                        Utilidades del Shell de GNU                                   NICE(1)\n"},{"NOMBRE": "       oldfstat, oldlstat, oldstat, oldolduname, olduname - llamadas al sistema obsoletas\n\n", "SINOPSIS": "       Llamadas al sistema en desuso.\n\n", "DESCRIPCION": "       El  n\u00facleo  Linux  2.0  implementa estas llamadas para dar soporte a ejecutables antiguos. Estas llamadas\n       devuelven estructuras que han crecido desde su primera  implementaci\u00f3n,  pero  los  ejecutables  antiguos\n       deben continuar recibiendo estructuras antiguas m\u00e1s peque\u00f1as.\n\n       Los  ejecutables  actuales  deben  enlazarse  con  las  bibliotecas  actuales y nunca deben emplear estas\n       llamadas.\n\nCONFORME A\n       Estas llamadas son \u00fanicas a Linux y no deber\u00edan emplearse de nung\u00fan modo en nuevos programas.\n\nV\u00c9ASE TAMBI\u00c9N\n       fstat(2), lstat(2), stat(2), uname(2), unimplemented(2)\n\nLinux 2.0                                        22 octubre 1996                                     OBSOLETE(2)\n"},{"NOMBRE": "       oldfstat, oldlstat, oldstat, oldolduname, olduname - llamadas al sistema obsoletas\n\n", "SINOPSIS": "       Llamadas al sistema en desuso.\n\n", "DESCRIPCION": "       El  n\u00facleo  Linux  2.0  implementa estas llamadas para dar soporte a ejecutables antiguos. Estas llamadas\n       devuelven estructuras que han crecido desde su primera  implementaci\u00f3n,  pero  los  ejecutables  antiguos\n       deben continuar recibiendo estructuras antiguas m\u00e1s peque\u00f1as.\n\n       Los  ejecutables  actuales  deben  enlazarse  con  las  bibliotecas  actuales y nunca deben emplear estas\n       llamadas.\n\nCONFORME A\n       Estas llamadas son \u00fanicas a Linux y no deber\u00edan emplearse de nung\u00fan modo en nuevos programas.\n\nV\u00c9ASE TAMBI\u00c9N\n       fstat(2), lstat(2), stat(2), uname(2), unimplemented(2)\n\nLinux 2.0                                        22 octubre 1996                                     OBSOLETE(2)\n"},{"NOMBRE": "       oldfstat, oldlstat, oldstat, oldolduname, olduname - llamadas al sistema obsoletas\n\n", "SINOPSIS": "       Llamadas al sistema en desuso.\n\n", "DESCRIPCION": "       El  n\u00facleo  Linux  2.0  implementa estas llamadas para dar soporte a ejecutables antiguos. Estas llamadas\n       devuelven estructuras que han crecido desde su primera  implementaci\u00f3n,  pero  los  ejecutables  antiguos\n       deben continuar recibiendo estructuras antiguas m\u00e1s peque\u00f1as.\n\n       Los  ejecutables  actuales  deben  enlazarse  con  las  bibliotecas  actuales y nunca deben emplear estas\n       llamadas.\n\nCONFORME A\n       Estas llamadas son \u00fanicas a Linux y no deber\u00edan emplearse de nung\u00fan modo en nuevos programas.\n\nV\u00c9ASE TAMBI\u00c9N\n       fstat(2), lstat(2), stat(2), uname(2), unimplemented(2)\n\nLinux 2.0                                        22 octubre 1996                                     OBSOLETE(2)\n"},{"NOMBRE": "       oldfstat, oldlstat, oldstat, oldolduname, olduname - llamadas al sistema obsoletas\n\n", "SINOPSIS": "       Llamadas al sistema en desuso.\n\n", "DESCRIPCION": "       El  n\u00facleo  Linux  2.0  implementa estas llamadas para dar soporte a ejecutables antiguos. Estas llamadas\n       devuelven estructuras que han crecido desde su primera  implementaci\u00f3n,  pero  los  ejecutables  antiguos\n       deben continuar recibiendo estructuras antiguas m\u00e1s peque\u00f1as.\n\n       Los  ejecutables  actuales  deben  enlazarse  con  las  bibliotecas  actuales y nunca deben emplear estas\n       llamadas.\n\nCONFORME A\n       Estas llamadas son \u00fanicas a Linux y no deber\u00edan emplearse de nung\u00fan modo en nuevos programas.\n\nV\u00c9ASE TAMBI\u00c9N\n       fstat(2), lstat(2), stat(2), uname(2), unimplemented(2)\n\nLinux 2.0                                        22 octubre 1996                                     OBSOLETE(2)\n"},{"NOMBRE": "       oldfstat, oldlstat, oldstat, oldolduname, olduname - llamadas al sistema obsoletas\n\n", "SINOPSIS": "       Llamadas al sistema en desuso.\n\n", "DESCRIPCION": "       El  n\u00facleo  Linux  2.0  implementa estas llamadas para dar soporte a ejecutables antiguos. Estas llamadas\n       devuelven estructuras que han crecido desde su primera  implementaci\u00f3n,  pero  los  ejecutables  antiguos\n       deben continuar recibiendo estructuras antiguas m\u00e1s peque\u00f1as.\n\n       Los  ejecutables  actuales  deben  enlazarse  con  las  bibliotecas  actuales y nunca deben emplear estas\n       llamadas.\n\nCONFORME A\n       Estas llamadas son \u00fanicas a Linux y no deber\u00edan emplearse de nung\u00fan modo en nuevos programas.\n\nV\u00c9ASE TAMBI\u00c9N\n       fstat(2), lstat(2), stat(2), uname(2), unimplemented(2)\n\nLinux 2.0                                        22 octubre 1996                                     OBSOLETE(2)\n"},{"NOMBRE": "       oldfstat, oldlstat, oldstat, oldolduname, olduname - llamadas al sistema obsoletas\n\n", "SINOPSIS": "       Llamadas al sistema en desuso.\n\n", "DESCRIPCION": "       El  n\u00facleo  Linux  2.0  implementa estas llamadas para dar soporte a ejecutables antiguos. Estas llamadas\n       devuelven estructuras que han crecido desde su primera  implementaci\u00f3n,  pero  los  ejecutables  antiguos\n       deben continuar recibiendo estructuras antiguas m\u00e1s peque\u00f1as.\n\n       Los  ejecutables  actuales  deben  enlazarse  con  las  bibliotecas  actuales y nunca deben emplear estas\n       llamadas.\n\nCONFORME A\n       Estas llamadas son \u00fanicas a Linux y no deber\u00edan emplearse de nung\u00fan modo en nuevos programas.\n\nV\u00c9ASE TAMBI\u00c9N\n       fstat(2), lstat(2), stat(2), uname(2), unimplemented(2)\n\nLinux 2.0                                        22 octubre 1996                                     OBSOLETE(2)\n"},{"NOMBRE": "       open, creat - abren y posiblemente crean un fichero o dispositivo\n\n", "SINOPSIS": "       #include <sys/types.h>\n       #include <sys/stat.h>\n       #include <fcntl.h>\n\n       int open(const char *camino, int flags);\n       int open(const char *camino, int flags, mode_t modo);\n       int creat(const char *camino, mode_t modo);\n\n", "DESCRIPCION": "       La  llamada  al sistema open() se utiliza para convertir una ruta en un descriptor de fichero (un peque\u00f1o\n       entero no negativo que se utiliza en las operaciones de E/S  posteriores  como  en  read,  write,  etc.).\n       Cuando  la  llamada  tiene  \u00e9xito,  el  descriptor  de fichero devuelto ser\u00e1 el descriptor de fichero m\u00e1s\n       peque\u00f1o no abierto actualmente para  el  proceso.   Esta  llamada  crea  un  nuevo  fichero  abierto,  no\n       compartido  con  ning\u00fan  otro proceso. (Pero pueden aparecer ficheros abiertos compartidos a trav\u00e9s de la\n       llamada al sistema fork(2).)  El nuevo descriptor de fichero se configura para que permanezca  abierto  a\n       trav\u00e9s de funciones exec (vea fcntl(2)).  El apuntador de lectura/escritura del fichero se configura para\n       que apunte al principio del fichero.\n\n       El par\u00e1metro flags es uno de O_RDONLY, O_WRONLY u O_RDWR que, respectivamente, piden que la apertura  del\n       fichero  sea  solamente  para lectura, solamente para escritura, o para lectura y escritura, combin\u00e1ndose\n       mediante el operador de bits OR (|),  con cero o m\u00e1s de las siguientes macros:\n\n       O_CREAT\n              Si el fichero no existe, ser\u00e1 creado.  El propietario (identificador de usuario)  del  fichero  se\n              fija  al  identificador de usuario efectivo del proceso.  La propiedad del grupo (identificador de\n              grupo) se fija bien al identificador de grupo efectivo del proceso  o  bien  al  identificador  de\n              grupo del directorio padre (dependiendo del tipo de sistema de ficheros y las opciones de montaje,\n              y el modo del directorio padre, vea, p.e. las opciones de montaje bsdgroups y sysvgroups sobre  el\n              sistema de ficheros ext2, tal como se describen en mount(8)).\n\n       O_EXCL Cuando  se  combina  con  O_CREAT,  es  un error que el fichero ya exista, y open fallar\u00e1. En este\n              contexto, un enlace simb\u00f3lico existe, sin tener en cuenta a donde apunte.  O_EXCL no  funciona  en\n              sistemas  de  ficheros  de  red  NFS,  programas que conf\u00eden en \u00e9l para efectuar tareas de bloqueo\n              contendr\u00e1n una condici\u00f3n de concurso. La soluci\u00f3n para efectuar  un  bloqueo  at\u00f3mico  de  fichero\n              mediante  un  fichero  de  bloqueo  es crear un fichero \u00fanico en el mismo sistema de ficheros (por\n              ejemplo, incorporando el nombre del ordenador y el PID) y utilizar link(2) para hacer un enlace al\n              fichero  de  bloqueo. Si link() devuelve 0, el bloqueo tiene \u00e9xito. En caso contrario, use stat(2)\n              en el fichero \u00fanico para comprobar si su n\u00famero de enlaces se ha incrementado a 2, en cuyo caso el\n              bloqueo tambi\u00e9n tiene \u00e9xito.\n\n       O_NOCTTY\n              Si  camino  se  refiere a una terminal \u2014 vea tty(4) \u2014 no se convertir\u00e1 en la terminal controladora\n              del proceso ni en el caso de que el proceso no tenga ninguna.\n\n       O_TRUNC\n              Si el fichero ya existe y es un fichero regular y el modo de apertura permite escribir  (p.e.,  es\n              O_RDWR  o  O_WRONLY)  ser\u00e1  truncado  a  longitud  0.   Si  el fichero es una FIFO o un fichero de\n              dispositivo de terminal, la opci\u00f3n O_TRUNC es ignorada. En otro  caso  el  efecto  de  O_TRUNC  es\n              indefinido.  (En muchas versiones de Linux ser\u00e1 ignorado; en otras devolver\u00e1 un error.)\n\n       O_APPEND\n              El  fichero se abrir\u00e1 en modo de s\u00f3lo-a\u00f1adir. Antes de cada escritura, el apuntador del fichero es\n              posicionado al final del fichero, como se har\u00eda con lseek.  O_APPEND  puede  conducir  a  ficheros\n              corruptos en sistemas de ficheros NFS si m\u00e1s de un proceso a\u00f1ade datos a un fichero a la vez. Esto\n              es as\u00ed porque NFS no admite a\u00f1adir a un fichero, as\u00ed que el n\u00facleo del cliente ha de simularlo, lo\n              que no puede hacerse sin una condici\u00f3n de carrera.\n\n       O_NONBLOCK u O_NDELAY\n              Cuando  \u00e9sto es posible, el fichero se abre en modo no bloqueante. Ni el open ni ninguna operaci\u00f3n\n              subsecuente sobre el descriptor de fichero  que es devuelto har\u00e1n  que  el  proceso  que  hace  la\n              llamada espere.  Para el manejo de FIFOs (tuber\u00edas nombradas), vea tambi\u00e9n fifo(4).\n\n       O_SYNC El  fichero  se  abre  para  E/S  s\u00edncrona.  Cualesquiera  operaciones de escritura write sobre el\n              descriptor de fichero resultante bloquear\u00e1n el proceso que ha efectuado la llamada hasta  que  los\n              datos  hayan sido f\u00edsicamente escritos en el dispositivo subyacente.  Vea no obstante m\u00e1s abajo la\n              secci\u00f3n RESTRICCIONES.\n\n       O_NOFOLLOW\n              Si pathname es un enlace simb\u00f3lico, entonces la apertura falla. \u00c9sta es una extensi\u00f3n  de  FreeBSD\n              que  fue a\u00f1adida a Linux en la versi\u00f3n 2.1.126.  Todav\u00eda se seguir\u00e1n los enlaces simb\u00f3licos de los\n              componentes anteriores de la ruta. Los ficheros cabecera de la versi\u00f3n 2.0.100  y  posteriores  de\n              glibc incluyen una definici\u00f3n de esta opci\u00f3n; los n\u00facleos anteriores al 2.1.126 lo ignorar\u00e1n si se\n              usa.\n\n       O_DIRECTORY\n              Si pathname no es un directorio, har\u00e1 que la apertura falle. Esta opci\u00f3n es espec\u00edfica de Linux  y\n              fue  a\u00f1adida  en  la versi\u00f3n 2.1.126 del n\u00facleo para evitar problemas de denegaci\u00f3n de servicio al\n              llamar a opendir(3) sobre una FIFO o dispositivo de cinta, pero no se deber\u00eda  usar  fuera  de  la\n              implementaci\u00f3n de opendir.\n\n       O_DIRECT\n              Trata de minimizar los efectos de la cach\u00e9 de E/S a y desde el fichero.  En general \u00e9sto empeorar\u00e1\n              el rendimiento, pero es \u00fatil en situaciones especiales, como cuando  las  aplicaciones  poseen  su\n              propia  cach\u00e9.   La  E/S  del  fichero  se  realiza  directamente a/desde buffers en el espacio de\n              usuario.  La E/S es s\u00edncrona, es  decir,  cuando  las  llamadas  al  sistema  read(2)  o  write(2)\n              finalizan,  se  garantiza que los datos han sido transferidos.  Los tama\u00f1os de la transferencia, y\n              el alineamiento del buffer de usuario y el desplazamiento del fichero deben  ser  todos  m\u00faltiplos\n              del tama\u00f1o de bloque l\u00f3gico del sistema de ficheros.\n              Esta  bandera est\u00e1 soportada en varios sistemas tipo Unix; el soporte para Linux fue a\u00f1adido en la\n              versi\u00f3n 2.4.10 del n\u00facleo.\n              Una interfaz sem\u00e1nticamente similar para los dispositivos de bloque se describe en raw(8).\n\n       O_ASYNC\n              Genera una se\u00f1al (SIGIO por defecto, pero se puede cambiar mediante fcntl(2)) cuando la entrada  o\n              la salida se hace posible en este descriptor de fichero.  Esta caracter\u00edstica est\u00e1 s\u00f3lo disponible\n              para terminales, pseudo-terminales, y conectores. Vea fcntl(2) para m\u00e1s detalles..\n\n       O_LARGEFILE\n              En sistemas de 32 bits que soportan el `sistema de ficheros grandes'  (Large  Files  System,  LFS)\n              permite abrir ficheros cuyos tama\u00f1os no pueden ser representados en 31 bits.\n\n       Algunos  de estos modificadores opcionales pueden alterarse mediante el empleo de fcntl despu\u00e9s de que el\n       fichero haya sido abierto.\n\n       El argumento modo especifica los permisos a emplear  en  caso  de  que  se  cree  un  nuevo  fichero.  Es\n       modificado  por  la  m\u00e1scara  umask del proceso de la forma habitual: los permisos del fichero creado son\n       (modo & ~umask).  Observe que este modo s\u00f3lo se aplica a futuros accesos del fichero  reci\u00e9n  creado;  la\n       llamada  open  que  crea  un  fichero  de solo-lectura puede devolver tambi\u00e9n un descriptor de fichero de\n       lectura/escritura.\n\n       Se proporcionan las siguientes constantes simb\u00f3licas para modo:\n\n       S_IRWXU\n              00700 el usuario (el propietario del fichero) tiene permisos de lectura, escritura y ejecuci\u00f3n\n\n       S_IRUSR (S_IREAD)\n              00400 el usuario tiene permiso de lectura\n\n       S_IWUSR (S_IWRITE)\n              00200 el usuario tiene permiso de escritura\n\n       S_IXUSR (S_IEXEC)\n              00100 el usuario tiene permiso de ejecuci\u00f3n\n\n       S_IRWXG\n              00070 el grupo tiene permiso de lectura, escritura y ejecuci\u00f3n\n\n       S_IRGRP\n              00040 el grupo tiene permiso de lectura\n\n       S_IWGRP\n              00020 el grupo tiene permiso de escritura\n\n       S_IXGRP\n              00010 el grupo tiene permiso de ejecuci\u00f3n\n\n       S_IRWXO\n              00007 los otros tienen permiso de lectura, escritura y ejecuci\u00f3n\n\n       S_IROTH\n              00004 los otros tienen permiso de lectura\n\n       S_IWOTH\n              00002 los otros tienen permiso de escritura\n\n       S_IXOTH\n              00001 los otros tienen permiso de ejecuci\u00f3n\n\n       El argumento modo debe especificarse cuando O_CREAT est\u00e1 en flags, y si no est\u00e1, no es tenido en cuenta.\n\n       creat equivale a open con flags igual a O_CREAT|O_WRONLY|O_TRUNC.\n\nVALOR DEVUELTO\n       open y creat devuelven el nuevo descriptor de fichero, o -1 si ha ocurrido un error (en cuyo caso, se  da\n       un  valor  apropiado  a  errno).   Observe que open pueden abrir ficheros especiales de dispositivo, pero\n       creat no puede crearlos; emplee mknod(2) en su lugar.\n\n       En sistemas de ficheros NFS con asociaci\u00f3n de UIDs habilitada,  open  puede  devolver  un  descriptor  de\n       fichero  pero  p.  ej.  llamadas  a  read(2) pueden denegarse con el error EACCES.  Esto es as\u00ed porque el\n       cliente hace el open comprobando los permisos, pero la asociaci\u00f3n de UID la hace el  servidor  sobre  las\n       peticiones de lectura y escritura.\n\n       Si  el  fichero es reci\u00e9n creado, sus campos atime, ctime, mtime se rellenan con la hora actual, al igual\n       que los campos ctime y mtime del directorio padre.  En otro caso, si el fichero es modificado a causa  de\n       la bandera O_TRUNC, sus campos ctime y mtime se rellenan con la hora actual.\n\n", "ERRORES": "       EEXIST camino ya existe y se usaron O_CREAT y O_EXCL.\n\n       EISDIR camino  se  refiere  a  un  directorio  y el acceso pedido implicaba escribir (esto es, O_WRONLY o\n              O_RDWR estaban activos).\n\n       EACCES El acceso pedido al fichero no es permitido, o uno de los directorios en camino no  tiene  permiso\n              de  b\u00fasqueda  o  paso  (ejecuci\u00f3n),  o el fichero todav\u00eda no existe y el directorio padre no tiene\n              permiso de escritura.\n\n       ENAMETOOLONG\n              camino era demasiado largo.\n\n       ENOENT O_CREAT no est\u00e1 activo y el fichero especificado no existe.  O bien,  un componente directorio  en\n              camino no existe o es un enlace simb\u00f3lico colgante (que apunta a un fichero inexistente).\n\n       ENOTDIR\n              Un  componente  de  camino  empleado  como  un  directorio  no es, de hecho, un directorio o se ha\n              especificado la opci\u00f3n O_DIRECTORY y pathname no es un directorio.\n\n       ENXIO  Se ha seleccionado O_NONBLOCK | O_WRONLY, el fichero indicado es una FIFO y ning\u00fan  proceso  tiene\n              el  fichero  abierto para lectura.  O el fichero es un fichero especial de dispositivo y no existe\n              el dispositivo correspondiente.\n\n       ENODEV pathname  se  refiere  a  un  fichero  especial  de  dispositivo  y  no  existe   el   dispositivo\n              correspondiente.  (\u00c9ste  es  un  fallo  del n\u00facleo de Linux. En esta situaci\u00f3n se deber\u00eda devolver\n              ENXIO.)\n\n       EROFS  camino se refiere a un fichero de un sistema de ficheros de s\u00f3lo lectura y se ha pedido un  acceso\n              de escritura.\n\n       ETXTBSY\n              camino  se refiere a una imagen ejecutable que se est\u00e1 ejecutando ahora mismo y se pidi\u00f3 un acceso\n              de escritura.\n\n       EFAULT camino apunta afuera de su espacio de direcciones accesible.\n\n       ELOOP  Se han encontrado demasiados enl\u00e1ces simb\u00f3licos al resolver camino, o se ha especificado la opci\u00f3n\n              O_NOFOLLOW pero pathname no es un enlace simb\u00f3lico.\n\n       ENOSPC camino  iba  a  ser  creado pero el dispositivo que lo habr\u00eda de contener no tiene espacio para el\n              nuevo fichero.\n\n       ENOMEM No hay disponible bastante memoria del n\u00facleo.\n\n       EMFILE El proceso ya tiene abiertos todos los ficheros que puede.\n\n       ENFILE Se ha alcanzado el l\u00edmite del n\u00famero total de ficheros abiertos en el sistema.\n\nCONFORME A\n       SVr4, SVID, POSIX, X/OPEN, BSD 4.3 Las banderas O_NOFOLLOW y O_DIRECTORY son espec\u00edficas de Linux.   Para\n       obtener sus definiciones es necesario definir la macro _GNU_SOURCE.\n\n", "RESTRICCIONES": "       Hay  muchas  impropiedades en el protocolo subyacente a NFS, afectando entre otros a O_SYNC y a O_NDELAY.\n       POSIX proporciona tres variantes diferentes de E/S s\u00edncrona,  correspondientes  a  las  opciones  O_SYNC,\n       O_DSYNC y O_RSYNC.  Actualmente (2.1.130) todas ellas son sin\u00f3nimas en Linux.\n\nV\u00c9ASE TAMBI\u00c9N\n       read(2),  write(2),  fcntl(2),  close(2),  link(2),  mknod(2),  mount(2),  stat(2),  umask(2), unlink(2),\n       socket(2), fopen(3), fifo(4)\n\nLinux                                             3 junio 1999                                           OPEN(2)\n"},{"NOMBRE": "       outb, outw, outl, outsb, outsw, outsl - salida por puerto\n       inb, inw, inl, insb, insw, insl - entrada desde puerto\n       outb_p, outw_p, outl_p, inb_p, inw_p, inl_p - E/S pausada\n\n", "DESCRIPCION": "       Esta  familia  de  funciones  se  emplea  para  hacer  entrada  y salida de bajo nivel por puertos. Est\u00e1n\n       dise\u00f1adas principalmente para uso interno del n\u00facleo, pero pueden ser  empleadas  desde  el  espacio  del\n       usuario.\n\n       Usted  ha  de  compilar  con  -O  o -O2 o similar. Las funciones est\u00e1n definidas como macros en l\u00ednea del\n       preprocesador, y no ser\u00e1n sustituidas sin la opci\u00f3n de optimizaci\u00f3n activada, provocando  referencias  no\n       resueltas en tiempo de enlazado.\n\n       Usted  ha  de  emplear  ioperm(2)  o  alternativamente  iopl(2)  para  decirle al n\u00facleo que permita a la\n       aplicaci\u00f3n en el espacio de usuario el acceso a los puertos de E/S  en  cuesti\u00f3n.  Si  no  hace  esto  la\n       aplicaci\u00f3n recibir\u00e1 un fallo de segmento.\n\nCONFORME A\n       outb  y  familia  son espec\u00edficas del hardware. Los argumentos puerto y valor est\u00e1n en orden opuesto a la\n       mayor\u00eda de implementaciones de DOS.\n\nV\u00c9ASE TAMBI\u00c9N\n       ioperm(2), iopl(2)\n\nLinux                                           29 Noviembre 1995                                        OUTB(2)\n"},{"NOMBRE": "       outb, outw, outl, outsb, outsw, outsl - salida por puerto\n       inb, inw, inl, insb, insw, insl - entrada desde puerto\n       outb_p, outw_p, outl_p, inb_p, inw_p, inl_p - E/S pausada\n\n", "DESCRIPCION": "       Esta  familia  de  funciones  se  emplea  para  hacer  entrada  y salida de bajo nivel por puertos. Est\u00e1n\n       dise\u00f1adas principalmente para uso interno del n\u00facleo, pero pueden ser  empleadas  desde  el  espacio  del\n       usuario.\n\n       Usted  ha  de  compilar  con  -O  o -O2 o similar. Las funciones est\u00e1n definidas como macros en l\u00ednea del\n       preprocesador, y no ser\u00e1n sustituidas sin la opci\u00f3n de optimizaci\u00f3n activada, provocando  referencias  no\n       resueltas en tiempo de enlazado.\n\n       Usted  ha  de  emplear  ioperm(2)  o  alternativamente  iopl(2)  para  decirle al n\u00facleo que permita a la\n       aplicaci\u00f3n en el espacio de usuario el acceso a los puertos de E/S  en  cuesti\u00f3n.  Si  no  hace  esto  la\n       aplicaci\u00f3n recibir\u00e1 un fallo de segmento.\n\nCONFORME A\n       outb  y  familia  son espec\u00edficas del hardware. Los argumentos puerto y valor est\u00e1n en orden opuesto a la\n       mayor\u00eda de implementaciones de DOS.\n\nV\u00c9ASE TAMBI\u00c9N\n       ioperm(2), iopl(2)\n\nLinux                                           29 Noviembre 1995                                        OUTB(2)\n"},{"NOMBRE": "       outb, outw, outl, outsb, outsw, outsl - salida por puerto\n       inb, inw, inl, insb, insw, insl - entrada desde puerto\n       outb_p, outw_p, outl_p, inb_p, inw_p, inl_p - E/S pausada\n\n", "DESCRIPCION": "       Esta  familia  de  funciones  se  emplea  para  hacer  entrada  y salida de bajo nivel por puertos. Est\u00e1n\n       dise\u00f1adas principalmente para uso interno del n\u00facleo, pero pueden ser  empleadas  desde  el  espacio  del\n       usuario.\n\n       Usted  ha  de  compilar  con  -O  o -O2 o similar. Las funciones est\u00e1n definidas como macros en l\u00ednea del\n       preprocesador, y no ser\u00e1n sustituidas sin la opci\u00f3n de optimizaci\u00f3n activada, provocando  referencias  no\n       resueltas en tiempo de enlazado.\n\n       Usted  ha  de  emplear  ioperm(2)  o  alternativamente  iopl(2)  para  decirle al n\u00facleo que permita a la\n       aplicaci\u00f3n en el espacio de usuario el acceso a los puertos de E/S  en  cuesti\u00f3n.  Si  no  hace  esto  la\n       aplicaci\u00f3n recibir\u00e1 un fallo de segmento.\n\nCONFORME A\n       outb  y  familia  son espec\u00edficas del hardware. Los argumentos puerto y valor est\u00e1n en orden opuesto a la\n       mayor\u00eda de implementaciones de DOS.\n\nV\u00c9ASE TAMBI\u00c9N\n       ioperm(2), iopl(2)\n\nLinux                                           29 Noviembre 1995                                        OUTB(2)\n"},{"NOMBRE": "       outb, outw, outl, outsb, outsw, outsl - salida por puerto\n       inb, inw, inl, insb, insw, insl - entrada desde puerto\n       outb_p, outw_p, outl_p, inb_p, inw_p, inl_p - E/S pausada\n\n", "DESCRIPCION": "       Esta  familia  de  funciones  se  emplea  para  hacer  entrada  y salida de bajo nivel por puertos. Est\u00e1n\n       dise\u00f1adas principalmente para uso interno del n\u00facleo, pero pueden ser  empleadas  desde  el  espacio  del\n       usuario.\n\n       Usted  ha  de  compilar  con  -O  o -O2 o similar. Las funciones est\u00e1n definidas como macros en l\u00ednea del\n       preprocesador, y no ser\u00e1n sustituidas sin la opci\u00f3n de optimizaci\u00f3n activada, provocando  referencias  no\n       resueltas en tiempo de enlazado.\n\n       Usted  ha  de  emplear  ioperm(2)  o  alternativamente  iopl(2)  para  decirle al n\u00facleo que permita a la\n       aplicaci\u00f3n en el espacio de usuario el acceso a los puertos de E/S  en  cuesti\u00f3n.  Si  no  hace  esto  la\n       aplicaci\u00f3n recibir\u00e1 un fallo de segmento.\n\nCONFORME A\n       outb  y  familia  son espec\u00edficas del hardware. Los argumentos puerto y valor est\u00e1n en orden opuesto a la\n       mayor\u00eda de implementaciones de DOS.\n\nV\u00c9ASE TAMBI\u00c9N\n       ioperm(2), iopl(2)\n\nLinux                                           29 Noviembre 1995                                        OUTB(2)\n"},{"NOMBRE": "       outb, outw, outl, outsb, outsw, outsl - salida por puerto\n       inb, inw, inl, insb, insw, insl - entrada desde puerto\n       outb_p, outw_p, outl_p, inb_p, inw_p, inl_p - E/S pausada\n\n", "DESCRIPCION": "       Esta  familia  de  funciones  se  emplea  para  hacer  entrada  y salida de bajo nivel por puertos. Est\u00e1n\n       dise\u00f1adas principalmente para uso interno del n\u00facleo, pero pueden ser  empleadas  desde  el  espacio  del\n       usuario.\n\n       Usted  ha  de  compilar  con  -O  o -O2 o similar. Las funciones est\u00e1n definidas como macros en l\u00ednea del\n       preprocesador, y no ser\u00e1n sustituidas sin la opci\u00f3n de optimizaci\u00f3n activada, provocando  referencias  no\n       resueltas en tiempo de enlazado.\n\n       Usted  ha  de  emplear  ioperm(2)  o  alternativamente  iopl(2)  para  decirle al n\u00facleo que permita a la\n       aplicaci\u00f3n en el espacio de usuario el acceso a los puertos de E/S  en  cuesti\u00f3n.  Si  no  hace  esto  la\n       aplicaci\u00f3n recibir\u00e1 un fallo de segmento.\n\nCONFORME A\n       outb  y  familia  son espec\u00edficas del hardware. Los argumentos puerto y valor est\u00e1n en orden opuesto a la\n       mayor\u00eda de implementaciones de DOS.\n\nV\u00c9ASE TAMBI\u00c9N\n       ioperm(2), iopl(2)\n\nLinux                                           29 Noviembre 1995                                        OUTB(2)\n"},{"NOMBRE": "       outb, outw, outl, outsb, outsw, outsl - salida por puerto\n       inb, inw, inl, insb, insw, insl - entrada desde puerto\n       outb_p, outw_p, outl_p, inb_p, inw_p, inl_p - E/S pausada\n\n", "DESCRIPCION": "       Esta  familia  de  funciones  se  emplea  para  hacer  entrada  y salida de bajo nivel por puertos. Est\u00e1n\n       dise\u00f1adas principalmente para uso interno del n\u00facleo, pero pueden ser  empleadas  desde  el  espacio  del\n       usuario.\n\n       Usted  ha  de  compilar  con  -O  o -O2 o similar. Las funciones est\u00e1n definidas como macros en l\u00ednea del\n       preprocesador, y no ser\u00e1n sustituidas sin la opci\u00f3n de optimizaci\u00f3n activada, provocando  referencias  no\n       resueltas en tiempo de enlazado.\n\n       Usted  ha  de  emplear  ioperm(2)  o  alternativamente  iopl(2)  para  decirle al n\u00facleo que permita a la\n       aplicaci\u00f3n en el espacio de usuario el acceso a los puertos de E/S  en  cuesti\u00f3n.  Si  no  hace  esto  la\n       aplicaci\u00f3n recibir\u00e1 un fallo de segmento.\n\nCONFORME A\n       outb  y  familia  son espec\u00edficas del hardware. Los argumentos puerto y valor est\u00e1n en orden opuesto a la\n       mayor\u00eda de implementaciones de DOS.\n\nV\u00c9ASE TAMBI\u00c9N\n       ioperm(2), iopl(2)\n\nLinux                                           29 Noviembre 1995                                        OUTB(2)\n"},{"NOMBRE": "       outb, outw, outl, outsb, outsw, outsl - salida por puerto\n       inb, inw, inl, insb, insw, insl - entrada desde puerto\n       outb_p, outw_p, outl_p, inb_p, inw_p, inl_p - E/S pausada\n\n", "DESCRIPCION": "       Esta  familia  de  funciones  se  emplea  para  hacer  entrada  y salida de bajo nivel por puertos. Est\u00e1n\n       dise\u00f1adas principalmente para uso interno del n\u00facleo, pero pueden ser  empleadas  desde  el  espacio  del\n       usuario.\n\n       Usted  ha  de  compilar  con  -O  o -O2 o similar. Las funciones est\u00e1n definidas como macros en l\u00ednea del\n       preprocesador, y no ser\u00e1n sustituidas sin la opci\u00f3n de optimizaci\u00f3n activada, provocando  referencias  no\n       resueltas en tiempo de enlazado.\n\n       Usted  ha  de  emplear  ioperm(2)  o  alternativamente  iopl(2)  para  decirle al n\u00facleo que permita a la\n       aplicaci\u00f3n en el espacio de usuario el acceso a los puertos de E/S  en  cuesti\u00f3n.  Si  no  hace  esto  la\n       aplicaci\u00f3n recibir\u00e1 un fallo de segmento.\n\nCONFORME A\n       outb  y  familia  son espec\u00edficas del hardware. Los argumentos puerto y valor est\u00e1n en orden opuesto a la\n       mayor\u00eda de implementaciones de DOS.\n\nV\u00c9ASE TAMBI\u00c9N\n       ioperm(2), iopl(2)\n\nLinux                                           29 Noviembre 1995                                        OUTB(2)\n"},{"NOMBRE": "       outb, outw, outl, outsb, outsw, outsl - salida por puerto\n       inb, inw, inl, insb, insw, insl - entrada desde puerto\n       outb_p, outw_p, outl_p, inb_p, inw_p, inl_p - E/S pausada\n\n", "DESCRIPCION": "       Esta  familia  de  funciones  se  emplea  para  hacer  entrada  y salida de bajo nivel por puertos. Est\u00e1n\n       dise\u00f1adas principalmente para uso interno del n\u00facleo, pero pueden ser  empleadas  desde  el  espacio  del\n       usuario.\n\n       Usted  ha  de  compilar  con  -O  o -O2 o similar. Las funciones est\u00e1n definidas como macros en l\u00ednea del\n       preprocesador, y no ser\u00e1n sustituidas sin la opci\u00f3n de optimizaci\u00f3n activada, provocando  referencias  no\n       resueltas en tiempo de enlazado.\n\n       Usted  ha  de  emplear  ioperm(2)  o  alternativamente  iopl(2)  para  decirle al n\u00facleo que permita a la\n       aplicaci\u00f3n en el espacio de usuario el acceso a los puertos de E/S  en  cuesti\u00f3n.  Si  no  hace  esto  la\n       aplicaci\u00f3n recibir\u00e1 un fallo de segmento.\n\nCONFORME A\n       outb  y  familia  son espec\u00edficas del hardware. Los argumentos puerto y valor est\u00e1n en orden opuesto a la\n       mayor\u00eda de implementaciones de DOS.\n\nV\u00c9ASE TAMBI\u00c9N\n       ioperm(2), iopl(2)\n\nLinux                                           29 Noviembre 1995                                        OUTB(2)\n"},{"NOMBRE": "       outb, outw, outl, outsb, outsw, outsl - salida por puerto\n       inb, inw, inl, insb, insw, insl - entrada desde puerto\n       outb_p, outw_p, outl_p, inb_p, inw_p, inl_p - E/S pausada\n\n", "DESCRIPCION": "       Esta  familia  de  funciones  se  emplea  para  hacer  entrada  y salida de bajo nivel por puertos. Est\u00e1n\n       dise\u00f1adas principalmente para uso interno del n\u00facleo, pero pueden ser  empleadas  desde  el  espacio  del\n       usuario.\n\n       Usted  ha  de  compilar  con  -O  o -O2 o similar. Las funciones est\u00e1n definidas como macros en l\u00ednea del\n       preprocesador, y no ser\u00e1n sustituidas sin la opci\u00f3n de optimizaci\u00f3n activada, provocando  referencias  no\n       resueltas en tiempo de enlazado.\n\n       Usted  ha  de  emplear  ioperm(2)  o  alternativamente  iopl(2)  para  decirle al n\u00facleo que permita a la\n       aplicaci\u00f3n en el espacio de usuario el acceso a los puertos de E/S  en  cuesti\u00f3n.  Si  no  hace  esto  la\n       aplicaci\u00f3n recibir\u00e1 un fallo de segmento.\n\nCONFORME A\n       outb  y  familia  son espec\u00edficas del hardware. Los argumentos puerto y valor est\u00e1n en orden opuesto a la\n       mayor\u00eda de implementaciones de DOS.\n\nV\u00c9ASE TAMBI\u00c9N\n       ioperm(2), iopl(2)\n\nLinux                                           29 Noviembre 1995                                        OUTB(2)\n"},{"NOMBRE": "       pause - espera una se\u00f1al\n\n", "SINOPSIS": "       #include <unistd.h>\n\n       int pause(void);\n\n", "DESCRIPCION": "       La  funci\u00f3n  de biblioteca pause hace que el proceso invocador (o hilo) duerma hasta que reciba una se\u00f1al\n       que, o bien lo terminar\u00e1, o bien provocar\u00e1 la llamada de una funci\u00f3n capturadora de se\u00f1ales.\n\nVALOR DEVUELTO\n       La funci\u00f3n pause s\u00f3lo regresa cuando se captura una se\u00f1al y la funci\u00f3n capturadora de se\u00f1ales regresa. En\n       este caso pause devuelve -1, y pone en errno el valor EINTR.\n\n", "ERRORES": "       EINTR  se recibi\u00f3 una se\u00f1al y la funci\u00f3n capturadora de se\u00f1ales regres\u00f3.\n\nLinux                                            31 agosto 1995                                         PAUSE(2)\n"},{"NOMBRE": "       personality - establece el dominio de ejecuci\u00f3n del proceso\n\n", "SINOPSIS": "       long personality(unsigned long persona);\n\n", "DESCRIPCION": "       Linux  admite  diferentes  dominios de ejecuci\u00f3n, o personalidades, para cada proceso. Entre otras cosas,\n       los dominios de ejecuci\u00f3n le dicen a Linux c\u00f3mo asociar n\u00fameros de se\u00f1al a acciones  a  tomar  para  cada\n       se\u00f1al. El sistema de dominios de ejecuci\u00f3n permite a Linux proporcionar un soporte limitado para binarios\n       compilados bajo otros sistemas operativos de tipo Unix.\n\n       Esta funci\u00f3n devolver\u00e1 la personalidad personality actual cuando persona valga 0xffffffff. En otro  caso,\n       har\u00e1 que persona sea el nuevo dominio de ejecuci\u00f3n del proceso en curso.\n\nVALOR DEVUELTO\n       En  caso  de  \u00e9xito, se devuelve la persona anterior. En caso de error, se devuelve -1 y se pone un valor\n       apropiado en errno.\n\n", "ERRORES": "       EINVAL El n\u00facleo no pudo cambiar la personalidad.\n\n", "ARCHIVOS": "       /usr/include/linux/personality.h\n\nCONFORME A\n       personality es espec\u00edfico de Linux y no deber\u00eda emplearse en programas que se pretendan transportables.\n\nLinux 2.0                                         1 Enero 2003                                    PERSONALITY(2)\n"},{"NOMBRE": "       pipe - crea una tuber\u00eda o interconexi\u00f3n\n\n", "SINOPSIS": "       #include <unistd.h>\n\n       int pipe(int descf[2]);\n\n", "DESCRIPCION": "       pipe  crea  un  par de descriptores de ficheros, que apuntan a un nodo-\u00ed de una tuber\u00eda, y los pone en el\n       vector de dos elementos apuntado por descf.  descf[0] es para lectura, descf[1] es para escritura.\n\nVALOR DEVUELTO\n       En caso de \u00e9xito, se devuelve cero. En caso de error se devuelve -1 y  se  pone  un  valor  apropiado  en\n       errno.\n\n", "ERRORES": "       EMFILE El proceso tiene en uso demasiados descriptores de ficheros.\n\n       ENFILE La tabla de ficheros del sistema est\u00e1 llena.\n\n       EFAULT descf no es v\u00e1lido.\n\nCONFORME A\n       SVr4, SVID, AT&T, POSIX, X/OPEN, BSD 4.3\n\nV\u00c9ASE TAMBI\u00c9N\n       read(2), write(2), fork(2), socketpair(2)\n\nLinux 0.99.11                                    22 octubre 1996                                         PIPE(2)\n"},{"NOMBRE": "       pivot_root - change the root filesystem\n\n", "SINOPSIS": "       pivot_root new_root put_old\n\n", "DESCRIPCION": "       pivot_root  moves the root file system of the current process to the directory put_old and makes new_root\n       the new root file system.  Since pivot_root(8) simply calls pivot_root(2), we refer to the  man  page  of\n       the latter for further details.\n\n       Note  that,  depending  on  the  implementation  of pivot_root, root and cwd of the caller may or may not\n       change. The following is a sequence for invoking pivot_root that works  in  either  case,  assuming  that\n       pivot_root and chroot are in the current PATH:\n\n       cd new_root\n       pivot_root . put_old\n       exec chroot . command\n\n       Note  that  chroot must be available under the old root and under the new root, because pivot_root may or\n       may not have implicitly changed the root directory of the shell.\n\n       Note that exec chroot changes the running executable, which is necessary if the old root directory should\n       be unmounted afterwards.  Also note that standard input, output, and error may still point to a device on\n       the old root file system, keeping it busy. They can easily be changed when invoking  chroot  (see  below;\n       note  the  absence  of leading slashes to make it work whether pivot_root has changed the shell's root or\n       not).\n\n", "OPCIONES": "       -V, --version\n              Display version information and exit.\n\n       -h, --help\n              Display help text and exit.\n\n", "EJEMPLOS": "       Change the root file system to /dev/hda1 from an interactive shell:\n\n       mount /dev/hda1 /new-root\n       cd /new-root\n       pivot_root . old-root\n       exec chroot . sh <dev/console >dev/console 2>&1\n       umount /old-root\n\n       Mount the new root file system over NFS from 10.0.0.1:/my_root and run init:\n\n       ifconfig lo 127.0.0.1 up   # for portmap\n       # configure Ethernet or such\n       portmap   # for lockd (implicitly started by mount)\n       mount -o ro 10.0.0.1:/my_root /mnt\n       killall portmap   # portmap keeps old root busy\n       cd /mnt\n       pivot_root . old_root\n       exec chroot . sh -c 'umount /old_root; exec /sbin/init' \\\n         <dev/console >dev/console 2>&1\n\nSEE ALSO\n       chroot(1), pivot_root(2), mount(8), switch_root(8), umount(8)\n\n", "DISPONIBILIDAD": "       The pivot_root command is  part  of  the  util-linux  package  and  is  available  from  https://www.ker\u2010\n       nel.org/pub/linux/utils/util-linux/.\n\nutil-linux                                         August 2011                                     PIVOT_ROOT(8)\n"},{"NOMBRE": "       poll - espera un evento en un descriptor de fichero\n\n", "SINOPSIS": "       #include <sys/poll.h>\n\n       int poll(struct pollfd *ufds, unsigned int nfds, int timeout);\n\n", "DESCRIPCION": "       poll es una variaci\u00f3n de select.  Especifica un vector de nfds estructuras del tipo\n               struct pollfd {\n                       int fd;         /* Descriptor de fichero */\n                       short events;   /* Eventos solicitados */\n                       short revents;  /* Eventos ocurridos */\n               };\n       y  un  tiempo  l\u00edmite  timeout en milisegundos. Un valor negativo indica un tiempo infinito.  El campo fd\n       contiene el descriptor de fichero de un fichero abierto.  El campo events es un par\u00e1metro de entrada, una\n       mascara de bits que especifica los eventos en los que la aplicaci\u00f3n est\u00e1 interesada.  El campo revents es\n       un par\u00e1metro de salida, completado por el n\u00facleo con los eventos que han  ocurrido  realmente,  bien  del\n       tipo  solicitado  o  bien  de  uno de los tipos POLLERR, POLLHUP o POLLNVAL.  (Estos tres bits carecen de\n       significado en el campo events y se pondr\u00e1n a 1 en el campo revents en el momento  en  que  la  condici\u00f3n\n       correspondiente  sea  cierta).  Si no se ha producido ninguno de los eventos solicitados (y ning\u00fan error)\n       para ninguno de los descriptores de fichero, el n\u00facleo espera  durante  timeout  milisegundos  a  que  se\n       produzca uno de estos eventos.  Los bits posibles en estas m\u00e1scaras est\u00e1n definidos en <sys/poll.h>:\n           #define POLLIN    0x0001  /* Hay datos que leer */\n           #define POLLPRI   0x0002  /* Hay datos urgentes que leer */\n           #define POLLOUT   0x0004  /* La escritura ahora ser\u00e1 no bloqueante */\n           #define POLLERR   0x0008  /* Condici\u00f3n de error */\n           #define POLLHUP   0x0010  /* Colgado */\n           #define POLLNVAL  0x0020  /* Petici\u00f3n inv\u00e1lida: fd no est\u00e1 abierto */\n       En <asm/poll.h> tambi\u00e9n se definen los valores POLLRDNORM, POLLRDBAND, POLLWRNORM, POLLWRBAND y POLLMSG.\n\nVALOR DEVUELTO\n       En  caso  de \u00e9xito, se devuelve un n\u00famero positivo que indica el n\u00famero de estructuras cuyo campo revents\n       tiene un valor distinto de cero (en otras palabras, aquellos descriptores para los que se ha producido un\n       evento  o  un error). Un valor 0 indica que se ha cumplido el tiempo l\u00edmite (timeout) de la llamada y que\n       no se ha seleccionado ning\u00fan descriptor de fichero. En caso de error, se devuelve -1 y se asigna a  errno\n       un valor apropiado.\n\n", "ERRORES": "       EBADF  Se especific\u00f3 un descriptor de fichero inv\u00e1lido en uno de los conjuntos.\n\n       ENOMEM No hay espacio disponible para ubicar la tabla de descriptores del fichero.\n\n       EFAULT El  vector  pasado  como  argumento  no  est\u00e1  ubicado  en  el espacio de direcciones del programa\n              invocador.\n\n       EINTR  Se ha producido una se\u00f1al antes de cualquier evento.\n\nCONFORME A\n       XPG4-UNIX.\n\n", "DISPONIBILIDAD": "       La llamada al sistema poll() se introdujo en la versi\u00f3n 2.1.23 de Linux. La funci\u00f3n de biblioteca  poll()\n       se  introdujo  en  la  versi\u00f3n  5.4.28  de libc (y emula la llamada al sistema poll mediante select si su\n       n\u00facleo no tiene dicha llamada al sistema).\n\nV\u00c9ASE TAMBI\u00c9N\n       select(2), select_tut(2)\n\nLinux 2.1.23                                    7 Diciembre 1997                                         POLL(2)\n"},{"NOMBRE": "       prctl - operaciones sobre un proceso\n\n", "SINOPSIS": "       #include <sys/prctl.h>\n\n       int prctl(int option, unsigned long arg2, unsigned long arg3 , unsigned long arg4, unsigned long arg5);\n\n", "DESCRIPCION": "       prctl  es  llamada  con  un  primer  argumento  especificando  qu\u00e9  hacer  (con  los valores definidos en\n       <linux/prctl.h>) y con m\u00e1s par\u00e1metros cuyo significado depende del primero. El primer argumento puede ser\n\n       PR_SET_PDEATHSIG\n              (desde Linux 2.1.57) Establece la se\u00f1al de terminaci\u00f3n del proceso padre del proceso actual a arg2\n              (un  valor  de  se\u00f1al  en  el  rango  1..maxsig, o cero para desactivar).  \u00c9sta es la se\u00f1al que el\n              proceso actual recibir\u00e1 cuando su padre muera. Este valor se desactiva tras un fork().\n\n       PR_GET_PDEATHSIG\n              (desde Linux 2.3.15) Almacena el valor actual de la se\u00f1al de terminaci\u00f3n del proceso padre  en  el\n              argumento (int *) arg2.\n\n       PR_SET_DUMPABLE\n              (desde  Linux  2.4)  Establece  el  estado  de la bandera que determina si se producen volcados de\n              memoria (core dumps) en la notificaci\u00f3n de una se\u00f1al cuyo comportamiento por defecto  es  producir\n              un  volcado  de memoria.  (Normalmente esta bandera se activa para un proceso por defecto, pero es\n              puesta a cero cuando un programa con el bit set-UID o set-GID es ejecutado y  tambi\u00e9n  por  varias\n              llamadas al sistema que manipulan los valores de UID y GID de los procesos).  arg2 debe ser o bien\n              0 (el proceso no admite volcados de memoria) \u00f3 1 (el proceso admite volcados de memoria).\n\n       PR_GET_DUMPABLE\n              (desde Linux 2.4) Devuelve (como resultado de la funci\u00f3n)  el  estado  actual  de  la  bandera  de\n              volcado del proceso invocador.\n\n       PR_SET_KEEPCAPS\n              Establece  el  estado  de  la bandera \"mantener capacidades\" del proceso, la cual determina si los\n              conjuntos  de  capacidades  efectivas  y  permitidas  del  proceso  se  borran  o  no  cuando  los\n              identificadores  de  usuario  del  proceso  cambian de tal manera que todos los identificadores de\n              usuario de los conjuntos real, efectivo y salvado toman un valor distinto de cero cuando al  menos\n              uno  de  ellos  previamente  ten\u00eda  el  valor 0.  (Por omisi\u00f3n, estos conjuntos de credenciales se\n              borran).  arg2 debe ser o bien 0 (las capacidades se  ponen  a  cero)  \u00f3  1  (las  capacidades  se\n              mantienen).\n\n       PR_GET_KEEPCAPS\n              Devuelve  (como resultado de la funci\u00f3n) el estado actual de la bandera \"mantener capacidades\" del\n              proceso invocador.\n\nVALOR DEVUELTO\n       PR_GET_DUMPABLE y PR_GET_KEEPCAPS devuelven 0 \u00f3 1 en caso de  \u00e9xito.   Todos  los  dem\u00e1s  valores  option\n       devuelven 0 en caso de \u00e9xito.  En caso de error, se devuelve -1, y errno toma el valor adecuado.\n\n", "ERRORES": "       EINVAL El valor de option no se reconoce, o es PR_SET_PDEATHSIG y arg2 no es cero ni un n\u00famero de se\u00f1al.\n\nCONFORME A\n       Esta  llamada  es  espec\u00edfica  de Linux.  IRIX tiene una llamada al sistema ptctl (tambi\u00e9n introducida en\n       Linux 2.1.44 como irix_prctl en la arquitectura MIPS), con prototipo\n\n       ptrdiff_t prctl(int option, int arg2, int arg3);\n\n       y opciones para obtener el m\u00e1ximo n\u00famero de procesos por usuario, el m\u00e1ximo n\u00famero de procesadores que el\n       proceso  invocador  puede  usar,  conocer  si  un  proceso concreto est\u00e1 actualmente bloqueado, obtener o\n       activar el tama\u00f1o de pila m\u00e1ximo, etc., etc.\n\n", "DISPONIBILIDAD": "       La llamada al sistema ptctl() fue introducida en Linux 2.1.57.  No  hay  funci\u00f3n  de  biblioteca  ptctl()\n       todav\u00eda.\n\nV\u00c9ASE TAMBI\u00c9N\n       signal(2)\n\nLinux 2.4.18                                      27 junio 2002                                         PRCTL(2)\n"},{"NOMBRE": "       pread, pwrite - leen de o escriben en un fichero a partir de una posici\u00f3n dada\n\n", "SINOPSIS": "       #define _XOPEN_SOURCE 500\n\n       #include <unistd.h>\n\n       ssize_t pread(int fd, void *buf, size_t count, off_t offset);\n\n       ssize_t pwrite(int fd, const void *buf, size_t count, off_t offset);\n\n", "DESCRIPCION": "       pread()  lee  hasta  count  bytes  del  descriptor de fichero fd a partir de la posici\u00f3n offset (desde el\n       principio del fichero) en el \u00e1rea temporal que empieza en buf.   La  posici\u00f3n  del  puntero  de  L/E  del\n       fichero no cambia.\n\n       pwrite()  escribe  hasta  count  bytes  desde  el buffer que empieza en buf al descriptor de fichero fd a\n       partir de la posici\u00f3n offset.  La posici\u00f3n del puntero del fichero no cambia.\n\n       Debe ser posible realizar b\u00fasquedas sobre el fichero referenciado por fd.\n\nVALOR DEVUELTO\n       En caso de \u00e9xito se devuelve el n\u00famero de bytes le\u00eddos o escritos (un cero indica que no  se  ha  escrito\n       nada,  en  el  caso  de pwrite, o un fin de fichero, en el caso de pread), o -1 en caso de error, en cuyo\n       caso se asigna a errno un valor que indica el error.\n\n", "ERRORES": "       pread puede fallar y asignar a errno cualquier error especificado por read(2) o lseek(2).   pwrite  puede\n       fallar y asignar a errno cualquier error especificado por write(2) o lseek(2).\n\nCONFORME A\n       Unix98\n\n", "HISTORIA": "       Las  llamadas  al  sistema  pread  y pwrite se a\u00f1adieron a Linux en la versi\u00f3n 2.1.60. Las entradas en la\n       tabla de llamadas al sistema de la arquitectura i386 se a\u00f1adieron en la versi\u00f3n  2.1.69.  El  soporte  de\n       libc  (incluyendo  la  emulaci\u00f3n  en  los n\u00facleos anteriores que carecen de estas llamadas al sistema) se\n       a\u00f1adi\u00f3 en glibc 2.1.\n\nV\u00c9ASE TAMBI\u00c9N\n       read(2), write(2), lseek(2)\n\nLinux 2.2.0-pre9                                  21 enero 1999                                         PREAD(2)\n"},{"NOMBRE": "       afs_syscall,  break,  ftime,  gtty,  lock,  mpx,  prof,  profil,  stty,  ulimit - Llamadas al sistema sin\n       implementar\n\n", "SINOPSIS": "       Llamadas al sistema sin implementar.\n\n", "DESCRIPCION": "       Estas llamadas al sistema no est\u00e1n implementadas en la versi\u00f3n 2.4 del n\u00facleo de Linux.\n\nVALOR DEVUELTO\n       Estas llamadas al sistema siempre devuelven -1 y asignan a la variable errno el valor ENOSYS.\n\n", "OBSERVACIONES": "       D\u00e9se cuenta que ftime(3), profil(3) y ulimit(3) se implementan como funciones de biblioteca.\n\n       Algunas llamadas al sistema, como alloc_hugepages(2), free_hugepages(2),  ioperm(2),  iopl(2)  y  vm86(2)\n       s\u00f3lo existen en ciertas arquitecturas.\n\n       Algunas  llamadas  al sistema, como ipc(2) y {create,init,delete}_module(2) s\u00f3lo existen cuando el n\u00facleo\n       de Linux se construy\u00f3 con soporte para ellas.\n\nV\u00c9ASE TAMBI\u00c9N\n       obsolete(2)\n\nLinux 2.4                                         12 junio 1998                                 UNIMPLEMENTED(2)\n"},{"NOMBRE": "       select, pselect, FD_CLR, FD_ISSET, FD_SET, FD_ZERO - multiplexaci\u00f3n de E/S s\u00edncrona\n\n", "SINOPSIS": "       /* Seg\u00fan POSIX 1003.1-2001 */\n       #include <sys/select.h>\n\n       /* Seg\u00fan est\u00e1ndares anteriores */\n       #include <sys/time.h>\n       #include <sys/types.h>\n       #include <unistd.h>\n\n       int select(int n, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, struct timeval *timeout);\n\n       int  pselect(int n, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, const struct timespec *timeout,\n       const sigset_t *sigmask);\n\n       FD_CLR(int fd, fd_set *set);\n       FD_ISSET(int fd, fd_set *set);\n       FD_SET(int fd, fd_set *set);\n       FD_ZERO(fd_set *set);\n\n", "DESCRIPCION": "       Las funciones select y pselect esperan a que un n\u00famero de descriptores de fichero cambien de estado.\n\n       Su funci\u00f3n es id\u00e9ntica, con tres diferencias:\n\n       (i)    La funci\u00f3n select usa un plazo de espera (timeout)  que es de tipo struct timeval (con segundos  y\n              microsegundos), mientras pselect usa el tipo struct timespec (con segundos y nanosegundos).\n\n       (ii)   La  funci\u00f3n  select  puede  actualizar  el  par\u00e1metro  timeout para indicar el tiempo sobrante. La\n              funci\u00f3n pselect no modifica este par\u00e1metro.\n\n       (iii)  La funci\u00f3n select no tiene par\u00e1metro sigmask , y se comporta como pselect llamada con el argumento\n              sigmask a NULL.\n\n       Se  miran  tres  conjuntos  independientes de descriptores. Aqu\u00e9llos listados en readfds ser\u00e1n observados\n       para ver si hay caracteres que llegan a estar disponibles para lectura (m\u00e1s concretamente,  para  ver  si\n       una operaci\u00f3n de lectura no se bloquear\u00e1 - en particular, un descriptor de fichero est\u00e1 tambi\u00e9n preparado\n       en fin-de-fichero), aqu\u00e9llos en writefds ser\u00e1n observados para ver si una operaci\u00f3n de  escritura  no  se\n       bloquear\u00e1,  y  aqu\u00e9llos  en exceptfds ser\u00e1n observados para ver si ocurren excepciones. En caso de \u00e9xito,\n       los conjuntos se modifican en marcha para indicar qu\u00e9 descriptores cambiaron realmente su estado.\n\n       Se proporcionan cuatro macros para manipular los conjuntos.  FD_ZERO  limpiar\u00e1  un  conjunto.   FD_SET  y\n       FD_CLR  a\u00f1aden  o  borran un descriptor dado a o de un conjunto.  FD_ISSET mira a ver si un descriptor es\n       parte del conjunto; esto es \u00fatil despu\u00e9s de que select regrese.\n\n       n es el descriptor con el n\u00famero m\u00e1s alto en cualquiera de los tres conjuntos, m\u00e1s 1.\n\n       timeout es un l\u00edmite superior de la cantidad de tiempo transcurrida antes de que  select  regrese.  Puede\n       ser  cero,  causando  que  select  regrese  inmediatamente. Si timeout es NULL (no hay tiempo de espera),\n       select puede bloquear indefinidamente.\n\n       sigmask es un puntero a una m\u00e1scara de se\u00f1ales (vea sigprocmask(2)); si  es  distinto  de  NULL,  pselect\n       reemplaza en primer lugar la m\u00e1scara de se\u00f1ales actual por aquella a la que apunta sigmask, luego hace la\n       funcion `select',  y por \u00faltimo restablece la m\u00e1scara de se\u00f1ales original de nuevo.\n\n       La idea de pselect es que si alguien quiere esperar un evento, bien una se\u00f1al o cualquier otra cosa sobre\n       un  descriptor  de  fichero,  se  necesita  una  comprobaci\u00f3n at\u00f3mica para evitar condiciones de carrera.\n       (Suponga que el manejador de se\u00f1ales fija una opci\u00f3n global y regresa. Despu\u00e9s una comprobaci\u00f3n  de  esta\n       opci\u00f3n  seguida de una llamada a select() podr\u00eda colgarse indefinidamente si la se\u00f1al lleg\u00f3 justo despu\u00e9s\n       de la comprobaci\u00f3n pero justo antes de la llamada. Por otra parte, pselect le permite bloquear se\u00f1ales en\n       primer lugar, manejar las se\u00f1ales que hayan llegado,  y despu\u00e9s llamar a pselect() con la m\u00e1scara sigmask\n       deseada, evitando la condici\u00f3n de carrera.)  Puesto que en la actualidad Linux no cuenta con una  llamada\n       al sistema pselect() , la rutina actual de glibc2 todav\u00eda tiene este defecto.\n\n   El plazo de espera o timeout\n       Las estructuras de tiempo involucradas est\u00e1n definidas en <sys/time.h> y tienen el siguiente aspecto\n\n              struct timeval {\n                  long    tv_sec;         /* segundos */\n                  long    tv_usec;        /* microsegundos */\n              };\n\n       and\n\n              struct timespec {\n                  long    tv_sec;         /* segundo */\n                  long    tv_nsec;        /* nanosegundos */\n              };\n\n       (Sin embargo,  lea m\u00e1s abajo sobre las versiones de POSIX 1003.1-2001.)\n\n       Hay  alg\u00fan c\u00f3digo por ah\u00ed que llama a select con los tres conjuntos vac\u00edos, n cero, y un timeout distinto\n       de cero como una forma transportable y curiosa de dormir con una precisi\u00f3n por debajo del segundo.\n\n       En Linux, timeout se modifica para reflejar la cantidad  de  tiempo  no  dormido;  la  mayor\u00eda  de  otras\n       implementaciones  no  hacen  esto.  Esto  produce  problemas cuando el c\u00f3digo de Linux que lee timeout se\n       transporta a otros sistemas operativos, y cuando se transporta a Linux c\u00f3digo que  reutiliza  una  struct\n       timeval  para  varias  selects  en  un  bucle  sin reinicializarla. Considere que timeout est\u00e1 indefinido\n       despu\u00e9s de que select regrese.\n\nVALOR DEVUELTO\n       En caso de \u00e9xito, select y pselect devuelven el n\u00famero de descriptores contenidos  en  los  conjuntos  de\n       descriptores,  que puede ser cero si el tiempo de espera expira antes de que ocurra algo interesante.  En\n       caso de error, se devuelve -1, y se pone un valor apropiado en errno; los  conjuntos  y  timeout  estar\u00e1n\n       indefinidos, as\u00ed que no conf\u00ede en sus contenidos tras un error.\n\n", "ERRORES": "       EBADF  Se ha dado un descriptor de fichero inv\u00e1lido en uno de los conjuntos.\n\n       EINTR  Se ha capturado una se\u00f1al no bloqueante.\n\n       EINVAL n es negativo o el valor contenido en timeout no es v\u00e1lido.\n\n       ENOMEM select no ha sido capaz de reservar memoria para las tablas internas.\n\n", "EJEMPLOS": "       #include <stdio.h>\n       #include <sys/time.h>\n       #include <sys/types.h>\n       #include <unistd.h>\n\n       int\n       main(void) {\n           fd_set rfds;\n           struct timeval tv;\n           int valret;\n\n           /* Mirar stdin (df 0) para ver si tiene entrada */\n           FD_ZERO(&rfds);\n           FD_SET(0, &rfds);\n           /* Esperar hasta 5 s */\n           tv.tv_sec = 5;\n           tv.tv_usec = 0;\n\n           valret = select(1, &rfds, NULL, NULL, &tv);\n           /* \u00a1No confiar ahora en el valor de tv! */\n\n           if (valret)\n               printf(\"Los datos ya est\u00e1n disponibles.\\n\");\n               /* FD_ISSET(0, &rfds) ser\u00e1 verdadero */\n           else\n               printf(\"Ning\u00fan dato en 5 segundos.\\n\");\n\n           return 0;\n       }\n\nCONFORME A\n       4.4BSD  (la  funci\u00f3n  select apareci\u00f3 por primera vez en 4.2BSD). Generalmente es transportable a o desde\n       sistemas no-BSD que admitan clones de la capa de z\u00f3calos de BSD  (incluyendo  variantes  System  V).  Sin\n       embargo,  observe que la variante System V normalmente pone la variable de espera antes de salir, pero la\n       variante BSD no.\n\n       La funci\u00f3n pselect est\u00e1 definida en IEEE Std 1003.1g-2000 (POSIX.1g), y parte de POSIX  1003.1-2001.   Se\n       encuentra  en  glibc2.1  y  posteriores.   Glibc2.0 posee una funci\u00f3n con este nombre, que sin embargo no\n       acepta un par\u00e1metro sigmask.\n\n", "OBSERVACIONES": "       fd_set es un buffer de tama\u00f1o fijo. Ejecutar FD_CLR o FD_SET con un valor de fd que sea negativo o  igual\n       o  mayor  que  FD_SETSIZE  tendr\u00e1  un  comportamiento  indefinido.   Adem\u00e1s, POSIX requiere que fd sea un\n       descriptor de fichero v\u00e1lido.\n\n       En lo que se refiere a los tipos involucrados, lo habitual es  que  los  dos  campos  de  una  estructura\n       timeval  sean  de  tipo  long (como se muestra abajo), y la estructura est\u00e9 definida en <sys/time.h>.  La\n       postura de POSIX 1003.1-2001 es\n\n              struct timeval {\n                  time_t         tv_sec;     /* segundos */\n                  suseconds_t    tv_usec;    /* microsegundos */\n              };\n\n       donde la estructura est\u00e1 definida en <sys/select.h> y los tipos  de  datos  time_t  y  suseconds_t  est\u00e1n\n       definidos en <sys/types.h>.\n\n       En  lo  que  se refiere a prototipos, lo habitual es incluir el fichero de cabecera <time.h> para select.\n       La postura de POSIX 1003.1-2001 es incluir el fichero <sys/select.h> para  select  y  pselect.   Libc4  y\n       libc5 no poseen una cabecera <sys/select.h> ; bajo glibc 2.0 y posteriores esta cabecera s\u00ed existe.  Bajo\n       glibc 2.0, proporciona incondicionalemente el prototipo incorrecto para  pselect,  bajo  glibc  2.1-2.2.1\n       proporciona  pselect  cuando  _GNU_SOURCE  est\u00e1  definido,  bajo  glibc 2.2.2-2.2.4 lo proporciona cuando\n       _XOPEN_SOURCE est\u00e1 definido y tiene un valor de 600 o mayor.  Sin duda, desde POSIX 1003.1-2001,  deber\u00eda\n       dar el prototipo por defecto.\n\nV\u00c9ASE TAMBI\u00c9N\n       Para un tutorial detallado con ejemplos, vea select_tut(2).\n\n       Para una mera descripci\u00f3n, vea accept(2), connect(2), poll(2), read(2), recv(2), send(2), sigprocmask(2),\n       write(2)\n\nLinux 2.4                                        9 febrero 2001                                        SELECT(2)\n"},{"NOMBRE": "       ptrace - rastreo de un proceso\n\n", "SINOPSIS": "       #include <sys/ptrace.h>\n\n       long ptrace(enum __ptrace_request petici\u00f3n, pid_t pid, void *direc, void *datos);\n\n", "DESCRIPCION": "       La  llamada al sistema ptrace proporciona un medio por el que un proceso padre puede observar y controlar\n       la ejecuci\u00f3n de otro proceso y examinar y cambiar su imagen de memoria y registros. Se usa principalmente\n       en la implementaci\u00f3n de depuraci\u00f3n con puntos de ruptura y en el rastreo de llamadas al sistema.\n\n       El  padre  puede  inicar  un  rastreo  llamando  a  fork(2)  haciendo  que el hijo restultante realice un\n       PTRACE_TRACEME, seguido (normalmente) por un  exec(3).   Alternativamente,  el  padre  puede  comenzar  a\n       rastrear un proceso existente usando PTRACE_ATTACH.\n\n       Mientras est\u00e1 siendo rastreado, el hijo se detendr\u00e1 cada vez que reciba una se\u00f1al, aun cuando la se\u00f1al se\n       haya ignorado. (La excepci\u00f3n es SIGKILL que tiene su efecto habitual.) El  padre  ser\u00e1  informado  en  su\n       siguiente wait(2) y puede inspeccionar y modificar el proceso hijo mientras est\u00e1 parado.  A continuaci\u00f3n,\n       el padre puede hacer que  el  hijo  contin\u00fae,  ignorando  opcionalmente  la  se\u00f1al  recibida  (o  incluso\n       entregando  una se\u00f1al distinta en su lugar).  Cuando el padre termina de rastrear, puede terminar el hijo\n       con PTRACE_KILL o hace que se contin\u00fae ejecutando en un modo normal sin rastreo mediante PTRACE_DETACH.\n\n       El valor del argumento petici\u00f3n determina la acci\u00f3n a realizar:\n\n       PTRACE_TRACEME\n              Indica que este proceso va a ser  rastreado  por  su  padre.  Cualquier  se\u00f1al  (excepto  SIGKILL)\n              entregada  a  este  proceso  har\u00e1  que  se pare y su padre ser\u00e1 informado mediante wait.  Tambi\u00e9n,\n              cualquier llamada posterior a exec realizada por este proceso har\u00e1 que se  le  env\u00ede  un  SIGTRAP,\n              dando  al  padre  la  posibilidad de obtener el control antes de que el nuevo programa comience su\n              ejecuci\u00f3n. Probablemente, un proceso no deber\u00eda hacer esta petici\u00f3n si su padre no est\u00e1  esperando\n              para rastrearlo.  (pid, direc y datos se ignoran.)\n\n       La  petici\u00f3n  anterior  la  usa  s\u00f3lo  el proceso hijo. El resto las usa s\u00f3lo el padre. En las siguientes\n       peticiones, pid indica el proceso hijo sobre el que se actuar\u00e1. Para peticiones distintas de PTRACE_KILL,\n       el proceso hijo debe estar parado.\n\n       PTRACE_PEEKTEXT, PTRACE_PEEKDATA\n              Lee una palabra de la posici\u00f3n direc.\n\n       PTRACE_PEEKUSER\n              Lee  una  palabra  en el desplazamiento direc del \u00e1rea USER del hijo, que contiene los registros y\n              otra informaci\u00f3n sobre el proceso (vea <linux/user.h> y <sys/user.h>). La palabra se devuelve como\n              resultado de la llamada ptrace.  T\u00edpicamente, el desplazamiento debe est\u00e1 alineado en una frontera\n              de palabra, aunque esto podr\u00eda variar en cada arquitectura. (datos se ignora).\n\n       PTRACE_POKETEXT, PTRACE_POKEDATA\n              Copia una palabra de la posici\u00f3n datos a la posici\u00f3n direc de la memoria del hijo. Como antes, las\n              dos peticiones son actualmente equivalentes.\n\n       PTRACE_POKEUSER\n              Copia  una palabra de la posici\u00f3n datos al desplazamiento direc en el \u00e1rea USER del hijo. Al igual\n              que antes, el desplazamiento debe estar t\u00edpicamente alineado en  una  frontera  de  palabra.  Para\n              conservar   la   integridad  del  n\u00facleo,  algunas  modificaciones  al  \u00e1rea  USER  se  encuentran\n              deshabilitadas.\n\n       PTRACE_GETREGS, PTRACE_GETFPREGS\n              Copia los registros de prop\u00f3sito general o de punto  flotante  del  hijo,  respectivamente,  a  la\n              posici\u00f3n  datos  del  padre. Vea <linux/user.h> para obtener informaci\u00f3n sobre el formato de estos\n              datos. (direc se ignora.)\n\n       PTRACE_SETREGS, PTRACE_SETFPREGS\n              Copia los registros de prop\u00f3sito general o de punto flotante del hijo, respectivamente,  desde  la\n              posici\u00f3n  datos  del  padre.  Al  igual  que  para  PTRACE_POKEUSER,  alguna modificaciones de los\n              registros de prop\u00f3sito general pueden estar deshabilitadas. (direc se ignora.)\n\n       PTRACE_CONT\n              Reinicia el proceso hijo parado. Si datos no es cero y tampoco  SIGSTOP  se  interpreta  como  una\n              se\u00f1al  que  se  entregar\u00e1 al hijo. En otro caso, no se entrega ninguna se\u00f1al. As\u00ed, por ejemplo, el\n              padre puede controlar si una se\u00f1al enviada al hijo es entregada o no. (direc se ignora.)\n\n       PTRACE_SYSCALL, PTRACE_SINGLESTEP\n              Reinicia el proceso hijo parado al igual que PTRACE_CONT pero prepara al hijo para que se pare  en\n              la  siguiente  entrada  a  o  salida  de  una  llamda  al sistema o tras la ejecuci\u00f3n de una \u00fanica\n              intrucci\u00f3n, respectivamente. (Como es usual, el hijo tambi\u00e9n se detendr\u00e1 al  recibir  una  se\u00f1al).\n              Desde la perspectiva del padre, el hijo aparecer\u00e1 como si se hubiera detenido al recibir una se\u00f1al\n              SIGTRAP. Por lo que, por ejemplo, para PTRACE_SYSCALL, la idea es inspeccionar los  argumentos  de\n              la  llamada  al  sistema  en  la  primera  parada,  realizar  a continuaci\u00f3n otra PTRACE_SYSCALL e\n              inspeccionar los valores devueltos por la llamada al sistema cuando se  detenga  la  segunda  vez.\n              (direc se ignora.)\n\n       PTRACE_KILL\n              Env\u00eda al hijo una se\u00f1al SIGKILL para que termine. (direc y datos se ignoran.)\n\n       PTRACE_ATTACH\n              Ata  al  proceso  especificado  en pid, convirti\u00e9ndolo en un \"hijo\" rastreado. El hijo se comporta\n              como si hubiera realizado un PTRACE_TRACEME.  El proceso actual realmente se convierte en el padre\n              del  proceso hijo para la mayor\u00eda de prop\u00f3sitos (por ejemplo, recibir\u00e1 notificaci\u00f3n de los eventos\n              del hijo y aparecer\u00e1 en la salida de ps(1) como padre del hijo), pero un getppid(2) por parte  del\n              hijo  todav\u00eda  devolver\u00e1  el  pid  del  padre  original.  Al  hijo  se  le  env\u00eda un SIGSTOP pero,\n              necesariamente, no tiene por qu\u00e9 haberse parado cuando esta llamada haya terminado. Use wait  para\n              esperar a que el hijo se pare. (direc y datos se ignoran.)\n\n       PTRACE_DETACH\n              Reinicia  el  hijo parado al igual que PTRACE_CONT pero primero lo desata del proceso, deshaciendo\n              el efecto de reparentesco de PTRACE_ATTACH y los efectos de PTRACE_TRACEME.  Aunque quiz\u00e1s no  sea\n              intencionado,  bajo  Linux  un  proceso  rastreado  puede ser desatado de esta manera sin tener en\n              cuenta qu\u00e9 m\u00e9todo se us\u00f3 para iniciar el rastreo.  (direc is ignored.)\n\n", "OBSERVACIONES": "       Aunque los argumentos de ptrace se interpretan seg\u00fan el prototipo  dado,  GNU  libc  declara  actualmente\n       ptrace como una funci\u00f3n en la que s\u00f3lo el argumento petici\u00f3n tiene sentido.  Esto significa que se pueden\n       omitir los argumentos del final innecesarios, aunque al hacerlo as\u00ed se  hace  uso  de  comportamiento  de\n       gcc(1) sin documentar.\n\n       init(8), el proceso con PID 1, no puede ser rastreado.\n\n       La  disposici\u00f3n  de  los  contenidos  de  memoria  y  del  \u00e1rea USER son bastante espec\u00edficos del sistema\n       operativo (y la arquitectura).\n\n       El tama\u00f1o de una \"palabra\" viene determinado por la variante del sistema operativo (por ejemplo, para  un\n       Linux de 32 bits es de 32 bits, etc.)\n\n       El  rastreo  provoca  unas  pocas  diferencias  sutiles  en  la sem\u00e1ntica de los procesos rastreados. Por\n       ejemplo, si se ata un proceso con PTRACE_ATTACH, su padre original ya  no  puede  recibir  notificaciones\n       mediante wait cuando se detiene y no hay forma de que el nuevo padre pueda simular de forma efectiva esta\n       notificaci\u00f3n.\n\n       Esta p\u00e1gina documenta la forma en que funciona actualmente la llamada ptrace en Linux. Su  comportamiento\n       difiere  notablemente en otros Unix. En cualquier caso, el uso ptrace es altamente espec\u00edfico del sistema\n       operativo (y la arquitectura).\n\n       La p\u00e1gina de manual de SunOS describe ptrace como \"\u00fanica y arcaica\", que lo es. La interfaz de depuraci\u00f3n\n       basada  en  el sistema de ficheros virtual \"proc\" presente en Solaris 2 implementa un superconjunto de la\n       funcionalidad de ptrace de forma m\u00e1s potente y uniforme.\n\nVALOR DEVUELTO\n       En caso de \u00e9xito, las peticiones PTRACE_PEEK* devuelven los datos solicitados,  mientras  que  las  otras\n       peticiones  devuelven cero. En caso de error, todas las peticiones devuelven -1 y a errno(3) se le asigna\n       un valor apropiado. Ya que el valor devuelto por una petici\u00f3n PTRACE_PEEK* con \u00e9xito  puede  ser  -1,  el\n       invocador debe comprobar errno despu\u00e9s de tales peticiones para determinar si hubo error o no.\n\n", "ERRORES": "       EPERM  El  proceso  indicado  no  puede  ser  rastreado.  Esto  podr\u00eda  deberse  a  que el padre no tiene\n              suficientes privilegios. Los procesos que no son del root no pueden rastrear procesos a los que no\n              pueden enviar se\u00f1ales o programas en ejecuci\u00f3n setuid/setgid por razones obvias. Alternativamente,\n              puede que el proceso ya se est\u00e9 rastreando o ser el proceso init (pid 1).\n\n       ESRCH  El proceso especificado no existe o el invocador no lo  est\u00e1  rastreando  actualmente  o  no  est\u00e1\n              parado (para peticiones que necesiten que lo est\u00e9).\n\n       EIO    Petici\u00f3n  no es v\u00e1lida o se ha intentado leer de o escribir en una \u00e1rea inv\u00e1lida de la memoria del\n              padre o del hijo, o se ha producido una violaci\u00f3n en la alineaci\u00f3n de palabra o se ha especificado\n              una se\u00f1al inv\u00e1lida durante una petici\u00f3n de reinicio.\n\n       EFAULT Se  ha  intentado  leer  de  o  escribir  en una \u00e1rea inv\u00e1lida de la memoria del padre o del hijo,\n              probablemente porque el \u00e1rea no estaba asignada o no era accesible. Desafortunadamente, en  Linux,\n              diferentes versiones de este fallo devolver\u00e1n EIO o EFAULT de forma m\u00e1s o menos arbitraria.\n\nCONFORME A\n       SVr4, SVID EXT, AT&T, X/OPEN, BSD 4.3\n\nV\u00c9ASE TAMBI\u00c9N\n       gdb(1), strace(1), execve(2), fork(2), signal(2), wait(2), exec(3)\n\nLinux 2.2.10                                    7 noviembre 1999                                       PTRACE(2)\n"},{"NOMBRE": "       pread, pwrite - leen de o escriben en un fichero a partir de una posici\u00f3n dada\n\n", "SINOPSIS": "       #define _XOPEN_SOURCE 500\n\n       #include <unistd.h>\n\n       ssize_t pread(int fd, void *buf, size_t count, off_t offset);\n\n       ssize_t pwrite(int fd, const void *buf, size_t count, off_t offset);\n\n", "DESCRIPCION": "       pread()  lee  hasta  count  bytes  del  descriptor de fichero fd a partir de la posici\u00f3n offset (desde el\n       principio del fichero) en el \u00e1rea temporal que empieza en buf.   La  posici\u00f3n  del  puntero  de  L/E  del\n       fichero no cambia.\n\n       pwrite()  escribe  hasta  count  bytes  desde  el buffer que empieza en buf al descriptor de fichero fd a\n       partir de la posici\u00f3n offset.  La posici\u00f3n del puntero del fichero no cambia.\n\n       Debe ser posible realizar b\u00fasquedas sobre el fichero referenciado por fd.\n\nVALOR DEVUELTO\n       En caso de \u00e9xito se devuelve el n\u00famero de bytes le\u00eddos o escritos (un cero indica que no  se  ha  escrito\n       nada,  en  el  caso  de pwrite, o un fin de fichero, en el caso de pread), o -1 en caso de error, en cuyo\n       caso se asigna a errno un valor que indica el error.\n\n", "ERRORES": "       pread puede fallar y asignar a errno cualquier error especificado por read(2) o lseek(2).   pwrite  puede\n       fallar y asignar a errno cualquier error especificado por write(2) o lseek(2).\n\nCONFORME A\n       Unix98\n\n", "HISTORIA": "       Las  llamadas  al  sistema  pread  y pwrite se a\u00f1adieron a Linux en la versi\u00f3n 2.1.60. Las entradas en la\n       tabla de llamadas al sistema de la arquitectura i386 se a\u00f1adieron en la versi\u00f3n  2.1.69.  El  soporte  de\n       libc  (incluyendo  la  emulaci\u00f3n  en  los n\u00facleos anteriores que carecen de estas llamadas al sistema) se\n       a\u00f1adi\u00f3 en glibc 2.1.\n\nV\u00c9ASE TAMBI\u00c9N\n       read(2), write(2), lseek(2)\n\nLinux 2.2.0-pre9                                  21 enero 1999                                         PREAD(2)\n"},{"NOMBRE": "       query_module - interroga al n\u00facleo sobre varias cosas relacionadas con los m\u00f3dulos\n\n", "SINOPSIS": "       #include <linux/module.h>\n\n       int query_module(const char *nombre, int que,\n       void *buf, size_t tambuf, size_t *ret);\n\n", "DESCRIPCION": "       query_module  pide  informaci\u00f3n  al  n\u00facleo  relativa  a  m\u00f3dulos  cargables. La naturaleza precisa de la\n       informaci\u00f3n y su formato depende de la subfunci\u00f3n que. Algunas funciones requieren que nombre se  refiera\n       a un m\u00f3dulo cargado actualmente, otras permiten que nombre sea NULL, indicando el propio n\u00facleo.\n\n   VALORES DE `QUE'\n       0      Siempre devuelve `\u00e9xito'. Se emplea para probar la llamada al sistema.\n\n       QM_MODULES\n              Devuelve  los  nombres  de  todos los m\u00f3dulos cargados. El formato del b\u00fafer de salida consiste en\n              cadenas de caracteres adyacentes terminadas en cero; ret contendr\u00e1 el n\u00famero de m\u00f3dulos.\n\n       QM_DEPS\n              Devuelve los nombres de todos los m\u00f3dulos utilizados por el m\u00f3dulo indicado. El formato del  b\u00fafer\n              de salida consiste en cadenas de caracteres adyacentes terminadas en cero; ret contendr\u00e1 el n\u00famero\n              de m\u00f3dulos.\n\n       QM_REFS\n              Devuelve los nombres de todos los m\u00f3dulos que utilizan al indicado. Esto es lo inverso de QM_DEPS.\n              El  formato  del  b\u00fafer de salida consiste en cadenas de caracteres adyacentes terminadas en cero;\n              ret contendr\u00e1 el n\u00famero de m\u00f3dulos.\n\n       QM_SYMBOLS\n              Devuelve los s\u00edmbolos y valores exportados por el n\u00facleo o el  m\u00f3dulo  indicado.  El  formato  del\n              b\u00fafer consiste en un vector de:\n\n              struct module_symbol\n              {\n                unsigned long value;\n                unsigned long name;\n              };\n\n              seguido  por  cadenas de caracteres terminadas en cero. El valor de nombre es el desplazamiento de\n              la cadena relativo al comienzo de buf; ret contendr\u00e1 el n\u00famero de s\u00edmbolos.\n\n       QM_INFO\n              Devuelve informaci\u00f3n variada sobre el m\u00f3dulo indicado. El formato del b\u00fafer de salida es:\n\n              struct module_info\n              {\n                unsigned long address;\n                unsigned long size;\n                unsigned long flags;\n              };\n\n              donde address es la direcci\u00f3n del n\u00facleo en la que reside el m\u00f3dulo, size es el tama\u00f1o del  modulo\n              en  bytes,  y  flags  es una m\u00e1scara de MOD_RUNNING, MOD_AUTOCLEAN, etc\u00e9tera, que indica el estado\n              actual del m\u00f3dulo. ret contendr\u00e1 el tama\u00f1o de la struct module_info.\n\nVALOR DEVUELTO\n       En caso de \u00e9xito, se devuelve cero. En caso de error, se devuelve -1 y se  pone  un  valor  apropiado  en\n       errno.\n\n", "ERRORES": "       ENOENT No existe ning\u00fan m\u00f3dulo con ese nombre.\n\n       EINVAL Inv\u00e1lido que, o nombre le indica al n\u00facleo una subfunci\u00f3n inapropiada.\n\n       ENOSPC El  tama\u00f1o  del  b\u00fafer  proporcionado era demasiado peque\u00f1o. ret contendr\u00e1 el m\u00ednimo tama\u00f1o que se\n              necesita.\n\n       EFAULT Al menos uno de nombre, buf o ret estaban afuera del espacio de direcciones accesible al programa.\n\nV\u00c9ASE TAMBI\u00c9N\n       create_module(2), init_module(2), delete_module(2).\n\nLinux 2.1.17                                    26 Diciembre 1996                                QUERY_MODULE(2)\n"},{"NOMBRE": "       quotactl - manipula cuotas de disco\n\n", "SINOPSIS": "       #include <sys/types.h>\n       #include <sys/quota.h>\n\n       int quotactl (int cmd, const char *especial, int id , caddr_t direc);\n\n       #include <linux/unistd.h>\n\n       _syscall4(int, quotactl, int, cmd, const char *, especial , int, id, caddr_t, direc);\n\n", "DESCRIPCION": "       El  sistema  de  cuotas  define  para cada usuario o grupo un l\u00edmite blando y un l\u00edmite duro limitando la\n       cantidad de espacio de disco que puede usarse en un sistema de ficheros dado. EL l\u00edmite duro no puede ser\n       traspasado.  El  l\u00edmite  blando puede traspasarse, pero se avisar\u00e1 de ello. \u00cdtem m\u00e1s, el usuario no puede\n       estar por encima del l\u00edmite blando m\u00e1s all\u00e1 de una semana (tiempo predeterminado) cada  vez:  despu\u00e9s  de\n       este periodo el l\u00edmite blando cuenta como el duro.\n\n       La   llamada   al   sistema  quotactl  manipula  estas  cuotas.  Su  primer  argumento  es  de  la  forma\n       QCMD(subcmd,tipo)  donde  tipo  es  uno  de  USRQUOTA  o  GRPQUOTA  (para  cuotas  de  usuario  y  grupo,\n       respectivamente), y subcmd est\u00e1 descrito m\u00e1s abajo.\n\n       El segundo argumento especial es el dispositivo especial de bloques al que se aplican estas cuotas.  Debe\n       estar montado.\n\n       El tercer argumento id es el identificador del usuario o grupo al cual se aplican  estas  cuotas  (cuando\n       sea relevante).\n\n       El cuarto argumento direc es la direcci\u00f3n de una estructura de datos, dependiendo de la orden.\n\n       El subcmd es uno de\n\n       Q_QUOTAON  Activa las cuotas. El argumento direc es el camino del fichero que contiene las cuotas para el\n                  sistema de ficheros.\n\n       Q_QUOTAOFF Desactiva las cuotas.\n\n       Q_GETQUOTA Obtiene los l\u00edmites y el uso actual del espacio de disco. El argumento direc es un  puntero  a\n                  una estructura dqblk (definida en <sys/quota.h>).\n\n       Q_SETQUOTA Establece los l\u00edmites y el uso actual; direc es como antes.\n\n       Q_SETQLIM  Establece los l\u00edmites; direc es como antes.\n\n       Q_SETUSE   Establece el uso.\n\n       Q_SYNC     Sincroniza la copia en disco de las cuotas de un sistema de ficheros.\n\n       Q_GETSTATS Obtiene datos estad\u00edsticos recogidos.\n\nVALOR DEVUELTO\n       En  caso  de \u00e9xito, quotactl devuelve 0. En caso de error, se devuelve -1 y se pone un valor apropiado en\n       errno.\n\n", "ERRORES": "       ENOPKG   El n\u00facleo ha sido compilado sin soporte de cuotas.\n\n       EFAULT   Valor malo para direc.\n\n       EINVAL   tipo no es un tipo de cuotas conocido. O especial no ha podido ser encontrado.\n\n       ENOTBLK  especial no es un dispositivo especial de bloques.\n\n       ENODEV   especial no se halla en la tabla de montaje.\n\n       EACCES   El fichero de cuotas no es un fichero ordinario.\n\n       EIO      No se puede leer o escribir en el fichero de cuotas.\n\n       EMFILE   Demasiados ficheros abiertos: no se puede abrir el fichero de cuotas.\n\n       EBUSY    Se ha pedido Q_QUOTAON pero las cuots ya estaban activadas.\n\n       ESRCH    Se ha pedido Q_GETQUOTA o Q_SETQUOTA o Q_SETUSE o Q_SETQLIM para un sistema de ficheros  que  no\n                ten\u00eda las cuotas activadas.\n\n       EPERM    El  proceso  no  era root (para el sistema de ficheros),  y se ha pedido Q_GETQUOTA para otro id\n                que el del proceso mismo, o se ha pedido otra cosa distinta a Q_GETSTATS o a Q_SYNC .\n\nCONFORME A\n       BSD\n\nV\u00c9ASE TAMBI\u00c9N\n       quota(1), getrlimit(2), setrlimit(2), ulimit(2), quotacheck(8), quotaon(8)\n\nLinux 1.3.88                                      14 abril 1996                                      QUOTACTL(2)\n"},{"NOMBRE": "       bash,  :,  .,  [,  alias, bg, bind, break, builtin, caller, cd, command, compgen, complete, compopt, con\u2010\n       tinue, declare, dirs, disown, echo, enable, eval, exec, exit, export, false, fc, fg, getopts, hash, help,\n       history,  jobs, kill, let, local, logout, mapfile, popd, printf, pushd, pwd, read, readonly, return, set,\n       shift, shopt, source, suspend, test, times, trap, true, type, typeset,  ulimit,  umask,  unalias,  unset,\n       wait - bash built-in commands, see bash(1)\n\nBASH BUILTIN COMMANDS\n       Unless  otherwise noted, each builtin command documented in this section as accepting options preceded by\n       - accepts -- to signify the end of the options.  The :, true, false, and test/[ builtins  do  not  accept\n       options  and  do  not  treat  --  specially.   The  exit, logout, return, break, continue, let, and shift\n       builtins accept and process arguments beginning with - without requiring --.  Other builtins that  accept\n       arguments  but are not specified as accepting options interpret arguments beginning with - as invalid op\u2010\n       tions and require -- to prevent this interpretation.\n       : [arguments]\n              No effect; the command does nothing beyond expanding arguments and performing any specified  redi\u2010\n              rections.  The return status is zero.\n\n        .  filename [arguments]\n       source filename [arguments]\n              Read  and execute commands from filename in the current shell environment and return the exit sta\u2010\n              tus of the last command executed from filename.  If filename does not contain a  slash,  filenames\n              in  PATH  are  used to find the directory containing filename.  The file searched for in PATH need\n              not be executable.  When bash is not in posix mode, the current directory is searched if  no  file\n              is  found  in PATH.  If the sourcepath option to the shopt builtin command is turned off, the PATH\n              is not searched.  If any arguments are supplied, they become the positional parameters when  file\u2010\n              name  is  executed.   Otherwise  the positional parameters are unchanged.  If the -T option is en\u2010\n              abled, source inherits any trap on DEBUG; if it is not, any DEBUG trap string  is  saved  and  re\u2010\n              stored  around  the  call to source, and source unsets the DEBUG trap while it executes.  If -T is\n              not set, and the sourced file changes the DEBUG trap, the new value is retained when  source  com\u2010\n              pletes.   The  return  status  is the status of the last command exited within the script (0 if no\n              commands are executed), and false if filename is not found or cannot be read.\n\n       alias [-p] [name[=value] ...]\n              Alias with no arguments or with the -p option prints  the  list  of  aliases  in  the  form  alias\n              name=value  on  standard  output.   When arguments are supplied, an alias is defined for each name\n              whose value is given.  A trailing space in value causes the next word to be checked for alias sub\u2010\n              stitution  when  the  alias is expanded.  For each name in the argument list for which no value is\n              supplied, the name and value of the alias is printed.  Alias returns true unless a name  is  given\n              for which no alias has been defined.\n\n       bg [jobspec ...]\n              Resume each suspended job jobspec in the background, as if it had been started with &.  If jobspec\n              is not present, the shell's notion of the current job is used.  bg jobspec returns  0  unless  run\n              when  job control is disabled or, when run with job control enabled, any specified jobspec was not\n              found or was started without job control.\n\n       bind [-m keymap] [-lpsvPSVX]\n       bind [-m keymap] [-q function] [-u function] [-r keyseq]\n       bind [-m keymap] -f filename\n       bind [-m keymap] -x keyseq:shell-command\n       bind [-m keymap] keyseq:function-name\n       bind [-m keymap] keyseq:readline-command\n              Display current readline key and function bindings, bind a key sequence to a readline function  or\n              macro,  or  set  a readline variable.  Each non-option argument is a command as it would appear in\n              .inputrc, but each binding or command must be passed as a separate  argument;  e.g.,  '\"\\C-x\\C-r\":\n              re-read-init-file'.  Options, if supplied, have the following meanings:\n              -m keymap\n                     Use  keymap  as  the  keymap  to be affected by the subsequent bindings.  Acceptable keymap\n                     names are emacs, emacs-standard,  emacs-meta,  emacs-ctlx,  vi,  vi-move,  vi-command,  and\n                     vi-insert.  vi is equivalent to vi-command (vi-move is also a synonym); emacs is equivalent\n                     to emacs-standard.\n              -l     List the names of all readline functions.\n              -p     Display readline function names and bindings in such a way that they can be re-read.\n              -P     List current readline function names and bindings.\n              -s     Display readline key sequences bound to macros and the strings they output in  such  a  way\n                     that they can be re-read.\n              -S     Display readline key sequences bound to macros and the strings they output.\n              -v     Display readline variable names and values in such a way that they can be re-read.\n              -V     List current readline variable names and values.\n              -f filename\n                     Read key bindings from filename.\n              -q function\n                     Query about which keys invoke the named function.\n              -u function\n                     Unbind all keys bound to the named function.\n              -r keyseq\n                     Remove any current binding for keyseq.\n              -x keyseq:shell-command\n                     Cause  shell-command to be executed whenever keyseq is entered.  When shell-command is exe\u2010\n                     cuted, the shell sets the READLINE_LINE variable to the contents of the readline line  buf\u2010\n                     fer  and  the READLINE_POINT and READLINE_MARK variables to the current location of the in\u2010\n                     sertion point and the saved insertion point (the mark), respectively.  If the executed com\u2010\n                     mand changes the value of any of READLINE_LINE, READLINE_POINT, or READLINE_MARK, those new\n                     values will be reflected in the editing state.\n              -X     List all key sequences bound to shell commands and the associated commands in a format that\n                     can be reused as input.\n\n              The return value is 0 unless an unrecognized option is given or an error occurred.\n\n       break [n]\n              Exit  from within a for, while, until, or select loop.  If n is specified, break n levels.  n must\n              be \u2265 1.  If n is greater than the number of enclosing loops, all enclosing loops are exited.   The\n              return value is 0 unless n is not greater than or equal to 1.\n\n       builtin shell-builtin [arguments]\n              Execute  the  specified  shell builtin, passing it arguments, and return its exit status.  This is\n              useful when defining a function whose name is the same as a shell builtin, retaining the function\u2010\n              ality of the builtin within the function.  The cd builtin is commonly redefined this way.  The re\u2010\n              turn status is false if shell-builtin is not a shell builtin command.\n\n       caller [expr]\n              Returns the context of any active subroutine call (a shell function or a script executed with  the\n              .  or  source builtins).  Without expr, caller displays the line number and source filename of the\n              current subroutine call.  If a non-negative integer is supplied as expr, caller displays the  line\n              number,  subroutine  name, and source file corresponding to that position in the current execution\n              call stack.  This extra information may be used, for example, to print a stack trace.  The current\n              frame  is  frame  0.  The return value is 0 unless the shell is not executing a subroutine call or\n              expr does not correspond to a valid position in the call stack.\n\n       cd [-L|[-P [-e]] [-@]] [dir]\n              Change the current directory to dir.  if dir is not supplied, the value of the HOME shell variable\n              is  the default.  Any additional arguments following dir are ignored.  The variable CDPATH defines\n              the search path for the directory containing dir: each directory name in CDPATH  is  searched  for\n              dir.   Alternative  directory names in CDPATH are separated by a colon (:).  A null directory name\n              in CDPATH is the same as the current directory, i.e., ``.''.  If dir begins with a slash (/), then\n              CDPATH  is not used.  The -P option causes cd to use the physical directory structure by resolving\n              symbolic links while traversing dir and before processing instances of .. in dir (see also the  -P\n              option  to the set builtin command); the -L option forces symbolic links to be followed by resolv\u2010\n              ing the link after processing instances of .. in dir.  If .. appears in dir, it  is  processed  by\n              removing the immediately previous pathname component from dir, back to a slash or the beginning of\n              dir.  If the -e option is supplied with -P, and the current working directory cannot  be  success\u2010\n              fully  determined  after a successful directory change, cd will return an unsuccessful status.  On\n              systems that support it, the -@ option presents the extended attributes associated with a file  as\n              a  directory.   An argument of - is converted to $OLDPWD before the directory change is attempted.\n              If a non-empty directory name from CDPATH is used, or if - is the first argument, and  the  direc\u2010\n              tory  change  is  successful, the absolute pathname of the new working directory is written to the\n              standard output.  The return value is true if the directory was successfully changed; false other\u2010\n              wise.\n\n       command [-pVv] command [arg ...]\n              Run command with args suppressing the normal shell function lookup.  Only builtin commands or com\u2010\n              mands found in the PATH are executed.  If the -p option is given, the search for command  is  per\u2010\n              formed  using  a  default value for PATH that is guaranteed to find all of the standard utilities.\n              If either the -V or -v option is supplied, a description of command is  printed.   The  -v  option\n              causes  a  single  word indicating the command or filename used to invoke command to be displayed;\n              the -V option produces a more verbose description.  If the -V or -v option is supplied,  the  exit\n              status  is  0  if command was found, and 1 if not.  If neither option is supplied and an error oc\u2010\n              curred or command cannot be found, the exit status is 127.  Otherwise, the exit status of the com\u2010\n              mand builtin is the exit status of command.\n\n       compgen [option] [word]\n              Generate  possible  completion  matches for word according to the options, which may be any option\n              accepted by the complete builtin with the exception of -p and -r, and write  the  matches  to  the\n              standard output.  When using the -F or -C options, the various shell variables set by the program\u2010\n              mable completion facilities, while available, will not have useful values.\n\n              The matches will be generated in the same way as if the programmable completion code had generated\n              them  directly  from  a  completion specification with the same flags.  If word is specified, only\n              those completions matching word will be displayed.\n\n              The return value is true unless an invalid option is supplied, or no matches were generated.\n\n       complete [-abcdefgjksuv] [-o comp-option] [-DEI] [-A action] [-G globpat] [-W wordlist]\n              [-F function] [-C command] [-X filterpat] [-P prefix] [-S suffix] name [name ...]\n       complete -pr [-DEI] [name ...]\n              Specify how arguments to each name should be completed.  If the -p option is supplied,  or  if  no\n              options  are supplied, existing completion specifications are printed in a way that allows them to\n              be reused as input.  The -r option removes a completion specification for each  name,  or,  if  no\n              names  are  supplied,  all completion specifications.  The -D option indicates that other supplied\n              options and actions should apply to the ``default'' command completion; that  is,  completion  at\u2010\n              tempted on a command for which no completion has previously been defined.  The -E option indicates\n              that other supplied options and actions should apply to ``empty''  command  completion;  that  is,\n              completion attempted on a blank line.  The -I option indicates that other supplied options and ac\u2010\n              tions should apply to completion on the initial non-assignment word on the line, or after  a  com\u2010\n              mand  delimiter such as ; or |, which is usually command name completion.  If multiple options are\n              supplied, the -D option takes precedence over -E, and both take precedence over -I.  If any of -D,\n              -E,  or -I are supplied, any other name arguments are ignored; these completions only apply to the\n              case specified by the option.\n\n              The process of applying these completion specifications when word completion is attempted  is  de\u2010\n              scribed above under Programmable Completion.\n\n              Other options, if specified, have the following meanings.  The arguments to the -G, -W, and -X op\u2010\n              tions (and, if necessary, the -P and -S options) should be quoted to protect them  from  expansion\n              before the complete builtin is invoked.\n              -o comp-option\n                      The comp-option controls several aspects of the compspec's behavior beyond the simple gen\u2010\n                      eration of completions.  comp-option may be one of:\n                      bashdefault\n                              Perform the rest of the default bash completions  if  the  compspec  generates  no\n                              matches.\n                      default Use readline's default filename completion if the compspec generates no matches.\n                      dirnames\n                              Perform directory name completion if the compspec generates no matches.\n                      filenames\n                              Tell  readline  that the compspec generates filenames, so it can perform any file\u2010\n                              name-specific processing (like adding a slash to directory names, quoting  special\n                              characters, or suppressing trailing spaces).  Intended to be used with shell func\u2010\n                              tions.\n                      noquote Tell readline not to quote the completed words  if  they  are  filenames  (quoting\n                              filenames is the default).\n                      nosort  Tell readline not to sort the list of possible completions alphabetically.\n                      nospace Tell readline not to append a space (the default) to words completed at the end of\n                              the line.\n                      plusdirs\n                              After any matches defined by the compspec are generated, directory name completion\n                              is attempted and any matches are added to the results of the other actions.\n              -A action\n                      The action may be one of the following to generate a list of possible completions:\n                      alias   Alias names.  May also be specified as -a.\n                      arrayvar\n                              Array variable names.\n                      binding Readline key binding names.\n                      builtin Names of shell builtin commands.  May also be specified as -b.\n                      command Command names.  May also be specified as -c.\n                      directory\n                              Directory names.  May also be specified as -d.\n                      disabled\n                              Names of disabled shell builtins.\n                      enabled Names of enabled shell builtins.\n                      export  Names of exported shell variables.  May also be specified as -e.\n                      file    File names.  May also be specified as -f.\n                      function\n                              Names of shell functions.\n                      group   Group names.  May also be specified as -g.\n                      helptopic\n                              Help topics as accepted by the help builtin.\n                      hostname\n                              Hostnames, as taken from the file specified by the HOSTFILE shell variable.\n                      job     Job names, if job control is active.  May also be specified as -j.\n                      keyword Shell reserved words.  May also be specified as -k.\n                      running Names of running jobs, if job control is active.\n                      service Service names.  May also be specified as -s.\n                      setopt  Valid arguments for the -o option to the set builtin.\n                      shopt   Shell option names as accepted by the shopt builtin.\n                      signal  Signal names.\n                      stopped Names of stopped jobs, if job control is active.\n                      user    User names.  May also be specified as -u.\n                      variable\n                              Names of all shell variables.  May also be specified as -v.\n              -C command\n                      command is executed in a subshell environment, and its output is used as the possible com\u2010\n                      pletions.\n              -F function\n                      The shell function function is executed in the current shell environment.  When the  func\u2010\n                      tion  is  executed, the first argument ($1) is the name of the command whose arguments are\n                      being completed, the second argument ($2) is the word being completed, and the third argu\u2010\n                      ment  ($3)  is  the  word  preceding the word being completed on the current command line.\n                      When it finishes, the possible completions are retrieved from the value of  the  COMPREPLY\n                      array variable.\n              -G globpat\n                      The pathname expansion pattern globpat is expanded to generate the possible completions.\n              -P prefix\n                      prefix  is added at the beginning of each possible completion after all other options have\n                      been applied.\n              -S suffix\n                      suffix is appended to each possible completion after all other options have been applied.\n              -W wordlist\n                      The wordlist is split using the characters in the IFS special variable as delimiters,  and\n                      each  resultant  word  is expanded.  Shell quoting is honored within wordlist, in order to\n                      provide a mechanism for the words to contain shell metacharacters  or  characters  in  the\n                      value  of IFS.  The possible completions are the members of the resultant list which match\n                      the word being completed.\n              -X filterpat\n                      filterpat is a pattern as used for pathname expansion.  It is applied to the list of  pos\u2010\n                      sible  completions  generated  by the preceding options and arguments, and each completion\n                      matching filterpat is removed from the list.  A leading ! in filterpat  negates  the  pat\u2010\n                      tern; in this case, any completion not matching filterpat is removed.\n\n              The  return  value  is true unless an invalid option is supplied, an option other than -p or -r is\n              supplied without a name argument, an attempt is made to remove a completion  specification  for  a\n              name for which no specification exists, or an error occurs adding a completion specification.\n\n       compopt [-o option] [-DEI] [+o option] [name]\n              Modify  completion  options for each name according to the options, or for the currently-executing\n              completion if no names are supplied.  If no options are given, display the completion options  for\n              each  name  or the current completion.  The possible values of option are those valid for the com\u2010\n              plete builtin described above.  The -D option indicates that other supplied options  should  apply\n              to  the  ``default''  command  completion; that is, completion attempted on a command for which no\n              completion has previously been defined.  The -E  option  indicates  that  other  supplied  options\n              should  apply to ``empty'' command completion; that is, completion attempted on a blank line.  The\n              -I option indicates that other supplied options should apply to completion on the initial  non-as\u2010\n              signment  word  on the line, or after a command delimiter such as ; or |, which is usually command\n              name completion.\n\n              The return value is true unless an invalid option is supplied, an attempt is made  to  modify  the\n              options for a name for which no completion specification exists, or an output error occurs.\n\n       continue [n]\n              Resume  the next iteration of the enclosing for, while, until, or select loop.  If n is specified,\n              resume at the nth enclosing loop.  n must be \u2265 1.  If n is greater than the  number  of  enclosing\n              loops,  the last enclosing loop (the ``top-level'' loop) is resumed.  The return value is 0 unless\n              n is not greater than or equal to 1.\n\n       declare [-aAfFgiIlnrtux] [-p] [name[=value] ...]\n       typeset [-aAfFgiIlnrtux] [-p] [name[=value] ...]\n              Declare variables and/or give them attributes.  If no names are given then display the  values  of\n              variables.   The  -p  option will display the attributes and values of each name.  When -p is used\n              with name arguments, additional options, other than -f and -F, are ignored.  When -p  is  supplied\n              without  name arguments, it will display the attributes and values of all variables having the at\u2010\n              tributes specified by the additional options.  If no other options are supplied with  -p,  declare\n              will  display  the  attributes and values of all shell variables.  The -f option will restrict the\n              display to shell functions.  The -F option inhibits the display of function definitions; only  the\n              function  name  and  attributes are printed.  If the extdebug shell option is enabled using shopt,\n              the source file name and line number where each name is defined are displayed as well.  The -F op\u2010\n              tion  implies  -f.   The -g option forces variables to be created or modified at the global scope,\n              even when declare is executed in a shell function.  It is ignored in all other cases.  The -I  op\u2010\n              tion  causes local variables to inherit the attributes (except the nameref attribute) and value of\n              any existing variable with the same name at a surrounding scope.  If there is  no  existing  vari\u2010\n              able, the local variable is initially unset.  The following options can be used to restrict output\n              to variables with the specified attribute or to give variables attributes:\n              -a     Each name is an indexed array variable (see Arrays above).\n              -A     Each name is an associative array variable (see Arrays above).\n              -f     Use function names only.\n              -i     The variable is treated as an integer; arithmetic  evaluation  (see  ARITHMETIC  EVALUATION\n                     above) is performed when the variable is assigned a value.\n              -l     When  the  variable  is assigned a value, all upper-case characters are converted to lower-\n                     case.  The upper-case attribute is disabled.\n              -n     Give each name the nameref attribute, making it a name reference to another variable.  That\n                     other variable is defined by the value of name.  All references, assignments, and attribute\n                     modifications to name, except those using or changing the -n  attribute  itself,  are  per\u2010\n                     formed on the variable referenced by name's value.  The nameref attribute cannot be applied\n                     to array variables.\n              -r     Make names readonly.  These names cannot then be assigned values by  subsequent  assignment\n                     statements or unset.\n              -t     Give  each  name  the trace attribute.  Traced functions inherit the DEBUG and RETURN traps\n                     from the calling shell.  The trace attribute has no special meaning for variables.\n              -u     When the variable is assigned a value, all lower-case characters are  converted  to  upper-\n                     case.  The lower-case attribute is disabled.\n              -x     Mark names for export to subsequent commands via the environment.\n\n              Using  `+'  instead of `-' turns off the attribute instead, with the exceptions that +a and +A may\n              not be used to destroy array variables and +r will not remove the readonly attribute.   When  used\n              in  a function, declare and typeset make each name local, as with the local command, unless the -g\n              option is supplied.  If a variable name is followed by =value, the value of the variable is set to\n              value.   When  using  -a or -A and the compound assignment syntax to create array variables, addi\u2010\n              tional attributes do not take effect until subsequent assignments.  The return value is  0  unless\n              an invalid option is encountered, an attempt is made to define a function using ``-f foo=bar'', an\n              attempt is made to assign a value to a readonly variable, an attempt is made to assign a value  to\n              an  array  variable  without  using  the compound assignment syntax (see Arrays above), one of the\n              names is not a valid shell variable name, an attempt is made to turn off  readonly  status  for  a\n              readonly  variable,  an  attempt is made to turn off array status for an array variable, or an at\u2010\n              tempt is made to display a non-existent function with -f.\n\n       dirs [-clpv] [+n] [-n]\n              Without options, displays the list of currently remembered directories.  The default display is on\n              a  single  line  with directory names separated by spaces.  Directories are added to the list with\n              the pushd command; the popd command removes entries from the list.  The current directory  is  al\u2010\n              ways the first directory in the stack.\n              -c     Clears the directory stack by deleting all of the entries.\n              -l     Produces  a listing using full pathnames; the default listing format uses a tilde to denote\n                     the home directory.\n              -p     Print the directory stack with one entry per line.\n              -v     Print the directory stack with one entry per line, prefixing each entry with its  index  in\n                     the stack.\n              +n     Displays  the nth entry counting from the left of the list shown by dirs when invoked with\u2010\n                     out options, starting with zero.\n              -n     Displays the nth entry counting from the right of the list shown by dirs when invoked with\u2010\n                     out options, starting with zero.\n\n              The  return value is 0 unless an invalid option is supplied or n indexes beyond the end of the di\u2010\n              rectory stack.\n\n       disown [-ar] [-h] [jobspec ... | pid ... ]\n              Without options, remove each jobspec from the table of active jobs.  If jobspec  is  not  present,\n              and  neither  the  -a nor the -r option is supplied, the current job is used.  If the -h option is\n              given, each jobspec is not removed from the table, but is marked so that SIGHUP is not sent to the\n              job  if  the shell receives a SIGHUP.  If no jobspec is supplied, the -a option means to remove or\n              mark all jobs; the -r option without a jobspec argument restricts operation to running jobs.   The\n              return value is 0 unless a jobspec does not specify a valid job.\n\n       echo [-neE] [arg ...]\n              Output  the  args,  separated  by  spaces, followed by a newline.  The return status is 0 unless a\n              write error occurs.  If -n is specified, the trailing newline is suppressed.  If the -e option  is\n              given,  interpretation  of  the  following backslash-escaped characters is enabled.  The -E option\n              disables the interpretation of these escape characters, even on systems where they are interpreted\n              by  default.   The  xpg_echo shell option may be used to dynamically determine whether or not echo\n              expands these escape characters by default.  echo does not interpret -- to mean  the  end  of  op\u2010\n              tions.  echo interprets the following escape sequences:\n              \\a     alert (bell)\n              \\b     backspace\n              \\c     suppress further output\n              \\e\n              \\E     an escape character\n              \\f     form feed\n              \\n     new line\n              \\r     carriage return\n              \\t     horizontal tab\n              \\v     vertical tab\n              \\\\     backslash\n              \\0nnn  the eight-bit character whose value is the octal value nnn (zero to three octal digits)\n              \\xHH   the eight-bit character whose value is the hexadecimal value HH (one or two hex digits)\n              \\uHHHH the  Unicode  (ISO/IEC  10646)  character whose value is the hexadecimal value HHHH (one to\n                     four hex digits)\n              \\UHHHHHHHH\n                     the Unicode (ISO/IEC 10646) character whose value is the hexadecimal value HHHHHHHH (one to\n                     eight hex digits)\n\n       enable [-a] [-dnps] [-f filename] [name ...]\n              Enable  and  disable  builtin shell commands.  Disabling a builtin allows a disk command which has\n              the same name as a shell builtin to be executed without specifying a full  pathname,  even  though\n              the  shell  normally searches for builtins before disk commands.  If -n is used, each name is dis\u2010\n              abled; otherwise, names are enabled.  For example, to use the test binary found via the  PATH  in\u2010\n              stead  of  the shell builtin version, run ``enable -n test''.  The -f option means to load the new\n              builtin command name from shared object filename, on systems that support dynamic loading.  The -d\n              option will delete a builtin previously loaded with -f.  If no name arguments are given, or if the\n              -p option is supplied, a list of shell builtins is printed.  With no other option  arguments,  the\n              list  consists  of  all  enabled  shell  builtins.   If -n is supplied, only disabled builtins are\n              printed.  If -a is supplied, the list printed includes all builtins, with an indication of whether\n              or  not  each  is  enabled.   If  -s  is  supplied,  the output is restricted to the POSIX special\n              builtins.  The return value is 0 unless a name is not a shell builtin or there is an error loading\n              a new builtin from a shared object.\n\n       eval [arg ...]\n              The  args are read and concatenated together into a single command.  This command is then read and\n              executed by the shell, and its exit status is returned as the value of  eval.   If  there  are  no\n              args, or only null arguments, eval returns 0.\n\n       exec [-cl] [-a name] [command [arguments]]\n              If  command is specified, it replaces the shell.  No new process is created.  The arguments become\n              the arguments to command.  If the -l option is supplied, the shell places a dash at the  beginning\n              of  the zeroth argument passed to command.  This is what login(1) does.  The -c option causes com\u2010\n              mand to be executed with an empty environment.  If -a is supplied, the shell passes  name  as  the\n              zeroth argument to the executed command.  If command cannot be executed for some reason, a non-in\u2010\n              teractive shell exits, unless the execfail shell option is enabled.   In  that  case,  it  returns\n              failure.   An  interactive shell returns failure if the file cannot be executed.  A subshell exits\n              unconditionally if exec fails.  If command is not specified, any redirections take effect  in  the\n              current  shell, and the return status is 0.  If there is a redirection error, the return status is\n              1.\n\n       exit [n]\n              Cause the shell to exit with a status of n.  If n is omitted, the exit status is that of the  last\n              command executed.  A trap on EXIT is executed before the shell terminates.\n\n       export [-fn] [name[=word]] ...\n       export -p\n              The  supplied  names  are  marked for automatic export to the environment of subsequently executed\n              commands.  If the -f option is given, the names refer to functions.  If no names are given, or  if\n              the  -p  option  is supplied, a list of names of all exported variables is printed.  The -n option\n              causes the export property to be removed from each name.  If a variable name is followed by =word,\n              the  value  of  the variable is set to word.  export returns an exit status of 0 unless an invalid\n              option is encountered, one of the names is not a valid shell variable name, or -f is supplied with\n              a name that is not a function.\n\n       fc [-e ename] [-lnr] [first] [last]\n       fc -s [pat=rep] [cmd]\n              The  first  form selects a range of commands from first to last from the history list and displays\n              or edits and re-executes them.  First and last may be specified as a string (to  locate  the  last\n              command  beginning with that string) or as a number (an index into the history list, where a nega\u2010\n              tive number is used as an offset from the current command number).  When listing, a first or  last\n              of  0  is  equivalent  to -1 and -0 is equivalent to the current command (usually the fc command);\n              otherwise 0 is equivalent to -1 and -0 is invalid.  If last is not specified, it  is  set  to  the\n              current  command for listing (so that ``fc -l -10'' prints the last 10 commands) and to first oth\u2010\n              erwise.  If first is not specified, it is set to the previous command  for  editing  and  -16  for\n              listing.\n\n              The  -n  option  suppresses the command numbers when listing.  The -r option reverses the order of\n              the commands.  If the -l option is given, the commands are listed on standard output.   Otherwise,\n              the  editor given by ename is invoked on a file containing those commands.  If ename is not given,\n              the value of the FCEDIT variable is used, and the value of EDITOR if FCEDIT is not set.   If  nei\u2010\n              ther  variable  is  set, vi is used.  When editing is complete, the edited commands are echoed and\n              executed.\n\n              In the second form, command is re-executed after each instance of pat is replaced by rep.  Command\n              is interpreted the same as first above.  A useful alias to use with this is ``r=\"fc -s\"'', so that\n              typing ``r cc'' runs the last command beginning with ``cc'' and typing ``r'' re-executes the  last\n              command.\n\n              If  the first form is used, the return value is 0 unless an invalid option is encountered or first\n              or last specify history lines out of range.  If the -e option is supplied, the return value is the\n              value  of  the last command executed or failure if an error occurs with the temporary file of com\u2010\n              mands.  If the second form is used, the return status is that of the command  re-executed,  unless\n              cmd does not specify a valid history line, in which case fc returns failure.\n\n       fg [jobspec]\n              Resume  jobspec  in  the  foreground, and make it the current job.  If jobspec is not present, the\n              shell's notion of the current job is used.  The return value is that of the  command  placed  into\n              the  foreground,  or failure if run when job control is disabled or, when run with job control en\u2010\n              abled, if jobspec does not specify a valid job or jobspec specifies a job that was started without\n              job control.\n\n       getopts optstring name [arg ...]\n              getopts is used by shell procedures to parse positional parameters.  optstring contains the option\n              characters to be recognized; if a character is followed by a colon, the option is expected to have\n              an  argument, which should be separated from it by white space.  The colon and question mark char\u2010\n              acters may not be used as option characters.  Each time it is invoked, getopts places the next op\u2010\n              tion in the shell variable name, initializing name if it does not exist, and the index of the next\n              argument to be processed into the variable OPTIND.  OPTIND is initialized to 1 each time the shell\n              or  a  shell script is invoked.  When an option requires an argument, getopts places that argument\n              into the variable OPTARG.  The shell does not reset OPTIND automatically; it must be manually  re\u2010\n              set  between multiple calls to getopts within the same shell invocation if a new set of parameters\n              is to be used.\n\n              When the end of options is encountered, getopts exits with  a  return  value  greater  than  zero.\n              OPTIND is set to the index of the first non-option argument, and name is set to ?.\n\n              getopts  normally parses the positional parameters, but if more arguments are supplied as arg val\u2010\n              ues, getopts parses those instead.\n\n              getopts can report errors in two ways.  If the first character of optstring is a colon, silent er\u2010\n              ror  reporting is used.  In normal operation, diagnostic messages are printed when invalid options\n              or missing option arguments are encountered.  If the variable OPTERR is set to 0,  no  error  mes\u2010\n              sages will be displayed, even if the first character of optstring is not a colon.\n\n              If  an invalid option is seen, getopts places ? into name and, if not silent, prints an error mes\u2010\n              sage and unsets OPTARG.  If getopts is silent, the option character found is placed in OPTARG  and\n              no diagnostic message is printed.\n\n              If  a  required argument is not found, and getopts is not silent, a question mark (?) is placed in\n              name, OPTARG is unset, and a diagnostic message is printed.  If getopts is silent,  then  a  colon\n              (:) is placed in name and OPTARG is set to the option character found.\n\n              getopts  returns  true  if an option, specified or unspecified, is found.  It returns false if the\n              end of options is encountered or an error occurs.\n\n       hash [-lr] [-p filename] [-dt] [name]\n              Each time hash is invoked, the full pathname of the command name is determined  by  searching  the\n              directories  in $PATH and remembered.  Any previously-remembered pathname is discarded.  If the -p\n              option is supplied, no path search is performed, and filename is used as the full filename of  the\n              command.  The -r option causes the shell to forget all remembered locations.  The -d option causes\n              the shell to forget the remembered location of each name.  If the -t option is supplied, the  full\n              pathname  to which each name corresponds is printed.  If multiple name arguments are supplied with\n              -t, the name is printed before the hashed full pathname.  The -l option causes output to  be  dis\u2010\n              played  in a format that may be reused as input.  If no arguments are given, or if only -l is sup\u2010\n              plied, information about remembered commands is printed.  The return status is true unless a  name\n              is not found or an invalid option is supplied.\n\n       help [-dms] [pattern]\n              Display  helpful information about builtin commands.  If pattern is specified, help gives detailed\n              help on all commands matching pattern; otherwise help for  all  the  builtins  and  shell  control\n              structures is printed.\n              -d     Display a short description of each pattern\n              -m     Display the description of each pattern in a manpage-like format\n              -s     Display only a short usage synopsis for each pattern\n\n              The return status is 0 unless no command matches pattern.\n\n       history [n]\n       history -c\n       history -d offset\n       history -d start-end\n       history -anrw [filename]\n       history -p arg [arg ...]\n       history -s arg [arg ...]\n              With  no  options, display the command history list with line numbers.  Lines listed with a * have\n              been modified.  An argument of n lists only the last n lines.  If the shell variable  HISTTIMEFOR\u2010\n              MAT  is  set and not null, it is used as a format string for strftime(3) to display the time stamp\n              associated with each displayed history entry.  No intervening blank is printed between the format\u2010\n              ted  time stamp and the history line.  If filename is supplied, it is used as the name of the his\u2010\n              tory file; if not, the value of HISTFILE is used.  Options, if supplied, have the following  mean\u2010\n              ings:\n              -c     Clear the history list by deleting all the entries.\n              -d offset\n                     Delete  the  history entry at position offset.  If offset is negative, it is interpreted as\n                     relative to one greater than the last history position, so negative indices count back from\n                     the end of the history, and an index of -1 refers to the current history -d command.\n              -d start-end\n                     Delete  the history entries between positions start and end, inclusive.  Positive and nega\u2010\n                     tive values for start and end are interpreted as described above.\n              -a     Append the ``new'' history lines to the history file.   These  are  history  lines  entered\n                     since  the  beginning  of the current bash session, but not already appended to the history\n                     file.\n              -n     Read the history lines not already read from the history  file  into  the  current  history\n                     list.  These are lines appended to the history file since the beginning of the current bash\n                     session.\n              -r     Read the contents of the history file and append them to the current history list.\n              -w     Write the current history list to the history file, overwriting  the  history  file's  con\u2010\n                     tents.\n              -p     Perform  history  substitution on the following args and display the result on the standard\n                     output.  Does not store the results in the history list.  Each arg must be quoted  to  dis\u2010\n                     able normal history expansion.\n              -s     Store the args in the history list as a single entry.  The last command in the history list\n                     is removed before the args are added.\n\n              If the HISTTIMEFORMAT variable is set, the time stamp information associated with each history en\u2010\n              try  is  written to the history file, marked with the history comment character.  When the history\n              file is read, lines beginning with the history comment character followed immediately by  a  digit\n              are  interpreted  as  timestamps for the following history entry.  The return value is 0 unless an\n              invalid option is encountered, an error occurs while reading or writing the history file,  an  in\u2010\n              valid offset is supplied as an argument to -d, or the history expansion supplied as an argument to\n              -p fails.\n\n       jobs [-lnprs] [ jobspec ... ]\n       jobs -x command [ args ... ]\n              The first form lists the active jobs.  The options have the following meanings:\n              -l     List process IDs in addition to the normal information.\n              -n     Display information only about jobs that have changed status since the user was last  noti\u2010\n                     fied of their status.\n              -p     List only the process ID of the job's process group leader.\n              -r     Display only running jobs.\n              -s     Display only stopped jobs.\n\n              If  jobspec  is given, output is restricted to information about that job.  The return status is 0\n              unless an invalid option is encountered or an invalid jobspec is supplied.\n\n              If the -x option is supplied, jobs replaces any jobspec found in command or args with  the  corre\u2010\n              sponding process group ID, and executes command passing it args, returning its exit status.\n\n       kill [-s sigspec | -n signum | -sigspec] [pid | jobspec] ...\n       kill -l|-L [sigspec | exit_status]\n              Send  the  signal named by sigspec or signum to the processes named by pid or jobspec.  sigspec is\n              either a case-insensitive signal name such as SIGKILL (with or without the SIG prefix) or a signal\n              number;  signum is a signal number.  If sigspec is not present, then SIGTERM is assumed.  An argu\u2010\n              ment of -l lists the signal names.  If any arguments are supplied when -l is given, the  names  of\n              the  signals corresponding to the arguments are listed, and the return status is 0.  The exit_sta\u2010\n              tus argument to -l is a number specifying either a signal number or the exit status of  a  process\n              terminated  by  a  signal.   The -L option is equivalent to -l.  kill returns true if at least one\n              signal was successfully sent, or false if an error occurs or an invalid option is encountered.\n\n       let arg [arg ...]\n              Each arg is an arithmetic expression to be evaluated (see ARITHMETIC EVALUATION  above).   If  the\n              last arg evaluates to 0, let returns 1; 0 is returned otherwise.\n\n       local [option] [name[=value] ... | - ]\n              For  each argument, a local variable named name is created, and assigned value.  The option can be\n              any of the options accepted by declare.  When local is used within a function, it causes the vari\u2010\n              able name to have a visible scope restricted to that function and its children.  If name is -, the\n              set of shell options is made local to the function  in  which  local  is  invoked:  shell  options\n              changed  using  the set builtin inside the function are restored to their original values when the\n              function returns.  The restore is effected as if a series of set commands were executed to restore\n              the values that were in place before the function.  With no operands, local writes a list of local\n              variables to the standard output.  It is an error to use local when not within  a  function.   The\n              return  status  is 0 unless local is used outside a function, an invalid name is supplied, or name\n              is a readonly variable.\n\n       logout Exit a login shell.\n\n       mapfile [-d delim] [-n count] [-O origin] [-s count] [-t] [-u fd] [-C callback] [-c quantum] [array]\n       readarray [-d delim] [-n count] [-O origin] [-s count] [-t] [-u fd] [-C callback] [-c quantum] [array]\n              Read lines from the standard input into the indexed array variable array, or from file  descriptor\n              fd  if  the  -u  option is supplied.  The variable MAPFILE is the default array.  Options, if sup\u2010\n              plied, have the following meanings:\n              -d     The first character of delim is used to terminate each input line, rather than newline.  If\n                     delim is the empty string, mapfile will terminate a line when it reads a NUL character.\n              -n     Copy at most count lines.  If count is 0, all lines are copied.\n              -O     Begin assigning to array at index origin.  The default index is 0.\n              -s     Discard the first count lines read.\n              -t     Remove a trailing delim (default newline) from each line read.\n              -u     Read lines from file descriptor fd instead of the standard input.\n              -C     Evaluate callback each time quantum lines are read.  The -c option specifies quantum.\n              -c     Specify the number of lines read between each call to callback.\n\n              If  -C  is  specified  without -c, the default quantum is 5000.  When callback is evaluated, it is\n              supplied the index of the next array element to be assigned and the line to be  assigned  to  that\n              element  as additional arguments.  callback is evaluated after the line is read but before the ar\u2010\n              ray element is assigned.\n\n              If not supplied with an explicit origin, mapfile will clear array before assigning to it.\n\n              mapfile returns successfully unless an invalid option or option argument is supplied, array is in\u2010\n              valid or unassignable, or if array is not an indexed array.\n\n       popd [-n] [+n] [-n]\n              Removes  entries  from the directory stack.  With no arguments, removes the top directory from the\n              stack, and performs a cd to the new top directory.  Arguments, if  supplied,  have  the  following\n              meanings:\n              -n     Suppresses the normal change of directory when removing directories from the stack, so that\n                     only the stack is manipulated.\n              +n     Removes the nth entry counting from the left of the list shown by dirs, starting with zero.\n                     For example: ``popd +0'' removes the first directory, ``popd +1'' the second.\n              -n     Removes  the  nth  entry  counting  from the right of the list shown by dirs, starting with\n                     zero.  For example: ``popd -0'' removes the last directory, ``popd -1'' the next to last.\n\n              If the popd command is successful, a dirs is performed as well, and the return status is 0.   popd\n              returns  false  if  an invalid option is encountered, the directory stack is empty, a non-existent\n              directory stack entry is specified, or the directory change fails.\n\n       printf [-v var] format [arguments]\n              Write the formatted arguments to the standard output under the control of the format.  The -v  op\u2010\n              tion  causes  the output to be assigned to the variable var rather than being printed to the stan\u2010\n              dard output.\n\n              The format is a character string which contains three types of objects:  plain  characters,  which\n              are  simply  copied to standard output, character escape sequences, which are converted and copied\n              to the standard output, and format specifications, each of which causes printing of the next  suc\u2010\n              cessive  argument.  In addition to the standard printf(1) format specifications, printf interprets\n              the following extensions:\n              %b     causes printf to expand backslash escape sequences in the  corresponding  argument  in  the\n                     same way as echo -e.\n              %q     causes  printf to output the corresponding argument in a format that can be reused as shell\n                     input.\n              %(datefmt)T\n                     causes printf to output the date-time string resulting  from  using  datefmt  as  a  format\n                     string  for  strftime(3).  The corresponding argument is an integer representing the number\n                     of seconds since the epoch.  Two special argument values may be  used:  -1  represents  the\n                     current  time,  and -2 represents the time the shell was invoked.  If no argument is speci\u2010\n                     fied, conversion behaves as if -1 had been given.  This is an exception to the usual printf\n                     behavior.\n\n              The  %b,  %q,  and  %T  directives all use the field width and precision arguments from the format\n              specification and write that many bytes from (or use that wide a field for) the expanded argument,\n              which usually contains more characters than the original.\n\n              Arguments  to  non-string format specifiers are treated as C constants, except that a leading plus\n              or minus sign is allowed, and if the leading character is a single or double quote, the  value  is\n              the ASCII value of the following character.\n\n              The  format  is  reused as necessary to consume all of the arguments.  If the format requires more\n              arguments than are supplied, the extra format specifications behave as if a  zero  value  or  null\n              string, as appropriate, had been supplied.  The return value is zero on success, non-zero on fail\u2010\n              ure.\n\n       pushd [-n] [+n] [-n]\n       pushd [-n] [dir]\n              Adds a directory to the top of the directory stack, or rotates the stack, making the  new  top  of\n              the  stack the current working directory.  With no arguments, pushd exchanges the top two directo\u2010\n              ries and returns 0, unless the directory stack is empty.  Arguments, if supplied, have the follow\u2010\n              ing meanings:\n              -n     Suppresses the normal change of directory when rotating or adding directories to the stack,\n                     so that only the stack is manipulated.\n              +n     Rotates the stack so that the nth directory (counting from the left of the  list  shown  by\n                     dirs, starting with zero) is at the top.\n              -n     Rotates  the  stack so that the nth directory (counting from the right of the list shown by\n                     dirs, starting with zero) is at the top.\n              dir    Adds dir to the directory stack at the top, making it the new current working directory  as\n                     if it had been supplied as the argument to the cd builtin.\n\n              If the pushd command is successful, a dirs is performed as well.  If the first form is used, pushd\n              returns 0 unless the cd to dir fails.  With the second form, pushd returns 0 unless the  directory\n              stack  is  empty,  a non-existent directory stack element is specified, or the directory change to\n              the specified new current directory fails.\n\n       pwd [-LP]\n              Print the absolute pathname of the current working directory.  The pathname  printed  contains  no\n              symbolic  links  if the -P option is supplied or the -o physical option to the set builtin command\n              is enabled.  If the -L option is used, the pathname printed may contain symbolic links.   The  re\u2010\n              turn  status is 0 unless an error occurs while reading the name of the current directory or an in\u2010\n              valid option is supplied.\n\n       read [-ers] [-a aname] [-d delim] [-i text] [-n nchars] [-N nchars] [-p  prompt]  [-t  timeout]  [-u  fd]\n       [name ...]\n              One  line  is read from the standard input, or from the file descriptor fd supplied as an argument\n              to the -u option, split into words as described above under Word Splitting, and the first word  is\n              assigned  to  the  first  name,  the second word to the second name, and so on.  If there are more\n              words than names, the remaining words and their intervening delimiters are assigned  to  the  last\n              name.  If there are fewer words read from the input stream than names, the remaining names are as\u2010\n              signed empty values.  The characters in IFS are used to split the line into words using  the  same\n              rules  the shell uses for expansion (described above under Word Splitting).  The backslash charac\u2010\n              ter (\\) may be used to remove any special meaning for the next character read and for line contin\u2010\n              uation.  Options, if supplied, have the following meanings:\n              -a aname\n                     The  words  are  assigned to sequential indices of the array variable aname, starting at 0.\n                     aname is unset before any new values are assigned.  Other name arguments are ignored.\n              -d delim\n                     The first character of delim is used to terminate the input line, rather than newline.   If\n                     delim is the empty string, read will terminate a line when it reads a NUL character.\n              -e     If  the  standard input is coming from a terminal, readline (see READLINE above) is used to\n                     obtain the line.  Readline uses the current (or default, if line editing was not previously\n                     active) editing settings, but uses Readline's default filename completion.\n              -i text\n                     If  readline  is being used to read the line, text is placed into the editing buffer before\n                     editing begins.\n              -n nchars\n                     read returns after reading nchars characters rather than waiting for a complete line of in\u2010\n                     put, but honors a delimiter if fewer than nchars characters are read before the delimiter.\n              -N nchars\n                     read  returns  after  reading  exactly nchars characters rather than waiting for a complete\n                     line of input, unless EOF is encountered or read times out.  Delimiter  characters  encoun\u2010\n                     tered  in  the input are not treated specially and do not cause read to return until nchars\n                     characters are read.  The result is not split on the characters in IFS; the intent is  that\n                     the  variable is assigned exactly the characters read (with the exception of backslash; see\n                     the -r option below).\n              -p prompt\n                     Display prompt on standard error, without a trailing newline, before attempting to read any\n                     input.  The prompt is displayed only if input is coming from a terminal.\n              -r     Backslash  does  not act as an escape character.  The backslash is considered to be part of\n                     the line.  In particular, a backslash-newline pair may not then be used as a line continua\u2010\n                     tion.\n              -s     Silent mode.  If input is coming from a terminal, characters are not echoed.\n              -t timeout\n                     Cause  read to time out and return failure if a complete line of input (or a specified num\u2010\n                     ber of characters) is not read within timeout seconds.  timeout may  be  a  decimal  number\n                     with  a  fractional  portion following the decimal point.  This option is only effective if\n                     read is reading input from a terminal, pipe, or other special file; it has no  effect  when\n                     reading  from regular files.  If read times out, read saves any partial input read into the\n                     specified variable name.  If timeout is 0, read returns immediately, without trying to read\n                     any  data.   The  exit  status is 0 if input is available on the specified file descriptor,\n                     non-zero otherwise.  The exit status is greater than 128 if the timeout is exceeded.\n              -u fd  Read input from file descriptor fd.\n\n              If no names are supplied, the line read, without the ending delimiter but otherwise unmodified, is\n              assigned  to the variable REPLY.  The exit status is zero, unless end-of-file is encountered, read\n              times out (in which case the status is greater than 128), a variable assignment error (such as as\u2010\n              signing  to a readonly variable) occurs, or an invalid file descriptor is supplied as the argument\n              to -u.\n\n       readonly [-aAf] [-p] [name[=word] ...]\n              The given names are marked readonly; the values of these names may not be  changed  by  subsequent\n              assignment.  If the -f option is supplied, the functions corresponding to the names are so marked.\n              The -a option restricts the variables to indexed arrays; the -A option restricts the variables  to\n              associative  arrays.  If both options are supplied, -A takes precedence.  If no name arguments are\n              given, or if the -p option is supplied, a list of all readonly names is printed.   The  other  op\u2010\n              tions  may be used to restrict the output to a subset of the set of readonly names.  The -p option\n              causes output to be displayed in a format that may be reused as input.  If a variable name is fol\u2010\n              lowed  by  =word,  the value of the variable is set to word.  The return status is 0 unless an in\u2010\n              valid option is encountered, one of the names is not a valid shell variable name, or  -f  is  sup\u2010\n              plied with a name that is not a function.\n\n       return [n]\n              Causes  a  function  to stop executing and return the value specified by n to its caller.  If n is\n              omitted, the return status is that of the last command executed in the function body.   If  return\n              is  executed  by a trap handler, the last command used to determine the status is the last command\n              executed before the trap handler.  If return is executed during a DEBUG  trap,  the  last  command\n              used  to  determine  the status is the last command executed by the trap handler before return was\n              invoked.  If return is used outside a function,  but  during  execution  of  a  script  by  the  .\n              (source)  command,  it  causes  the shell to stop executing that script and return either n or the\n              exit status of the last command executed within the script as the exit status of the script.  If n\n              is  supplied,  the return value is its least significant 8 bits.  The return status is non-zero if\n              return is supplied a non-numeric argument, or is used outside a function and not during  execution\n              of a script by . or source.  Any command associated with the RETURN trap is executed before execu\u2010\n              tion resumes after the function or script.\n\n       set [--abefhkmnptuvxBCEHPT] [-o option-name] [arg ...]\n       set [+abefhkmnptuvxBCEHPT] [+o option-name] [arg ...]\n              Without options, the name and value of each shell variable are displayed in a format that  can  be\n              reused  as input for setting or resetting the currently-set variables.  Read-only variables cannot\n              be reset.  In posix mode, only shell variables are listed.  The output is sorted according to  the\n              current  locale.   When  options are specified, they set or unset shell attributes.  Any arguments\n              remaining after option processing are treated as values for the positional parameters and are  as\u2010\n              signed, in order, to $1, $2, ...  $n.  Options, if specified, have the following meanings:\n              -a      Each  variable  or  function that is created or modified is given the export attribute and\n                      marked for export to the environment of subsequent commands.\n              -b      Report the status of terminated background jobs immediately, rather than before  the  next\n                      primary prompt.  This is effective only when job control is enabled.\n              -e      Exit  immediately if a pipeline (which may consist of a single simple command), a list, or\n                      a compound command (see SHELL GRAMMAR above), exits with a  non-zero  status.   The  shell\n                      does  not exit if the command that fails is part of the command list immediately following\n                      a while or until keyword, part of the test following the if or elif reserved  words,  part\n                      of  any  command  executed in a && or || list except the command following the final && or\n                      ||, any command in a pipeline but the last, or if the command's return value is being  in\u2010\n                      verted  with !.  If a compound command other than a subshell returns a non-zero status be\u2010\n                      cause a command failed while -e was being ignored, the shell does not  exit.   A  trap  on\n                      ERR,  if  set, is executed before the shell exits.  This option applies to the shell envi\u2010\n                      ronment and each  subshell  environment  separately  (see  COMMAND  EXECUTION  ENVIRONMENT\n                      above), and may cause subshells to exit before executing all the commands in the subshell.\n\n                      If  a  compound command or shell function executes in a context where -e is being ignored,\n                      none of the commands executed within the compound command or function  body  will  be  af\u2010\n                      fected  by the -e setting, even if -e is set and a command returns a failure status.  If a\n                      compound command or shell function sets -e while executing in a context where  -e  is  ig\u2010\n                      nored,  that  setting  will  not have any effect until the compound command or the command\n                      containing the function call completes.\n              -f      Disable pathname expansion.\n              -h      Remember the location of commands as they are looked up for execution.  This is enabled by\n                      default.\n              -k      All  arguments  in  the  form of assignment statements are placed in the environment for a\n                      command, not just those that precede the command name.\n              -m      Monitor mode.  Job control is enabled.  This option  is  on  by  default  for  interactive\n                      shells  on  systems that support it (see JOB CONTROL above).  All processes run in a sepa\u2010\n                      rate process group.  When a background job completes, the shell prints a  line  containing\n                      its exit status.\n              -n      Read  commands but do not execute them.  This may be used to check a shell script for syn\u2010\n                      tax errors.  This is ignored by interactive shells.\n              -o option-name\n                      The option-name can be one of the following:\n                      allexport\n                              Same as -a.\n                      braceexpand\n                              Same as -B.\n                      emacs   Use an emacs-style command line editing interface.  This  is  enabled  by  default\n                              when  the  shell  is interactive, unless the shell is started with the --noediting\n                              option.  This also affects the editing interface used for read -e.\n                      errexit Same as -e.\n                      errtrace\n                              Same as -E.\n                      functrace\n                              Same as -T.\n                      hashall Same as -h.\n                      histexpand\n                              Same as -H.\n                      history Enable command history, as described above under HISTORY.  This option  is  on  by\n                              default in interactive shells.\n                      ignoreeof\n                              The  effect  is  as  if  the shell command ``IGNOREEOF=10'' had been executed (see\n                              Shell Variables above).\n                      keyword Same as -k.\n                      monitor Same as -m.\n                      noclobber\n                              Same as -C.\n                      noexec  Same as -n.\n                      noglob  Same as -f.\n                      nolog   Currently ignored.\n                      notify  Same as -b.\n                      nounset Same as -u.\n                      onecmd  Same as -t.\n                      physical\n                              Same as -P.\n                      pipefail\n                              If set, the return value of a pipeline is the value of the last  (rightmost)  com\u2010\n                              mand  to exit with a non-zero status, or zero if all commands in the pipeline exit\n                              successfully.  This option is disabled by default.\n                      posix   Change the behavior of bash where the default operation  differs  from  the  POSIX\n                              standard  to  match the standard (posix mode).  See SEE ALSO below for a reference\n                              to a document that details how posix mode affects bash's behavior.\n                      privileged\n                              Same as -p.\n                      verbose Same as -v.\n                      vi      Use a vi-style command line editing interface.  This also affects the editing  in\u2010\n                              terface used for read -e.\n                      xtrace  Same as -x.\n                      If  -o is supplied with no option-name, the values of the current options are printed.  If\n                      +o is supplied with no option-name, a series of set commands to recreate the  current  op\u2010\n                      tion settings is displayed on the standard output.\n              -p      Turn  on  privileged  mode.  In this mode, the $ENV and $BASH_ENV files are not processed,\n                      shell functions are not inherited from the environment, and the SHELLOPTS,  BASHOPTS,  CD\u2010\n                      PATH,  and  GLOBIGNORE  variables, if they appear in the environment, are ignored.  If the\n                      shell is started with the effective user (group) id not equal to the real user (group) id,\n                      and  the  -p  option is not supplied, these actions are taken and the effective user id is\n                      set to the real user id.  If the -p option is supplied at startup, the effective  user  id\n                      is  not  reset.  Turning this option off causes the effective user and group ids to be set\n                      to the real user and group ids.\n              -t      Exit after reading and executing one command.\n              -u      Treat unset variables and parameters other than the special parameters \"@\" and \"*\"  as  an\n                      error when performing parameter expansion.  If expansion is attempted on an unset variable\n                      or parameter, the shell prints an error message, and, if not  interactive,  exits  with  a\n                      non-zero status.\n              -v      Print shell input lines as they are read.\n              -x      After  expanding each simple command, for command, case command, select command, or arith\u2010\n                      metic for command, display the expanded value of PS4, followed by the command and its  ex\u2010\n                      panded arguments or associated word list.\n              -B      The shell performs brace expansion (see Brace Expansion above).  This is on by default.\n              -C      If set, bash does not overwrite an existing file with the >, >&, and <> redirection opera\u2010\n                      tors.  This may be overridden when creating output files by using the redirection operator\n                      >| instead of >.\n              -E      If  set,  any trap on ERR is inherited by shell functions, command substitutions, and com\u2010\n                      mands executed in a subshell environment.  The ERR trap is normally not inherited in  such\n                      cases.\n              -H      Enable  !  style history substitution.  This option is on by default when the shell is in\u2010\n                      teractive.\n              -P      If set, the shell does not resolve symbolic links when executing commands such as cd  that\n                      change  the  current working directory.  It uses the physical directory structure instead.\n                      By default, bash follows the logical chain of directories when performing  commands  which\n                      change the current directory.\n              -T      If  set, any traps on DEBUG and RETURN are inherited by shell functions, command substitu\u2010\n                      tions, and commands executed in a subshell environment.  The DEBUG and  RETURN  traps  are\n                      normally not inherited in such cases.\n              --      If  no arguments follow this option, then the positional parameters are unset.  Otherwise,\n                      the positional parameters are set to the args, even if some of them begin with a -.\n              -       Signal the end of options, cause all remaining args to be assigned to the  positional  pa\u2010\n                      rameters.  The -x and -v options are turned off.  If there are no args, the positional pa\u2010\n                      rameters remain unchanged.\n\n              The options are off by default unless otherwise noted.  Using + rather than - causes these options\n              to  be  turned off.  The options can also be specified as arguments to an invocation of the shell.\n              The current set of options may be found in $-.  The return status is always true unless an invalid\n              option is encountered.\n\n       shift [n]\n              The  positional parameters from n+1 ... are renamed to $1 ....  Parameters represented by the num\u2010\n              bers $# down to $#-n+1 are unset.  n must be a non-negative number less than or equal to $#.  If n\n              is  0, no parameters are changed.  If n is not given, it is assumed to be 1.  If n is greater than\n              $#, the positional parameters are not changed.  The return status is greater than  zero  if  n  is\n              greater than $# or less than zero; otherwise 0.\n\n       shopt [-pqsu] [-o] [optname ...]\n              Toggle  the  values  of  settings controlling optional shell behavior.  The settings can be either\n              those listed below, or, if the -o option is used, those available with the -o option  to  the  set\n              builtin  command.   With no options, or with the -p option, a list of all settable options is dis\u2010\n              played, with an indication of whether or not each is set; if optnames are supplied, the output  is\n              restricted  to  those  options.  The -p option causes output to be displayed in a form that may be\n              reused as input.  Other options have the following meanings:\n              -s     Enable (set) each optname.\n              -u     Disable (unset) each optname.\n              -q     Suppresses normal output (quiet mode); the return status indicates whether the  optname  is\n                     set  or  unset.  If multiple optname arguments are given with -q, the return status is zero\n                     if all optnames are enabled; non-zero otherwise.\n              -o     Restricts the values of optname to be those defined for the -o option to the set builtin.\n\n              If either -s or -u is used with no optname arguments, shopt shows only those options which are set\n              or  unset,  respectively.   Unless  otherwise noted, the shopt options are disabled (unset) by de\u2010\n              fault.\n\n              The return status when listing options is zero if all optnames are  enabled,  non-zero  otherwise.\n              When  setting  or  unsetting  options,  the return status is zero unless an optname is not a valid\n              shell option.\n\n              The list of shopt options is:\n\n              assoc_expand_once\n                      If set, the shell suppresses multiple evaluation of associative  array  subscripts  during\n                      arithmetic  expression  evaluation, while executing builtins that can perform variable as\u2010\n                      signments, and while executing builtins that perform array dereferencing.\n              autocd  If set, a command name that is the name of a directory is executed as if it were the argu\u2010\n                      ment to the cd command.  This option is only used by interactive shells.\n              cdable_vars\n                      If set, an argument to the cd builtin command that is not a directory is assumed to be the\n                      name of a variable whose value is the directory to change to.\n              cdspell If set, minor errors in the spelling of a directory component in a cd command will be cor\u2010\n                      rected.   The  errors  checked for are transposed characters, a missing character, and one\n                      character too many.  If a correction is found, the corrected filename is printed, and  the\n                      command proceeds.  This option is only used by interactive shells.\n              checkhash\n                      If set, bash checks that a command found in the hash table exists before trying to execute\n                      it.  If a hashed command no longer exists, a normal path search is performed.\n              checkjobs\n                      If set, bash lists the status of any stopped and running jobs before exiting  an  interac\u2010\n                      tive  shell.   If any jobs are running, this causes the exit to be deferred until a second\n                      exit is attempted without an intervening command (see JOB CONTROL above).  The  shell  al\u2010\n                      ways postpones exiting if any jobs are stopped.\n              checkwinsize\n                      If set, bash checks the window size after each external (non-builtin) command and, if nec\u2010\n                      essary, updates the values of LINES and COLUMNS.  This option is enabled by default.\n              cmdhist If set, bash attempts to save all lines of a multiple-line command in the same history en\u2010\n                      try.   This  allows easy re-editing of multi-line commands.  This option is enabled by de\u2010\n                      fault, but only has an effect if command history is enabled, as described above under HIS\u2010\n                      TORY.\n              compat31\n              compat32\n              compat40\n              compat41\n              compat42\n              compat43\n              compat44\n                      These  control aspects of the shell's compatibility mode (see SHELL COMPATIBILITY MODE be\u2010\n                      low).\n\n              complete_fullquote\n                      If set, bash quotes all shell metacharacters in filenames and directory  names  when  per\u2010\n                      forming  completion.  If not set, bash removes metacharacters such as the dollar sign from\n                      the set of characters that will be quoted in completed filenames when these metacharacters\n                      appear  in  shell  variable  references  in words to be completed.  This means that dollar\n                      signs in variable names that expand to directories will not be quoted; however, any dollar\n                      signs appearing in filenames will not be quoted, either.  This is active only when bash is\n                      using backslashes to quote completed filenames.  This variable is set by default, which is\n                      the default bash behavior in versions through 4.2.\n\n              direxpand\n                      If  set,  bash replaces directory names with the results of word expansion when performing\n                      filename completion.  This changes the contents of the readline editing  buffer.   If  not\n                      set, bash attempts to preserve what the user typed.\n\n              dirspell\n                      If set, bash attempts spelling correction on directory names during word completion if the\n                      directory name initially supplied does not exist.\n\n              dotglob If set, bash includes filenames beginning with a `.' in the results of pathname expansion.\n                      The  filenames  ``.''   and  ``..''  must always be matched explicitly, even if dotglob is\n                      set.\n\n              execfail\n                      If set, a non-interactive shell will not exit if it cannot execute the file  specified  as\n                      an  argument  to  the  exec  builtin  command.  An interactive shell does not exit if exec\n                      fails.\n\n              expand_aliases\n                      If set, aliases are expanded as described above under ALIASES.  This option is enabled  by\n                      default for interactive shells.\n\n              extdebug\n                      If  set  at  shell invocation, or in a shell startup file, arrange to execute the debugger\n                      profile before the shell starts, identical to the --debugger option.  If set after invoca\u2010\n                      tion, behavior intended for use by debuggers is enabled:\n\n                      1.     The  -F option to the declare builtin displays the source file name and line number\n                             corresponding to each function name supplied as an argument.\n\n                      2.     If the command run by the DEBUG trap returns a non-zero value, the next command  is\n                             skipped and not executed.\n\n                      3.     If the command run by the DEBUG trap returns a value of 2, and the shell is execut\u2010\n                             ing in a subroutine (a shell function or a shell script executed by the . or source\n                             builtins), the shell simulates a call to return.\n\n                      4.     BASH_ARGC and BASH_ARGV are updated as described in their descriptions above.\n\n                      5.     Function  tracing  is enabled: command substitution, shell functions, and subshells\n                             invoked with ( command ) inherit the DEBUG and RETURN traps.\n\n                      6.     Error tracing is enabled: command substitution, shell functions, and subshells  in\u2010\n                             voked with ( command ) inherit the ERR trap.\n\n              extglob If  set,  the  extended pattern matching features described above under Pathname Expansion\n                      are enabled.\n\n              extquote\n                      If set, $'string' and $\"string\" quoting is performed within  ${parameter}  expansions  en\u2010\n                      closed in double quotes.  This option is enabled by default.\n\n              failglob\n                      If  set, patterns which fail to match filenames during pathname expansion result in an ex\u2010\n                      pansion error.\n\n              force_fignore\n                      If set, the suffixes specified by the FIGNORE shell variable cause  words  to  be  ignored\n                      when  performing  word  completion even if the ignored words are the only possible comple\u2010\n                      tions.  See SHELL VARIABLES above for a description of FIGNORE.  This option is enabled by\n                      default.\n\n              globasciiranges\n                      If set, range expressions used in pattern matching bracket expressions (see Pattern Match\u2010\n                      ing above) behave as if in the traditional C locale when performing comparisons.  That is,\n                      the  current  locale's collating sequence is not taken into account, so b will not collate\n                      between A and B, and upper-case and lower-case ASCII characters will collate together.\n\n              globstar\n                      If set, the pattern ** used in a pathname expansion context will match all files and  zero\n                      or  more directories and subdirectories.  If the pattern is followed by a /, only directo\u2010\n                      ries and subdirectories match.\n\n              gnu_errfmt\n                      If set, shell error messages are written in the standard GNU error message format.\n\n              histappend\n                      If set, the history list is appended to the file named by the value of the HISTFILE  vari\u2010\n                      able when the shell exits, rather than overwriting the file.\n\n              histreedit\n                      If  set,  and  readline is being used, a user is given the opportunity to re-edit a failed\n                      history substitution.\n\n              histverify\n                      If set, and readline is being used, the results of history substitution  are  not  immedi\u2010\n                      ately passed to the shell parser.  Instead, the resulting line is loaded into the readline\n                      editing buffer, allowing further modification.\n\n              hostcomplete\n                      If set, and readline is being used, bash will attempt to perform hostname completion  when\n                      a  word  containing a @ is being completed (see Completing under READLINE above).  This is\n                      enabled by default.\n\n              huponexit\n                      If set, bash will send SIGHUP to all jobs when an interactive login shell exits.\n\n              inherit_errexit\n                      If set, command substitution inherits the value of the errexit option, instead  of  unset\u2010\n                      ting it in the subshell environment.  This option is enabled when posix mode is enabled.\n\n              interactive_comments\n                      If  set,  allow a word beginning with # to cause that word and all remaining characters on\n                      that line to be ignored in an interactive shell (see COMMENTS above).  This option is  en\u2010\n                      abled by default.\n\n              lastpipe\n                      If  set,  and job control is not active, the shell runs the last command of a pipeline not\n                      executed in the background in the current shell environment.\n\n              lithist If set, and the cmdhist option is enabled, multi-line commands are saved  to  the  history\n                      with embedded newlines rather than using semicolon separators where possible.\n\n              localvar_inherit\n                      If  set,  local  variables inherit the value and attributes of a variable of the same name\n                      that exists at a previous scope before any new value is assigned.  The  nameref  attribute\n                      is not inherited.\n\n              localvar_unset\n                      If  set, calling unset on local variables in previous function scopes marks them so subse\u2010\n                      quent lookups find them unset until that function returns. This is identical to the behav\u2010\n                      ior of unsetting local variables at the current function scope.\n\n              login_shell\n                      The  shell sets this option if it is started as a login shell (see INVOCATION above).  The\n                      value may not be changed.\n\n              mailwarn\n                      If set, and a file that bash is checking for mail has been accessed since the last time it\n                      was checked, the message ``The mail in mailfile has been read'' is displayed.\n\n              no_empty_cmd_completion\n                      If  set, and readline is being used, bash will not attempt to search the PATH for possible\n                      completions when completion is attempted on an empty line.\n\n              nocaseglob\n                      If set, bash matches filenames in a case-insensitive fashion when performing pathname  ex\u2010\n                      pansion (see Pathname Expansion above).\n\n              nocasematch\n                      If set, bash matches patterns in a case-insensitive fashion when performing matching while\n                      executing case or [[ conditional commands, when performing pattern substitution  word  ex\u2010\n                      pansions, or when filtering possible completions as part of programmable completion.\n\n              nullglob\n                      If set, bash allows patterns which match no files (see Pathname Expansion above) to expand\n                      to a null string, rather than themselves.\n\n              progcomp\n                      If set, the programmable completion facilities (see Programmable Completion above) are en\u2010\n                      abled.  This option is enabled by default.\n\n              progcomp_alias\n                      If  set,  and  programmable completion is enabled, bash treats a command name that doesn't\n                      have any completions as a possible alias and attempts alias expansion. If it has an alias,\n                      bash  attempts  programmable completion using the command word resulting from the expanded\n                      alias.\n\n              promptvars\n                      If set, prompt strings undergo parameter expansion, command substitution,  arithmetic  ex\u2010\n                      pansion, and quote removal after being expanded as described in PROMPTING above.  This op\u2010\n                      tion is enabled by default.\n\n              restricted_shell\n                      The shell sets this option if it is started in restricted mode (see RESTRICTED  SHELL  be\u2010\n                      low).   The  value  may not be changed.  This is not reset when the startup files are exe\u2010\n                      cuted, allowing the startup files to discover whether or not a shell is restricted.\n\n              shift_verbose\n                      If set, the shift builtin prints an error message when the shift count exceeds the  number\n                      of positional parameters.\n\n              sourcepath\n                      If set, the source (.) builtin uses the value of PATH to find the directory containing the\n                      file supplied as an argument.  This option is enabled by default.\n\n              xpg_echo\n                      If set, the echo builtin expands backslash-escape sequences by default.\n\n       suspend [-f]\n              Suspend the execution of this shell until it receives a SIGCONT signal.  A login shell  cannot  be\n              suspended; the -f option can be used to override this and force the suspension.  The return status\n              is 0 unless the shell is a login shell and -f is not supplied, or if job control is not enabled.\n\n       test expr\n       [ expr ]\n              Return a status of 0 (true) or 1 (false) depending on the evaluation of the conditional expression\n              expr.   Each  operator  and  operand must be a separate argument.  Expressions are composed of the\n              primaries described in the bash manual page under CONDITIONAL EXPRESSIONS.  test does  not  accept\n              any options, nor does it accept and ignore an argument of -- as signifying the end of options.\n\n              Expressions  may  be  combined using the following operators, listed in decreasing order of prece\u2010\n              dence.  The evaluation depends on the number of arguments; see below.  Operator precedence is used\n              when there are five or more arguments.\n              ! expr True if expr is false.\n              ( expr )\n                     Returns  the  value  of expr.  This may be used to override the normal precedence of opera\u2010\n                     tors.\n              expr1 -a expr2\n                     True if both expr1 and expr2 are true.\n              expr1 -o expr2\n                     True if either expr1 or expr2 is true.\n\n              test and [ evaluate conditional expressions using a set of rules based on the number of arguments.\n\n              0 arguments\n                     The expression is false.\n              1 argument\n                     The expression is true if and only if the argument is not null.\n              2 arguments\n                     If the first argument is !, the expression is true if and only if the  second  argument  is\n                     null.   If  the first argument is one of the unary conditional operators listed above under\n                     CONDITIONAL EXPRESSIONS, the expression is true if the unary test is true.   If  the  first\n                     argument is not a valid unary conditional operator, the expression is false.\n              3 arguments\n                     The following conditions are applied in the order listed.  If the second argument is one of\n                     the binary conditional operators listed above under CONDITIONAL EXPRESSIONS, the result  of\n                     the  expression is the result of the binary test using the first and third arguments as op\u2010\n                     erands.  The -a and -o operators are considered binary operators when there are three argu\u2010\n                     ments.   If the first argument is !, the value is the negation of the two-argument test us\u2010\n                     ing the second and third arguments.  If the first argument is exactly ( and the third argu\u2010\n                     ment  is exactly ), the result is the one-argument test of the second argument.  Otherwise,\n                     the expression is false.\n              4 arguments\n                     If the first argument is !, the result is the negation  of  the  three-argument  expression\n                     composed of the remaining arguments.  Otherwise, the expression is parsed and evaluated ac\u2010\n                     cording to precedence using the rules listed above.\n              5 or more arguments\n                     The expression is parsed and evaluated according  to  precedence  using  the  rules  listed\n                     above.\n\n              When used with test or [, the < and > operators sort lexicographically using ASCII ordering.\n\n       times  Print  the  accumulated  user and system times for the shell and for processes run from the shell.\n              The return status is 0.\n\n       trap [-lp] [[arg] sigspec ...]\n              The command arg is to be read and executed when the shell receives signal(s) sigspec.  If  arg  is\n              absent (and there is a single sigspec) or -, each specified signal is reset to its original dispo\u2010\n              sition (the value it had upon entrance to the shell).  If arg is the null string the signal speci\u2010\n              fied  by  each  sigspec  is  ignored  by  the shell and by the commands it invokes.  If arg is not\n              present and -p has been supplied, then the trap commands associated with  each  sigspec  are  dis\u2010\n              played.  If no arguments are supplied or if only -p is given, trap prints the list of commands as\u2010\n              sociated with each signal.  The -l option causes the shell to print a list  of  signal  names  and\n              their  corresponding  numbers.   Each  sigspec is either a signal name defined in <signal.h>, or a\n              signal number.  Signal names are case insensitive and the SIG prefix is optional.\n\n              If a sigspec is EXIT (0) the command arg is executed on exit from the shell.  If a sigspec is  DE\u2010\n              BUG,  the  command  arg is executed before every simple command, for command, case command, select\n              command, every arithmetic for command, and before the first command executes in a  shell  function\n              (see  SHELL  GRAMMAR above).  Refer to the description of the extdebug option to the shopt builtin\n              for details of its effect on the DEBUG trap.  If a sigspec is RETURN, the command arg is  executed\n              each time a shell function or a script executed with the . or source builtins finishes executing.\n\n              If  a sigspec is ERR, the command arg is executed whenever a pipeline (which may consist of a sin\u2010\n              gle simple command), a list, or a compound command returns a non-zero exit status, subject to  the\n              following  conditions.   The ERR trap is not executed if the failed command is part of the command\n              list immediately following a while or until keyword, part of the test in an if statement, part  of\n              a command executed in a && or || list except the command following the final && or ||, any command\n              in a pipeline but the last, or if the command's return value is being inverted using !.  These are\n              the same conditions obeyed by the errexit (-e) option.\n\n              Signals  ignored upon entry to the shell cannot be trapped, reset or listed.  Trapped signals that\n              are not being ignored are reset to their original values in a  subshell  or  subshell  environment\n              when one is created.  The return status is false if any sigspec is invalid; otherwise trap returns\n              true.\n\n       type [-aftpP] name [name ...]\n              With no options, indicate how each name would be interpreted if used as a command name.  If the -t\n              option is used, type prints a string which is one of alias, keyword, function, builtin, or file if\n              name is an alias, shell reserved word, function, builtin, or disk file, respectively.  If the name\n              is  not found, then nothing is printed, and an exit status of false is returned.  If the -p option\n              is used, type either returns the name of the disk file that would be executed if name were  speci\u2010\n              fied  as  a  command  name,  or  nothing if ``type -t name'' would not return file.  The -P option\n              forces a PATH search for each name, even if ``type -t name'' would not return file.  If a  command\n              is  hashed, -p and -P print the hashed value, which is not necessarily the file that appears first\n              in PATH.  If the -a option is used, type prints all of the places that contain an executable named\n              name.   This  includes  aliases and functions, if and only if the -p option is not also used.  The\n              table of hashed commands is not consulted when using -a.  The -f option suppresses shell  function\n              lookup,  as  with the command builtin.  type returns true if all of the arguments are found, false\n              if any are not found.\n\n       ulimit [-HS] -a\n       ulimit [-HS] [-bcdefiklmnpqrstuvxPRT [limit]]\n              Provides control over the resources available to the shell and to processes started by it, on sys\u2010\n              tems  that  allow  such control.  The -H and -S options specify that the hard or soft limit is set\n              for the given resource.  A hard limit cannot be increased by a non-root user once  it  is  set;  a\n              soft limit may be increased up to the value of the hard limit.  If neither -H nor -S is specified,\n              both the soft and hard limits are set.  The value of limit can be a number in the  unit  specified\n              for  the  resource or one of the special values hard, soft, or unlimited, which stand for the cur\u2010\n              rent hard limit, the current soft limit, and no limit, respectively.  If  limit  is  omitted,  the\n              current  value  of the soft limit of the resource is printed, unless the -H option is given.  When\n              more than one resource is specified, the limit name and unit, if appropriate, are  printed  before\n              the value.  Other options are interpreted as follows:\n              -a     All current limits are reported; no limits are set\n              -b     The maximum socket buffer size\n              -c     The maximum size of core files created\n              -d     The maximum size of a process's data segment\n              -e     The maximum scheduling priority (\"nice\")\n              -f     The maximum size of files written by the shell and its children\n              -i     The maximum number of pending signals\n              -k     The maximum number of kqueues that may be allocated\n              -l     The maximum size that may be locked into memory\n              -m     The maximum resident set size (many systems do not honor this limit)\n              -n     The  maximum  number  of  open file descriptors (most systems do not allow this value to be\n                     set)\n              -p     The pipe size in 512-byte blocks (this may not be set)\n              -q     The maximum number of bytes in POSIX message queues\n              -r     The maximum real-time scheduling priority\n              -s     The maximum stack size\n              -t     The maximum amount of cpu time in seconds\n              -u     The maximum number of processes available to a single user\n              -v     The maximum amount of virtual memory available to the shell and, on some  systems,  to  its\n                     children\n              -x     The maximum number of file locks\n              -P     The maximum number of pseudoterminals\n              -R     The maximum time a real-time process can run before blocking, in microseconds\n              -T     The maximum number of threads\n\n              If  limit  is  given,  and  the -a option is not used, limit is the new value of the specified re\u2010\n              source.  If no option is given, then -f is assumed.  Values are in  1024-byte  increments,  except\n              for  -t,  which  is  in  seconds;  -R, which is in microseconds; -p, which is in units of 512-byte\n              blocks; -P, -T, -b, -k, -n, and -u, which are unscaled values; and, when in posix mode, -c and -f,\n              which  are in 512-byte increments.  The return status is 0 unless an invalid option or argument is\n              supplied, or an error occurs while setting a new limit.  In POSIX Mode 512-byte  blocks  are  used\n              for the `-c' and `-f' options.\n\n       umask [-p] [-S] [mode]\n              The  user file-creation mask is set to mode.  If mode begins with a digit, it is interpreted as an\n              octal number; otherwise it is interpreted as a symbolic mode mask  similar  to  that  accepted  by\n              chmod(1).  If mode is omitted, the current value of the mask is printed.  The -S option causes the\n              mask to be printed in symbolic form; the default output is an octal number.  If the -p  option  is\n              supplied,  and  mode  is omitted, the output is in a form that may be reused as input.  The return\n              status is 0 if the mode was successfully changed or if no mode argument was  supplied,  and  false\n              otherwise.\n\n       unalias [-a] [name ...]\n              Remove  each  name from the list of defined aliases.  If -a is supplied, all alias definitions are\n              removed.  The return value is true unless a supplied name is not a defined alias.\n\n       unset [-fv] [-n] [name ...]\n              For each name, remove the corresponding variable or function.  If the -v  option  is  given,  each\n              name refers to a shell variable, and that variable is removed.  Read-only variables may not be un\u2010\n              set.  If -f is specified, each name refers to a shell function, and the function definition is re\u2010\n              moved.  If the -n option is supplied, and name is a variable with the nameref attribute, name will\n              be unset rather than the variable it references.  -n has no effect if the -f option  is  supplied.\n              If  no options are supplied, each name refers to a variable; if there is no variable by that name,\n              a function with that name, if any, is unset.  Each unset variable or function is removed from  the\n              environment  passed  to  subsequent  commands.   If  any  of  BASH_ALIASES, BASH_ARGV0, BASH_CMDS,\n              BASH_COMMAND, BASH_SUBSHELL,  BASHPID,  COMP_WORDBREAKS,  DIRSTACK,  EPOCHREALTIME,  EPOCHSECONDS,\n              FUNCNAME,  GROUPS, HISTCMD, LINENO, RANDOM, SECONDS, or SRANDOM are unset, they lose their special\n              properties, even if they are subsequently reset.  The exit status is true unless a name  is  read\u2010\n              only.\n\n       wait [-fn] [-p varname] [id ...]\n              Wait for each specified child process and return its termination status.  Each id may be a process\n              ID or a job specification; if a job spec is given, all processes in that job's pipeline are waited\n              for.  If id is not given, wait waits for all running background jobs and the last-executed process\n              substitution, if its process id is the same as $!, and the return status is zero.  If the  -n  op\u2010\n              tion is supplied, wait waits for a single job from the list of ids or, if no ids are supplied, any\n              job, to complete and returns its exit status.  If none of the supplied arguments is a child of the\n              shell, or if no arguments are supplied and the shell has no unwaited-for children, the exit status\n              is 127.  If the -p option is supplied, the process or job identifier of the job for which the exit\n              status is returned is assigned to the variable varname named by the option argument.  The variable\n              will be unset initially, before any assignment.  This is useful only when the -n  option  is  sup\u2010\n              plied.  Supplying the -f option, when job control is enabled, forces wait to wait for id to termi\u2010\n              nate before returning its status, instead of returning when it changes status.  If id specifies  a\n              non-existent  process  or job, the return status is 127.  Otherwise, the return status is the exit\n              status of the last process or job waited for.\n\nSHELL COMPATIBILITY MODE\n       Bash-4.0 introduced the concept of a `shell compatibility level', specified as a set of  options  to  the\n       shopt  builtin compat31, compat32, compat40, compat41, and so on).  There is only one current compatibil\u2010\n       ity level -- each option is mutually exclusive.  The compatibility level is intended to  allow  users  to\n       select  behavior  from  previous  versions  that  is  incompatible with newer versions while they migrate\n       scripts to use current features and behavior. It's intended to be a temporary solution.\n\n       This section does not mention behavior that is standard for a particular version (e.g., setting  compat32\n       means  that quoting the rhs of the regexp matching operator quotes special regexp characters in the word,\n       which is default behavior in bash-3.2 and above).\n\n       If a user enables, say, compat32, it may affect the behavior of other compatibility levels up to and  in\u2010\n       cluding  the  current  compatibility  level.  The idea is that each compatibility level controls behavior\n       that changed in that version of bash, but that behavior may have been present in earlier  versions.   For\n       instance,  the  change  to use locale-based comparisons with the [[ command came in bash-4.1, and earlier\n       versions used ASCII-based comparisons, so enabling compat32 will enable ASCII-based comparisons as  well.\n       That  granularity  may  not be sufficient for all uses, and as a result users should employ compatibility\n       levels carefully.  Read the documentation for a particular feature to find out the current behavior.\n\n       Bash-4.3 introduced a new shell variable: BASH_COMPAT.  The value assigned to this  variable  (a  decimal\n       version number like 4.2, or an integer corresponding to the compatNN option, like 42) determines the com\u2010\n       patibility level.\n\n       Starting with bash-4.4, Bash has begun deprecating older compatibility levels.  Eventually,  the  options\n       will be removed in favor of BASH_COMPAT.\n\n       Bash-5.0  is  the  final version for which there will be an individual shopt option for the previous ver\u2010\n       sion. Users should use BASH_COMPAT on bash-5.0 and later versions.\n\n       The following table describes the behavior changes controlled by each compatibility level  setting.   The\n       compatNN  tag  is  used as shorthand for setting the compatibility level to NN using one of the following\n       mechanisms.  For versions prior to bash-5.0, the compatibility level may be set using  the  corresponding\n       compatNN shopt option.  For bash-4.3 and later versions, the BASH_COMPAT variable is preferred, and it is\n       required for bash-5.1 and later versions.\n\n       compat31\n              \u2022      quoting the rhs of the [[ command's regexp matching operator (=~) has no special effect\n\n       compat32\n              \u2022      interrupting a command list such as \"a ; b ; c\" causes the execution of the next command in\n                     the  list  (in bash-4.0 and later versions, the shell acts as if it received the interrupt,\n                     so interrupting one command in a list aborts the execution of the entire list)\n\n       compat40\n              \u2022      the < and > operators to the [[ command do not consider the current locale  when  comparing\n                     strings;  they use ASCII ordering.  Bash versions prior to bash-4.1 use ASCII collation and\n                     strcmp(3); bash-4.1 and later use the current locale's collation sequence and strcoll(3).\n\n       compat41\n              \u2022      in posix mode, time may be followed by options and still be recognized as a  reserved  word\n                     (this is POSIX interpretation 267)\n              \u2022      in  posix  mode, the parser requires that an even number of single quotes occur in the word\n                     portion of a double-quoted parameter expansion and treats them specially, so  that  charac\u2010\n                     ters within the single quotes are considered quoted (this is POSIX interpretation 221)\n\n       compat42\n              \u2022      the  replacement  string  in  double-quoted pattern substitution does not undergo quote re\u2010\n                     moval, as it does in versions after bash-4.2\n              \u2022      in posix mode, single quotes are considered special when expanding the word  portion  of  a\n                     double-quoted parameter expansion and can be used to quote a closing brace or other special\n                     character (this is part of POSIX interpretation 221); in later versions, single quotes  are\n                     not special within double-quoted word expansions\n\n       compat43\n              \u2022      the  shell  does not print a warning message if an attempt is made to use a quoted compound\n                     assignment as an argument to declare (declare -a foo='(1 2)').  Later  versions  warn  that\n                     this usage is deprecated\n              \u2022      word  expansion  errors  are  considered non-fatal errors that cause the current command to\n                     fail, even in posix mode (the default behavior is to make them fatal errors that cause  the\n                     shell to exit)\n              \u2022      when  executing a shell function, the loop state (while/until/etc.)  is not reset, so break\n                     or continue in that function will break or continue loops in the calling context.  Bash-4.4\n                     and later reset the loop state to prevent this\n\n       compat44\n              \u2022      the  shell  sets  up  the  values used by BASH_ARGV and BASH_ARGC so they can expand to the\n                     shell's positional parameters even if extended debugging mode is not enabled\n              \u2022      a subshell inherits loops from its parent context, so break or continue will cause the sub\u2010\n                     shell to exit.  Bash-5.0 and later reset the loop state to prevent the exit\n              \u2022      variable  assignments  preceding builtins like export and readonly that set attributes con\u2010\n                     tinue to affect variables with the same name in the calling environment even if  the  shell\n                     is not in posix mode\n\n       compat50\n              \u2022      Bash-5.1 changed the way $RANDOM is generated to introduce slightly more randomness. If the\n                     shell compatibility level is set to 50 or lower, it reverts to the method from bash-5.0 and\n                     previous  versions,  so  seeding the random number generator by assigning a value to RANDOM\n                     will produce the same sequence as in bash-5.0\n              \u2022      If the command hash table is empty, bash versions prior to  bash-5.1  printed  an  informa\u2010\n                     tional  message  to  that  effect,  even when producing output that can be reused as input.\n                     Bash-5.1 suppresses that message when the -l option is supplied.\n\nSEE ALSO\n       bash(1), sh(1)\n\nGNU Bash 5.0                                       2004 Apr 20                                  BASH_BUILTINS(1)\n"},{"NOMBRE": "       readdir - lee una entrada de un directorio\n\n", "SINOPSIS": "       #include <unistd.h>\n       #include <linux/dirent.h>\n       #include <linux/unistd.h>\n\n       _syscall3(int, readdir, uint, fd, struct dirent *, dirp, uint, count);\n\n       int readdir(unsigned int fd, struct dirent *dirp, unsigned int count);\n\n", "DESCRIPCION": "       Esta  no es la funci\u00f3n que buscaba.  Mire readdir(3) para ver la interfaz de la biblioteca C conforme con\n       POSIX.  Esta p\u00e1gina documenta la interfaz desnuda con  la  llamada  al  sistema  del  n\u00facleo,  que  puede\n       cambiar, y que es reemplazada por getdents(2).\n\n       readdir  lee  una  estructura  dirent del directorio al que apunta fd y la almacena en el \u00e1rea de memoria\n       apuntada por dirp.  El par\u00e1metro count es ignorado; como mucho se lee una estructura dirent.\n\n       La estructura dirent se declara como sigue:\n\n              struct dirent\n              {\n                  long d_ino;                 /* n\u00famero de nodo-\u00ed */\n                  off_t d_off;                /* desplazamiento hasta el dirent */\n                  unsigned short d_reclen;    /* longitud del d_name */\n                  char d_name [NAME_MAX+1];   /* nombre de fichero\n                                                 (acabado en nulo) */\n              }\n\n       d_ino es un n\u00famero de nodo-\u00ed.  d_off es la distancia desde el principio del directorio hasta este dirent.\n       d_reclen  es el tama\u00f1o de d_name, sin contar el car\u00e1cter nulo del final.  d_name es un nombre de fichero,\n       una cadena de caracteres terminada en nulo.\n\nVALOR DEVUELTO\n       En caso de \u00e9xito se devuelve 1.  Si se alcanz\u00f3 el final del directorio se devuelve 0.  Si hubo  un  error\n       se devuelve -1 y la variable errno se modifica apropiadamente.\n\n", "ERRORES": "       EBADF  Descriptor de fichero fd inv\u00e1lido.\n\n       EFAULT El argumento se\u00f1ala fuera del espacio de direcciones del proceso que realiza la llamada.\n\n       EINVAL El buffer para el resultado es demasiado peque\u00f1o.\n\n       ENOENT No existe el directorio.\n\n       ENOTDIR\n              El descriptor de fichero no se refiere a un directorio.\n\nCONFORME A\n       Esta llamada al sistema es espec\u00edfica de Linux.\n\nV\u00c9ASE TAMBI\u00c9N\n       getdents(2), readdir(3)\n\nLinux 1.3.6                                       22 julio 1995                                       READDIR(2)\n"},{"NOMBRE": "       readlink - print resolved symbolic links or canonical file names\n\n", "SINOPSIS": "       readlink [OPTION]... FILE...\n\n", "DESCRIPCION": "       Note realpath(1) is the preferred command to use for canonicalization functionality.\n\n       Print value of a symbolic link or canonical file name\n\n       -f, --canonicalize\n              canonicalize  by following every symlink in every component of the given name recursively; all but\n              the last component must exist\n\n       -e, --canonicalize-existing\n              canonicalize by following every symlink in every component of the given name recursively, all com\u2010\n              ponents must exist\n\n       -m, --canonicalize-missing\n              canonicalize  by following every symlink in every component of the given name recursively, without\n              requirements on components existence\n\n       -n, --no-newline\n              do not output the trailing delimiter\n\n       -q, --quiet\n\n       -s, --silent\n              suppress most error messages (on by default)\n\n       -v, --verbose\n              report error messages\n\n       -z, --zero\n              end each output line with NUL, not newline\n\n       --help display this help and exit\n\n       --version\n              output version information and exit\n\n", "AUTOR": "       Written by Dmitry V. Levin.\n\nREPORTING BUGS\n       GNU coreutils online help: <https://www.gnu.org/software/coreutils/>\n       Report any translation bugs to <https://translationproject.org/team/>\n\n", "COPYRIGHT": "       Copyright  \u00a9  2020  Free  Software  Foundation,  Inc.   License  GPLv3+:  GNU  GPL  version  3  or  later\n       <https://gnu.org/licenses/gpl.html>.\n       This  is  free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent\n       permitted by law.\n\nSEE ALSO\n       readlink(2), realpath(1), realpath(3)\n\n       Full documentation <https://www.gnu.org/software/coreutils/readlink>\n       or available locally via: info '(coreutils) readlink invocation'\n\nGNU coreutils 8.32                                  July 2021                                        READLINK(1)\n"},{"NOMBRE": "       readv, writev - leen o escriben datos en m\u00faltiples buffers\n\n", "SINOPSIS": "       #include <sys/uio.h>\n\n       ssize_t readv(int fd, const struct iovec *vector, int count);\n\n       ssize_t writev(int fd, const struct iovec *vector, int count);\n\n", "DESCRIPCION": "       La  funci\u00f3n  readv()  lee count bloques del fichero asociado con el descriptor de fichero fd en m\u00faltiples\n       buffers descritos por vector.\n\n       La funci\u00f3n writev() escribe como m\u00e1ximo count bloques descritos por vector en el fichero asociado con  el\n       descriptor de fichero fd.\n\n       El puntero vector apunta a una estructura iovec definida en <sys/uio.h> como\n\n          struct iovec {\n              void *iov_base;   /* Direcci\u00f3n de comienzo */\n              size_t iov_len;   /* N\u00famero de bytes */\n          };\n\n       Los buffers son procesados en el orden especificado.\n\n       La funci\u00f3n readv() trabaja exactamente igual que read(2) salvo que rellena m\u00faltiples buffers.\n\n       La funci\u00f3n writev() trabaja exactamente igual que write(2) salvo que escribe m\u00faltiples buffers.\n\nVALOR DEVUELTO\n       En  caso de \u00e9xito, la funci\u00f3n readv() devuelve el n\u00famero de bytes le\u00eddos; la funci\u00f3n writev() devuelve el\n       n\u00famero de bytes escritos.  En caso de error, se devuelve -1, y se modifica errno con un valor apropiado.\n\n", "ERRORES": "       Los errores son los mismos que para read(2) y write(2).  Adicionalmente se define el siguiente error.\n\n       EINVAL La suma de los valores iov_len provoca un desbordamiento por arriba en un valor ssize_t.  O  bien,\n              el contador count es cero o mayor que MAX_IOVEC.\n\nCONFORME A\n       4.4BSD  (las funciones readv y writev aparecieron por primera vez en BSD 4.2), Unix98, POSIX 1003.1-2001.\n       La biblioteca libc5 de Linux usaba size_t como tipo del par\u00e1metro count, e int  como  tipo  devuelto  por\n       estas funciones.\n\n", "FALLOS": "       No  es recomendable mezclar llamadas a funciones como readv() o writev(), que trabajan sobre descriptores\n       de fichero, con funciones de la biblioteca  stdio;  los  resultados  ser\u00e1n  indefinidos  y  probablemente\n       indeseados.\n\nV\u00c9ASE TAMBI\u00c9N\n       read(2), write(2)\n\n                                                 17 octubre 2002                                        READV(2)\n"},{"NOMBRE": "       halt, reboot, poweroff - Detienen el sistema.\n\n", "SINOPSIS": "       /sbin/halt [-n] [-w] [-d] [-f] [-i] [-p]\n       /sbin/reboot [-n] [-w] [-d] [-f] [-i]\n       /sbin/poweroff [-n] [-w] [-d] [-f] [-i]\n\n", "DESCRIPCION": "       Halt  comprueba que el sistema est\u00e1 siendo desconectado en el archivo /var/log/wtemp, y entonces llama al\n       n\u00facleo para detener, reiniciar o apagar el sistema. Si se llama a halt o reboot cuando el sistema no est\u00e1\n       en los niveles 0 o 6, ser\u00e1 invocado shutdown(8) (con el flag -h o -r).\n\n", "OPCIONES": "       -n     No sincroniza antes de reiniciar o detener.\n\n       -w     No  reinicia  o  detiene  el  sistema,  \u00fanicamente  escribe  la  grabaci\u00f3n  en wtmp (en el fichero\n              /var/log/wtmp).\n\n       -d     No escribe la grabaci\u00f3n wtmp. El flag -n implica -d.\n\n       -f     Fuerza una detenci\u00f3n o reinicio, no llama a shutdown(8).\n\n       -i     Apaga todos los interfaces de redes justo antes de detener o reiniciar.\n\n       -p     Cuando detiene el sistema, hace un apagado. Esto act\u00faa por defecto cuando  halt  es  llamado  como\n              poweroff.\n\n", "DIAGNOSTICOS": "       Si no eres un superusuario, obtendr\u00e1s el mensaje `must be superuser' (debes ser un superusuario).\n\n", "NOTA": "       Nunca  se  debe  llamar  directamente  a  las versiones anteriores de sysvinit, reboot y halt. Desde esta\n       versi\u00f3n halt y reboot llaman a shutdown(8) si el sistema no est\u00e1 en niveles 0 o 6.\n\n", "AUTOR": "       Miquel van Smoorenburg, miquels@cistron.nl\n\nV\u00c9ASE TAMBI\u00c9N\n       shutdown(8), init(1)\n\nLinux                                            24 Febrero 1998                                         HALT(8)\n"},{"NOMBRE": "       recv, recvfrom, recvmsg - reciben un mensaje desde un conector\n\n", "SINOPSIS": "       #include <sys/types.h>\n       #include <sys/socket.h>\n\n       ssize_t recv(int s, void *buf, size_t lon, int flags);\n\n       ssize_t recvfrom(int s, void *buf, size_t lon, int flags, struct sockaddr *desde, socklen_t *londesde);\n\n       ssize_t recvmsg(int s, struct msghdr *msg, int flags);\n\n", "DESCRIPCION": "       Las llamadas recvfrom y recvmsg se emplean para recibir mensajes desde un conector (``socket''), y pueden\n       utilizarse para recibir datos de un conector sea orientado a conexi\u00f3n o no.\n\n       Si desde no es NULL y el conector no es orientado a conexi\u00f3n, la direcci\u00f3n fuente del mensaje  se  llena.\n       El  argumento  londesde  es  un  par\u00e1metro  por referencia, inicializado al tama\u00f1o del b\u00fafer asociado con\n       desde, y modificado cuando la funci\u00f3n regresa para indicar el tama\u00f1o real de la direcci\u00f3n guardada ah\u00ed.\n\n       La llamada a recv se utiliza normalmente s\u00f3lo en un conector conectado (vea connect(2)) y es  id\u00e9ntica  a\n       recvfrom con un par\u00e1metro desde con valor NULL.\n\n       Las  tres  rutinas  devuelven  la  longitud del mensaje cuando terminan bien.  Si un mensaje es demasiado\n       largo como para caber en el b\u00fafer suministrado, los bytes que sobran pueden descartarse  dependiendo  del\n       tipo de conector del que se reciba el mensaje (vea socket(2)).\n\n       Si no hay mensajes disponibles en el conector, las llamadas de recepci\u00f3n esperan que llegue un mensaje, a\n       menos que el conector sea no bloqueante (vea fcntl(2)) en cuyo caso se devuelve el valor -1 y la variable\n       externa  errno  toma  el  valor  EAGAIN.   Las llamadas de recepci\u00f3n devuelven normalmente cualquier dato\n       disponible, hasta la cantidad pedida, en vez de esperar la recepci\u00f3n de la cantidad pedida completa.\n\n       Las llamadas select(2) o poll(2) pueden emplearse para determinar cu\u00e1ndo llegan m\u00e1s datos.\n\n       El argumento flags de una llamada a recv se forma aplicando el operador de bits O-l\u00f3gico a uno o  m\u00e1s  de\n       los valores siguientes:\n\n       MSG_OOB\n              Esta  opci\u00f3n  pide  la recepci\u00f3n de datos fuera-de-banda que no se recibir\u00edan en el flujo de datos\n              normal. Algunos protocolos ponen datos despachados con prontitud en la cabeza de la cola de  datos\n              normales, y as\u00ed, esta opci\u00f3n no puede emplearse con tales protocolos.\n\n       MSG_PEEK\n              Esta  opci\u00f3n  hace  que  la  operaci\u00f3n  de  recepci\u00f3n  devuelva  datos del principio de la cola de\n              recepci\u00f3n sin quitarlos de all\u00ed. As\u00ed, una pr\u00f3xima llamada de recepci\u00f3n devolver\u00e1 los mismos datos.\n\n       MSG_WAITALL\n              Esta opci\u00f3n hace que la operaci\u00f3n se bloquee hasta que se satisfaga la petici\u00f3n completamente. Sin\n              embargo,  la  llamada  puede  a\u00fan  devolver menos datos de los pedidos si se captura una se\u00f1al, si\n              ocurre un error o una desconexi\u00f3n, o si los pr\u00f3ximos datos que se van a recibir  son  de  un  tipo\n              diferente del que se ha devuelto.\n\n       MSG_NOSIGNAL\n              Esta  opci\u00f3n  desactiva  el  que  se  produzca una se\u00f1al SIGPIPE sobre los conectores orientados a\n              conexi\u00f3n cuando el otro extremo desaparece.\n\n       MSG_TRUNC\n              Devuelve la longitud real del paquete, incluso cuando es m\u00e1s  largo  que  el  b\u00fafer  pasado.  Esta\n              opci\u00f3n s\u00f3lo es v\u00e1lida para conectores de paquete.\n\n       MSG_ERRQUEUE\n              Esta  opci\u00f3n  indica  que  los  errores  encolados  deben  recibirse  desde  la cola de errores de\n              conectores.  El error se pasa en un mensaje auxiliar con un tipo dependiente del  protocolo  (para\n              IPv4 \u00e9ste es IP_RECVERR).  El usuario debe proporciona un buffer de tama\u00f1o suficiente. Vea cmsg(3)\n              y ip(7) para obtener m\u00e1s informaci\u00f3n.  El contenido \u00fatil del paquete original que provoc\u00f3 el error\n              se pasa como datos normales a trav\u00e9s de msg_iovec.  La direcci\u00f3n original de destino del datagrama\n              que provoc\u00f3 el error se pasa a trav\u00e9s de msg_name.\n\n              Para errores locales, no se pasa ninguna direcci\u00f3n (\u00e9sto puede comprobarse con el miembro cmsg_len\n              de cmsghdr).  Para los errores recibidos, se asigna MSG_ERRQUEUE a msghdr.  Despu\u00e9s de que se haya\n              pasado un error, el error de conector pendiente  se  regenera  bas\u00e1ndose  en  el  siguiente  error\n              encolado y se pasar\u00e1 en la siguiente operaci\u00f3n de conectores.\n\n              El error se suministra en una estructura sock_extended_err:\n\n              #define SO_EE_ORIGIN_NONE     0\n              #define SO_EE_ORIGIN_LOCAL    1\n              #define SO_EE_ORIGIN_ICMP     2\n              #define SO_EE_ORIGIN_ICMP6    3\n\n              struct sock_extended_err\n              {\n                    u_int32_t   ee_errno;       /* n\u00famero de error */\n                    u_int8_t    ee_origin;      /* origen del error */\n                    u_int8_t    ee_type;        /* tipo */\n                    u_int8_t    ee_code;        /* c\u00f3digo */\n                    u_int8_t    ee_pad;\n                    u_int32_t   ee_info;        /* informaci\u00f3n adicional */\n                    u_int32_t   ee_data;        /* otros datos */\n                    /* Pueden ir m\u00e1s datos a continuaci\u00f3n .*/\n              };\n\n              struct sockaddr *SO_EE_OFFENDER(struct sock_extended_err *);\n\n              ee_errno  contiene el n\u00famero errno del error encolado.  ee_origin es el c\u00f3digo del origen en donde\n              se  ha  originado  el  error.   Los  otros  campos  son  espec\u00edficos  del  protocolo.   La   macro\n              SOCK_EE_OFFENDER  devuelve un puntero a la direcci\u00f3n del objeto de red desde donde se ha originado\n              el error dando un puntero al mensaje  auxiliar.   Si  esta  direcci\u00f3n  se  desconoce,  el  miembro\n              sa_family  de  sockaddr  contiene  AF_UNSPEC y los otros campos de sockaddr quedan indefinidos. El\n              contenido \u00fatil del paquete que ha producido el error se pasa como datos normales.\n\n              Para los errores locales no se pasa ninguna direcci\u00f3n (esto se  puede  comprobar  con  el  miembro\n              cmsg_len  de  cmsghdr).   Para los errores recibidos, se asigna MSG_ERRQUEUE a msghdr.  Despu\u00e9s de\n              que se haya pasado un error, el error de conector pendiente se regenera bas\u00e1ndose en el  siguiente\n              error encolado y se pasar\u00e1 en la siguiente operaci\u00f3n de conectores.\n\n       La  llamada  recvmsg  utiliza  una estructura msghdr para minimizar el n\u00famero de par\u00e1metros suministrados\n       directamente. Esta estructura tiene la forma siguiente, seg\u00fan se define en <sys/socket.h>:\n\n              struct msghdr {\n                  void         * msg_name;     /* direcci\u00f3n opcional */\n                  socklen_t    msg_namelen;    /* tama\u00f1o de la direcci\u00f3n */\n                  struct iovec * msg_iov;      /* vector dispersar/agrupar */\n                  size_t       msg_iovlen;     /* n\u00ba de elementos en msg_iov */\n                  void         * msg_control;  /* datos auxiliares, ver m\u00e1s abajo */\n                  socklen_t    msg_controllen; /* long buffer datos auxiliares */\n                  int          msg_flags;      /* opciones en mensaje recibido */\n              };\n\n       Aqu\u00ed msg_name y msg_namelen especifican la direcci\u00f3n de origen si el conector est\u00e1 desconectado; msg_name\n       puede  darse  como  un puntero nulo si no se desean o requieren nombres.  Los campos msg_iov y msg_iovlen\n       describen localizaciones dispersar/agrupar, como se discute en readv(2).  El campo msg_control, que tiene\n       de longitud msg_controllen, apunta a un b\u00fafer para otros mensajes relacionados con control de protocolo o\n       para datos auxiliares diversos. Cuando se llama a recvmsg, msg_controllen debe contener la  longitud  del\n       buffer  disponible  en  msg_control;  a  la  vuelta  de una llamada con \u00e9xito contendr\u00e1 la longitud de la\n       secuencia de mensajes de control.\n\n       Los mensajes son de la forma:\n\n              struct cmsghdr {\n                  socklen_t   cmsg_len;   /* N\u00ba de byte de datos, incluye cab. */\n                  int         cmsg_level; /* protocolo originante */\n                  int         cmsg_type;  /* tipo espec\u00edfico del protocolo */\n                                          /* seguido por\n                  u_char      cmsg_data[]; */\n              };\n\n       Los datos auxiliares s\u00f3lo deber\u00edan ser accedidos mediante las macros definidas en cmsg(3).\n\n       Como ejemplo, Linux usa este mecanismo de datos auxiliares para pasar errores ampliados,  opciones  IP  o\n       descriptores de fichero mediante conectores Unix.\n\n       El  contenido  del  campo  msg_flags  en  msghdr  se  establece cuando recvmsg() regresa.  Puede contener\n       numerosas opciones:\n\n       MSG_EOR\n              indica fin-de-registro; los datos devueltos completaron un  registro  (generalmente  empleado  con\n              conectores del tipo SOCK_SEQPACKET).\n\n       MSG_TRUNC\n              indica  que  la  porci\u00f3n  trasera  de  un datagrama ha sido descartada porque el datagrama era m\u00e1s\n              grande que el b\u00fafer suministrado.\n\n       MSG_CTRUNC\n              indica que alg\u00fan dato de control ha sido descartado debido a la falta de espacio en el b\u00fafer  para\n              datos auxiliares.\n\n       MSG_OOB\n              se devuelve para indicar que se han recibido datos despachados prontamente o fuera-de-banda.\n\n       MSG_ERRQUEUE\n              indica  que  no  se  ha  recibido  ning\u00fan  dato  sino  un  error ampliado de la cola de errores de\n              conectores.\n\n       MSG_DONTWAIT\n              Permite operaciones no-bloqueantes; si la operaci\u00f3n se bloqueara, se devolver\u00eda EAGAIN (tambi\u00e9n se\n              puede conseguir \u00e9sto usando la opci\u00f3n O_NONBLOCK con F_SETFL fcntl(2)).\n\nVALOR DEVUELTO\n       Estas llamadas devuelven el n\u00famero de bytes recibidos, o bien -1 en caso de que ocurriera un error.\n\n", "ERRORES": "       Estos  son algunos errores est\u00e1ndares generados por la capa de conectores.  Los modulos de los protocolos\n       subyacentes pueden generar y devolver errores adicionales. Consulte sus p\u00e1ginas de manual.\n\n       EBADF  El argumento s es un descriptor inv\u00e1lido.\n\n       ECONNREFUSED\n              Un host remoto no permite la conexi\u00f3n de red (normalmente porque no est\u00e1  ejecutando  el  servicio\n              solicitado).\n\n       ENOTCONN\n              El  conector  est\u00e1  asociado  con un protocolo orientado a la conexi\u00f3n y no ha sido conectado (vea\n              connect(2) y accept(2)).\n\n       ENOTSOCK\n              El argumento s no se refiere a un conector.\n\n       EAGAIN El conector est\u00e1 marcado como no-bloqueante, y la operaci\u00f3n de recepci\u00f3n producir\u00eda un bloqueo,  o\n              se  ha  puesto  un  l\u00edmite  de  tiempo en la recepci\u00f3n, que ha expirado antes de que se recibieran\n              datos.\n\n       EINTR  La recepci\u00f3n ha sido interrumpida por la llegada de una se\u00f1al antes  de  que  hubiera  alg\u00fan  dato\n              disponible.\n\n       EFAULT El puntero a b\u00fafer de recepci\u00f3n (o punteros) apunta afuera del espacio de direcciones del proceso.\n\n       EINVAL Se ha pasado un argumento inv\u00e1lido.\n\nCONFORME A\n       4.4BSD (estas funciones aparecieron por primera vez en 4.2BSD).\n\n", "NOTA": "       Los  prototipos  datos  anteriormente  siguen  a  glibc2.  The Single Unix Specification coincide en todo\n       excepto en que el tipo de los valores devueltos es `ssize_t' (mientras que BSD 4.*, libc4 y libc5  tienen\n       `int').   El  argumento  flags  es  un  `int'  en BSD 4.* pero es un `unsigned int' en libc4 y libc5.  El\n       argumento lon es un `int' en BSD 4.* pero es un `size_t' en libc4 y libc5.  El argumento londesde  es  un\n       `int'  en  BSD  4.*,  libc4  y  libc5.   El  actual  `socklen_t  *' fue inventado por POSIX.  Vea tambi\u00e9n\n       accept(2).\n\nV\u00c9ASE TAMBI\u00c9N\n       fcntl(2), read(2), select(2), getsockopt(2), socket(2), cmsg(3)\n\nP\u00e1gina man de Linux                             31 diciembre 2002                                        RECV(2)\n"},{"NOMBRE": "       recv, recvfrom, recvmsg - reciben un mensaje desde un conector\n\n", "SINOPSIS": "       #include <sys/types.h>\n       #include <sys/socket.h>\n\n       ssize_t recv(int s, void *buf, size_t lon, int flags);\n\n       ssize_t recvfrom(int s, void *buf, size_t lon, int flags, struct sockaddr *desde, socklen_t *londesde);\n\n       ssize_t recvmsg(int s, struct msghdr *msg, int flags);\n\n", "DESCRIPCION": "       Las llamadas recvfrom y recvmsg se emplean para recibir mensajes desde un conector (``socket''), y pueden\n       utilizarse para recibir datos de un conector sea orientado a conexi\u00f3n o no.\n\n       Si desde no es NULL y el conector no es orientado a conexi\u00f3n, la direcci\u00f3n fuente del mensaje  se  llena.\n       El  argumento  londesde  es  un  par\u00e1metro  por referencia, inicializado al tama\u00f1o del b\u00fafer asociado con\n       desde, y modificado cuando la funci\u00f3n regresa para indicar el tama\u00f1o real de la direcci\u00f3n guardada ah\u00ed.\n\n       La llamada a recv se utiliza normalmente s\u00f3lo en un conector conectado (vea connect(2)) y es  id\u00e9ntica  a\n       recvfrom con un par\u00e1metro desde con valor NULL.\n\n       Las  tres  rutinas  devuelven  la  longitud del mensaje cuando terminan bien.  Si un mensaje es demasiado\n       largo como para caber en el b\u00fafer suministrado, los bytes que sobran pueden descartarse  dependiendo  del\n       tipo de conector del que se reciba el mensaje (vea socket(2)).\n\n       Si no hay mensajes disponibles en el conector, las llamadas de recepci\u00f3n esperan que llegue un mensaje, a\n       menos que el conector sea no bloqueante (vea fcntl(2)) en cuyo caso se devuelve el valor -1 y la variable\n       externa  errno  toma  el  valor  EAGAIN.   Las llamadas de recepci\u00f3n devuelven normalmente cualquier dato\n       disponible, hasta la cantidad pedida, en vez de esperar la recepci\u00f3n de la cantidad pedida completa.\n\n       Las llamadas select(2) o poll(2) pueden emplearse para determinar cu\u00e1ndo llegan m\u00e1s datos.\n\n       El argumento flags de una llamada a recv se forma aplicando el operador de bits O-l\u00f3gico a uno o  m\u00e1s  de\n       los valores siguientes:\n\n       MSG_OOB\n              Esta  opci\u00f3n  pide  la recepci\u00f3n de datos fuera-de-banda que no se recibir\u00edan en el flujo de datos\n              normal. Algunos protocolos ponen datos despachados con prontitud en la cabeza de la cola de  datos\n              normales, y as\u00ed, esta opci\u00f3n no puede emplearse con tales protocolos.\n\n       MSG_PEEK\n              Esta  opci\u00f3n  hace  que  la  operaci\u00f3n  de  recepci\u00f3n  devuelva  datos del principio de la cola de\n              recepci\u00f3n sin quitarlos de all\u00ed. As\u00ed, una pr\u00f3xima llamada de recepci\u00f3n devolver\u00e1 los mismos datos.\n\n       MSG_WAITALL\n              Esta opci\u00f3n hace que la operaci\u00f3n se bloquee hasta que se satisfaga la petici\u00f3n completamente. Sin\n              embargo,  la  llamada  puede  a\u00fan  devolver menos datos de los pedidos si se captura una se\u00f1al, si\n              ocurre un error o una desconexi\u00f3n, o si los pr\u00f3ximos datos que se van a recibir  son  de  un  tipo\n              diferente del que se ha devuelto.\n\n       MSG_NOSIGNAL\n              Esta  opci\u00f3n  desactiva  el  que  se  produzca una se\u00f1al SIGPIPE sobre los conectores orientados a\n              conexi\u00f3n cuando el otro extremo desaparece.\n\n       MSG_TRUNC\n              Devuelve la longitud real del paquete, incluso cuando es m\u00e1s  largo  que  el  b\u00fafer  pasado.  Esta\n              opci\u00f3n s\u00f3lo es v\u00e1lida para conectores de paquete.\n\n       MSG_ERRQUEUE\n              Esta  opci\u00f3n  indica  que  los  errores  encolados  deben  recibirse  desde  la cola de errores de\n              conectores.  El error se pasa en un mensaje auxiliar con un tipo dependiente del  protocolo  (para\n              IPv4 \u00e9ste es IP_RECVERR).  El usuario debe proporciona un buffer de tama\u00f1o suficiente. Vea cmsg(3)\n              y ip(7) para obtener m\u00e1s informaci\u00f3n.  El contenido \u00fatil del paquete original que provoc\u00f3 el error\n              se pasa como datos normales a trav\u00e9s de msg_iovec.  La direcci\u00f3n original de destino del datagrama\n              que provoc\u00f3 el error se pasa a trav\u00e9s de msg_name.\n\n              Para errores locales, no se pasa ninguna direcci\u00f3n (\u00e9sto puede comprobarse con el miembro cmsg_len\n              de cmsghdr).  Para los errores recibidos, se asigna MSG_ERRQUEUE a msghdr.  Despu\u00e9s de que se haya\n              pasado un error, el error de conector pendiente  se  regenera  bas\u00e1ndose  en  el  siguiente  error\n              encolado y se pasar\u00e1 en la siguiente operaci\u00f3n de conectores.\n\n              El error se suministra en una estructura sock_extended_err:\n\n              #define SO_EE_ORIGIN_NONE     0\n              #define SO_EE_ORIGIN_LOCAL    1\n              #define SO_EE_ORIGIN_ICMP     2\n              #define SO_EE_ORIGIN_ICMP6    3\n\n              struct sock_extended_err\n              {\n                    u_int32_t   ee_errno;       /* n\u00famero de error */\n                    u_int8_t    ee_origin;      /* origen del error */\n                    u_int8_t    ee_type;        /* tipo */\n                    u_int8_t    ee_code;        /* c\u00f3digo */\n                    u_int8_t    ee_pad;\n                    u_int32_t   ee_info;        /* informaci\u00f3n adicional */\n                    u_int32_t   ee_data;        /* otros datos */\n                    /* Pueden ir m\u00e1s datos a continuaci\u00f3n .*/\n              };\n\n              struct sockaddr *SO_EE_OFFENDER(struct sock_extended_err *);\n\n              ee_errno  contiene el n\u00famero errno del error encolado.  ee_origin es el c\u00f3digo del origen en donde\n              se  ha  originado  el  error.   Los  otros  campos  son  espec\u00edficos  del  protocolo.   La   macro\n              SOCK_EE_OFFENDER  devuelve un puntero a la direcci\u00f3n del objeto de red desde donde se ha originado\n              el error dando un puntero al mensaje  auxiliar.   Si  esta  direcci\u00f3n  se  desconoce,  el  miembro\n              sa_family  de  sockaddr  contiene  AF_UNSPEC y los otros campos de sockaddr quedan indefinidos. El\n              contenido \u00fatil del paquete que ha producido el error se pasa como datos normales.\n\n              Para los errores locales no se pasa ninguna direcci\u00f3n (esto se  puede  comprobar  con  el  miembro\n              cmsg_len  de  cmsghdr).   Para los errores recibidos, se asigna MSG_ERRQUEUE a msghdr.  Despu\u00e9s de\n              que se haya pasado un error, el error de conector pendiente se regenera bas\u00e1ndose en el  siguiente\n              error encolado y se pasar\u00e1 en la siguiente operaci\u00f3n de conectores.\n\n       La  llamada  recvmsg  utiliza  una estructura msghdr para minimizar el n\u00famero de par\u00e1metros suministrados\n       directamente. Esta estructura tiene la forma siguiente, seg\u00fan se define en <sys/socket.h>:\n\n              struct msghdr {\n                  void         * msg_name;     /* direcci\u00f3n opcional */\n                  socklen_t    msg_namelen;    /* tama\u00f1o de la direcci\u00f3n */\n                  struct iovec * msg_iov;      /* vector dispersar/agrupar */\n                  size_t       msg_iovlen;     /* n\u00ba de elementos en msg_iov */\n                  void         * msg_control;  /* datos auxiliares, ver m\u00e1s abajo */\n                  socklen_t    msg_controllen; /* long buffer datos auxiliares */\n                  int          msg_flags;      /* opciones en mensaje recibido */\n              };\n\n       Aqu\u00ed msg_name y msg_namelen especifican la direcci\u00f3n de origen si el conector est\u00e1 desconectado; msg_name\n       puede  darse  como  un puntero nulo si no se desean o requieren nombres.  Los campos msg_iov y msg_iovlen\n       describen localizaciones dispersar/agrupar, como se discute en readv(2).  El campo msg_control, que tiene\n       de longitud msg_controllen, apunta a un b\u00fafer para otros mensajes relacionados con control de protocolo o\n       para datos auxiliares diversos. Cuando se llama a recvmsg, msg_controllen debe contener la  longitud  del\n       buffer  disponible  en  msg_control;  a  la  vuelta  de una llamada con \u00e9xito contendr\u00e1 la longitud de la\n       secuencia de mensajes de control.\n\n       Los mensajes son de la forma:\n\n              struct cmsghdr {\n                  socklen_t   cmsg_len;   /* N\u00ba de byte de datos, incluye cab. */\n                  int         cmsg_level; /* protocolo originante */\n                  int         cmsg_type;  /* tipo espec\u00edfico del protocolo */\n                                          /* seguido por\n                  u_char      cmsg_data[]; */\n              };\n\n       Los datos auxiliares s\u00f3lo deber\u00edan ser accedidos mediante las macros definidas en cmsg(3).\n\n       Como ejemplo, Linux usa este mecanismo de datos auxiliares para pasar errores ampliados,  opciones  IP  o\n       descriptores de fichero mediante conectores Unix.\n\n       El  contenido  del  campo  msg_flags  en  msghdr  se  establece cuando recvmsg() regresa.  Puede contener\n       numerosas opciones:\n\n       MSG_EOR\n              indica fin-de-registro; los datos devueltos completaron un  registro  (generalmente  empleado  con\n              conectores del tipo SOCK_SEQPACKET).\n\n       MSG_TRUNC\n              indica  que  la  porci\u00f3n  trasera  de  un datagrama ha sido descartada porque el datagrama era m\u00e1s\n              grande que el b\u00fafer suministrado.\n\n       MSG_CTRUNC\n              indica que alg\u00fan dato de control ha sido descartado debido a la falta de espacio en el b\u00fafer  para\n              datos auxiliares.\n\n       MSG_OOB\n              se devuelve para indicar que se han recibido datos despachados prontamente o fuera-de-banda.\n\n       MSG_ERRQUEUE\n              indica  que  no  se  ha  recibido  ning\u00fan  dato  sino  un  error ampliado de la cola de errores de\n              conectores.\n\n       MSG_DONTWAIT\n              Permite operaciones no-bloqueantes; si la operaci\u00f3n se bloqueara, se devolver\u00eda EAGAIN (tambi\u00e9n se\n              puede conseguir \u00e9sto usando la opci\u00f3n O_NONBLOCK con F_SETFL fcntl(2)).\n\nVALOR DEVUELTO\n       Estas llamadas devuelven el n\u00famero de bytes recibidos, o bien -1 en caso de que ocurriera un error.\n\n", "ERRORES": "       Estos  son algunos errores est\u00e1ndares generados por la capa de conectores.  Los modulos de los protocolos\n       subyacentes pueden generar y devolver errores adicionales. Consulte sus p\u00e1ginas de manual.\n\n       EBADF  El argumento s es un descriptor inv\u00e1lido.\n\n       ECONNREFUSED\n              Un host remoto no permite la conexi\u00f3n de red (normalmente porque no est\u00e1  ejecutando  el  servicio\n              solicitado).\n\n       ENOTCONN\n              El  conector  est\u00e1  asociado  con un protocolo orientado a la conexi\u00f3n y no ha sido conectado (vea\n              connect(2) y accept(2)).\n\n       ENOTSOCK\n              El argumento s no se refiere a un conector.\n\n       EAGAIN El conector est\u00e1 marcado como no-bloqueante, y la operaci\u00f3n de recepci\u00f3n producir\u00eda un bloqueo,  o\n              se  ha  puesto  un  l\u00edmite  de  tiempo en la recepci\u00f3n, que ha expirado antes de que se recibieran\n              datos.\n\n       EINTR  La recepci\u00f3n ha sido interrumpida por la llegada de una se\u00f1al antes  de  que  hubiera  alg\u00fan  dato\n              disponible.\n\n       EFAULT El puntero a b\u00fafer de recepci\u00f3n (o punteros) apunta afuera del espacio de direcciones del proceso.\n\n       EINVAL Se ha pasado un argumento inv\u00e1lido.\n\nCONFORME A\n       4.4BSD (estas funciones aparecieron por primera vez en 4.2BSD).\n\n", "NOTA": "       Los  prototipos  datos  anteriormente  siguen  a  glibc2.  The Single Unix Specification coincide en todo\n       excepto en que el tipo de los valores devueltos es `ssize_t' (mientras que BSD 4.*, libc4 y libc5  tienen\n       `int').   El  argumento  flags  es  un  `int'  en BSD 4.* pero es un `unsigned int' en libc4 y libc5.  El\n       argumento lon es un `int' en BSD 4.* pero es un `size_t' en libc4 y libc5.  El argumento londesde  es  un\n       `int'  en  BSD  4.*,  libc4  y  libc5.   El  actual  `socklen_t  *' fue inventado por POSIX.  Vea tambi\u00e9n\n       accept(2).\n\nV\u00c9ASE TAMBI\u00c9N\n       fcntl(2), read(2), select(2), getsockopt(2), socket(2), cmsg(3)\n\nP\u00e1gina man de Linux                             31 diciembre 2002                                        RECV(2)\n"},{"NOMBRE": "       recv, recvfrom, recvmsg - reciben un mensaje desde un conector\n\n", "SINOPSIS": "       #include <sys/types.h>\n       #include <sys/socket.h>\n\n       ssize_t recv(int s, void *buf, size_t lon, int flags);\n\n       ssize_t recvfrom(int s, void *buf, size_t lon, int flags, struct sockaddr *desde, socklen_t *londesde);\n\n       ssize_t recvmsg(int s, struct msghdr *msg, int flags);\n\n", "DESCRIPCION": "       Las llamadas recvfrom y recvmsg se emplean para recibir mensajes desde un conector (``socket''), y pueden\n       utilizarse para recibir datos de un conector sea orientado a conexi\u00f3n o no.\n\n       Si desde no es NULL y el conector no es orientado a conexi\u00f3n, la direcci\u00f3n fuente del mensaje  se  llena.\n       El  argumento  londesde  es  un  par\u00e1metro  por referencia, inicializado al tama\u00f1o del b\u00fafer asociado con\n       desde, y modificado cuando la funci\u00f3n regresa para indicar el tama\u00f1o real de la direcci\u00f3n guardada ah\u00ed.\n\n       La llamada a recv se utiliza normalmente s\u00f3lo en un conector conectado (vea connect(2)) y es  id\u00e9ntica  a\n       recvfrom con un par\u00e1metro desde con valor NULL.\n\n       Las  tres  rutinas  devuelven  la  longitud del mensaje cuando terminan bien.  Si un mensaje es demasiado\n       largo como para caber en el b\u00fafer suministrado, los bytes que sobran pueden descartarse  dependiendo  del\n       tipo de conector del que se reciba el mensaje (vea socket(2)).\n\n       Si no hay mensajes disponibles en el conector, las llamadas de recepci\u00f3n esperan que llegue un mensaje, a\n       menos que el conector sea no bloqueante (vea fcntl(2)) en cuyo caso se devuelve el valor -1 y la variable\n       externa  errno  toma  el  valor  EAGAIN.   Las llamadas de recepci\u00f3n devuelven normalmente cualquier dato\n       disponible, hasta la cantidad pedida, en vez de esperar la recepci\u00f3n de la cantidad pedida completa.\n\n       Las llamadas select(2) o poll(2) pueden emplearse para determinar cu\u00e1ndo llegan m\u00e1s datos.\n\n       El argumento flags de una llamada a recv se forma aplicando el operador de bits O-l\u00f3gico a uno o  m\u00e1s  de\n       los valores siguientes:\n\n       MSG_OOB\n              Esta  opci\u00f3n  pide  la recepci\u00f3n de datos fuera-de-banda que no se recibir\u00edan en el flujo de datos\n              normal. Algunos protocolos ponen datos despachados con prontitud en la cabeza de la cola de  datos\n              normales, y as\u00ed, esta opci\u00f3n no puede emplearse con tales protocolos.\n\n       MSG_PEEK\n              Esta  opci\u00f3n  hace  que  la  operaci\u00f3n  de  recepci\u00f3n  devuelva  datos del principio de la cola de\n              recepci\u00f3n sin quitarlos de all\u00ed. As\u00ed, una pr\u00f3xima llamada de recepci\u00f3n devolver\u00e1 los mismos datos.\n\n       MSG_WAITALL\n              Esta opci\u00f3n hace que la operaci\u00f3n se bloquee hasta que se satisfaga la petici\u00f3n completamente. Sin\n              embargo,  la  llamada  puede  a\u00fan  devolver menos datos de los pedidos si se captura una se\u00f1al, si\n              ocurre un error o una desconexi\u00f3n, o si los pr\u00f3ximos datos que se van a recibir  son  de  un  tipo\n              diferente del que se ha devuelto.\n\n       MSG_NOSIGNAL\n              Esta  opci\u00f3n  desactiva  el  que  se  produzca una se\u00f1al SIGPIPE sobre los conectores orientados a\n              conexi\u00f3n cuando el otro extremo desaparece.\n\n       MSG_TRUNC\n              Devuelve la longitud real del paquete, incluso cuando es m\u00e1s  largo  que  el  b\u00fafer  pasado.  Esta\n              opci\u00f3n s\u00f3lo es v\u00e1lida para conectores de paquete.\n\n       MSG_ERRQUEUE\n              Esta  opci\u00f3n  indica  que  los  errores  encolados  deben  recibirse  desde  la cola de errores de\n              conectores.  El error se pasa en un mensaje auxiliar con un tipo dependiente del  protocolo  (para\n              IPv4 \u00e9ste es IP_RECVERR).  El usuario debe proporciona un buffer de tama\u00f1o suficiente. Vea cmsg(3)\n              y ip(7) para obtener m\u00e1s informaci\u00f3n.  El contenido \u00fatil del paquete original que provoc\u00f3 el error\n              se pasa como datos normales a trav\u00e9s de msg_iovec.  La direcci\u00f3n original de destino del datagrama\n              que provoc\u00f3 el error se pasa a trav\u00e9s de msg_name.\n\n              Para errores locales, no se pasa ninguna direcci\u00f3n (\u00e9sto puede comprobarse con el miembro cmsg_len\n              de cmsghdr).  Para los errores recibidos, se asigna MSG_ERRQUEUE a msghdr.  Despu\u00e9s de que se haya\n              pasado un error, el error de conector pendiente  se  regenera  bas\u00e1ndose  en  el  siguiente  error\n              encolado y se pasar\u00e1 en la siguiente operaci\u00f3n de conectores.\n\n              El error se suministra en una estructura sock_extended_err:\n\n              #define SO_EE_ORIGIN_NONE     0\n              #define SO_EE_ORIGIN_LOCAL    1\n              #define SO_EE_ORIGIN_ICMP     2\n              #define SO_EE_ORIGIN_ICMP6    3\n\n              struct sock_extended_err\n              {\n                    u_int32_t   ee_errno;       /* n\u00famero de error */\n                    u_int8_t    ee_origin;      /* origen del error */\n                    u_int8_t    ee_type;        /* tipo */\n                    u_int8_t    ee_code;        /* c\u00f3digo */\n                    u_int8_t    ee_pad;\n                    u_int32_t   ee_info;        /* informaci\u00f3n adicional */\n                    u_int32_t   ee_data;        /* otros datos */\n                    /* Pueden ir m\u00e1s datos a continuaci\u00f3n .*/\n              };\n\n              struct sockaddr *SO_EE_OFFENDER(struct sock_extended_err *);\n\n              ee_errno  contiene el n\u00famero errno del error encolado.  ee_origin es el c\u00f3digo del origen en donde\n              se  ha  originado  el  error.   Los  otros  campos  son  espec\u00edficos  del  protocolo.   La   macro\n              SOCK_EE_OFFENDER  devuelve un puntero a la direcci\u00f3n del objeto de red desde donde se ha originado\n              el error dando un puntero al mensaje  auxiliar.   Si  esta  direcci\u00f3n  se  desconoce,  el  miembro\n              sa_family  de  sockaddr  contiene  AF_UNSPEC y los otros campos de sockaddr quedan indefinidos. El\n              contenido \u00fatil del paquete que ha producido el error se pasa como datos normales.\n\n              Para los errores locales no se pasa ninguna direcci\u00f3n (esto se  puede  comprobar  con  el  miembro\n              cmsg_len  de  cmsghdr).   Para los errores recibidos, se asigna MSG_ERRQUEUE a msghdr.  Despu\u00e9s de\n              que se haya pasado un error, el error de conector pendiente se regenera bas\u00e1ndose en el  siguiente\n              error encolado y se pasar\u00e1 en la siguiente operaci\u00f3n de conectores.\n\n       La  llamada  recvmsg  utiliza  una estructura msghdr para minimizar el n\u00famero de par\u00e1metros suministrados\n       directamente. Esta estructura tiene la forma siguiente, seg\u00fan se define en <sys/socket.h>:\n\n              struct msghdr {\n                  void         * msg_name;     /* direcci\u00f3n opcional */\n                  socklen_t    msg_namelen;    /* tama\u00f1o de la direcci\u00f3n */\n                  struct iovec * msg_iov;      /* vector dispersar/agrupar */\n                  size_t       msg_iovlen;     /* n\u00ba de elementos en msg_iov */\n                  void         * msg_control;  /* datos auxiliares, ver m\u00e1s abajo */\n                  socklen_t    msg_controllen; /* long buffer datos auxiliares */\n                  int          msg_flags;      /* opciones en mensaje recibido */\n              };\n\n       Aqu\u00ed msg_name y msg_namelen especifican la direcci\u00f3n de origen si el conector est\u00e1 desconectado; msg_name\n       puede  darse  como  un puntero nulo si no se desean o requieren nombres.  Los campos msg_iov y msg_iovlen\n       describen localizaciones dispersar/agrupar, como se discute en readv(2).  El campo msg_control, que tiene\n       de longitud msg_controllen, apunta a un b\u00fafer para otros mensajes relacionados con control de protocolo o\n       para datos auxiliares diversos. Cuando se llama a recvmsg, msg_controllen debe contener la  longitud  del\n       buffer  disponible  en  msg_control;  a  la  vuelta  de una llamada con \u00e9xito contendr\u00e1 la longitud de la\n       secuencia de mensajes de control.\n\n       Los mensajes son de la forma:\n\n              struct cmsghdr {\n                  socklen_t   cmsg_len;   /* N\u00ba de byte de datos, incluye cab. */\n                  int         cmsg_level; /* protocolo originante */\n                  int         cmsg_type;  /* tipo espec\u00edfico del protocolo */\n                                          /* seguido por\n                  u_char      cmsg_data[]; */\n              };\n\n       Los datos auxiliares s\u00f3lo deber\u00edan ser accedidos mediante las macros definidas en cmsg(3).\n\n       Como ejemplo, Linux usa este mecanismo de datos auxiliares para pasar errores ampliados,  opciones  IP  o\n       descriptores de fichero mediante conectores Unix.\n\n       El  contenido  del  campo  msg_flags  en  msghdr  se  establece cuando recvmsg() regresa.  Puede contener\n       numerosas opciones:\n\n       MSG_EOR\n              indica fin-de-registro; los datos devueltos completaron un  registro  (generalmente  empleado  con\n              conectores del tipo SOCK_SEQPACKET).\n\n       MSG_TRUNC\n              indica  que  la  porci\u00f3n  trasera  de  un datagrama ha sido descartada porque el datagrama era m\u00e1s\n              grande que el b\u00fafer suministrado.\n\n       MSG_CTRUNC\n              indica que alg\u00fan dato de control ha sido descartado debido a la falta de espacio en el b\u00fafer  para\n              datos auxiliares.\n\n       MSG_OOB\n              se devuelve para indicar que se han recibido datos despachados prontamente o fuera-de-banda.\n\n       MSG_ERRQUEUE\n              indica  que  no  se  ha  recibido  ning\u00fan  dato  sino  un  error ampliado de la cola de errores de\n              conectores.\n\n       MSG_DONTWAIT\n              Permite operaciones no-bloqueantes; si la operaci\u00f3n se bloqueara, se devolver\u00eda EAGAIN (tambi\u00e9n se\n              puede conseguir \u00e9sto usando la opci\u00f3n O_NONBLOCK con F_SETFL fcntl(2)).\n\nVALOR DEVUELTO\n       Estas llamadas devuelven el n\u00famero de bytes recibidos, o bien -1 en caso de que ocurriera un error.\n\n", "ERRORES": "       Estos  son algunos errores est\u00e1ndares generados por la capa de conectores.  Los modulos de los protocolos\n       subyacentes pueden generar y devolver errores adicionales. Consulte sus p\u00e1ginas de manual.\n\n       EBADF  El argumento s es un descriptor inv\u00e1lido.\n\n       ECONNREFUSED\n              Un host remoto no permite la conexi\u00f3n de red (normalmente porque no est\u00e1  ejecutando  el  servicio\n              solicitado).\n\n       ENOTCONN\n              El  conector  est\u00e1  asociado  con un protocolo orientado a la conexi\u00f3n y no ha sido conectado (vea\n              connect(2) y accept(2)).\n\n       ENOTSOCK\n              El argumento s no se refiere a un conector.\n\n       EAGAIN El conector est\u00e1 marcado como no-bloqueante, y la operaci\u00f3n de recepci\u00f3n producir\u00eda un bloqueo,  o\n              se  ha  puesto  un  l\u00edmite  de  tiempo en la recepci\u00f3n, que ha expirado antes de que se recibieran\n              datos.\n\n       EINTR  La recepci\u00f3n ha sido interrumpida por la llegada de una se\u00f1al antes  de  que  hubiera  alg\u00fan  dato\n              disponible.\n\n       EFAULT El puntero a b\u00fafer de recepci\u00f3n (o punteros) apunta afuera del espacio de direcciones del proceso.\n\n       EINVAL Se ha pasado un argumento inv\u00e1lido.\n\nCONFORME A\n       4.4BSD (estas funciones aparecieron por primera vez en 4.2BSD).\n\n", "NOTA": "       Los  prototipos  datos  anteriormente  siguen  a  glibc2.  The Single Unix Specification coincide en todo\n       excepto en que el tipo de los valores devueltos es `ssize_t' (mientras que BSD 4.*, libc4 y libc5  tienen\n       `int').   El  argumento  flags  es  un  `int'  en BSD 4.* pero es un `unsigned int' en libc4 y libc5.  El\n       argumento lon es un `int' en BSD 4.* pero es un `size_t' en libc4 y libc5.  El argumento londesde  es  un\n       `int'  en  BSD  4.*,  libc4  y  libc5.   El  actual  `socklen_t  *' fue inventado por POSIX.  Vea tambi\u00e9n\n       accept(2).\n\nV\u00c9ASE TAMBI\u00c9N\n       fcntl(2), read(2), select(2), getsockopt(2), socket(2), cmsg(3)\n\nP\u00e1gina man de Linux                             31 diciembre 2002                                        RECV(2)\n"},{"NOMBRE": "       rename - rename files\n\n", "SINOPSIS": "       rename [options] expression replacement file...\n\n", "DESCRIPCION": "       rename  will  rename the specified files by replacing the first occurrence of expression in their name by\n       replacement.\n\n", "OPCIONES": "       -s, --symlink\n              Do not rename a symlink but its target.\n\n       -v, --verbose\n              Show which files were renamed, if any.\n\n       -n, --no-act\n              Do not make any changes; add --verbose to see what would be made.\n\n       -o, --no-overwrite\n              Do not overwrite existing files.  When --symlink is active, do not overwrite symlinks pointing  to\n              existing targets.\n\n       -i, --interactive\n              Ask before overwriting existing files.\n\n       -V, --version\n              Display version information and exit.\n\n       -h, --help\n              Display help text and exit.\n\n", "ADVERTENCIA": "       The renaming has no safeguards by default or without any one of the options --no-overwrite, --interactive\n       or --no-act.  If the user has permission to rewrite file names, the command will perform the action with\u2010\n       out  any  questions.  For example, the result can be quite drastic when the command is run as root in the\n       /lib directory.  Always make a backup before running the command, unless you truly know what you are  do\u2010\n       ing.\n\nINTERACTIVE MODE\n       As  most  standard  utilities rename can be used with a terminal device (tty in short) in canonical mode,\n       where the line is buffered by the tty and you press ENTER to validate the user input.  If  you  put  your\n       tty  in cbreak mode however, rename requires only a single key press to answer the prompt.  To set cbreak\n       mode, run for example:\n\n              sh -c 'stty -icanon min 1; \"$0\" \"$@\"; stty icanon' rename -i from to files\n\nEXIT STATUS\n              0      all requested rename operations were successful\n              1      all rename operations failed\n              2      some rename operations failed\n              4      nothing was renamed\n              64     unanticipated error occurred\n\n", "EJEMPLOS": "       Given the files foo1, ..., foo9, foo10, ..., foo278, the commands\n\n              rename foo foo00 foo?\n              rename foo foo0 foo??\n\n       will turn them into foo001, ..., foo009, foo010, ..., foo278.  And\n\n              rename .htm .html *.htm\n\n       will fix the extension of your html files.  Provide an empty string for shortening:\n\n              rename '_with_long_name' '' file_with_long_name.*\n\n       will remove the substring in the filenames.\n\nSEE ALSO\n       mv(1)\n\n", "DISPONIBILIDAD": "       The  rename  command  is  part  of  the  util-linux  package  and  is  available  from   https://www.ker\u2010\n       nel.org/pub/linux/utils/util-linux/.\n\nutil-linux                                          June 2011                                          RENAME(1)\n"},{"NOMBRE": "       rmdir - borra directorios vac\u00edos\n\n", "SINOPSIS": "       rmdir [opciones] directorio...\n\n       Opciones de POSIX: [-p]\n\n       Opciones de GNU (en la forma m\u00e1s corta): [-p] [--ignore-fail-on-non-empty] [--help] [--version] [--]\n\n", "DESCRIPCION": "       rmdir borra directorios vac\u00edos.\n\n       Si un argumento directorio no se refiere a un directorio existente y vac\u00edo, es un error.\n\nOPCIONES DE POSIX\n       -p     Si  directorio  incluye  m\u00e1s  de  un  componente  en  el  camino,  lo borra, luego quita el \u00faltimo\n              componente y borra el directorio resultante, etc., hasta que  todos  los  componentes  hayan  sido\n              eliminados. As\u00ed, `rmdir -p a/b/c' es equivalente a `rmdir a/b/c; rmdir a/b; rmdir a'.\n\nOPCIONES DE GNU\n       --ignore-fail-on-non-empty\n              Normalmente,  rmdir  rehusar\u00e1  elminar un directorio que no est\u00e1 vac\u00edo. Esta opci\u00f3n hace que rmdir\n              ignore el fallo para eliminar el directorio, si ese fallo se debe a  que  el  directorio  no  est\u00e1\n              vac\u00edo.  (Nueva en fileutils-4.0.)\n\n       -p, --parents\n              Como se acaba de explicar arriba.\n\nOPCIONES EST\u00c1NDARES DE GNU\n       --help Muestra un mensaje en la salida est\u00e1ndar sobre el modo de empleo y acaba con c\u00f3digo de \u00e9xito.\n\n       --version\n              Muestra en la salida est\u00e1ndar informaci\u00f3n sobre la versi\u00f3n y luego acaba con c\u00f3digo de \u00e9xito.\n\n       --     Termina la lista de opciones.\n\n", "ENTORNO": "       Las variables LANG, LC_ALL, LC_COLLATE, LC_CTYPE y LC_MESSAGES tienen los significados usuales.\n\nCONFORME A\n       POSIX 1003.2.\n\nEJEMPLO DE UTILIZACI\u00d3N\n       La  orden  `rmdir fuu' borrar\u00e1 el directorio fuu si est\u00e1 vac\u00edo. Para borrar un directorio no vac\u00edo, junto\n       con todo lo que tenga debajo, emplee `rm -r fuu'.\n\n", "OBSERVACIONES": "       Esta p\u00e1gina describe rmdir seg\u00fan se encuentra en el paquete fileutils-4.0; otras versiones pueden diferir\n       un  poco.  Env\u00ede  por  correo electr\u00f3nico correcciones y adiciones a la direcci\u00f3n aeb@cwi.nl.  Informe de\n       fallos en el programa a fileutils-bugs@gnu.ai.mit.edu.\n\nGNU fileutils 4.0                               Noviembre de 1998                                       RMDIR(1)\n"},{"NOMBRE": "       brk, sbrk - cambia el tama\u00f1o del segmento de datos\n\n", "SINOPSIS": "       #include <unistd.h>\n\n       int brk(void *end_data_segment);\n       void *sbrk(ptrdiff_t increment);\n\n", "DESCRIPCION": "       brk  establece  el  final  del  segmento de datos al valor especificado por end_data_segment, cuando este\n       valor es razonable, el sistema dispone de suficiente memoria y el proceso no excede su l\u00edmite m\u00e1ximo para\n       datos (v\u00e9ase setrlimit(2)).\n\n       sbrk aumenta el espacio de datos del programa en increment bytes.  sbrk no es una llamada del sistema, es\n       simplemente un envoltorio (`wrapper') de la biblioteca de C.  Se puede llamar a sbrk con un incremento de\n       0 para averiguar la direcci\u00f3n actual del comienzo de la zona de memoria din\u00e1mica del segumento de datos.\n\nVALOR DEVUELTO\n       En  caso  de  \u00e9xito,  brk  devuelve  cero, y sbrk da un puntero al principio de la nueva \u00e1rea. En caso de\n       error, la funci\u00f3n devuelve -1, y en errno se coloca el valor ENOMEM.\n\nCONFORME A\n       BSD 4.3 brk y sbrk no est\u00e1n definidos en el est\u00e1ndar de C y est\u00e1n excluidos deliberadamente del  est\u00e1ndar\n       POSIX.1 (v\u00e9anse los p\u00e1rrafos B.1.1.1.3 y B.8.3.3).\n\nV\u00c9ASE TAMBI\u00c9N\n       execve(2), getrlimit(2), malloc(3)\n\nLinux 0.99.11                                     30 junio 1996                                           BRK(2)\n"},{"NOMBRE": "       sched_setaffinity, sched_getaffinity - establece y obtiene la m\u00e1scara de afinidad de CPU de un proceso\n\n", "SINOPSIS": "       #include <sched.h>\n\n       int sched_setaffinity(pid_t pid, unsigned int len, unsigned long *mask);\n\n       int sched_getaffinity(pid_t pid, unsigned int len, unsigned long *mask);\n\n", "DESCRIPCION": "       sched_setaffinity  establece  la  m\u00e1scara de afinidad de CPU del proceso identificado por pid.  Si pid es\n       cero, se asume el proceso en curso.\n\n       La m\u00e1scara de afinidad est\u00e1 representada por la m\u00e1scara  de  bits  almacenada  en  mask.   El  bit  menos\n       significativo  corresponde  al n\u00famero del primer procesador l\u00f3gico en el sistema, mientras que el bit m\u00e1s\n       significativo corresponde al n\u00famero del \u00faltimo procesador l\u00f3gico en el sistema. Un bit a 1 se corresponde\n       con  una  CPU  leg\u00edtimamente  planificable  mientras  que un bit a 0 se corresponde con una CPU que no es\n       leg\u00edtimamente planificable. En otras palabras, un proceso est\u00e1 ligado y s\u00f3lo  se  ejecutar\u00e1  en  aquellos\n       procesadores cuyo bit est\u00e9 activo. Normalmente todos los bits de la m\u00e1scara est\u00e1n activos.\n\n       El argumento len representa la longitud de los datos a los que apunta mask.  Normalmente este valor es el\n       tama\u00f1o de una palabra en el sistema. Por razones de compatibilidad con futuras versiones  del  n\u00facleo  de\n       Linux,  puesto  que  este  tama\u00f1o  puede  cambiar, la m\u00e1scara de bits proporcionada debe ser al menos tan\n       grande como la m\u00e1scara de afinidad almacenada en el n\u00facleo.\n\n       La funci\u00f3n sched_getaffinity escribe en el puntero proporcionado en mask, cuyo tama\u00f1o es len, la  m\u00e1scara\n       de afinidad del proceso pid.  Si pid es cero, se devuelve la m\u00e1scara del proceso en curso.\n\nVALOR DEVUELTO\n       En  caso de \u00e9xito,, sched_setaffinity y sched_getaffinity devuelven 0.  En caso de error, se devuelve -1,\n       y se modifica errno con el valor apropiado.\n\n", "ERRORES": "       EFAULT La direcci\u00f3n de memoria proporcionada no es v\u00e1lida.\n\n       ESRCH  No se puede encontrar un proceso con identificador pid.\n\n       EPERM  El proceso invocador no tiene los privilegios apropiados. El proceso que llama a sched_setaffinity\n              necesita  que  el  identificador  de usuario efectivo sea igual al identificador de usuario real o\n              efectivo del proceso identificado por pid, o poseer la capacidad CAP_SYS_NICE.\n\n       EINVAL La m\u00e1scara de afinidad mask no contiene procesadores que est\u00e9n f\u00edsicamente  en  el  sistema  o  la\n              longitud len es m\u00e1s peque\u00f1a que el tama\u00f1o de la m\u00e1scara de afinidad usada por el n\u00facleo.\n\nLinux                                           19 noviembre 2002                           SCHED_SETAFFINITY(2)\n"},{"NOMBRE": "       sched_setparam, sched_getparam - pone y obtiene par\u00e1metros de planificaci\u00f3n\n\n", "SINOPSIS": "       #include <sched.h>\n\n       int sched_setparam(pid_t pid, const struct sched_param *p);\n\n       int sched_getparam(pid_t pid, struct sched_param *p);\n\n       struct sched_param {\n           ...\n           int sched_priority;\n           ...\n       };\n\n", "DESCRIPCION": "       sched_setparam  establece los par\u00e1metros de planificaci\u00f3n asociados con la pol\u00edtica de planificaci\u00f3n para\n       el proceso identificado por pid. Si pid es cero, entonces se establecen los  par\u00e1metros  del  proceso  en\n       curso. La interpretaci\u00f3n del par\u00e1metro p depende de la pol\u00edtica seleccionada. Actualmente se admiten bajo\n       Linux las siguientes tres pol\u00edticas de planificaci\u00f3n: SCHED_FIFO, SCHED_RR, y SCHED_OTHER.\n\n       sched_getparam obtiene los par\u00e1metros de planificaci\u00f3n para el proceso identificado por pid.  Si  pid  es\n       cero, entonces se obtienen los par\u00e1metros del proceso en curso.\n\n       sched_setparam  comprueba  la  validez  de  p para la pol\u00edtica de planificaci\u00f3n del proceso. El par\u00e1metro\n       p->sched_priority debe caer en el rango dado por sched_get_priority_min y sched_get_priority_max.\n\n       Los  sistemas  POSIX  en  los   que   est\u00e9n   disponibles   sched_setparam   y   sched_getparam   definen\n       _POSIX_PRIORITY_SCHEDULING en <unistd.h>.\n\nVALOR DEVUELTO\n       En  caso de \u00e9xito, sched_setparam y sched_getparam devuelven 0.  En caso de  error, devuelven -1, y ponen\n       en errno un valor apropiado.\n\n", "ERRORES": "       ESRCH  No se ha podido encontrar el proceso cuya ID es pid.\n\n       EPERM  El proceso que hace la llamada no tiene  los  privilegios  apropiados.  El  proceso  que  llame  a\n              sched_setparam  necesita un UID efectivo igual al del EUID o UID del proceso identificado por pid,\n              o debe ser un proceso del s\u00faper-usuario.\n\n       EINVAL El par\u00e1metro p no tiene sentido para la pol\u00edtica de planificaci\u00f3n actual.\n\nCONFORME A\n       POSIX.1b (antiguamente POSIX.4)\n\nV\u00c9ASE TAMBI\u00c9N\n       sched_setaffinity(2),      sched_getaffinity(2),      sched_setscheduler(2),       sched_getscheduler(2),\n       sched_get_priority_max(2), sched_get_priority_min(2), nice(2), setpriority(2), getpriority(2),\n\n       sched_setscheduler(2) contiene una descripci\u00f3n del esquema de planificaci\u00f3n de Linux.\n\n       Programming  for  the  real  world  -  POSIX.4 por Bill O. Gallmeister, O'Reilly & Associates, Inc., ISBN\n       1-56592-074-0\n       IEEE Std 1003.1b-1993 (est\u00e1ndar POSIX.1b)\n       ISO/IEC 9945-1:1996\n\nLinux 1.3.81                                      10 abril 1996                                SCHED_SETPARAM(2)\n"},{"NOMBRE": "       sched_get_priority_max, sched_get_priority_min  - obtienen el rango de prioridades est\u00e1ticas\n\n", "SINOPSIS": "       #include <sched.h>\n\n       int sched_get_priority_max(int politica);\n\n       int sched_get_priority_min(int politica);\n\n", "DESCRIPCION": "       sched_get_priority_max  devuelve  el  valor  de  m\u00e1xima prioridad que puede emplearse con el algoritmo de\n       planificaci\u00f3n identificado por politica.  sched_get_priority_min devuelve el valor  de  m\u00ednima  prioridad\n       que  puede  emplearse con el algoritmo de planificaci\u00f3n identificado por politica.  Los valores admitidos\n       para politica son SCHED_FIFO, SCHED_RR, y SCHED_OTHER.\n\n       Los procesos con valores de prioridad num\u00e9ricamente m\u00e1s altos se planifican para antes que  los  procesos\n       con  valores de prioridad num\u00e9ricamente m\u00e1s bajos. As\u00ed, el valor devuelto por sched_get_priority_max ser\u00e1\n       mayor que el devuelto por sched_get_priority_min.\n\n       Linux permite un rango para el valor de prioridad est\u00e1tica entre 1 y 99 para SCHED_FIFO y SCHED_RR, y  la\n       prioridad  0  para SCHED_OTHER. Los rangos de prioridad de planificaci\u00f3n para los distintos algoritmos no\n       son alterables.\n\n       El rango de prioridades de planificaci\u00f3n puede variar en otros sistemas POSIX, as\u00ed que es una buena  idea\n       para  aplicaciones transportables el emplear un rango virtual de prioridad y asociarlo luego al intervalo\n       dado por sched_get_priority_max y sched_get_priority_min.  POSIX.1b requiere un  rango  de  al  menos  32\n       entre los valores m\u00e1ximo y m\u00ednimo para SCHED_FIFO y SCHED_RR.\n\n       Los  sistemas  POSIX  en  los  cuales  est\u00e1n  disponibles sched_get_priority_max y sched_get_priority_min\n       definen _POSIX_PRIORITY_SCHEDULING en <unistd.h>.\n\nVALOR DEVUELTO\n       En caso de \u00e9xito,  sched_get_priority_max  y  sched_get_priority_min  devuelven  el  valor  de  prioridad\n       m\u00e1ximo/m\u00ednimo para la pol\u00edtica de planificaci\u00f3n especificada.  En caso de error, se devuelve -1 y se pone\n       en errno un valor apropiado.\n\n", "ERRORES": "       EINVAL El par\u00e1metro politica no identifica una pol\u00edtica de planificaci\u00f3n definida.\n\nCONFORME A\n       POSIX.1b (antiguamente POSIX.4)\n\nV\u00c9ASE TAMBI\u00c9N\n       sched_setaffinity(2),      sched_getaffinity(2),      sched_setscheduler(2),       sched_getscheduler(2),\n       sched_setparam(2), sched_getparam(2)\n\n       sched_setscheduler(2) contiene una descripci\u00f3n del esquema de planificaci\u00f3n de Linux.\n\n       Programming  for  the  real  world  -  POSIX.4 por Bill O. Gallmeister, O'Reilly & Associates, Inc., ISBN\n       1-56592-074-0\n       IEEE Std 1003.1b-1993 (est\u00e1ndar POSIX.1b)\n       ISO/IEC 9945-1:1996\n\nLinux 1.3.81                                      10 abril 1996                              GET_PRIORITY_MAX(2)\n"},{"NOMBRE": "       sched_get_priority_max, sched_get_priority_min  - obtienen el rango de prioridades est\u00e1ticas\n\n", "SINOPSIS": "       #include <sched.h>\n\n       int sched_get_priority_max(int politica);\n\n       int sched_get_priority_min(int politica);\n\n", "DESCRIPCION": "       sched_get_priority_max  devuelve  el  valor  de  m\u00e1xima prioridad que puede emplearse con el algoritmo de\n       planificaci\u00f3n identificado por politica.  sched_get_priority_min devuelve el valor  de  m\u00ednima  prioridad\n       que  puede  emplearse con el algoritmo de planificaci\u00f3n identificado por politica.  Los valores admitidos\n       para politica son SCHED_FIFO, SCHED_RR, y SCHED_OTHER.\n\n       Los procesos con valores de prioridad num\u00e9ricamente m\u00e1s altos se planifican para antes que  los  procesos\n       con  valores de prioridad num\u00e9ricamente m\u00e1s bajos. As\u00ed, el valor devuelto por sched_get_priority_max ser\u00e1\n       mayor que el devuelto por sched_get_priority_min.\n\n       Linux permite un rango para el valor de prioridad est\u00e1tica entre 1 y 99 para SCHED_FIFO y SCHED_RR, y  la\n       prioridad  0  para SCHED_OTHER. Los rangos de prioridad de planificaci\u00f3n para los distintos algoritmos no\n       son alterables.\n\n       El rango de prioridades de planificaci\u00f3n puede variar en otros sistemas POSIX, as\u00ed que es una buena  idea\n       para  aplicaciones transportables el emplear un rango virtual de prioridad y asociarlo luego al intervalo\n       dado por sched_get_priority_max y sched_get_priority_min.  POSIX.1b requiere un  rango  de  al  menos  32\n       entre los valores m\u00e1ximo y m\u00ednimo para SCHED_FIFO y SCHED_RR.\n\n       Los  sistemas  POSIX  en  los  cuales  est\u00e1n  disponibles sched_get_priority_max y sched_get_priority_min\n       definen _POSIX_PRIORITY_SCHEDULING en <unistd.h>.\n\nVALOR DEVUELTO\n       En caso de \u00e9xito,  sched_get_priority_max  y  sched_get_priority_min  devuelven  el  valor  de  prioridad\n       m\u00e1ximo/m\u00ednimo para la pol\u00edtica de planificaci\u00f3n especificada.  En caso de error, se devuelve -1 y se pone\n       en errno un valor apropiado.\n\n", "ERRORES": "       EINVAL El par\u00e1metro politica no identifica una pol\u00edtica de planificaci\u00f3n definida.\n\nCONFORME A\n       POSIX.1b (antiguamente POSIX.4)\n\nV\u00c9ASE TAMBI\u00c9N\n       sched_setaffinity(2),      sched_getaffinity(2),      sched_setscheduler(2),       sched_getscheduler(2),\n       sched_setparam(2), sched_getparam(2)\n\n       sched_setscheduler(2) contiene una descripci\u00f3n del esquema de planificaci\u00f3n de Linux.\n\n       Programming  for  the  real  world  -  POSIX.4 por Bill O. Gallmeister, O'Reilly & Associates, Inc., ISBN\n       1-56592-074-0\n       IEEE Std 1003.1b-1993 (est\u00e1ndar POSIX.1b)\n       ISO/IEC 9945-1:1996\n\nLinux 1.3.81                                      10 abril 1996                              GET_PRIORITY_MAX(2)\n"},{"NOMBRE": "       sched_setscheduler, sched_getscheduler - establecen y obtienen los algoritmos/par\u00e1metros de planificaci\u00f3n\n\n", "SINOPSIS": "       #include <sched.h>\n\n       int sched_setscheduler(pid_t pid, int policy, const struct sched_param *p);\n\n       int sched_getscheduler(pid_t pid);\n\n       struct sched_param {\n           ...\n           int sched_priority;\n           ...\n       };\n\n", "DESCRIPCION": "       sched_setscheduler  establece  tanto  la  pol\u00edtica de planificaci\u00f3n como los par\u00e1metros asociados para el\n       proceso identificado por pid. Si pid es igual a cero, se establece el planificador del proceso  que  hace\n       la llamada. La interpretaci\u00f3n del par\u00e1metro p depende de la pol\u00edtica seleccionada. Actualmente se admiten\n       en Linux las tres siguientes pol\u00edticas: SCHED_FIFO, SCHED_RR, y SCHED_OTHER; sus  respectivas  sem\u00e1nticas\n       se describen abajo.\n\n       sched_getscheduler pregunta por la pol\u00edtica de planificaci\u00f3n aplicada actualmente al proceso identificado\n       por pid. Si pid es igual a cero, se obtiene la pol\u00edtica del proceso que hace la llamada.\n\n   Pol\u00edticas de Planificaci\u00f3n\n       El planificador es la parte del n\u00facleo que decide qu\u00e9 proceso ejecutable ser\u00e1  ejecutado  por  la  CPU  a\n       continuaci\u00f3n.  El  planificador  de Linux ofrece tres pol\u00edticas de planificaci\u00f3n diferentes, una para los\n       procesos normales y dos para aplicaciones en tiempo real. Se asigna a cada proceso un valor de  prioridad\n       est\u00e1tica   sched_priority   y  este  valor  s\u00f3lo  puede  cambiarse  a  trav\u00e9s  de  llamadas  al  sistema.\n       Conceptualmente, el planificador mantiene una lista de  procesos  ejecutables  para  cada  posible  valor\n       sched_priority,  y  sched_priority  puede tener un valor en el rango de 0 a 99. Para poder determinar qu\u00e9\n       proceso se debe ejecutar a continuaci\u00f3n, el planificador de Linux busca en  la  lista  no  vac\u00eda  con  la\n       prioridad  est\u00e1tica  m\u00e1s  alta y toma el proceso a la cabeza de dicha lista. La pol\u00edtica de planificaci\u00f3n\n       determina para cada proceso, d\u00f3nde se insertar\u00e1 en la lista de procesos con igual  prioridad  est\u00e1tica  y\n       c\u00f3mo se mover\u00e1 dentro de esta lista.\n\n       SCHED_OTHER  es  el planificador de tiempo compartido universal predeterminado empleado por la mayor\u00eda de\n       los procesos; SCHED_FIFO y SCHED_RR han sido pensados para aplicaciones especiales  donde  el  tiempo  es\n       cr\u00edtico  y  necesitan  un  control  preciso  sobre  la  forma en la que se seleccionan para ejecuci\u00f3n los\n       procesos ejecutables. A los procesos planificados con  SCHED_OTHER  se  les  debe  asignar  la  prioridad\n       est\u00e1tica  0;  los procesos planificados bajo SCHED_FIFO o SCHED_RR pueden tener una prioridad est\u00e1tica en\n       el rango de 1 a 99. Solamente los procesos con privilegio de s\u00faper-usuario pueden obtener  una  prioridad\n       est\u00e1tica  mayor  que  0  y  por tanto pueden ser planificados bajo SCHED_FIFO o SCHED_RR. Las llamadas al\n       sistema sched_get_priority_min y sched_get_priority_max pueden emplearse para encontrar el  rango  v\u00e1lido\n       de  prioridad  para  una  pol\u00edtica de planificaci\u00f3n de una manera transportable en todos los sistemas que\n       cumplan POSIX.1b.\n\n       Toda la planificaci\u00f3n es apropiativa: si un proceso con una prioridad est\u00e1tica m\u00e1s alta est\u00e1  listo  para\n       ejecutarse,  el  proceso  actual  ser\u00e1  apropiado  y  devuelto  a  su  lista  de  espera.  La pol\u00edtica de\n       planificaci\u00f3n solamente determina la  clasificaci\u00f3n  en  la  lista  de  procesos  ejecutables  con  igual\n       prioridad est\u00e1tica.\n\n   SCHED_FIFO: Planificaci\u00f3n FIFO (1\u00ba en entrar, 1\u00ba en salir).\n       SCHED_FIFO  s\u00f3lo  puede emplearse con prioridades est\u00e1ticas mayores que 0, lo que significa que cuando un\n       proceso SCHED_FIFO se convierte en ejecutable, siempre prevalecer\u00e1 inmediatamente  sobre  cualquier  otro\n       proceso  normal SCHED_OTHER ejecut\u00e1ndose.  SCHED_FIFO es un simple algoritmo de planificaci\u00f3n sin rodajas\n       de tiempo. Para procesos planificados bajo la pol\u00edtica SCHED_FIFO, se aplican las siguientes  reglas:  Un\n       proceso  SCHED_FIFO que ha sido apropiado por otro proceso de mayor prioridad permanecer\u00e1 en la cabeza de\n       la lista para su prioridad y reanudar\u00e1 su ejecuci\u00f3n tan pronto como todos los procesos de  prioridad  m\u00e1s\n       alta se bloqueen de nuevo. Cuando un proceso SCHED_FIFO llegue a ser ejecutable, se insertar\u00e1 al final de\n       la lista para su prioridad. Una llamada  a  sched_setscheduler  o  a  sched_setparam  pondr\u00e1  el  proceso\n       SCHED_FIFO  (o  SCHED_RR)  identificado  por  pid  al  comienzo  de  la  lista  si  era ejecutable.  Como\n       consecuencia, puede apropiarse del proceso actualmente en curso si  tiene  la  misma  prioridad.   (POSIX\n       1003.1  especifica  que  el proceso deber\u00eda ir al final de la lista.)  Un proceso que llame a sched_yield\n       ser\u00e1 colocado al final de la lista. Ning\u00fan otro suceso mover\u00e1 un proceso  planificado  bajo  la  pol\u00edtica\n       SCHED_FIFO  en  la  lista  de  espera  de  procesos  ejecutables con igual prioridad est\u00e1tica. Un proceso\n       SCHED_FIFO se ejecuta hasta que es bloqueado por una petici\u00f3n de E/S, hasta  que  sea  apropiado  por  un\n       proceso de m\u00e1s alta prioridad, o hasta que llame a sched_yield.\n\n   SCHED_RR: Planificaci\u00f3n circular (Round Robin).\n       SCHED_RR  es una mejora simple de SCHED_FIFO. Todo lo descrito arriba para SCHED_FIFO se aplica tambi\u00e9n a\n       SCHED_RR, excepto que a cada proceso s\u00f3lo se le permite ejecutarse durante un cuanto  de  tiempo  m\u00e1ximo.\n       Si un proceso SCHED_RR ha estado ejecut\u00e1ndose durante un periodo de tiempo igual o mayor que el cuanto de\n       tiempo, ser\u00e1 puesto al final de la lista para su prioridad. Un proceso SCHED_RR que ha sido apropiado por\n       un  proceso  de  m\u00e1s alta prioridad y subsecuentemente reanuda su ejecuci\u00f3n como un proceso en ejecuci\u00f3n,\n       completar\u00e1 la porci\u00f3n no expirada de su cuanto de tiempo de asignaci\u00f3n en rueda. La cantidad  del  cuanto\n       de tiempo puede ser obtenida con sched_rr_get_interval.\n\n   SCHED_OTHER: Planificaci\u00f3n predeterminada de Linux en t.c.\n       SCHED_OTHER  solamente  puede  emplearse  con  la  prioridad  est\u00e1tica 0.  SCHED_OTHER es el planificador\n       est\u00e1ndar de Linux en tiempo compartido, pensado para todos  los  procesos  que  no  requieren  mecanismos\n       especiales  de  prioridad  est\u00e1tica  en  tiempo  real.   El proceso a ejecutarse se escoge de la lista de\n       prioridad est\u00e1tica 0 basado en una prioridad din\u00e1mica que se determina solamente dentro de esta lista. La\n       prioridad  din\u00e1mica  se  basa  en  el  nivel  de  `nice'  (puesto  por  la  llamada nice o setpriority) e\n       incrementado para cada cuanto de tiempo para el que  el  proceso  est\u00e1  listo  para  la  ejecuci\u00f3n,  pero\n       denegado  para  ella  por  el  planificador.  Esto  asegura  un  buen  progreso  entre todos los procesos\n       SCHED_OTHER.\n\n   Tiempo de respuesta\n       Un proceso de alta prioridad bloqueado esperando E/S tiene un cierto tiempo de respuesta antes de que sea\n       planificado  otra  vez. El escritor del controlador del dispositivo puede reducir grandemente este tiempo\n       de respuesta empleando un manejador de interrupci\u00f3n de \"interrupci\u00f3n lenta\".\n\n   Miscel\u00e1nea\n       Los procesos hijos heredan el algoritmo y par\u00e1metros de planificaci\u00f3n a trav\u00e9s de un fork.\n\n       Usualmente se necesita un bloqueo de memoria para que los procesos en tiempo real puedan  evitar  demoras\n       en la paginaci\u00f3n; esto puede hacerse con mlock o mlockall.\n\n       Como un bucle infinito no bloqueante en un proceso planificado bajo SCHED_FIFO o SCHED_RR, bloquear\u00e1 para\n       siempre todos los procesos con baja prioridad, un desarrollador  de  software  deber\u00eda  siempre  mantener\n       disponible  en  la consola un shell planificado bajo una prioridad est\u00e1tica mayor que la de la aplicaci\u00f3n\n       en pruebas. Esto permitir\u00e1 un `kill' de emergencia en aplicaciones de  tiempo  real  en  pruebas  que  no\n       bloqueen  o  terminen  como  se  espere.  Como  los  procesos SCHED_FIFO y SCHED_RR pueden apropiar otros\n       procesos para siempre, s\u00f3lo los procesos de root tienen permiso para activar estas pol\u00edticas bajo Linux.\n\n       Los sistemas  POSIX  en  los  cuales  se  dispone  de  sched_setscheduler  y  sched_getscheduler  definen\n       _POSIX_PRIORITY_SCHEDULING en <unistd.h>.\n\nVALOR DEVUELTO\n       En  caso  de  \u00e9xito,  sched_setscheduler devuelve cero.  En caso de \u00e9xito, sched_getscheduler devuelve la\n       pol\u00edtica para el proceso (un entero no negativo).  En caso de error, se devuelve -1 y se pone en errno un\n       valor apropiado.\n\n", "ERRORES": "       ESRCH  No se ha podido encontrar el proceso cuya ID es pid.\n\n       EPERM  El proceso que hace la llamada no tiene los privilegios apropiados. Solamente los procesos de root\n              tienen permiso para  activar  las  pol\u00edticas  SCHED_FIFO  y  SCHED_RR.  El  proceso  que  llame  a\n              sched_setscheduler  necesita  un  UID efectivo igual al EUID o al UID del proceso identificado por\n              pid, o debe ser un proceso del s\u00faper-usuario.\n\n       EINVAL La politica de planificaci\u00f3n no es una de las pol\u00edticas reconocidas, o el  par\u00e1metro  p  no  tiene\n              sentido para la politica.\n\nCONFORME A\n       POSIX.1b (antiguamente POSIX.4)\n\n", "FALLOS": "       En  Linux-1.3.81,  SCHED_RR  no  hab\u00eda sido a\u00fan probada cuidadosamente y pudiera ser que no se comportara\n       exactamente como se describe o requiere por POSIX.1b.\n\n", "NOTA": "       El Linux est\u00e1ndar es un sistema operativo de prop\u00f3sito general que  puede  manejar  procesos  en  segundo\n       plano,  aplicaciones  interactivas y aplicaciones flexibles de tiempo real (aplicaciones que necesitan de\n       forma usual  cumplir  l\u00edmites  temporales).  Esta  p\u00e1gina  de  manual  est\u00e1  dirigida  a  esos  tipos  de\n       aplicaciones.\n\n       El  Linux  est\u00e1ndar  no  est\u00e1  dise\u00f1ado  para  soportar  aplicaciones estrictas de tiempo real, es decir,\n       aplicaciones en las se deben garantizar los plazos (a menudo mucho  m\u00e1s  breves  que  un  segundo)  o  el\n       sistema fracasar\u00e1 catastr\u00f3ficamente.  Como todos los sistemas operativos de prop\u00f3sito general, Linux est\u00e1\n       dise\u00f1ado para maximizar el rendimiento del caso medio  en  lugar  del  rendimiento  del  peor  caso.   El\n       rendimiento del peor caso de Linux para el manejo de interrupciones es mucho m\u00e1s pobre que su caso medio,\n       sus distintos cerrojos del n\u00facleo (como los de SMP) producen tiempos de  espera  de  m\u00e1xima  duracci\u00f3n  y\n       muchas  de  sus  t\u00e9cnicas para mejorar el rendimiento decrementan el tiempo medio incrementando el tiempo\n       del peor caso.  Para la mayor\u00eda de situaciones, eso es lo  que  usted  quiere,  pero  si  realmente  est\u00e1\n       desarrollando  una  aplicaci\u00f3n  estricta de tiempo real considere el usar extensiones estrictas de tiempo\n       real para Linux como RTLinux (http://www.rtlinux.org) o use  un  sistema  operativo  diferentes  dise\u00f1ado\n       espec\u00edficamente para aplicaciones estrictas de tiempo real.\n\nV\u00c9ASE TAMBI\u00c9N\n       sched_setaffinity(2),   sched_getaffinity(2),   sched_setparam(2),   sched_getparam(2),   sched_yield(2),\n       sched_get_priority_max(2), sched_get_priority_min(2), sched_rr_get_interval(2), nice(2),  setpriority(2),\n       getpriority(2), mlockall(2), munlockall(2), mlock(2), munlock(2)\n\n       Programming  for  the  real  world  -  POSIX.4 por Bill O. Gallmeister, O'Reilly & Associates, Inc., ISBN\n       1-56592-074-0\n       IEEE Std 1003.1b-1993 (est\u00e1ndar POSIX.1b)\n       ISO/IEC 9945-1:1996 - \u00c9sta es la nueva revisi\u00f3n de 1996 de POSIX.1, que  contiene  en  un  solo  est\u00e1ndar\n       POSIX.1(1990), POSIX.1b(1993), POSIX.1c(1995), y POSIX.1i(1995).\n\nLinux 2.4.18                                      25 junio 2002                                  SETSCHEDULER(2)\n"},{"NOMBRE": "       sched_rr_get_interval  - obtiene el intervalo SCHED_RR para el proceso especificado\n\n", "SINOPSIS": "       #include <sched.h>\n\n       int sched_rr_get_interval(pid_t pid, struct timespec *tp);\n\n       struct timespec {\n           time_t  tv_sec;     /* segundos */\n           long    tv_nsec;    /* nanosegundos */\n       };\n\n", "DESCRIPCION": "       sched_rr_get_interval  escribe en la estructura timespec apuntada por tp el cuanto (quantum) de tiempo de\n       asignaci\u00f3n en rueda (round robin) para el proceso identificado por pid. Si pid  es  cero,  el  cuanto  de\n       tiempo  para  el  proceso  que hace la llamada se escribe en *tp. El proceso identificado debe ejecutarse\n       bajo la pol\u00edtica de planificaci\u00f3n SCHED_RR.\n\n       El cuanto de tiempo de asignaci\u00f3n en rueda no es alterable bajo Linux 1.3.81.\n\n       Los sistemas POSIX en los que est\u00e1 disponible sched_rr_get_interval definen _POSIX_PRIORITY_SCHEDULING en\n       <unistd.h>.\n\nVALOR DEVUELTO\n       En caso de \u00e9xito, sched_rr_get_interval devuelve 0.  En caso de  error, se devuelve -1 y se pone en errno\n       un valor apropiado.\n\n", "ERRORES": "       ESRCH  El proceso cuyo ID es pid no ha podido ser encontrado.\n\n       ENOSYS La llamada al sistema no est\u00e1 implementada todav\u00eda.\n\nCONFORME A\n       POSIX.1b (anteriormente POSIX.4)\n\n", "FALLOS": "       En Linux 1.3.81 sched_rr_get_interval regresaba con el error ENOSYS, porque SCHED_RR no  hab\u00eda  sido  a\u00fan\n       implementada completamente ni comprobada correctamente.\n\nV\u00c9ASE TAMBI\u00c9N\n       sched_setscheduler(2) contiene una descripci\u00f3n del esquema de planificaci\u00f3n de Linux.\n\n       Programming  for  the  real  world  -  POSIX.4 por Bill O. Gallmeister, O'Reilly & Associates, Inc., ISBN\n       1-56592-074-0\n       IEEE Std 1003.1b-1993 (est\u00e1ndar POSIX.1b, antiguamente POSIX.4)\n       ISO/IEC 9945-1:1996\n\nLinux 1.3.81                                      10 abril 1996                               RR_GET_INTERVAL(2)\n"},{"NOMBRE": "       sched_setaffinity, sched_getaffinity - establece y obtiene la m\u00e1scara de afinidad de CPU de un proceso\n\n", "SINOPSIS": "       #include <sched.h>\n\n       int sched_setaffinity(pid_t pid, unsigned int len, unsigned long *mask);\n\n       int sched_getaffinity(pid_t pid, unsigned int len, unsigned long *mask);\n\n", "DESCRIPCION": "       sched_setaffinity  establece  la  m\u00e1scara de afinidad de CPU del proceso identificado por pid.  Si pid es\n       cero, se asume el proceso en curso.\n\n       La m\u00e1scara de afinidad est\u00e1 representada por la m\u00e1scara  de  bits  almacenada  en  mask.   El  bit  menos\n       significativo  corresponde  al n\u00famero del primer procesador l\u00f3gico en el sistema, mientras que el bit m\u00e1s\n       significativo corresponde al n\u00famero del \u00faltimo procesador l\u00f3gico en el sistema. Un bit a 1 se corresponde\n       con  una  CPU  leg\u00edtimamente  planificable  mientras  que un bit a 0 se corresponde con una CPU que no es\n       leg\u00edtimamente planificable. En otras palabras, un proceso est\u00e1 ligado y s\u00f3lo  se  ejecutar\u00e1  en  aquellos\n       procesadores cuyo bit est\u00e9 activo. Normalmente todos los bits de la m\u00e1scara est\u00e1n activos.\n\n       El argumento len representa la longitud de los datos a los que apunta mask.  Normalmente este valor es el\n       tama\u00f1o de una palabra en el sistema. Por razones de compatibilidad con futuras versiones  del  n\u00facleo  de\n       Linux,  puesto  que  este  tama\u00f1o  puede  cambiar, la m\u00e1scara de bits proporcionada debe ser al menos tan\n       grande como la m\u00e1scara de afinidad almacenada en el n\u00facleo.\n\n       La funci\u00f3n sched_getaffinity escribe en el puntero proporcionado en mask, cuyo tama\u00f1o es len, la  m\u00e1scara\n       de afinidad del proceso pid.  Si pid es cero, se devuelve la m\u00e1scara del proceso en curso.\n\nVALOR DEVUELTO\n       En  caso de \u00e9xito,, sched_setaffinity y sched_getaffinity devuelven 0.  En caso de error, se devuelve -1,\n       y se modifica errno con el valor apropiado.\n\n", "ERRORES": "       EFAULT La direcci\u00f3n de memoria proporcionada no es v\u00e1lida.\n\n       ESRCH  No se puede encontrar un proceso con identificador pid.\n\n       EPERM  El proceso invocador no tiene los privilegios apropiados. El proceso que llama a sched_setaffinity\n              necesita  que  el  identificador  de usuario efectivo sea igual al identificador de usuario real o\n              efectivo del proceso identificado por pid, o poseer la capacidad CAP_SYS_NICE.\n\n       EINVAL La m\u00e1scara de afinidad mask no contiene procesadores que est\u00e9n f\u00edsicamente  en  el  sistema  o  la\n              longitud len es m\u00e1s peque\u00f1a que el tama\u00f1o de la m\u00e1scara de afinidad usada por el n\u00facleo.\n\nLinux                                           19 noviembre 2002                           SCHED_SETAFFINITY(2)\n"},{"NOMBRE": "       sched_setparam, sched_getparam - pone y obtiene par\u00e1metros de planificaci\u00f3n\n\n", "SINOPSIS": "       #include <sched.h>\n\n       int sched_setparam(pid_t pid, const struct sched_param *p);\n\n       int sched_getparam(pid_t pid, struct sched_param *p);\n\n       struct sched_param {\n           ...\n           int sched_priority;\n           ...\n       };\n\n", "DESCRIPCION": "       sched_setparam  establece los par\u00e1metros de planificaci\u00f3n asociados con la pol\u00edtica de planificaci\u00f3n para\n       el proceso identificado por pid. Si pid es cero, entonces se establecen los  par\u00e1metros  del  proceso  en\n       curso. La interpretaci\u00f3n del par\u00e1metro p depende de la pol\u00edtica seleccionada. Actualmente se admiten bajo\n       Linux las siguientes tres pol\u00edticas de planificaci\u00f3n: SCHED_FIFO, SCHED_RR, y SCHED_OTHER.\n\n       sched_getparam obtiene los par\u00e1metros de planificaci\u00f3n para el proceso identificado por pid.  Si  pid  es\n       cero, entonces se obtienen los par\u00e1metros del proceso en curso.\n\n       sched_setparam  comprueba  la  validez  de  p para la pol\u00edtica de planificaci\u00f3n del proceso. El par\u00e1metro\n       p->sched_priority debe caer en el rango dado por sched_get_priority_min y sched_get_priority_max.\n\n       Los  sistemas  POSIX  en  los   que   est\u00e9n   disponibles   sched_setparam   y   sched_getparam   definen\n       _POSIX_PRIORITY_SCHEDULING en <unistd.h>.\n\nVALOR DEVUELTO\n       En  caso de \u00e9xito, sched_setparam y sched_getparam devuelven 0.  En caso de  error, devuelven -1, y ponen\n       en errno un valor apropiado.\n\n", "ERRORES": "       ESRCH  No se ha podido encontrar el proceso cuya ID es pid.\n\n       EPERM  El proceso que hace la llamada no tiene  los  privilegios  apropiados.  El  proceso  que  llame  a\n              sched_setparam  necesita un UID efectivo igual al del EUID o UID del proceso identificado por pid,\n              o debe ser un proceso del s\u00faper-usuario.\n\n       EINVAL El par\u00e1metro p no tiene sentido para la pol\u00edtica de planificaci\u00f3n actual.\n\nCONFORME A\n       POSIX.1b (antiguamente POSIX.4)\n\nV\u00c9ASE TAMBI\u00c9N\n       sched_setaffinity(2),      sched_getaffinity(2),      sched_setscheduler(2),       sched_getscheduler(2),\n       sched_get_priority_max(2), sched_get_priority_min(2), nice(2), setpriority(2), getpriority(2),\n\n       sched_setscheduler(2) contiene una descripci\u00f3n del esquema de planificaci\u00f3n de Linux.\n\n       Programming  for  the  real  world  -  POSIX.4 por Bill O. Gallmeister, O'Reilly & Associates, Inc., ISBN\n       1-56592-074-0\n       IEEE Std 1003.1b-1993 (est\u00e1ndar POSIX.1b)\n       ISO/IEC 9945-1:1996\n\nLinux 1.3.81                                      10 abril 1996                                SCHED_SETPARAM(2)\n"},{"NOMBRE": "       sched_setscheduler, sched_getscheduler - establecen y obtienen los algoritmos/par\u00e1metros de planificaci\u00f3n\n\n", "SINOPSIS": "       #include <sched.h>\n\n       int sched_setscheduler(pid_t pid, int policy, const struct sched_param *p);\n\n       int sched_getscheduler(pid_t pid);\n\n       struct sched_param {\n           ...\n           int sched_priority;\n           ...\n       };\n\n", "DESCRIPCION": "       sched_setscheduler  establece  tanto  la  pol\u00edtica de planificaci\u00f3n como los par\u00e1metros asociados para el\n       proceso identificado por pid. Si pid es igual a cero, se establece el planificador del proceso  que  hace\n       la llamada. La interpretaci\u00f3n del par\u00e1metro p depende de la pol\u00edtica seleccionada. Actualmente se admiten\n       en Linux las tres siguientes pol\u00edticas: SCHED_FIFO, SCHED_RR, y SCHED_OTHER; sus  respectivas  sem\u00e1nticas\n       se describen abajo.\n\n       sched_getscheduler pregunta por la pol\u00edtica de planificaci\u00f3n aplicada actualmente al proceso identificado\n       por pid. Si pid es igual a cero, se obtiene la pol\u00edtica del proceso que hace la llamada.\n\n   Pol\u00edticas de Planificaci\u00f3n\n       El planificador es la parte del n\u00facleo que decide qu\u00e9 proceso ejecutable ser\u00e1  ejecutado  por  la  CPU  a\n       continuaci\u00f3n.  El  planificador  de Linux ofrece tres pol\u00edticas de planificaci\u00f3n diferentes, una para los\n       procesos normales y dos para aplicaciones en tiempo real. Se asigna a cada proceso un valor de  prioridad\n       est\u00e1tica   sched_priority   y  este  valor  s\u00f3lo  puede  cambiarse  a  trav\u00e9s  de  llamadas  al  sistema.\n       Conceptualmente, el planificador mantiene una lista de  procesos  ejecutables  para  cada  posible  valor\n       sched_priority,  y  sched_priority  puede tener un valor en el rango de 0 a 99. Para poder determinar qu\u00e9\n       proceso se debe ejecutar a continuaci\u00f3n, el planificador de Linux busca en  la  lista  no  vac\u00eda  con  la\n       prioridad  est\u00e1tica  m\u00e1s  alta y toma el proceso a la cabeza de dicha lista. La pol\u00edtica de planificaci\u00f3n\n       determina para cada proceso, d\u00f3nde se insertar\u00e1 en la lista de procesos con igual  prioridad  est\u00e1tica  y\n       c\u00f3mo se mover\u00e1 dentro de esta lista.\n\n       SCHED_OTHER  es  el planificador de tiempo compartido universal predeterminado empleado por la mayor\u00eda de\n       los procesos; SCHED_FIFO y SCHED_RR han sido pensados para aplicaciones especiales  donde  el  tiempo  es\n       cr\u00edtico  y  necesitan  un  control  preciso  sobre  la  forma en la que se seleccionan para ejecuci\u00f3n los\n       procesos ejecutables. A los procesos planificados con  SCHED_OTHER  se  les  debe  asignar  la  prioridad\n       est\u00e1tica  0;  los procesos planificados bajo SCHED_FIFO o SCHED_RR pueden tener una prioridad est\u00e1tica en\n       el rango de 1 a 99. Solamente los procesos con privilegio de s\u00faper-usuario pueden obtener  una  prioridad\n       est\u00e1tica  mayor  que  0  y  por tanto pueden ser planificados bajo SCHED_FIFO o SCHED_RR. Las llamadas al\n       sistema sched_get_priority_min y sched_get_priority_max pueden emplearse para encontrar el  rango  v\u00e1lido\n       de  prioridad  para  una  pol\u00edtica de planificaci\u00f3n de una manera transportable en todos los sistemas que\n       cumplan POSIX.1b.\n\n       Toda la planificaci\u00f3n es apropiativa: si un proceso con una prioridad est\u00e1tica m\u00e1s alta est\u00e1  listo  para\n       ejecutarse,  el  proceso  actual  ser\u00e1  apropiado  y  devuelto  a  su  lista  de  espera.  La pol\u00edtica de\n       planificaci\u00f3n solamente determina la  clasificaci\u00f3n  en  la  lista  de  procesos  ejecutables  con  igual\n       prioridad est\u00e1tica.\n\n   SCHED_FIFO: Planificaci\u00f3n FIFO (1\u00ba en entrar, 1\u00ba en salir).\n       SCHED_FIFO  s\u00f3lo  puede emplearse con prioridades est\u00e1ticas mayores que 0, lo que significa que cuando un\n       proceso SCHED_FIFO se convierte en ejecutable, siempre prevalecer\u00e1 inmediatamente  sobre  cualquier  otro\n       proceso  normal SCHED_OTHER ejecut\u00e1ndose.  SCHED_FIFO es un simple algoritmo de planificaci\u00f3n sin rodajas\n       de tiempo. Para procesos planificados bajo la pol\u00edtica SCHED_FIFO, se aplican las siguientes  reglas:  Un\n       proceso  SCHED_FIFO que ha sido apropiado por otro proceso de mayor prioridad permanecer\u00e1 en la cabeza de\n       la lista para su prioridad y reanudar\u00e1 su ejecuci\u00f3n tan pronto como todos los procesos de  prioridad  m\u00e1s\n       alta se bloqueen de nuevo. Cuando un proceso SCHED_FIFO llegue a ser ejecutable, se insertar\u00e1 al final de\n       la lista para su prioridad. Una llamada  a  sched_setscheduler  o  a  sched_setparam  pondr\u00e1  el  proceso\n       SCHED_FIFO  (o  SCHED_RR)  identificado  por  pid  al  comienzo  de  la  lista  si  era ejecutable.  Como\n       consecuencia, puede apropiarse del proceso actualmente en curso si  tiene  la  misma  prioridad.   (POSIX\n       1003.1  especifica  que  el proceso deber\u00eda ir al final de la lista.)  Un proceso que llame a sched_yield\n       ser\u00e1 colocado al final de la lista. Ning\u00fan otro suceso mover\u00e1 un proceso  planificado  bajo  la  pol\u00edtica\n       SCHED_FIFO  en  la  lista  de  espera  de  procesos  ejecutables con igual prioridad est\u00e1tica. Un proceso\n       SCHED_FIFO se ejecuta hasta que es bloqueado por una petici\u00f3n de E/S, hasta  que  sea  apropiado  por  un\n       proceso de m\u00e1s alta prioridad, o hasta que llame a sched_yield.\n\n   SCHED_RR: Planificaci\u00f3n circular (Round Robin).\n       SCHED_RR  es una mejora simple de SCHED_FIFO. Todo lo descrito arriba para SCHED_FIFO se aplica tambi\u00e9n a\n       SCHED_RR, excepto que a cada proceso s\u00f3lo se le permite ejecutarse durante un cuanto  de  tiempo  m\u00e1ximo.\n       Si un proceso SCHED_RR ha estado ejecut\u00e1ndose durante un periodo de tiempo igual o mayor que el cuanto de\n       tiempo, ser\u00e1 puesto al final de la lista para su prioridad. Un proceso SCHED_RR que ha sido apropiado por\n       un  proceso  de  m\u00e1s alta prioridad y subsecuentemente reanuda su ejecuci\u00f3n como un proceso en ejecuci\u00f3n,\n       completar\u00e1 la porci\u00f3n no expirada de su cuanto de tiempo de asignaci\u00f3n en rueda. La cantidad  del  cuanto\n       de tiempo puede ser obtenida con sched_rr_get_interval.\n\n   SCHED_OTHER: Planificaci\u00f3n predeterminada de Linux en t.c.\n       SCHED_OTHER  solamente  puede  emplearse  con  la  prioridad  est\u00e1tica 0.  SCHED_OTHER es el planificador\n       est\u00e1ndar de Linux en tiempo compartido, pensado para todos  los  procesos  que  no  requieren  mecanismos\n       especiales  de  prioridad  est\u00e1tica  en  tiempo  real.   El proceso a ejecutarse se escoge de la lista de\n       prioridad est\u00e1tica 0 basado en una prioridad din\u00e1mica que se determina solamente dentro de esta lista. La\n       prioridad  din\u00e1mica  se  basa  en  el  nivel  de  `nice'  (puesto  por  la  llamada nice o setpriority) e\n       incrementado para cada cuanto de tiempo para el que  el  proceso  est\u00e1  listo  para  la  ejecuci\u00f3n,  pero\n       denegado  para  ella  por  el  planificador.  Esto  asegura  un  buen  progreso  entre todos los procesos\n       SCHED_OTHER.\n\n   Tiempo de respuesta\n       Un proceso de alta prioridad bloqueado esperando E/S tiene un cierto tiempo de respuesta antes de que sea\n       planificado  otra  vez. El escritor del controlador del dispositivo puede reducir grandemente este tiempo\n       de respuesta empleando un manejador de interrupci\u00f3n de \"interrupci\u00f3n lenta\".\n\n   Miscel\u00e1nea\n       Los procesos hijos heredan el algoritmo y par\u00e1metros de planificaci\u00f3n a trav\u00e9s de un fork.\n\n       Usualmente se necesita un bloqueo de memoria para que los procesos en tiempo real puedan  evitar  demoras\n       en la paginaci\u00f3n; esto puede hacerse con mlock o mlockall.\n\n       Como un bucle infinito no bloqueante en un proceso planificado bajo SCHED_FIFO o SCHED_RR, bloquear\u00e1 para\n       siempre todos los procesos con baja prioridad, un desarrollador  de  software  deber\u00eda  siempre  mantener\n       disponible  en  la consola un shell planificado bajo una prioridad est\u00e1tica mayor que la de la aplicaci\u00f3n\n       en pruebas. Esto permitir\u00e1 un `kill' de emergencia en aplicaciones de  tiempo  real  en  pruebas  que  no\n       bloqueen  o  terminen  como  se  espere.  Como  los  procesos SCHED_FIFO y SCHED_RR pueden apropiar otros\n       procesos para siempre, s\u00f3lo los procesos de root tienen permiso para activar estas pol\u00edticas bajo Linux.\n\n       Los sistemas  POSIX  en  los  cuales  se  dispone  de  sched_setscheduler  y  sched_getscheduler  definen\n       _POSIX_PRIORITY_SCHEDULING en <unistd.h>.\n\nVALOR DEVUELTO\n       En  caso  de  \u00e9xito,  sched_setscheduler devuelve cero.  En caso de \u00e9xito, sched_getscheduler devuelve la\n       pol\u00edtica para el proceso (un entero no negativo).  En caso de error, se devuelve -1 y se pone en errno un\n       valor apropiado.\n\n", "ERRORES": "       ESRCH  No se ha podido encontrar el proceso cuya ID es pid.\n\n       EPERM  El proceso que hace la llamada no tiene los privilegios apropiados. Solamente los procesos de root\n              tienen permiso para  activar  las  pol\u00edticas  SCHED_FIFO  y  SCHED_RR.  El  proceso  que  llame  a\n              sched_setscheduler  necesita  un  UID efectivo igual al EUID o al UID del proceso identificado por\n              pid, o debe ser un proceso del s\u00faper-usuario.\n\n       EINVAL La politica de planificaci\u00f3n no es una de las pol\u00edticas reconocidas, o el  par\u00e1metro  p  no  tiene\n              sentido para la politica.\n\nCONFORME A\n       POSIX.1b (antiguamente POSIX.4)\n\n", "FALLOS": "       En  Linux-1.3.81,  SCHED_RR  no  hab\u00eda sido a\u00fan probada cuidadosamente y pudiera ser que no se comportara\n       exactamente como se describe o requiere por POSIX.1b.\n\n", "NOTA": "       El Linux est\u00e1ndar es un sistema operativo de prop\u00f3sito general que  puede  manejar  procesos  en  segundo\n       plano,  aplicaciones  interactivas y aplicaciones flexibles de tiempo real (aplicaciones que necesitan de\n       forma usual  cumplir  l\u00edmites  temporales).  Esta  p\u00e1gina  de  manual  est\u00e1  dirigida  a  esos  tipos  de\n       aplicaciones.\n\n       El  Linux  est\u00e1ndar  no  est\u00e1  dise\u00f1ado  para  soportar  aplicaciones estrictas de tiempo real, es decir,\n       aplicaciones en las se deben garantizar los plazos (a menudo mucho  m\u00e1s  breves  que  un  segundo)  o  el\n       sistema fracasar\u00e1 catastr\u00f3ficamente.  Como todos los sistemas operativos de prop\u00f3sito general, Linux est\u00e1\n       dise\u00f1ado para maximizar el rendimiento del caso medio  en  lugar  del  rendimiento  del  peor  caso.   El\n       rendimiento del peor caso de Linux para el manejo de interrupciones es mucho m\u00e1s pobre que su caso medio,\n       sus distintos cerrojos del n\u00facleo (como los de SMP) producen tiempos de  espera  de  m\u00e1xima  duracci\u00f3n  y\n       muchas  de  sus  t\u00e9cnicas para mejorar el rendimiento decrementan el tiempo medio incrementando el tiempo\n       del peor caso.  Para la mayor\u00eda de situaciones, eso es lo  que  usted  quiere,  pero  si  realmente  est\u00e1\n       desarrollando  una  aplicaci\u00f3n  estricta de tiempo real considere el usar extensiones estrictas de tiempo\n       real para Linux como RTLinux (http://www.rtlinux.org) o use  un  sistema  operativo  diferentes  dise\u00f1ado\n       espec\u00edficamente para aplicaciones estrictas de tiempo real.\n\nV\u00c9ASE TAMBI\u00c9N\n       sched_setaffinity(2),   sched_getaffinity(2),   sched_setparam(2),   sched_getparam(2),   sched_yield(2),\n       sched_get_priority_max(2), sched_get_priority_min(2), sched_rr_get_interval(2), nice(2),  setpriority(2),\n       getpriority(2), mlockall(2), munlockall(2), mlock(2), munlock(2)\n\n       Programming  for  the  real  world  -  POSIX.4 por Bill O. Gallmeister, O'Reilly & Associates, Inc., ISBN\n       1-56592-074-0\n       IEEE Std 1003.1b-1993 (est\u00e1ndar POSIX.1b)\n       ISO/IEC 9945-1:1996 - \u00c9sta es la nueva revisi\u00f3n de 1996 de POSIX.1, que  contiene  en  un  solo  est\u00e1ndar\n       POSIX.1(1990), POSIX.1b(1993), POSIX.1c(1995), y POSIX.1i(1995).\n\nLinux 2.4.18                                      25 junio 2002                                  SETSCHEDULER(2)\n"},{"NOMBRE": "       sched_yield - cede el procesador\n\n", "SINOPSIS": "       #include <sched.h>\n\n       int sched_yield(void);\n\n", "DESCRIPCION": "       Un proceso puede abandonar el procesador voluntariamente sin bloquearse llamando a sched_yield.  Entonces\n       el proceso se pondr\u00e1 al final de la cola para su prioridad  est\u00e1tica  y  un  nuevo  proceso  obtendr\u00e1  la\n       ejecuci\u00f3n.\n\n       Nota:  Si  el  proceso en curso es el \u00fanico de la lista de m\u00e1s alta prioridad en ese tiempo, este proceso\n       continuar\u00e1 en ejecuci\u00f3n despu\u00e9s de la llamada a sched_yield.\n\n       En sistemas POSIX donde est\u00e1 disponible sched_yield se define _POSIX_PRIORITY_SCHEDULING en <unistd.h>.\n\nVALOR DEVUELTO\n       En caso de \u00e9xito, sched_yield devuelve 0.  En caso de error, se devuelve -1 y se pone en errno  un  valor\n       apropiado.\n\nCONFORME A\n       POSIX.1b (anteriormente POSIX.4)\n\nV\u00c9ASE TAMBI\u00c9N\n       sched_setscheduler(2) para una descripci\u00f3n de la planificaci\u00f3n en Linux.\n\n       Programming  for  the  real  world  -  POSIX.4 por Bill O. Gallmeister, O'Reilly & Associates, Inc., ISBN\n       1-56592-074-0\n       IEEE Std 1003.1b-1993 (est\u00e1ndar POSIX.1b)\n       ISO/IEC 9945-1:1996\n\nLinux 1.3.81                                      10 abril 1996                                   SCHED_YIELD(2)\n"},{"NOMBRE": "       select, pselect, FD_CLR, FD_ISSET, FD_SET, FD_ZERO - multiplexaci\u00f3n de E/S s\u00edncrona\n\n", "SINOPSIS": "       /* Seg\u00fan POSIX 1003.1-2001 */\n       #include <sys/select.h>\n\n       /* Seg\u00fan est\u00e1ndares anteriores */\n       #include <sys/time.h>\n       #include <sys/types.h>\n       #include <unistd.h>\n\n       int select(int n, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, struct timeval *timeout);\n\n       int  pselect(int n, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, const struct timespec *timeout,\n       const sigset_t *sigmask);\n\n       FD_CLR(int fd, fd_set *set);\n       FD_ISSET(int fd, fd_set *set);\n       FD_SET(int fd, fd_set *set);\n       FD_ZERO(fd_set *set);\n\n", "DESCRIPCION": "       Las funciones select y pselect esperan a que un n\u00famero de descriptores de fichero cambien de estado.\n\n       Su funci\u00f3n es id\u00e9ntica, con tres diferencias:\n\n       (i)    La funci\u00f3n select usa un plazo de espera (timeout)  que es de tipo struct timeval (con segundos  y\n              microsegundos), mientras pselect usa el tipo struct timespec (con segundos y nanosegundos).\n\n       (ii)   La  funci\u00f3n  select  puede  actualizar  el  par\u00e1metro  timeout para indicar el tiempo sobrante. La\n              funci\u00f3n pselect no modifica este par\u00e1metro.\n\n       (iii)  La funci\u00f3n select no tiene par\u00e1metro sigmask , y se comporta como pselect llamada con el argumento\n              sigmask a NULL.\n\n       Se  miran  tres  conjuntos  independientes de descriptores. Aqu\u00e9llos listados en readfds ser\u00e1n observados\n       para ver si hay caracteres que llegan a estar disponibles para lectura (m\u00e1s concretamente,  para  ver  si\n       una operaci\u00f3n de lectura no se bloquear\u00e1 - en particular, un descriptor de fichero est\u00e1 tambi\u00e9n preparado\n       en fin-de-fichero), aqu\u00e9llos en writefds ser\u00e1n observados para ver si una operaci\u00f3n de  escritura  no  se\n       bloquear\u00e1,  y  aqu\u00e9llos  en exceptfds ser\u00e1n observados para ver si ocurren excepciones. En caso de \u00e9xito,\n       los conjuntos se modifican en marcha para indicar qu\u00e9 descriptores cambiaron realmente su estado.\n\n       Se proporcionan cuatro macros para manipular los conjuntos.  FD_ZERO  limpiar\u00e1  un  conjunto.   FD_SET  y\n       FD_CLR  a\u00f1aden  o  borran un descriptor dado a o de un conjunto.  FD_ISSET mira a ver si un descriptor es\n       parte del conjunto; esto es \u00fatil despu\u00e9s de que select regrese.\n\n       n es el descriptor con el n\u00famero m\u00e1s alto en cualquiera de los tres conjuntos, m\u00e1s 1.\n\n       timeout es un l\u00edmite superior de la cantidad de tiempo transcurrida antes de que  select  regrese.  Puede\n       ser  cero,  causando  que  select  regrese  inmediatamente. Si timeout es NULL (no hay tiempo de espera),\n       select puede bloquear indefinidamente.\n\n       sigmask es un puntero a una m\u00e1scara de se\u00f1ales (vea sigprocmask(2)); si  es  distinto  de  NULL,  pselect\n       reemplaza en primer lugar la m\u00e1scara de se\u00f1ales actual por aquella a la que apunta sigmask, luego hace la\n       funcion `select',  y por \u00faltimo restablece la m\u00e1scara de se\u00f1ales original de nuevo.\n\n       La idea de pselect es que si alguien quiere esperar un evento, bien una se\u00f1al o cualquier otra cosa sobre\n       un  descriptor  de  fichero,  se  necesita  una  comprobaci\u00f3n at\u00f3mica para evitar condiciones de carrera.\n       (Suponga que el manejador de se\u00f1ales fija una opci\u00f3n global y regresa. Despu\u00e9s una comprobaci\u00f3n  de  esta\n       opci\u00f3n  seguida de una llamada a select() podr\u00eda colgarse indefinidamente si la se\u00f1al lleg\u00f3 justo despu\u00e9s\n       de la comprobaci\u00f3n pero justo antes de la llamada. Por otra parte, pselect le permite bloquear se\u00f1ales en\n       primer lugar, manejar las se\u00f1ales que hayan llegado,  y despu\u00e9s llamar a pselect() con la m\u00e1scara sigmask\n       deseada, evitando la condici\u00f3n de carrera.)  Puesto que en la actualidad Linux no cuenta con una  llamada\n       al sistema pselect() , la rutina actual de glibc2 todav\u00eda tiene este defecto.\n\n   El plazo de espera o timeout\n       Las estructuras de tiempo involucradas est\u00e1n definidas en <sys/time.h> y tienen el siguiente aspecto\n\n              struct timeval {\n                  long    tv_sec;         /* segundos */\n                  long    tv_usec;        /* microsegundos */\n              };\n\n       and\n\n              struct timespec {\n                  long    tv_sec;         /* segundo */\n                  long    tv_nsec;        /* nanosegundos */\n              };\n\n       (Sin embargo,  lea m\u00e1s abajo sobre las versiones de POSIX 1003.1-2001.)\n\n       Hay  alg\u00fan c\u00f3digo por ah\u00ed que llama a select con los tres conjuntos vac\u00edos, n cero, y un timeout distinto\n       de cero como una forma transportable y curiosa de dormir con una precisi\u00f3n por debajo del segundo.\n\n       En Linux, timeout se modifica para reflejar la cantidad  de  tiempo  no  dormido;  la  mayor\u00eda  de  otras\n       implementaciones  no  hacen  esto.  Esto  produce  problemas cuando el c\u00f3digo de Linux que lee timeout se\n       transporta a otros sistemas operativos, y cuando se transporta a Linux c\u00f3digo que  reutiliza  una  struct\n       timeval  para  varias  selects  en  un  bucle  sin reinicializarla. Considere que timeout est\u00e1 indefinido\n       despu\u00e9s de que select regrese.\n\nVALOR DEVUELTO\n       En caso de \u00e9xito, select y pselect devuelven el n\u00famero de descriptores contenidos  en  los  conjuntos  de\n       descriptores,  que puede ser cero si el tiempo de espera expira antes de que ocurra algo interesante.  En\n       caso de error, se devuelve -1, y se pone un valor apropiado en errno; los  conjuntos  y  timeout  estar\u00e1n\n       indefinidos, as\u00ed que no conf\u00ede en sus contenidos tras un error.\n\n", "ERRORES": "       EBADF  Se ha dado un descriptor de fichero inv\u00e1lido en uno de los conjuntos.\n\n       EINTR  Se ha capturado una se\u00f1al no bloqueante.\n\n       EINVAL n es negativo o el valor contenido en timeout no es v\u00e1lido.\n\n       ENOMEM select no ha sido capaz de reservar memoria para las tablas internas.\n\n", "EJEMPLOS": "       #include <stdio.h>\n       #include <sys/time.h>\n       #include <sys/types.h>\n       #include <unistd.h>\n\n       int\n       main(void) {\n           fd_set rfds;\n           struct timeval tv;\n           int valret;\n\n           /* Mirar stdin (df 0) para ver si tiene entrada */\n           FD_ZERO(&rfds);\n           FD_SET(0, &rfds);\n           /* Esperar hasta 5 s */\n           tv.tv_sec = 5;\n           tv.tv_usec = 0;\n\n           valret = select(1, &rfds, NULL, NULL, &tv);\n           /* \u00a1No confiar ahora en el valor de tv! */\n\n           if (valret)\n               printf(\"Los datos ya est\u00e1n disponibles.\\n\");\n               /* FD_ISSET(0, &rfds) ser\u00e1 verdadero */\n           else\n               printf(\"Ning\u00fan dato en 5 segundos.\\n\");\n\n           return 0;\n       }\n\nCONFORME A\n       4.4BSD  (la  funci\u00f3n  select apareci\u00f3 por primera vez en 4.2BSD). Generalmente es transportable a o desde\n       sistemas no-BSD que admitan clones de la capa de z\u00f3calos de BSD  (incluyendo  variantes  System  V).  Sin\n       embargo,  observe que la variante System V normalmente pone la variable de espera antes de salir, pero la\n       variante BSD no.\n\n       La funci\u00f3n pselect est\u00e1 definida en IEEE Std 1003.1g-2000 (POSIX.1g), y parte de POSIX  1003.1-2001.   Se\n       encuentra  en  glibc2.1  y  posteriores.   Glibc2.0 posee una funci\u00f3n con este nombre, que sin embargo no\n       acepta un par\u00e1metro sigmask.\n\n", "OBSERVACIONES": "       fd_set es un buffer de tama\u00f1o fijo. Ejecutar FD_CLR o FD_SET con un valor de fd que sea negativo o  igual\n       o  mayor  que  FD_SETSIZE  tendr\u00e1  un  comportamiento  indefinido.   Adem\u00e1s, POSIX requiere que fd sea un\n       descriptor de fichero v\u00e1lido.\n\n       En lo que se refiere a los tipos involucrados, lo habitual es  que  los  dos  campos  de  una  estructura\n       timeval  sean  de  tipo  long (como se muestra abajo), y la estructura est\u00e9 definida en <sys/time.h>.  La\n       postura de POSIX 1003.1-2001 es\n\n              struct timeval {\n                  time_t         tv_sec;     /* segundos */\n                  suseconds_t    tv_usec;    /* microsegundos */\n              };\n\n       donde la estructura est\u00e1 definida en <sys/select.h> y los tipos  de  datos  time_t  y  suseconds_t  est\u00e1n\n       definidos en <sys/types.h>.\n\n       En  lo  que  se refiere a prototipos, lo habitual es incluir el fichero de cabecera <time.h> para select.\n       La postura de POSIX 1003.1-2001 es incluir el fichero <sys/select.h> para  select  y  pselect.   Libc4  y\n       libc5 no poseen una cabecera <sys/select.h> ; bajo glibc 2.0 y posteriores esta cabecera s\u00ed existe.  Bajo\n       glibc 2.0, proporciona incondicionalemente el prototipo incorrecto para  pselect,  bajo  glibc  2.1-2.2.1\n       proporciona  pselect  cuando  _GNU_SOURCE  est\u00e1  definido,  bajo  glibc 2.2.2-2.2.4 lo proporciona cuando\n       _XOPEN_SOURCE est\u00e1 definido y tiene un valor de 600 o mayor.  Sin duda, desde POSIX 1003.1-2001,  deber\u00eda\n       dar el prototipo por defecto.\n\nV\u00c9ASE TAMBI\u00c9N\n       Para un tutorial detallado con ejemplos, vea select_tut(2).\n\n       Para una mera descripci\u00f3n, vea accept(2), connect(2), poll(2), read(2), recv(2), send(2), sigprocmask(2),\n       write(2)\n\nLinux 2.4                                        9 febrero 2001                                        SELECT(2)\n"},{"NOMBRE": "       select, pselect, FD_CLR, FD_ISSET, FD_SET, FD_ZERO - multiplexaci\u00f3n de E/S s\u00edncrona\n\n", "SINOPSIS": "       #include <sys/time.h>\n       #include <sys/types.h>\n       #include <unistd.h>\n\n       int select(int nfds, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, struct timeval *utimeout);\n\n       int  pselect(int  nfds,  fd_set  *readfds,  fd_set  *writefds,  fd_set  *exceptfds, const struct timespec\n       *ntimeout, sigset_t *sigmask);\n\n       FD_CLR(int fd, fd_set *set);\n       FD_ISSET(int fd, fd_set *set);\n       FD_SET(int fd, fd_set *set);\n       FD_ZERO(fd_set *set);\n\n", "DESCRIPCION": "       select (o pselect) es la funci\u00f3n eje de la mayor parte de programas en C que manejan m\u00e1s de un descriptor\n       de fichero (o manejador de conector) simult\u00e1neamente de manera eficiente.  Sus principales argumentos son\n       tres  arrays  de  descriptores  de  fichero:  readfds,  writefds,  y  exceptfds.  La  forma  de  utilizar\n       habitualmente  select  es  bloquearse  mientras  se  espera  un  \"cambio  de  estado\" en uno o m\u00e1s de los\n       descriptores de fichero.  Un \"cambio de estado\" se produce cuando se vuelven disponibles  m\u00e1s  car\u00e1cteres\n       del  descriptor  de  fichero,  o  cuando  se  dispone  de espacio en los buffers internos del n\u00facleo para\n       escribir m\u00e1s car\u00e1cteres en el descriptor de fichero, o cuando un descriptor de fichero provoca  un  error\n       (en el caso de un conector o tuber\u00eda se da cuando se cierra el otro extremo de la conexi\u00f3n).\n\n       En  resumen, select tan s\u00f3lo vigila varios descriptores de fichero, y es la llamada est\u00e1ndar en Unix para\n       hacerlo.\n\n       Los arrays de descriptores de fichero son llamados conjuntos de descriptores de fichero.   Cada  conjunto\n       es  declarado  con  el  tipo  fd_set,  y su contenido puede ser alterado con las macros FD_CLR, FD_ISSET,\n       FD_SET  y FD_ZERO. FD_ZERO es normalmente la primera funci\u00f3n que se  utiliza  sobre  un  conjunto  reci\u00e9n\n       declarado.  A  partir  de  aqu\u00ed, aquellos descriptores de fichero individuales en los que est\u00e9 interesado\n       pueden ser a\u00f1adidos uno por uno con FD_SET.  select modifica el contenido de los conjuntos de  acuerdo  a\n       las  reglas descritas abajo; despu\u00e9s de invocar a select puede comprobar si su descriptor de fichero est\u00e1\n       a\u00fan presente en el conjunto con la macro FD_ISSET.  FD_ISSET devuelve un valor distinto  de  cero  si  el\n       descriptor  est\u00e1  presente  y  cero  si no lo est\u00e1. FD_CLR elimina un descriptor de fichero del conjunto,\n       aunque yo no veo el uso que puede tener en un programa correcto.\n\n", "ARGUMENTOS": "       readfds\n              Este conjunto es observado para ver si hay datos  disponibles  para  leer  en  cualquiera  de  sus\n              descriptores  de fichero. Despu\u00e9s de que select regrese, borrar\u00e1 de readfds todos los descriptores\n              de fichero salvo aquellos sobre los que pueda ejecutarse inmediatamente una operaci\u00f3n  de  lectura\n              con una llamada a recv() (para conectores) o read() (para tuber\u00edas, ficheros y conectores).\n\n       writefds\n              Este  conjunto  es  observado  para  ver  si  hay espacio para escribir datos en cualquiera de sus\n              descriptores de fichero. Despu\u00e9s de que select regrese, borrar\u00e1 de writefds todos los descriptores\n              de  fichero  salvo  aquellos  sobre  los  que  se  pueda  ejecutar inmediatamente una operaci\u00f3n de\n              escritura con una llamada a  send()  (para  conectores)  o  write()  (para  tuber\u00edas,  ficheros  y\n              conectores).\n\n       exceptfds\n              Este  conjunto es observado para las excepciones o errores sobre cualquiera de sus descriptores de\n              fichero. Sin embargo, realmente es s\u00f3lo un rumor. Para lo que en  verdad  usa  exceptfds  es  para\n              observar  datos  \"fuera  de  orden\"  (OOB,  out-of-band).  Los datos OOB son datos enviados por un\n              conector usando la bandera MSG_OOB, y por tanto exceptfds s\u00f3lo se aplica realmente  a  conectores.\n              Vea  el  contenido de recv(2) y send(2) sobre este tema. Despu\u00e9s de que select regrese, borrar\u00e1 de\n              exceptfds todos los descriptores de fichero salvo aquellos sobre los que se puede leer datos  OOB.\n              S\u00f3lo  puede  leer  un  byte  de  datos OOB de todas maneras (con la operaci\u00f3n recv()), y se pueden\n              escribir datos OOB en cualquier momento sin bloquearse. Por tanto no hay necesidad  de  un  cuarto\n              conjunto para comprobar si en un conector hay disponibles datos OOB para escribir.\n\n       nfds   Es un entero que indica uno m\u00e1s del m\u00e1ximo de cualquier descriptor de fichero en cualquiera de los\n              conjuntos. En otras palabras, mientras est\u00e1 atareado  a\u00f1adiendo  descriptores  de  fichero  a  sus\n              conjuntos,  debe  calcular el m\u00e1ximo valor entero de todos ellos, incrementar este valor en uno, y\n              pasarlo como nfds a select.\n\n       utimeout\n              Es el m\u00e1ximo valor de  tiempo  que  select  debe  esperar  antes  de  regresar,  incluso  si  nada\n              interesante  ocurri\u00f3.  Si  este  valor  se  pasa  como  NULL,  select se bloquear\u00e1 indefinidamente\n              esperando un evento.  utimeout puede ser puesto a cero segundos, lo que provoca que select regrese\n              inmediatamente. La estructura struct timeval est\u00e1 definida como,\n\n              struct timeval {\n                  time_t tv_sec;    /* segundos */\n                  long tv_usec;     /* microsegundos */\n              };\n\n       ntimeout\n              Este  argumento  tiene  el  mismo significado que utimeout pero struct timespec tiene precisi\u00f3n de\n              nanosegundos como sigue,\n\n              struct timespec {\n                  long tv_sec;    /* segundos */\n                  long tv_nsec;   /* nanosegundos */\n              };\n\n       sigmask\n              Este argumento contiene un conjunto de se\u00f1ales  permitidas  mientras  se  realiza  una  llamada  a\n              pselect  (vea  sigaddset(3)  y  sigprocmask(2)).  Puede  valer  NULL,  en cuyo caso no modifica el\n              conjunto de se\u00f1ales permitidas en la entrada y la salida de la funci\u00f3n. Se  comportar\u00e1  igual  que\n              select.\n\nCOMBINANDO SE\u00d1ALES Y EVENTOS DE DATOS\n       pselect  debe  ser  usada  si  est\u00e1  esperando  una se\u00f1al as\u00ed como datos de un descriptor de fichero. Los\n       programas que reciben se\u00f1ales como eventos normalmente utilizan el manejador de se\u00f1ales para activar  una\n       bandera  global.   La  bandera global indicar\u00e1 que el evento debe ser procesado en el bucle principal del\n       programa. Una se\u00f1al provocar\u00e1 que la llamada a select (o pselect) regrese tomando la  variable  errno  el\n       valor  EINTR.  Este  comportamiento  es  esencial  para que las se\u00f1ales puedan ser procesadas en el bucle\n       principal del programa, de otra manera select se bloquear\u00eda indefinidamente.  Ahora, en alg\u00fan  lugar  del\n       bucle  principal habr\u00e1 una condici\u00f3n para comprobar la bandera global. As\u00ed que debemos preguntarnos: \u00bfqu\u00e9\n       ocurre si una se\u00f1al llega despu\u00e9s de la condici\u00f3n, pero antes de la llamada a select?   La  respuesta  es\n       que  select  se  bloquear\u00eda  indefinidamente,  incluso  a\u00fan si hay un evento pendiente. Esta condici\u00f3n de\n       carrera se soluciona con la llamada pselect. Esta llamada puede utilizarse para enmascarar se\u00f1ales que no\n       van  a  ser  recibidas salvo dentro de la llamada pselect. Por ejemplo, digamos que el evento en cuesti\u00f3n\n       fue la salida de un proceso hijo. Antes del comienzo del bucle principal,  bloquear\u00edamos  SIGCHLD  usando\n       sigprocmask.  Nuestra llamada pselect podr\u00eda habilitar SIGCHLD usando la m\u00e1scara de se\u00f1al virgen. Nuestro\n       programa se podr\u00eda parecer a \u00e9sto:\n\n       int child_events = 0;\n\n       void child_sig_handler (int x) {\n           child_events++;\n           signal (SIGCHLD, child_sig_handler);\n       }\n\n       int main (int argc, char **argv) {\n           sigset_t sigmask, orig_sigmask;\n\n           sigemptyset (&sigmask);\n           sigaddset (&sigmask, SIGCHLD);\n           sigprocmask (SIG_BLOCK, &sigmask,\n                                       &orig_sigmask);\n\n           signal (SIGCHLD, child_sig_handler);\n\n           for (;;) { /* bucle principal */\n               for (; child_events > 0; child_events--) {\n                   /* procesar el evento aqu\u00ed */\n               }\n               r = pselect (nfds, &rd, &wr, &er, 0, &orig_sigmask);\n\n               /* cuerpo principal del programa */\n           }\n       }\n\n       Observe que la llamada pselect de arriba puede ser reemplazada con:\n\n               sigprocmask (SIG_BLOCK, &orig_sigmask, 0);\n               r = select (nfds, &rd, &wr, &er, 0);\n               sigprocmask (SIG_BLOCK, &sigmask, 0);\n\n       pero todav\u00eda queda la posibilidad de que una se\u00f1al pueda llegar despu\u00e9s del primer sigprocmask y antes de\n       select. Si hace esto, es prudente que ponga al menos un tiempo de espera finito para que el proceso no se\n       bloquee.  Es probable que glibc funcione actualmente de esta manera. El n\u00facleo de Linux no tiene  todav\u00eda\n       una  llamada  al  sistema  pselect  nativa por lo que probablemente todo esto sea nada m\u00e1s que hablar por\n       hablar.\n\n", "PRACTICA": "       Por lo tanto, \u00bfcu\u00e1l es el prop\u00f3sito de select? \u00bfNo puedo simplemente leer y escribir en mis  descriptores\n       siempre  que  quiera?  El significado de select es observar varios descriptores al mismo tiempo y poner a\n       dormir adecuadamente a los procesos si no hay ninguna actividad. Esto lo hace mientras le permite manejar\n       varias tuber\u00edas y conectores de manera simult\u00e1nea. Los programadores de Unix a menudo se encuentran en la\n       situaci\u00f3n de manejar la E/S de m\u00e1s de un descriptor  de  fichero  donde  el  flujo  de  datos  puede  ser\n       intermitente.   Si tan s\u00f3lo creara una secuencia de llamadas read y write, podr\u00eda encontrarse con que una\n       de sus llamadas puede bloquearse esperando datos  de/a  un  descriptor  de  fichero,  mientras  que  otro\n       descriptor   de   fichero   est\u00e1  siendo  inutilizado  aunque  haya  datos  disponibles.   select  maneja\n       eficientemente esta situaci\u00f3n.\n\n       Un ejemplo t\u00edpico de select lo podemos encontrar en la p\u00e1gina de manual de select:\n\n       #include <stdio.h>\n       #include <sys/time.h>\n       #include <sys/types.h>\n       #include <unistd.h>\n\n       int\n       main(void) {\n           fd_set rfds;\n           struct timeval tv;\n           int retval;\n\n           /* Observar stdin (descriptor 0) para ver cuando hay\n              entrada disponible. */\n           FD_ZERO(&rfds);\n           FD_SET(0, &rfds);\n           /* Esperar hasta cinco segundos. */\n           tv.tv_sec = 5;\n           tv.tv_usec = 0;\n\n           retval = select(1, &rfds, NULL, NULL, &tv);\n           /* No conf\u00ede en el valor de tv por ahora! */\n\n           if (retval)\n               printf(\"Los datos ya est\u00e1n disponibles.\\n\");\n               /* FD_ISSET(0, &rfds) ser\u00e1 verdadero. */\n           else\n               printf(\"No ha habido datos en cinco segundos.\\n\");\n\n           exit(0);\n       }\n\nEJEMPLO DE REDIRECCI\u00d3N DE PUERTOS\n       Aqu\u00ed viene un ejemplo que ilustra mejor la verdadera utilidad de  select.  El  listado  de  abajo  es  un\n       programa de reenv\u00edo TCP que redirige de un puerto TCP a otro.\n\n       #include <stdlib.h>\n       #include <stdio.h>\n       #include <unistd.h>\n       #include <sys/time.h>\n       #include <sys/types.h>\n       #include <string.h>\n       #include <signal.h>\n       #include <sys/socket.h>\n       #include <netinet/in.h>\n       #include <arpa/inet.h>\n       #include <errno.h>\n\n       static int forward_port;\n\n       #undef max\n       #define max(x,y) ((x) > (y) ? (x) : (y))\n\n       static int listen_socket (int listen_port) {\n           struct sockaddr_in a;\n           int s;\n           int yes;\n           if ((s = socket (AF_INET, SOCK_STREAM, 0)) < 0) {\n               perror (\"socket\");\n               return -1;\n           }\n           yes = 1;\n           if (setsockopt\n               (s, SOL_SOCKET, SO_REUSEADDR,\n                (char *) &yes, sizeof (yes)) < 0) {\n               perror (\"setsockopt\");\n               close (s);\n               return -1;\n           }\n           memset (&a, 0, sizeof (a));\n           a.sin_port = htons (listen_port);\n           a.sin_family = AF_INET;\n           if (bind\n               (s, (struct sockaddr *) &a, sizeof (a)) < 0) {\n               perror (\"bind\");\n               close (s);\n               return -1;\n           }\n           printf (\"aceptando conexiones en el puerto %d\\n\",\n                   (int) listen_port);\n           listen (s, 10);\n           return s;\n       }\n\n       static int connect_socket (int connect_port,\n                                  char *address) {\n           struct sockaddr_in a;\n           int s;\n           if ((s = socket (AF_INET, SOCK_STREAM, 0)) < 0) {\n               perror (\"socket\");\n               close (s);\n               return -1;\n           }\n\n           memset (&a, 0, sizeof (a));\n           a.sin_port = htons (connect_port);\n           a.sin_family = AF_INET;\n\n           if (!inet_aton\n               (address,\n                (struct in_addr *) &a.sin_addr.s_addr)) {\n               perror (\"formato de direcci\u00f3n IP incorrecto\");\n               close (s);\n               return -1;\n           }\n\n           if (connect\n               (s, (struct sockaddr *) &a,\n                sizeof (a)) < 0) {\n               perror (\"connect()\");\n               shutdown (s, SHUT_RDWR);\n               close (s);\n               return -1;\n           }\n           return s;\n       }\n\n       #define SHUT_FD1 {                      \\\n               if (fd1 >= 0) {                 \\\n                   shutdown (fd1, SHUT_RDWR);  \\\n                   close (fd1);                \\\n                   fd1 = -1;                   \\\n               }                               \\\n           }\n\n       #define SHUT_FD2 {                      \\\n               if (fd2 >= 0) {                 \\\n                   shutdown (fd2, SHUT_RDWR);  \\\n                   close (fd2);                \\\n                   fd2 = -1;                   \\\n               }                               \\\n           }\n\n       #define BUF_SIZE 1024\n\n       int main (int argc, char **argv) {\n           int h;\n           int fd1 = -1, fd2 = -1;\n           char buf1[BUF_SIZE], buf2[BUF_SIZE];\n           int buf1_avail, buf1_written;\n           int buf2_avail, buf2_written;\n\n           if (argc != 4) {\n               fprintf (stderr,\n                        \"Uso\\n\\tfwd <puerto-escucha> \\\n       <redirigir-a-puerto> <redirigir-a-direcci\u00f3n-ip>\\n\");\n               exit (1);\n           }\n\n           signal (SIGPIPE, SIG_IGN);\n\n           forward_port = atoi (argv[2]);\n\n           h = listen_socket (atoi (argv[1]));\n           if (h < 0)\n               exit (1);\n\n           for (;;) {\n               int r, nfds = 0;\n               fd_set rd, wr, er;\n               FD_ZERO (&rd);\n               FD_ZERO (&wr);\n               FD_ZERO (&er);\n               FD_SET (h, &rd);\n               nfds = max (nfds, h);\n               if (fd1 > 0 && buf1_avail < BUF_SIZE) {\n                   FD_SET (fd1, &rd);\n                   nfds = max (nfds, fd1);\n               }\n               if (fd2 > 0 && buf2_avail < BUF_SIZE) {\n                   FD_SET (fd2, &rd);\n                   nfds = max (nfds, fd2);\n               }\n               if (fd1 > 0\n                   && buf2_avail - buf2_written > 0) {\n                   FD_SET (fd1, &wr);\n                   nfds = max (nfds, fd1);\n               }\n               if (fd2 > 0\n                   && buf1_avail - buf1_written > 0) {\n                   FD_SET (fd2, &wr);\n                   nfds = max (nfds, fd2);\n               }\n               if (fd1 > 0) {\n                   FD_SET (fd1, &er);\n                   nfds = max (nfds, fd1);\n               }\n               if (fd2 > 0) {\n                   FD_SET (fd2, &er);\n                   nfds = max (nfds, fd2);\n               }\n\n               r = select (nfds + 1, &rd, &wr, &er, NULL);\n\n               if (r == -1 && errno == EINTR)\n                   continue;\n               if (r < 0) {\n                   perror (\"select()\");\n                   exit (1);\n               }\n               if (FD_ISSET (h, &rd)) {\n                   unsigned int l;\n                   struct sockaddr_in client_address;\n                   memset (&client_address, 0, l =\n                           sizeof (client_address));\n                   r = accept (h, (struct sockaddr *)\n                               &client_address, &l);\n                   if (r < 0) {\n                       perror (\"accept()\");\n                   } else {\n                       SHUT_FD1;\n                       SHUT_FD2;\n                       buf1_avail = buf1_written = 0;\n                       buf2_avail = buf2_written = 0;\n                       fd1 = r;\n                       fd2 =\n                           connect_socket (forward_port,\n                                           argv[3]);\n                       if (fd2 < 0) {\n                           SHUT_FD1;\n                       } else\n                           printf (\"conexi\u00f3n desde %s\\n\",\n                                   inet_ntoa\n                                   (client_address.sin_addr));\n                   }\n               }\n       /* NB: lee datos OOB antes de las lecturas normales */\n               if (fd1 > 0)\n                   if (FD_ISSET (fd1, &er)) {\n                       char c;\n                       errno = 0;\n                       r = recv (fd1, &c, 1, MSG_OOB);\n                       if (r < 1) {\n                           SHUT_FD1;\n                       } else\n                           send (fd2, &c, 1, MSG_OOB);\n                   }\n               if (fd2 > 0)\n                   if (FD_ISSET (fd2, &er)) {\n                       char c;\n                       errno = 0;\n                       r = recv (fd2, &c, 1, MSG_OOB);\n                       if (r < 1) {\n                           SHUT_FD1;\n                       } else\n                           send (fd1, &c, 1, MSG_OOB);\n                   }\n               if (fd1 > 0)\n                   if (FD_ISSET (fd1, &rd)) {\n                       r =\n                           read (fd1, buf1 + buf1_avail,\n                                 BUF_SIZE - buf1_avail);\n                       if (r < 1) {\n                           SHUT_FD1;\n                       } else\n                           buf1_avail += r;\n                   }\n               if (fd2 > 0)\n                   if (FD_ISSET (fd2, &rd)) {\n                       r =\n                           read (fd2, buf2 + buf2_avail,\n                                 BUF_SIZE - buf2_avail);\n                       if (r < 1) {\n                           SHUT_FD2;\n                       } else\n                           buf2_avail += r;\n                   }\n               if (fd1 > 0)\n                   if (FD_ISSET (fd1, &wr)) {\n                       r =\n                           write (fd1,\n                                  buf2 + buf2_written,\n                                  buf2_avail -\n                                  buf2_written);\n                       if (r < 1) {\n                           SHUT_FD1;\n                       } else\n                           buf2_written += r;\n                   }\n               if (fd2 > 0)\n                   if (FD_ISSET (fd2, &wr)) {\n                       r =\n                           write (fd2,\n                                  buf1 + buf1_written,\n                                  buf1_avail -\n                                  buf1_written);\n                       if (r < 1) {\n                           SHUT_FD2;\n                       } else\n                           buf1_written += r;\n                   }\n       /* comprueba si se han escrito tantos datos como se han le\u00eddo */\n               if (buf1_written == buf1_avail)\n                   buf1_written = buf1_avail = 0;\n               if (buf2_written == buf2_avail)\n                   buf2_written = buf2_avail = 0;\n       /* si un extremo ha cerrado la conexi\u00f3n, contin\u00faa escribiendo al otro\n          extremo hasta que no queden datos */\n               if (fd1 < 0\n                   && buf1_avail - buf1_written == 0) {\n                   SHUT_FD2;\n               }\n               if (fd2 < 0\n                   && buf2_avail - buf2_written == 0) {\n                   SHUT_FD1;\n               }\n           }\n           return 0;\n       }\n\n       El  programa  anterior  reenv\u00eda  correctamente  la mayor\u00eda de los tipos de conexiones TCP, incluyendo los\n       datos OOB de se\u00f1al transmitidos por los servidores  telnet.  Tambi\u00e9n  es  capaz  de  manejar  el  dif\u00edcil\n       problema  de  tener  flujos  de  datos en ambas direcciones a la vez.  Podr\u00eda pensar que es m\u00e1s eficiente\n       hacer una llamada fork() y dedicar un hilo a cada flujo. Esto es m\u00e1s complicado de lo que podr\u00eda  pensar.\n       Otra  idea es activar E/S no bloqueante haciendo una llamada ioctl(). Esto tambi\u00e9n tiene sus problemas ya\n       que acaba teniendo que utilizar plazos de tiempo (timeouts) ineficientes.\n\n       El programa no maneja m\u00e1s de una conexi\u00f3n simult\u00e1nea a la vez, aunque podr\u00eda extenderse  f\u00e1cilmente  para\n       hacer  esto  con una lista ligada de buffers - uno para cada conexi\u00f3n. Por ahora, una nueva conexi\u00f3n hace\n       que la conexi\u00f3n actual se caiga.\n\nREGLAS DE SELECT\n       Muchas personas que intentan usar select se encuentran con un comportamiento que es dif\u00edcil de comprender\n       y  que  produce  resultados  no transportables o dudosos. Por ejemplo, el programa anterior se ha escrito\n       cuidadosamente para que no se bloquee en ning\u00fan punto,  aunque  para  nada  ha  establecido  el  modo  no\n       bloqueante  en  sus descriptores de fichero (vea ioctl(2)). Es f\u00e1cil introducir errores sutiles que hagan\n       desaparecer la ventaja de usar select, por lo que voy a presentar una lista de los aspectos esenciales  a\n       tener en cuenta cuando se use la llamada select.\n\n       1.     Siempre  debe  de intentar usar select sin un plazo de tiempo. Su programa no debe tener que hacer\n              nada si no hay datos disponibles. El c\u00f3digo que depende de los plazos de tiempo no es  normalmente\n              portable y es dif\u00edcil de depurar.\n\n       2.     Para  un  resultado  eficiente, el valor de nfds se debe calcular correctamente de la forma que se\n              explica m\u00e1s abajo.\n\n       3.     No debe a\u00f1adir a ning\u00fan conjunto un descriptor de fichero  para  el  que  no  tenga  intenci\u00f3n  de\n              comprobar  su  resultado  (y  responder adecuadamente) tras una llamada a select. Vea la siguiente\n              regla.\n\n       4.     Cuando select regrese, se  deben  comprobar  todos  los  descriptores  de  fichero  de  todos  los\n              conjuntos.  Se  debe escribir en cualquier descriptor de fichero que est\u00e9 listo para ello, se debe\n              leer de cualquier descriptor de fichero que est\u00e9 listo para ello, etc.\n\n       5.     Las funciones read(), recv(), write() y send() no leen/escriben necesariamente todos los datos que\n              haya  solicitado.  Si  leen/escriben  todos  los datos es porque tiene poco tr\u00e1fico y un flujo muy\n              r\u00e1pido. Ese no va a ser siempre el caso. Debe hacer frente al caso en el que  sus  funciones  s\u00f3lo\n              logren enviar o recibir un \u00fanico byte.\n\n       6.     Nunca  lea/escriba  byte  a  byte  a menos que est\u00e9 realmente seguro de que tiene que procesar una\n              peque\u00f1a cantidad de datos. Es extremadamente ineficiente no leer/escribir cada  vez  tantos  datos\n              como pueda almacenar. Los buffers del ejemplo anterior son de 1024 bytes aunque podr\u00edan f\u00e1cilmente\n              hacerse tan grandes como el m\u00e1ximo tama\u00f1o de paquete posible en su red local.\n\n       7.     Adem\u00e1s de la llamada select(), las funciones read(), recv(), write() y send() pueden  devolver  -1\n              con  un  errno  EINTR  o  EAGAIN (EWOULDBLOCK) que no son errores. Estos resultados deben tratarse\n              adecuadamente (lo que no se ha hecho en el ejemplo anterior). Si  su  programa  no  va  a  recibir\n              ninguna  se\u00f1al,  entonces es muy poco probable que obtenga EINTR.  Si su programa no activa E/S no\n              bloqueante, no obtendr\u00e1 EAGAIN.  Sin embargo, todav\u00eda  debe  hacer  frente  a  estos  errores  por\n              completitud.\n\n       8.     Nunca llame a read(), recv(), write() o send() con una longitud de buffer de cero.\n\n       9.     Excepto  como  se  indica en 7., las funciones read(), recv(), write() y send() nunca devuelven un\n              valor menor que 1 salvo cuando se produce un error. Por ejemplo, un read() sobre una tuber\u00eda donde\n              el  otro  extremo ha muerto devuelve cero (al igual que un error de fin de fichero), pero devuelve\n              cero s\u00f3lo una vez (un lectura o escritura posterior devolver\u00e1  -1).  Cuando  cualquiera  de  estas\n              funciones  devuelva  0 o -1, no debe pasar el descriptor correspondiente a select nunca m\u00e1s. En el\n              ejemplo anterior, cierro el descriptor inmediatamente y le asigno -1 para evitar que se  vuelva  a\n              incluir en un conjunto.\n\n       10.    El  valor  del  plazo de tiempo debe inicializarse con cada nueva llamada a select, ya que algunos\n              sistemas operativos modifican la estructura. pselect, sin embargo, no modifica  su  estructura  de\n              plazo de tiempo.\n\n       11.    He  o\u00eddo  que la capa de conectores de Windows no sabe tratar adecuadamente los datos OOB. Tampoco\n              sabe tratar llamadas select cuando ning\u00fan descriptor de fichero se ha incluido en ning\u00fan conjunto.\n              No  tener  ning\u00fan  descriptor  de  fichero  activo es una forma \u00fatil de domir a un proceso con una\n              precisi\u00f3n de menos de un segundo usando el plazo de tiempo. (Mire m\u00e1s abajo.)\n\nEMULACI\u00d3N DE USLEEP\n       En sistemas que no tienen una funci\u00f3n usleep, puede llamar a select con un plazo de espera finito  y  sin\n       descriptores de fichero de la siguiente  manera:\n\n           struct timeval tv;\n           tv.tv_sec = 0;\n           tv.tv_usec = 200000;  /* 0.2 segundos */\n           select (0, NULL, NULL, NULL, &tv);\n\n       Sin embargo, s\u00f3lo se garantiza que funcionar\u00e1 en sistemas Unix.\n\nVALOR DEVUELTO\n       En  caso  de  \u00e9xito,  select  devuelve el n\u00famero total de descriptores que est\u00e1n presentes todav\u00eda en los\n       conjuntos de descriptores de fichero.\n\n       Si se cumple el plazo de espera para select, los conjuntos de  descriptores  de  fichero  deber\u00edan  estar\n       vac\u00edos  (pero  en  algunos  sistemas  puede  que  no  sea  as\u00ed).   Sin  embargo  el  valor  devuelto ser\u00e1\n       definitivamente cero.\n\n       Un valor devuelto de -1 indica un error, y la variable errno ser\u00e1 modificada apropiadamente. En  caso  de\n       error,  el  contenido  de  los conjuntos devueltos y la estructura timeout es indefinido y no deber\u00eda ser\n       usado.  pselect, sin embargo, no modifica nunca ntimeout.\n\n", "ERRORES": "       EBADF  Un conjunto contiene un descriptor de fichero no v\u00e1lido. Este error ocurre a menudo cuando a\u00f1ade a\n              un  conjunto un descriptor de fichero sobre el que ya se ha ejecutado la operaci\u00f3n close, o cuando\n              ese descriptor de fichero ya ha experimentado alguna clase de error. Por tanto  deber\u00eda  dejar  de\n              a\u00f1adir  a  los  conjuntos  cualquier  descriptor  de  fichero  que  devuelva un error de lectura o\n              escritura.\n\n       EINTR  Una se\u00f1al de interrupci\u00f3n fue capturada,  como  SIGINT  o  SIGCHLD  etc.   En  este  caso  deber\u00eda\n              reconstruir sus conjuntos de descriptores de fichero y volverlo a intentar.\n\n       EINVAL Ocurre si nfds es negativo o si se especifica un valor incorrecto para utimeout o ntimeout.\n\n       ENOMEM Fallo interno de reserva de memoria.\n\n", "OBSERVACIONES": "       Generalmente  hablando,  todos  los sistemas operativos que soportan conectores, tambi\u00e9n soportan select.\n       Algunas personas consideran que select es una funci\u00f3n esot\u00e9rica y raramente usada. De hecho, muchos tipos\n       de  programas  se  vuelven  extremadamente  complicados sin ella. select puede utilizarse para solucionar\n       muchos problemas de manera eficiente y portable. Problemas  que  los  programadores  ingenuos  tratan  de\n       resolver usando hilos, procesos hijos, IPCs, se\u00f1ales, memoria compartida y otros oscuros m\u00e9todos. pselect\n       es una funci\u00f3n m\u00e1s reciente que es menos com\u00fanmente usada.\n\n       La llamada al sistema poll(2) tiene la misma funcionalidad que select, pero con un  comportamiento  menos\n       sutil. Es menos portable que select.\n\nCONFORME A\n       4.4BSD (la funci\u00f3n select apareci\u00f3 por primera vez en 4.2BSD). Generalmente portable a/desde sistemas no-\n       BSD que soporten clones de la capa de conector BSD (incluyendo  variantes  de  System  V).  Sin  embargo,\n       observe  que  la  variante de System V establece normalmente la variable timeout antes de salir, mientras\n       que la variante de BSD no lo hace.\n\n       La funci\u00f3n pselect est\u00e1 definida en IEEE Std  1003.1g-2000  (POSIX.1g).   Se  encuentra  en  glibc2.1  en\n       adelante. Glibc2.0 tiene una funci\u00f3n con el mismo nombre, que sin embargo no acepta un par\u00e1metro sigmask.\n\nV\u00c9ASE TAMBI\u00c9N\n       accept(2),   connect(2),   ioctl(2),   poll(2),   read(2),  recv(2),  select(2),  send(2),  sigaddset(3),\n       sigdelset(3), sigemptyset(3), sigfillset(3), sigismember(3), sigprocmask(2), write(2)\n\n", "AUTOR": "       Esta p\u00e1gina de manual fue escrita por Paul Sheer.\n\nLinux 2.4                                        21 octubre 2001                                   SELECT_TUT(2)\n"},{"NOMBRE": "       semctl - operaciones de control de sem\u00e1foros\n\n", "SINOPSIS": "       #include <sys/types.h>\n       #include <sys/ipc.h>\n       #include <sys/sem.h>\n\n       int semctl(int semid, int semnum, int cmd, ...);\n\n", "DESCRIPCION": "       La  funci\u00f3n  semctl  realiza  la operaci\u00f3n de control especificada por cmd sobre el conjunto de sem\u00e1foros\n       identificado por semid, o en el sem\u00e1foro semnum-th de  dicho  conjunto.   (Los  sem\u00e1foros  son  n\u00famerados\n       comenzando por el 0.)\n\n       Esta    funci\u00f3n    tiene    tres    o   cuatro   argumentos.   Cuando   hay   cuatro,   la   llamada   es\n       semctl(semid,semnum,cmd,arg); donde el cuarto argumento arg tiene como tipo  union  semun  definido  como\n       sigue:\n\n       #if defined(__GNU_LIBRARY__) && !defined(_SEM_SEMUN_UNDEFINED)\n       /* la union semun se define al incluir <sys/sem.h> */\n       #else\n       /* seg\u00fan X/OPEN tenemos que definirla nosostros mismos */\n       union semun {\n               int val;                    /* valor para SETVAL */\n               struct semid_ds *buf;       /* buffer para IPC_STAT, IPC_SET */\n               unsigned short int *array;  /* array para GETALL, SETALL */\n               struct seminfo *__buf;      /* buffer para IPC_INFO */\n       };\n       #endif\n\n       Valores v\u00e1lidos para cmd son:\n\n       IPC_STAT    Copiar  informaci\u00f3n  de  la  estructura  de  datos del conjunto de sem\u00e1foros en la estructura\n                   apuntada por arg.buf.  El argumento semnum es ignorado.  El proceso que  realiza  la  llamada\n                   debe tener privilegios de acceso de lectura en el conjunto de sem\u00e1foros.\n\n       IPC_SET     Escribir  los valores de algunos miembros de la estructura semid_ds apuntada por arg.buf a la\n                   estructura de datos del conjunto de sem\u00e1foros, actualizando  tambien  su  miembro  sem_ctime.\n                   Los  miembros  de  la  estructura  provista  por  el usuario struct semid_ds a los que apunta\n                   arg.buf son\n\n                           sem_perm.uid\n                           sem_perm.gid\n                           sem_perm.mode   /* solo los 9 bits m\u00e1s bajos */\n\n                   El identificador de usuario efectivo del proceso invocador debe ser el del  super-usuario,  o\n                   coincidir con el del creador o propietario del conjunto de sem\u00e1foros.  El argumento semnum es\n                   ignorado.\n\n       IPC_RMID    Borrar inmediatamente el conjunto de sem\u00e1foros y sus estructuras de datos, despertando  todos\n                   los  procesos  en  espera  (devuelve  un error, y errno puesto a EIDRM).  El identificador de\n                   usuario efectivo del proceso invocador debe ser el del super-usuario, o coincidir con el  del\n                   creador o propietario del conjunto de sem\u00e1foros.  El argumento semnum es ignorado.\n\n       GETALL      Devuelve  semval para todos los sem\u00e1foros del conjunto, en arg.array.  El argumento semnum es\n                   ignorado.  El proceso que realiza la llamada  ha  de  tener  privilegios  de  lectura  en  el\n                   conjunto de sem\u00e1foros.\n\n       GETNCNT     La  llamada  al sistema devuelve el valor de semncnt para el semnum-avo sem\u00e1foro del conjunto\n                   (p.ej. el n\u00famero de procesos esperando que aumente semval para  el  semnum-avo  sem\u00e1foro  del\n                   conjunto).   El  proceso  que  realiza  la  llamada  ha de tener privilegios de lectura en el\n                   conjunto de sem\u00e1foros.\n\n       GETPID      La llamada al sistema devuelve el valor de sempid para el semnum-avo  sem\u00e1foro  del  conjunto\n                   (p.ej. el pid del proceso que ejecut\u00f3 la \u00faltima llamada semop para el semnum-avo sem\u00e1foro del\n                   conjunto).  El proceso que realiza la llamada ha  de  tener  privilegios  de  lectura  en  el\n                   conjunto de sem\u00e1foros.\n\n       GETVAL      La  llamada  al sistema devuelve el valor de semval para el semnum-avo sem\u00e1foro del conjunto.\n                   El proceso que realiza la llamada ha de tener  privilegios  de  lectura  en  el  conjunto  de\n                   sem\u00e1foros.\n\n       GETZCNT     La  llamada  al sistema devuelve el valor de semzcnt para el semnum-avo sem\u00e1foro del conjunto\n                   (p.ej. el n\u00famero de procesos que esperan que semval del semnum-avo sem\u00e1foro del  conjunto  se\n                   ponga  a  0).   El  proceso  que  realiza la llamada ha de tener privilegios de lectura en el\n                   conjunto de sem\u00e1foros.\n\n       SETALL      Poner semval para todos los sem\u00e1foros del conjunto usando arg.array, actualizando tambi\u00e9n  el\n                   miembro sem_ctime de la estructura semid_ds asociada al conjunto.  Los registros de anulaci\u00f3n\n                   son limpiados, para los sem\u00e1foros cambiados, en todos los procesos. Los  procesos  que  est\u00e1n\n                   durmiendo  en  la cola de espera son despertados si alg\u00fan semval se pone a 0 o se incrementa.\n                   El argumento semnum es ignorado.  El proceso que realiza la llamada ha de  tener  privilegios\n                   de modificaci\u00f3n en el conjunto de sem\u00e1foros.\n\n       SETVAL      Poner  el  valor  de  semval a arg.val para el semnum-avo sem\u00e1foro del conjunto, actualizando\n                   tambi\u00e9n el miembro sem_ctime de la estructura semid_ds asociada al conjunto.  El registro  de\n                   anulaci\u00f3n  es  limpiado,  para el sem\u00e1foro alterado, en todos los procesos.  Los procesos que\n                   est\u00e1n durmiendo en la cola de espera son despertados si semval se pone a 0 o  se  incrementa.\n                   El  proceso  que  realiza  la  llamada ha de tener privilegios de escritura en el conjunto de\n                   sem\u00e1foros.\n\nVALOR DEVUELTO\n       En caso de fallo semctl devuelve -1, mientras errno indica el error.  De otro modo, la llamada al sistema\n       devuelve un valor no negativo, dependiendo de cmd como sigue:\n\n       GETNCNT    el valor de semncnt.\n\n       GETPID     el valor de sempid.\n\n       GETVAL     el valor de semval.\n\n       GETZCNT    el valor de semzcnt.\n\n       Todos los dem\u00e1s valores cmd devuelven 0 en caso de \u00e9xito.\n\n", "ERRORES": "       En caso de error, errno tendr\u00e1 uno de los siguientes valores:\n\n       EACCESS    El proceso que reliza la llamada no tiene los permisos necesarios para ejecutar cmd.\n\n       EFAULT     La direcci\u00f3n a la que apunta arg.buf o arg.array no es accesible.\n\n       EIDRM      El conjunto de sem\u00e1foros se borr\u00f3.\n\n       EINVAL     Valor no v\u00e1lido para cmd o semid.\n\n       EPERM      El argumento cmd tiene valor IPC_SET o IPC_RMID pero el proceso invocador no tiene suficientes\n                  privilegios para ejecutar la orden.\n\n       ERANGE     El argumento cmd tiene el valor SETALL o SETVAL y el valor al que  ha  de  ser  puesto  semval\n                  (para  alg\u00fan  sem\u00e1foro  del  conjunto)  es  menor  que  0  o  mayor  que el valor SEMVMX de la\n                  implementaci\u00f3n.\n\n", "OBSERVACIONES": "       Las llamadas de control IPC_INFO, SEM_STAT y SEM_INFO son utilizadas por el programa ipcs(8) para proveer\n       informaci\u00f3n  sobre recursos asignados.  En el futuro pueden ser modificadas seg\u00fan se necesite, o llevadas\n       al interfaz del sistema de ficheros proc.\n\n       Varios campos de la estructura semid_ds eran de tipo short bajo Linux 2.2 y se han convertido a tipo long\n       bajo  Linux  2.4. Para aprovechar esto, ser\u00eda suficiente volver a compilar bajo glibc-2.1.91 o posterior.\n       (El n\u00facleo distingue las llamadas antiguas y nuevas por una opci\u00f3n IPC_64 en cmd.)\n\n       El siguiente l\u00edmite de sistema para conjuntos de sem\u00e1foros afecta a la llamada semctl:\n\n       SEMVMX     Valor m\u00e1ximo para semval: depende de la implementaci\u00f3n (32767).\n\n       Para una mayor portabilidad siempre es mejor llamar a semctl con cuatro argumentos.\n\n       Bajo Linux, la funci\u00f3n semctl no es una llamada al sistema, sino que  es  implementada  a  trav\u00e9s  de  la\n       llamada al sistema ipc(2).\n\nCONFORME A\n       SVr4, SVID.  SVr4 documenta adicionalmente las condiciones de error EINVAL y EOVERFLOW.\n\nV\u00c9ASE TAMBI\u00c9N\n       ipc(2), shmget(2), shmat(2), shmdt(2), ipc(5)\n\nLinux 2.4.1                                     21 diciembre 2001                                      SEMCTL(2)\n"},{"NOMBRE": "       semget - obtiene el identificador de un conjunto de sem\u00e1foros\n\n", "SINOPSIS": "       #include <sys/types.h>\n       #include <sys/ipc.h>\n       #include <sys/sem.h>\n\n       int semget(key_t key, int nsems, int semflg);\n\n", "DESCRIPCION": "       Esta funci\u00f3n devuelve el identificador del conjunto de sem\u00e1foros asociado con el argumento key.  Un nuevo\n       conjunto de nsems sem\u00e1foros se crea si key tiene el valor  IPC_PRIVATE,  o  si  no  hay  un  conjunto  de\n       sem\u00e1foros  asociado  a  key y el bit IPC_CREAT vale 1 en semflg (p.ej.  semflg & IPC_CREAT es distinto de\n       cero).\n\n       La presencia en semflg de los campos IPC_CREAT e IPC_EXCL  tiene  el  mismo  papel,  con  respecto  a  la\n       existencia  del  conjunto  de  sem\u00e1foros, que la presencia de O_CREAT y O_EXCL en el argumento mode de la\n       llamada del sistema open(2): p.ej., la funci\u00f3n semget falla si semflg tiene  a  1  tanto  IPC_CREAT  como\n       IPC_EXCL y ya existe un conjunto de sem\u00e1foros para key.\n\n       Acerca  de  la  creaci\u00f3n,  los  9 bits bajos del argumento semflg definen los permisos de acceso (para el\n       propietario, grupo y otros) para el conjunto de sem\u00e1foros.  Estos bits tienen  el  mismo  formato,  y  el\n       mismo  significado  que  el  argumento  de modo en las llamadas al sistema open(2) o creat(2) (aunque los\n       permisos de ejecuci\u00f3n no son significativos para los sem\u00e1foros, y los permisos  de  escritura  significan\n       permisos para alterar los valores del sem\u00e1foro).\n\n       Cuando se crea un nuevo conjunto de sem\u00e1foros, semget inicializa la estructura de datos semid_ds asociada\n       al conjunto de sem\u00e1foros como sigue:\n\n              Se pone el ID  de usuario  efectivo  del  proceso  que  realiza  la  llamada  en  sem_perm.cuid  y\n              sem_perm.uid\n\n              Se pone el ID de grupo efectivo del proceso que realiza la llamada en sem_perm.cgid y sem_perm.gid\n\n              Los 9 bits m\u00e1s bajos de sem_perm.mode se ponen como los 9 bits m\u00e1s bajos de semflg.\n\n              Se pone el valor de nsems en sem_nsems.\n\n              sem_otime se pone a 0.\n\n              Se pone la hora actual en sem_ctime.\n\n       El argumento nsems puede ser 0 (un comod\u00edn o valor sin importancia) cuando no se est\u00e1 creando un conjunto\n       de sem\u00e1foros.  En otro caso nsems debe ser mayor que 0 y menor o igual que el n\u00famero m\u00e1ximo de  sem\u00e1foros\n       por conjunto de sem\u00e1foros, (SEMMSL).\n\n       Si el conjunto de sem\u00e1foros ya existe, los permisos de acceso son verificados.\n\nVALOR DEVUELTO\n       Si hubo \u00e9xito, el valor devuelto ser\u00e1 el identificador del conjunto de sem\u00e1foros (un entero no negativo),\n       de otro modo, se devuelve -1 con errno indicando el error.\n\n", "ERRORES": "       En caso de fallo, errno tendr\u00e1 uno de los siguientes valores:\n\n       EACCES     Existe un conjunto de sem\u00e1foros para key, pero el proceso que  realiza  la  llamada  no  tiene\n                  permisos para acceder al conjunto.\n\n       EEXIST     Existe un conjunto de sem\u00e1foros para key y semflg tiene a 1 tanto IPC_CREAT como IPC_EXCL.\n\n       ENOENT     No existe ning\u00fan conjunto de sem\u00e1foros para key y semflg no tiene a 1 IPC_CREAT.\n\n       EINVAL     nsems es menor que 0 o mayor que el l\u00edmite en el n\u00famero de sem\u00e1foros por conjunto de sem\u00e1foros\n                  (SEMMSL), o ya existe un conjunto de sem\u00e1foros que se corresponde con key , y nsems  es  mayor\n                  que el n\u00famero de sem\u00e1foros en ese conjunto.\n\n       ENOMEM     Se  ha  de crear un conjunto de sem\u00e1foros, pero el sistema no tiene suficiente memoria para la\n                  nueva estructura de datos.\n\n       ENOSPC     Se ha de crear un conjunto de sem\u00e1foros, pero el l\u00edmite del sistema para el n\u00famero  m\u00e1ximo  de\n                  conjuntos  de  sem\u00e1foros (SEMMNI), o el n\u00famero de sem\u00e1foros m\u00e1ximo del sistema (SEMMNS), ser\u00eda\n                  excedido.\n\n", "OBSERVACIONES": "       IPC_PRIVATE no es un campo bandera (flag), sino que es de tipo key_t Si este valor especial es usado para\n       key,  la  llamada del sistema ignora todo excepto los 9 bits m\u00e1s bajos de semflg y crea un nuevo conjunto\n       de sem\u00e1foros (si hay \u00e9xito).\n\n       Los siguientes son l\u00edmites de los recursos de los conjuntos de sem\u00e1foros que afectan a la llamada  semget\n       :\n\n       SEMMNI     M\u00e1ximo total de conjuntos de sem\u00e1foros para el sistema: depende de la pol\u00edtica.\n\n       SEMMSL     M\u00e1ximo de sem\u00e1foros por semid: depende de la implementaci\u00f3n (500 normalmente).\n\n       SEMMNS     M\u00e1ximo total de sem\u00e1foros para el sistema: depende de la pol\u00edtica.  Valores mayores que SEMMSL\n                  * SEMMNI lo hacen irrelevante.\n\n", "FALLOS": "       La elecci\u00f3n del nombre IPC_PRIVATE fue quiz\u00e1s desafortunada, IPC_NEW mostrar\u00eda m\u00e1s claramente su funci\u00f3n.\n\n       La estructura de datos asociada con cada sem\u00e1foro del conjunto no es  inicializada  por  la  llamada  del\n       sistema.   Para  inicializar  estas  estructuras  de  datos,  se ha de ejecutar la subsiguiente llamada a\n       semctl(2) para realizar una orden SETVAL o SETALL en el conjunto de sem\u00e1foros.\n\nCONFORME A\n       SVr4, SVID.  SVr4 documenta condiciones de error adicionales EFBIG, E2BIG, EAGAIN, ERANGE, EFAULT.\n\nV\u00c9ASE TAMBI\u00c9N\n       ftok(3), ipc(5), semctl(2), semop(2)\n\nLinux 2.5                                         4 enero 2002                                         SEMGET(2)\n"},{"NOMBRE": "       semop - operaciones con sem\u00e1foros\n\n", "SINTAXIS": "       #include <sys/types.h>\n       #include <sys/ipc.h>\n       #include <sys/sem.h>\n\n       int semop(int semid, struct sembuf *sops, unsigned nsops);\n\n", "DESCRIPCION": "       Un sem\u00e1foro se representa por una estructura an\u00f3nima que incluye los siguientes miembros:\n\n           unsigned short  semval;   /* valor del sem\u00e1foro */\n           unsigned short  semzcnt;  /* # esperando por cero */\n           unsigned short  semncnt;  /* # esperando por incremento */\n           pid_t           sempid;   /* proceso que hizo la \u00faltima operaci\u00f3n */\n\n       La  funci\u00f3n semop realiza operaciones sobre los miembros seleccionados del conjunto de sem\u00e1foros indicado\n       por semid.  Cada uno de los nsops elementos en el array apuntado por sops especifica una operaci\u00f3n a  ser\n       realizada en un sem\u00e1foro mediante una estructura sembuf que incluye los siguientes miembros:\n\n           unsigned short sem_num;  /* n\u00famero de sem\u00e1foro */\n           short sem_op;            /* operaci\u00f3n sobre el sem\u00e1foro */\n           short sem_flg;           /* banderas o indicadores para la operaci\u00f3n */\n\n       Banderas  reconocidas  en  sem_flg  son  IPC_NOWAIT  y SEM_UNDO.  Si una operaci\u00f3n ejecuta SEM_UNDO, sera\n       deshecha cuando el proceso finalice.\n\n       El conjunto de operaciones contenido en sops se realiza de forma at\u00f3mica, es decir, las  operaciones  son\n       llevadas  a  cabo al mismo tiempo, y s\u00f3lo si pueden ser realizadas simult\u00e1neamente.  El comportamiento de\n       la llamada al sistema en caso de que no todas las operaciones puedan realizarse inmediatamente depende de\n       la presencia de la bandera IPC_NOWAIT en los campos sem_flg individuales, como se ve m\u00e1s abajo.\n\n       Cada  operaci\u00f3n  es  ejecutada  en el sem\u00e1foro numero sem_num donde el primer sem\u00e1foro del conjunto es el\n       sem\u00e1foro 0.  Hay tres tipos de operaci\u00f3n, que se distinguen por el valor de sem_op.\n\n       Si sem_op es un entero positivo, la operaci\u00f3n a\u00f1ade este valor al valor del sem\u00e1foro  (semval).   Adem\u00e1s,\n       si  SEM_UNDO  es  invocado  para  esta  operaci\u00f3n,  el  sistema  actualiza  el  contador del proceso para\n       operaciones \"undo\" (semadj) para este sem\u00e1foro.  La operaci\u00f3n siempre puede ejecutarse - nunca  fuerza  a\n       un  proceso  a  esperar.   El  proceso invocador debe tener permisos de modificaci\u00f3n sobre el conjunto de\n       sem\u00e1foros.\n\n       Si sem_op es cero, el proceso debe tener permiso de lectura  en  el  sem\u00e1foro.   Esta  es  una  operaci\u00f3n\n       \"espera-por-cero\":  si  semval es cero, la operaci\u00f3n puede ejecutarse inmediatamente.  Por otra parte, si\n       IPC_NOWAIT es invocado en sem_flg, la llamada al sistema falla con la variable errno fijada  a  EAGAIN  .\n       (y  ninguna  de  las operaciones sops se realiza.)  En otro caso semzcnt (el n\u00famero de procesos esperando\n       hasta que el valor del sem\u00e1foro sea cero) es incremetada en uno y el proceso duerme hasta que algo de  lo\n       siguiente ocurra:\n\n       \u2022      semval es 0, instante en el que el valor de semzcnt es decrementeado.\n\n       \u2022      El sem\u00e1foro es eliminado: la llamada al sistema falla con errno fijada a EIDRM.\n\n       \u2022      El  proceso  que  lo invoca captura una se\u00f1al: el valor de semzcnt es decrementado y la llamada al\n              sistema falla con errno fijada a EINTR.\n\n       Si sem_op es menor que cero, el proceso debe tener los permisos de modificaci\u00f3n sobre  el  sem\u00e1foro.   Si\n       semval  es  mayor  que  o  igual  que  el  valor  absoluto  de  sem_op,  la  operaci\u00f3n  puede  ejecutarse\n       inmediatamente: el valor absoluto de sem_op es restado a semval.  y, si SEM_UNDO es  invocado  para  esta\n       operaci\u00f3n,  el sistema actualiza el contador \"undo\" del proceso (semadj) para este sem\u00e1foro.  Si el valor\n       absoluto de sem_op es mayor que semval, y IPC_NOWAIT est\u00e1 presente en  sem_flg,  la  llamada  al  sistema\n       falla  con  errno fijado a EAGAIN.  (y ninguna de las operaciones sops se realiza.)  En otro caso semncnt\n       (el n\u00famero de procesos esperando a que se incremente el valor de este sem\u00e1foro) es incrementado en uno  y\n       el proceso duerme hasta que ocurra:\n\n       \u2022      semval  sea mayor o igual que el valor absoluto de sem_op, en cuyo instante el valor de semncnt es\n              decrementado, el valor absoluto de sem_op es restado de semval y, si  SEM_UNDO  es  invocado  para\n              esta operaci\u00f3n, el sistema actualiza el contador \"undo\" del proceso (semadj) para este sem\u00e1foro.\n\n       \u2022      El sem\u00e1foro es es eliminado del sistema: la llamada al sistema falla con errno fijado a EIDRM.\n\n       \u2022      El  proceso  invocador  captura  una  se\u00f1al:  el  valor de semncnt es decrementado y la llamada al\n              sistema falla con errno fijado a EINTR.\n\n       En caso de que haya funcionado, el valor sempid para cada sem\u00e1foro especificado en el array apuntado  por\n       sops  es fijado al identificador del proceso del proceso invocador.  Adem\u00e1s sem_otime es puesto a la hora\n       actual.\n\nVALOR DEVUELTO\n       Si todo ha sido correcto la llamada al sistema devuelve 0, en otro caso devuelve -1 con  errno  indicando\n       el error.\n\n", "ERRORES": "       En caso de error errno tendr\u00e1 uno de los siguientes valores:\n\n       E2BIG      El argumento nsops es mayor que SEMOPM, el numero m\u00e1ximo de operaciones permitidas por llamada\n                  del sistema.\n\n       EACCES     El proceso invocador no tiene permisos de acceso al sem\u00e1foro como se requiere por una  de  las\n                  operaciones especificadas.\n\n       EAGAIN     Una  operaci\u00f3n  no  puede  ser  ejecutada  inmediatamente  y IPC_NOWAIT ha sido invocada en su\n                  sem_flg.\n\n       EFAULT     La direccion apuntada por sops no es accesible.\n\n       EFBIG      Para algunas operaciones el valor de sem_num es menor que 0 o mayor o igual que el  numero  de\n                  sem\u00e1foros en el conjunto.\n\n       EIDRM      El conjunto de sem\u00e1foros ha sido eliminado.\n\n       EINTR      Mientras estaba bloqueado en esta llamada al sistema, el proceso captur\u00f3 una se\u00f1al.\n\n       EINVAL     Este  conjunto  de  sem\u00e1foros no existe, o semid es menor que cero, o nsops tiene un valor no-\n                  positivo.\n\n       ENOMEM     El sem_flg de alguna operaci\u00f3n invoco SEM_UNDO y el sistema no tiene suficiente  memoria  para\n                  alojar la estructura \"undo\".\n\n       ERANGE     Para  alguna  operacion  sem_op+semval  es mayor que SEMVMX, el valor m\u00e1ximo dependiente de la\n                  implementaci\u00f3n para semval.\n\n", "OBSERVACIONES": "       Las estructuras sem_undo de un proceso no son heredadas tras la ejecuci\u00f3n de fork(2) , pero  s\u00ed  tras  la\n       ejecuci\u00f3n  de execve(2).  semop no es reiniciada nunca autom\u00e1ticamente despu\u00e9s de haber sido interrumpida\n       por un manejador de se\u00f1ales,  sin  importar  que  las  banderas  SA_RESTART  est\u00e9n  presentes  cuando  se\n       establezca el manejador se\u00f1ales.\n\n       semadj  es  un  entero  por  cada  proceso  que  representa simplemente el n\u00famero (negativo) de todas las\n       operaciones sobre sem\u00e1foros realizadas con la bandera SEM_UNDO.   Cuando  se  establece  directamente  el\n       valor  de  un  sem\u00e1foro usando la solicitud SETVAL o SETALL en semctl(2), los correspondientes valores de\n       semadj en todos los procesos son borrados.\n\n       Los valores semval, sempid, semzcnt, y semnct para un  sem\u00e1foro  pueden  ser  obtenidos  usando  llamadas\n       semctl(2) apropiadas.\n\n       Los siguientes valores son limites en el conjunto de recursos de los sem\u00e1foros q ue afecta a semop\n\n       SEMOPM Numero m\u00e1ximo de operaciones permitidas para una llamada (32) semop.\n\n       SEMVMX Valor m\u00e1ximo permitido para semval: dependiente de la implementaci\u00f3n (32767).\n\n       La  implementaci\u00f3n no contiene l\u00edmites intr\u00ednsecos para ajustar el valor m\u00e1ximo de la salida (SEMAEM), el\n       numero m\u00e1ximo de estructuras \"undo\" que el sistema permite (SEMMNU) y m\u00e1ximo numero  de  entradas  \"undo\"\n       por proceso para los parametros del sistema.\n\n", "FALLOS": "       Cuando  un proceso termina, su conjunto de estructuras semadj asociado se utiliza para deshacer el efecto\n       de todas las operaciones sobre sem\u00e1foros  que  realiz\u00f3  con  la  bandera  SEM_UNDO.   Esto  conlleva  una\n       dificultad: si una (o m\u00e1s) de estas modificaciones sobre sem\u00e1foros resultara en un intento de decrementar\n       el valor de un sem\u00e1foro por  debajo  de  cero,  \u00bfqu\u00e9  deber\u00eda  hacer  una  implementaci\u00f3n?   Una  posible\n       aproximaci\u00f3n  ser\u00eda  bloquearse hasta que todas las modificaciones sobre sem\u00e1foros puedan ser realizadas.\n       Esto no es deseable sin embargo puesto que podr\u00eda bloquear la  terminaci\u00f3n  del  proceso  durante  largos\n       per\u00edodos  arbitrarios.   Otra posibilidad ser\u00eda ignorar tales modificaciones sobre sem\u00e1foros por completo\n       (algo an\u00e1logo a un fallo cuando se especifica IPC_NOWAIT para  una  operaci\u00f3n  sobre  sem\u00e1foros).   Linux\n       adopta  un  tercer enfoque: decrementar el valor del sem\u00e1foro tanto como sea posible (p.e., hasta cero) y\n       permitir la terminaci\u00f3n del proceso inmediatamente.\n\nCONFORME A\n       SVr4, SVID.  SVr4 documenta las condiciones de error adicionales EINVAL, EFBIG, ENOSPC.\n\nV\u00c9ASE TAMBI\u00c9N\n       ipc(5), semctl(2), semget(2), sigaction(2)\n\nLinux 2.4                                         8 enero 2002                                          SEMOP(2)\n"},{"NOMBRE": "       send, sendto, sendmsg - env\u00eda un mensaje de un conector (socket)\n\n", "SINOPSIS": "       #include <sys/types.h>\n       #include <sys/socket.h>\n\n       ssize_t send(int s, const void *msg, size_t len, int flags);\n       ssize_t  sendto(int  s,  const  void  *msg,  size_t  len, int flags, const struct sockaddr *to, socklen_t\n       tolen);\n       ssize_t sendmsg(int s, const struct msghdr *msg, int flags);\n\n", "DESCRIPCION": "       Send, sendto y sendmsg son utilizados para transmitir un mensaje a otro conector.  Send  solo  puede  ser\n       usado  cuando  un conector est\u00e1 en un estado connected mientras sendto y sendmsg pueden ser utilizados en\n       cualquier momento.\n\n       La direcci\u00f3n de destino viene dada por to con tolen especificando su  tama\u00f1o.  La  longitud  del  mensaje\n       viene  dada  por len.  Si el mensaje es demasiado largo para pasar autom\u00e1ticamente a trav\u00e9s del protocolo\n       inferior, se devuelve el error EMSGSIZE y el mensaje no es transmitido.\n\n       La llamada send lleva impl\u00edcita el que no se indiquen los posibles errores en la  entrega.   Los  errores\n       detectados localmente se indican devolviendo un valor -1.\n\n       Cuando  el  mensaje no cabe en el buffer de env\u00edo del conector, send se bloquea, a no ser que el conector\n       se haya colocado en el modo de E/S no bloqueante. En el modo no  bloqueante  devolver\u00eda  EAGAIN  en  este\n       caso. Se puede utilizar la llamada select(2) para determinar cuando es posible enviar m\u00e1s informaci\u00f3n.\n\n       El par\u00e1metro flags es una palabra de opciones y puede contener las siguientes opciones:\n\n       MSG_OOB\n              Enviar   datos  fuera  de  orden(out-of-band)  en  conectores  que  soportan  esta  noci\u00f3n  (p.ej.\n              SOCK_STREAM); el protocolo subyacente tambi\u00e9n debe soportar datos fuera de orden.\n\n       MSG_DONTROUTE\n              No usar un ``gateway'' para enviar el paquete, enviar s\u00f3lo a los ordenadores que se encuentren  en\n              redes  conectadas  directamente. Normalmente, esto s\u00f3lo lo utilizan los programas de diagn\u00f3stico y\n              enrutamiento. Esta opci\u00f3n s\u00f3lo  est\u00e1  definida  para  familias  de  protocolos  que  enrutan.  Los\n              conectores de paquetes no enrutan.\n\n       MSG_DONTWAIT\n              Habilitar  el  funcionamiento  no  bloqueante.  Si la operaci\u00f3n se bloqueara, se devolver\u00eda EAGAIN\n              (esto tambi\u00e9n se puede habilitar  usando  la  bandera  O_NONBLOCK  con  la  operaci\u00f3n  F_SETFL  de\n              fcntl(2)).\n\n       MSG_NOSIGNAL\n              Solicitar el no enviar SIGPIPE en caso de error en conectores orientados a conexi\u00f3n cuando el otro\n              extremo rompa la conexi\u00f3n. Todav\u00eda se devuelve el error EPIPE.\n\n       MSG_CONFIRM (Linux 2.3+ solamente)\n              Le dice a la capa de enlace que se produjo el proceso  de  redirecci\u00f3n:  tienes  una  confirmaci\u00f3n\n              positiva  del otro lado. Si la capa de enlace no recibe esta respuesta interrogar\u00e1 regularmente al\n              vecino (p.e. a trav\u00e9s de un mensaje ARP  unicast).   S\u00f3lo  v\u00e1lida  para  conectores  SOCK_DGRAM  y\n              SOCK_RAW y actualmente s\u00f3lo est\u00e1 implementada en IPv4 e IPv6. Vea arp(7) para m\u00e1s detalles.\n\n       La  definici\u00f3n  de  la  estructura  msghdr  se  muestra  a continuaci\u00f3n. Vea recv(2) y m\u00e1s abajo para una\n       descripci\u00f3n exacta de sus campos.\n\n              struct msghdr {\n                  void         * msg_name;     /* direcci\u00f3n opcional */\n                  socklen_t    msg_namelen;    /* tama\u00f1o de la direcci\u00f3n */\n                  struct iovec * msg_iov;      /* vector dispersi\u00f3n/reuni\u00f3n */\n                  size_t       msg_iovlen;     /* # elementos en msg_iov */\n                  void         * msg_control;  /* datos auxiliares, vea m\u00e1s abajo */\n                  socklen_t    msg_controllen; /* longitud del buffer de datos auxiliares */\n                  int          msg_flags;      /* banderas en el mensaje recibido */\n              };\n\n       Puede enviar informaci\u00f3n de control usando los miembros msg_control y msg_controllen.  La longitud m\u00e1xima\n       del  buffer  de  control  que  el  n\u00facleo  puede  procesar  est\u00e1  limitada  por  conector  por  la sysctl\n       net.core.optmem_max.  Vea socket(7).\n\nVALOR DEVUELTO\n       Las llamadas devuelven el numero de caracteres enviados, o -1 si ha ocurrido un error.\n\n", "ERRORES": "       Estos son algunos errores est\u00e1ndares generados por la capa de conectores.  Los m\u00f3dulos de los  protocolos\n       subyacentes pueden generar y devolver errores adicionales. Vea sus p\u00e1ginas de manual respectivas.\n\n       EBADF  Se ha especificado un descriptor no v\u00e1lido.\n\n       ENOTSOCK\n              El argumento s no es un conector.\n\n       EFAULT Se ha especificado como par\u00e1metro una direcci\u00f3n incorrecta del espacio de usuario.  tro.\n\n       EMSGSIZE\n              El  conector  requiere que este mensaje sea enviado autom\u00e1ticamente, y el tama\u00f1o del mensaje a ser\n              enviado lo hace imposible.\n\n       EAGAIN o EWOULDBLOCK\n              El conector est\u00e1 marcado como no bloqueante y la operaci\u00f3n solicitada lo bloquear\u00eda.\n\n       ENOBUFS\n              La cola de salida del interfaz de red est\u00e1 llena.  Esto generalmente indica  que  el  interfaz  ha\n              parado  de  enviar, pero puede ser causado por una congesti\u00f3n temporal.  (Esto no puede ocurrir en\n              Linux, los paquetes simplemente se suprimen silenciosamente cuando la cola de  un  dispositivo  se\n              desborda.)\n\n       EINTR  Se ha producido una se\u00f1al.\n\n       ENOMEM No hay memoria disponible.\n\n       EINVAL Se ha pasado un argumento inv\u00e1lido.\n\n       EPIPE  Se  ha desconectado el extremo local en un conector orientado a conexi\u00f3n.  En este caso el proceso\n              tamb\u00eden recibir\u00e1 una se\u00f1al SIGPIPE a menos que se active la opci\u00f3n MSG_NOSIGNAL.\n\nCONFORME A\n       4.4BSD, SVr4, borrador POSIX 1003.1g (estas llamadas a funci\u00f3n aparecieron en 4.2BSD).\n\n       MSG_CONFIRM es una extensi\u00f3n de Linux.\n\n", "NOTA": "       Los prototipos indicados m\u00e1s arriba siguen `the Single Unix Specification',  ya  que  glibc2  tambi\u00e9n  lo\n       hace;  el argumento flags era `int' en BSD 4.* pero `unsigned int' en libc4 y libc5; el argumento len era\n       `int' en BSD 4.* y libc4 pero `size_t' en libc5; el argumento tolen era `int' en BSD 4.*, libc4 y  libc5.\n       Vea tambi\u00e9n accept(2).\n\nV\u00c9ASE TAMBI\u00c9N\n       fcntl(2),  recv(2), select(2), getsockopt(2), sendfile(2), socket(2), write(2), socket(7), ip(7), tcp(7),\n       udp(7)\n\nP\u00e1gina man de Linux                             31 diciembre 2002                                        SEND(2)\n"},{"NOMBRE": "       sendfile - transfiere datos entre descriptores de fichero\n\n", "SINOPSIS": "       ssize_t sendfile(int out_fd, int in_fd, off_t *offset, size_t count);\n\n", "DESCRIPCION": "       Esta  llamada  copia  datos  entre un descriptor de fichero y otro. Cualquiera de los dos descriptores de\n       fichero o los dos pueden referirse a un conector (vea m\u00e1s  abajo).   in_fd  debe  ser  un  descriptor  de\n       fichero  abierto  para  lectura  y  out_fd  debe  ser un descriptor abierto para escritura.  offset es un\n       puntero a una variable que contiene la  posici\u00f3n  del  puntero  del  fichero  de  entrada  desde  la  que\n       sendfile()  empezar\u00e1  a leer datos. Cuando sendfile() regrese, a esta variable se le asignar\u00e1 la posici\u00f3n\n       del byte siguiente al \u00faltimo byte que se ha le\u00eddo.  count es la cantidad de  bytes  a  copiar  entre  los\n       descriptores de fichero.\n\n       Puesto  que  esta  copia  se  lleva  a  cabo  dentro del n\u00facleo, sendfile() no necesita emplear tiempo en\n       transferir datos a y desde el espacio de usuario.\n\n", "OBSERVACIONES": "       Sendfile no modifica el puntero de fichero actual de in_fd, pero s\u00ed lo hace para out_fd.\n\n       Si planea usar sendfile para enviar ficheros a un conector TCP, pero necesita  enviar  algunos  datos  de\n       cabecera delante de los contenidos del fichero, por favor vea la opci\u00f3n TCP_CORK en tcp(7) para minimizar\n       el n\u00famero de paquetes y ajustar el rendimiento.\n\n       Actualmente, el descriptor desde el que se lee no puede corresponder a un conector, debe corresponder con\n       un fichero que soporte operaciones del tipo mmap().\n\nVALOR DEVUELTO\n       Si  la  transferencia  ha  tenido  \u00e9xito,  se devuelve el n\u00famero de bytes escritos en out_fd.  En caso de\n       error, se devuelve -1 y se asigna a errno un valor apropiado.\n\n", "ERRORES": "       EBADF  El fichero de entrada no ha sido abierto para lectura o el fichero de salida no  ha  sido  abierto\n              para escritura.\n\n       EINVAL Descriptor inv\u00e1lido o bloqueado.\n\n       ENOMEM No hay memoria suficiente para leer de in_fd.\n\n       EIO    Se ha producido un error indeterminado al leer de in_fd.\n\n", "VERSIONES": "       sendfile es una nueva caracter\u00edstica de la versi\u00f3n 2.2 de Linux.  El fichero de cabecera <sys/sendfile.h>\n       est\u00e1 presente desde glibc 2.1.\n\n       Otros Unix normalmente implementan sendfile con otras sem\u00e1nticas  y  prototipos.  No  deber\u00eda  usarse  en\n       programas transportables.\n\nV\u00c9ASE TAMBI\u00c9N\n       socket(2), open(2)\n\nP\u00e1gina man de Linux                             1 diciembre 1998                                     SENDFILE(2)\n"},{"NOMBRE": "       send, sendto, sendmsg - env\u00eda un mensaje de un conector (socket)\n\n", "SINOPSIS": "       #include <sys/types.h>\n       #include <sys/socket.h>\n\n       ssize_t send(int s, const void *msg, size_t len, int flags);\n       ssize_t  sendto(int  s,  const  void  *msg,  size_t  len, int flags, const struct sockaddr *to, socklen_t\n       tolen);\n       ssize_t sendmsg(int s, const struct msghdr *msg, int flags);\n\n", "DESCRIPCION": "       Send, sendto y sendmsg son utilizados para transmitir un mensaje a otro conector.  Send  solo  puede  ser\n       usado  cuando  un conector est\u00e1 en un estado connected mientras sendto y sendmsg pueden ser utilizados en\n       cualquier momento.\n\n       La direcci\u00f3n de destino viene dada por to con tolen especificando su  tama\u00f1o.  La  longitud  del  mensaje\n       viene  dada  por len.  Si el mensaje es demasiado largo para pasar autom\u00e1ticamente a trav\u00e9s del protocolo\n       inferior, se devuelve el error EMSGSIZE y el mensaje no es transmitido.\n\n       La llamada send lleva impl\u00edcita el que no se indiquen los posibles errores en la  entrega.   Los  errores\n       detectados localmente se indican devolviendo un valor -1.\n\n       Cuando  el  mensaje no cabe en el buffer de env\u00edo del conector, send se bloquea, a no ser que el conector\n       se haya colocado en el modo de E/S no bloqueante. En el modo no  bloqueante  devolver\u00eda  EAGAIN  en  este\n       caso. Se puede utilizar la llamada select(2) para determinar cuando es posible enviar m\u00e1s informaci\u00f3n.\n\n       El par\u00e1metro flags es una palabra de opciones y puede contener las siguientes opciones:\n\n       MSG_OOB\n              Enviar   datos  fuera  de  orden(out-of-band)  en  conectores  que  soportan  esta  noci\u00f3n  (p.ej.\n              SOCK_STREAM); el protocolo subyacente tambi\u00e9n debe soportar datos fuera de orden.\n\n       MSG_DONTROUTE\n              No usar un ``gateway'' para enviar el paquete, enviar s\u00f3lo a los ordenadores que se encuentren  en\n              redes  conectadas  directamente. Normalmente, esto s\u00f3lo lo utilizan los programas de diagn\u00f3stico y\n              enrutamiento. Esta opci\u00f3n s\u00f3lo  est\u00e1  definida  para  familias  de  protocolos  que  enrutan.  Los\n              conectores de paquetes no enrutan.\n\n       MSG_DONTWAIT\n              Habilitar  el  funcionamiento  no  bloqueante.  Si la operaci\u00f3n se bloqueara, se devolver\u00eda EAGAIN\n              (esto tambi\u00e9n se puede habilitar  usando  la  bandera  O_NONBLOCK  con  la  operaci\u00f3n  F_SETFL  de\n              fcntl(2)).\n\n       MSG_NOSIGNAL\n              Solicitar el no enviar SIGPIPE en caso de error en conectores orientados a conexi\u00f3n cuando el otro\n              extremo rompa la conexi\u00f3n. Todav\u00eda se devuelve el error EPIPE.\n\n       MSG_CONFIRM (Linux 2.3+ solamente)\n              Le dice a la capa de enlace que se produjo el proceso  de  redirecci\u00f3n:  tienes  una  confirmaci\u00f3n\n              positiva  del otro lado. Si la capa de enlace no recibe esta respuesta interrogar\u00e1 regularmente al\n              vecino (p.e. a trav\u00e9s de un mensaje ARP  unicast).   S\u00f3lo  v\u00e1lida  para  conectores  SOCK_DGRAM  y\n              SOCK_RAW y actualmente s\u00f3lo est\u00e1 implementada en IPv4 e IPv6. Vea arp(7) para m\u00e1s detalles.\n\n       La  definici\u00f3n  de  la  estructura  msghdr  se  muestra  a continuaci\u00f3n. Vea recv(2) y m\u00e1s abajo para una\n       descripci\u00f3n exacta de sus campos.\n\n              struct msghdr {\n                  void         * msg_name;     /* direcci\u00f3n opcional */\n                  socklen_t    msg_namelen;    /* tama\u00f1o de la direcci\u00f3n */\n                  struct iovec * msg_iov;      /* vector dispersi\u00f3n/reuni\u00f3n */\n                  size_t       msg_iovlen;     /* # elementos en msg_iov */\n                  void         * msg_control;  /* datos auxiliares, vea m\u00e1s abajo */\n                  socklen_t    msg_controllen; /* longitud del buffer de datos auxiliares */\n                  int          msg_flags;      /* banderas en el mensaje recibido */\n              };\n\n       Puede enviar informaci\u00f3n de control usando los miembros msg_control y msg_controllen.  La longitud m\u00e1xima\n       del  buffer  de  control  que  el  n\u00facleo  puede  procesar  est\u00e1  limitada  por  conector  por  la sysctl\n       net.core.optmem_max.  Vea socket(7).\n\nVALOR DEVUELTO\n       Las llamadas devuelven el numero de caracteres enviados, o -1 si ha ocurrido un error.\n\n", "ERRORES": "       Estos son algunos errores est\u00e1ndares generados por la capa de conectores.  Los m\u00f3dulos de los  protocolos\n       subyacentes pueden generar y devolver errores adicionales. Vea sus p\u00e1ginas de manual respectivas.\n\n       EBADF  Se ha especificado un descriptor no v\u00e1lido.\n\n       ENOTSOCK\n              El argumento s no es un conector.\n\n       EFAULT Se ha especificado como par\u00e1metro una direcci\u00f3n incorrecta del espacio de usuario.  tro.\n\n       EMSGSIZE\n              El  conector  requiere que este mensaje sea enviado autom\u00e1ticamente, y el tama\u00f1o del mensaje a ser\n              enviado lo hace imposible.\n\n       EAGAIN o EWOULDBLOCK\n              El conector est\u00e1 marcado como no bloqueante y la operaci\u00f3n solicitada lo bloquear\u00eda.\n\n       ENOBUFS\n              La cola de salida del interfaz de red est\u00e1 llena.  Esto generalmente indica  que  el  interfaz  ha\n              parado  de  enviar, pero puede ser causado por una congesti\u00f3n temporal.  (Esto no puede ocurrir en\n              Linux, los paquetes simplemente se suprimen silenciosamente cuando la cola de  un  dispositivo  se\n              desborda.)\n\n       EINTR  Se ha producido una se\u00f1al.\n\n       ENOMEM No hay memoria disponible.\n\n       EINVAL Se ha pasado un argumento inv\u00e1lido.\n\n       EPIPE  Se  ha desconectado el extremo local en un conector orientado a conexi\u00f3n.  En este caso el proceso\n              tamb\u00eden recibir\u00e1 una se\u00f1al SIGPIPE a menos que se active la opci\u00f3n MSG_NOSIGNAL.\n\nCONFORME A\n       4.4BSD, SVr4, borrador POSIX 1003.1g (estas llamadas a funci\u00f3n aparecieron en 4.2BSD).\n\n       MSG_CONFIRM es una extensi\u00f3n de Linux.\n\n", "NOTA": "       Los prototipos indicados m\u00e1s arriba siguen `the Single Unix Specification',  ya  que  glibc2  tambi\u00e9n  lo\n       hace;  el argumento flags era `int' en BSD 4.* pero `unsigned int' en libc4 y libc5; el argumento len era\n       `int' en BSD 4.* y libc4 pero `size_t' en libc5; el argumento tolen era `int' en BSD 4.*, libc4 y  libc5.\n       Vea tambi\u00e9n accept(2).\n\nV\u00c9ASE TAMBI\u00c9N\n       fcntl(2),  recv(2), select(2), getsockopt(2), sendfile(2), socket(2), write(2), socket(7), ip(7), tcp(7),\n       udp(7)\n\nP\u00e1gina man de Linux                             31 diciembre 2002                                        SEND(2)\n"},{"NOMBRE": "       send, sendto, sendmsg - env\u00eda un mensaje de un conector (socket)\n\n", "SINOPSIS": "       #include <sys/types.h>\n       #include <sys/socket.h>\n\n       ssize_t send(int s, const void *msg, size_t len, int flags);\n       ssize_t  sendto(int  s,  const  void  *msg,  size_t  len, int flags, const struct sockaddr *to, socklen_t\n       tolen);\n       ssize_t sendmsg(int s, const struct msghdr *msg, int flags);\n\n", "DESCRIPCION": "       Send, sendto y sendmsg son utilizados para transmitir un mensaje a otro conector.  Send  solo  puede  ser\n       usado  cuando  un conector est\u00e1 en un estado connected mientras sendto y sendmsg pueden ser utilizados en\n       cualquier momento.\n\n       La direcci\u00f3n de destino viene dada por to con tolen especificando su  tama\u00f1o.  La  longitud  del  mensaje\n       viene  dada  por len.  Si el mensaje es demasiado largo para pasar autom\u00e1ticamente a trav\u00e9s del protocolo\n       inferior, se devuelve el error EMSGSIZE y el mensaje no es transmitido.\n\n       La llamada send lleva impl\u00edcita el que no se indiquen los posibles errores en la  entrega.   Los  errores\n       detectados localmente se indican devolviendo un valor -1.\n\n       Cuando  el  mensaje no cabe en el buffer de env\u00edo del conector, send se bloquea, a no ser que el conector\n       se haya colocado en el modo de E/S no bloqueante. En el modo no  bloqueante  devolver\u00eda  EAGAIN  en  este\n       caso. Se puede utilizar la llamada select(2) para determinar cuando es posible enviar m\u00e1s informaci\u00f3n.\n\n       El par\u00e1metro flags es una palabra de opciones y puede contener las siguientes opciones:\n\n       MSG_OOB\n              Enviar   datos  fuera  de  orden(out-of-band)  en  conectores  que  soportan  esta  noci\u00f3n  (p.ej.\n              SOCK_STREAM); el protocolo subyacente tambi\u00e9n debe soportar datos fuera de orden.\n\n       MSG_DONTROUTE\n              No usar un ``gateway'' para enviar el paquete, enviar s\u00f3lo a los ordenadores que se encuentren  en\n              redes  conectadas  directamente. Normalmente, esto s\u00f3lo lo utilizan los programas de diagn\u00f3stico y\n              enrutamiento. Esta opci\u00f3n s\u00f3lo  est\u00e1  definida  para  familias  de  protocolos  que  enrutan.  Los\n              conectores de paquetes no enrutan.\n\n       MSG_DONTWAIT\n              Habilitar  el  funcionamiento  no  bloqueante.  Si la operaci\u00f3n se bloqueara, se devolver\u00eda EAGAIN\n              (esto tambi\u00e9n se puede habilitar  usando  la  bandera  O_NONBLOCK  con  la  operaci\u00f3n  F_SETFL  de\n              fcntl(2)).\n\n       MSG_NOSIGNAL\n              Solicitar el no enviar SIGPIPE en caso de error en conectores orientados a conexi\u00f3n cuando el otro\n              extremo rompa la conexi\u00f3n. Todav\u00eda se devuelve el error EPIPE.\n\n       MSG_CONFIRM (Linux 2.3+ solamente)\n              Le dice a la capa de enlace que se produjo el proceso  de  redirecci\u00f3n:  tienes  una  confirmaci\u00f3n\n              positiva  del otro lado. Si la capa de enlace no recibe esta respuesta interrogar\u00e1 regularmente al\n              vecino (p.e. a trav\u00e9s de un mensaje ARP  unicast).   S\u00f3lo  v\u00e1lida  para  conectores  SOCK_DGRAM  y\n              SOCK_RAW y actualmente s\u00f3lo est\u00e1 implementada en IPv4 e IPv6. Vea arp(7) para m\u00e1s detalles.\n\n       La  definici\u00f3n  de  la  estructura  msghdr  se  muestra  a continuaci\u00f3n. Vea recv(2) y m\u00e1s abajo para una\n       descripci\u00f3n exacta de sus campos.\n\n              struct msghdr {\n                  void         * msg_name;     /* direcci\u00f3n opcional */\n                  socklen_t    msg_namelen;    /* tama\u00f1o de la direcci\u00f3n */\n                  struct iovec * msg_iov;      /* vector dispersi\u00f3n/reuni\u00f3n */\n                  size_t       msg_iovlen;     /* # elementos en msg_iov */\n                  void         * msg_control;  /* datos auxiliares, vea m\u00e1s abajo */\n                  socklen_t    msg_controllen; /* longitud del buffer de datos auxiliares */\n                  int          msg_flags;      /* banderas en el mensaje recibido */\n              };\n\n       Puede enviar informaci\u00f3n de control usando los miembros msg_control y msg_controllen.  La longitud m\u00e1xima\n       del  buffer  de  control  que  el  n\u00facleo  puede  procesar  est\u00e1  limitada  por  conector  por  la sysctl\n       net.core.optmem_max.  Vea socket(7).\n\nVALOR DEVUELTO\n       Las llamadas devuelven el numero de caracteres enviados, o -1 si ha ocurrido un error.\n\n", "ERRORES": "       Estos son algunos errores est\u00e1ndares generados por la capa de conectores.  Los m\u00f3dulos de los  protocolos\n       subyacentes pueden generar y devolver errores adicionales. Vea sus p\u00e1ginas de manual respectivas.\n\n       EBADF  Se ha especificado un descriptor no v\u00e1lido.\n\n       ENOTSOCK\n              El argumento s no es un conector.\n\n       EFAULT Se ha especificado como par\u00e1metro una direcci\u00f3n incorrecta del espacio de usuario.  tro.\n\n       EMSGSIZE\n              El  conector  requiere que este mensaje sea enviado autom\u00e1ticamente, y el tama\u00f1o del mensaje a ser\n              enviado lo hace imposible.\n\n       EAGAIN o EWOULDBLOCK\n              El conector est\u00e1 marcado como no bloqueante y la operaci\u00f3n solicitada lo bloquear\u00eda.\n\n       ENOBUFS\n              La cola de salida del interfaz de red est\u00e1 llena.  Esto generalmente indica  que  el  interfaz  ha\n              parado  de  enviar, pero puede ser causado por una congesti\u00f3n temporal.  (Esto no puede ocurrir en\n              Linux, los paquetes simplemente se suprimen silenciosamente cuando la cola de  un  dispositivo  se\n              desborda.)\n\n       EINTR  Se ha producido una se\u00f1al.\n\n       ENOMEM No hay memoria disponible.\n\n       EINVAL Se ha pasado un argumento inv\u00e1lido.\n\n       EPIPE  Se  ha desconectado el extremo local en un conector orientado a conexi\u00f3n.  En este caso el proceso\n              tamb\u00eden recibir\u00e1 una se\u00f1al SIGPIPE a menos que se active la opci\u00f3n MSG_NOSIGNAL.\n\nCONFORME A\n       4.4BSD, SVr4, borrador POSIX 1003.1g (estas llamadas a funci\u00f3n aparecieron en 4.2BSD).\n\n       MSG_CONFIRM es una extensi\u00f3n de Linux.\n\n", "NOTA": "       Los prototipos indicados m\u00e1s arriba siguen `the Single Unix Specification',  ya  que  glibc2  tambi\u00e9n  lo\n       hace;  el argumento flags era `int' en BSD 4.* pero `unsigned int' en libc4 y libc5; el argumento len era\n       `int' en BSD 4.* y libc4 pero `size_t' en libc5; el argumento tolen era `int' en BSD 4.*, libc4 y  libc5.\n       Vea tambi\u00e9n accept(2).\n\nV\u00c9ASE TAMBI\u00c9N\n       fcntl(2),  recv(2), select(2), getsockopt(2), sendfile(2), socket(2), write(2), socket(7), ip(7), tcp(7),\n       udp(7)\n\nP\u00e1gina man de Linux                             31 diciembre 2002                                        SEND(2)\n"},{"NOMBRE": "       getcontext, setcontext - consulta o establece el contexto de usuario\n\n", "SINOPSIS": "       #include <ucontext.h>\n\n       int getcontext(ucontext_t *ucp);\n       int setcontext(const ucontext_t *ucp);\n\n", "DESCRIPCION": "       En  un  entorno  del  tipo  SysV,  se  encuentran  los  dos  tipos  mcontext_t  y ucontext_t definidos en\n       <ucontext.h> y las  cuatro  funciones  getcontext(),  setcontext(),  makecontext()  y  swapcontext()  que\n       permiten  el  intercambio del contexto del nivel de usuario entre m\u00faltiples hilos de control dentro de un\n       proceso.\n\n       El tipo mcontext_t es dependiente de la m\u00e1quina y opaco.  El tipo ucontext_t es una estructura que  tiene\n       al menos los campos siguientes:\n              typedef struct ucontext {\n                   struct ucontext *uc_link;\n                   sigset_t uc_sigmask;\n                   stack_t uc_stack;\n                   mcontext_t uc_mcontext;\n                   ...\n              } ucontext_t;\n       de  los  cuales  sigset_t  y  stack_t est\u00e1n definidos en <signal.h>.  uc_link apunta al contexto que ser\u00e1\n       reanudado cuando termine el contexto actual (en el caso de que el contexto actual haya sido creado usando\n       makecontext()),  uc_sigmask es el conjunto de se\u00f1ales bloqueadas en este contexto (v\u00e9ase sigprocmask(2)),\n       uc_stack es la pila usada por este contexto (v\u00e9ase sigaltstack(2)), y uc_mcontext  es  la  representaci\u00f3n\n       del  contexto  guardado  espec\u00edfica  de  la m\u00e1quina, que incluye los registros de la m\u00e1quina para el hilo\n       invocador.\n\n       La funci\u00f3n getcontext() inicializa la estructura apuntada por ucp al contexto activo actualmente.\n\n       La funci\u00f3n setcontext() restablece el contexto de usuario apuntado por ucp. Si la llamada tiene \u00e9xito  no\n       regresa.  El contexto deber\u00eda haber sido obtenido mediante una llamada a getcontext(), o makecontext(), o\n       pasada como tercer argumento al manejador de se\u00f1ales.\n\n       Si el contexto se obtuvo mediante una llamada a getcontext(), la ejecuci\u00f3n del programa contin\u00faa como  si\n       esta llamada simplemente regresara.\n\n       Si  el contexto fue obtenido mediante una llamada a makecontext(), la ejecuci\u00f3n del programa continua por\n       la llamada a la funci\u00f3n func especificada como segundo argumento en la llamada a  makecontext().   Cuando\n       la funci\u00f3n func regresa, se continua con el miembro uc_link de la estructura ucp especificada como primer\n       argumento en la llamada a makecontext().  Cuando este miembro es NULL, el hilo termina.\n\n       Cuando el contexto se obtiene mediante una llamada a un manejador de se\u00f1ales,  se  sol\u00eda  decir  que  \"la\n       ejecuci\u00f3n  del  programa  continua con la instrucci\u00f3n de programa siguiente a la instrucci\u00f3n interrumpida\n       por la se\u00f1al\". Sin embargo, esta sentencia fue eliminada en SUSv2, y ahora se establece que \"el resultado\n       es indefinido\".\n\nVALOR DEVUELTO\n       Cuando  tiene  \u00e9xito,getcontext() devuelve 0 y setcontext() no regresa. En caso de error, ambas devuelven\n       -1 y modifican errno con el valor apropiado.\n\n", "ERRORES": "       No se definen errores.\n\n", "OBSERVACIONES": "       La primera manifestaci\u00f3n de este mecanismo fue el mecanismo setjmp()/longjmp(). Puesto que no  define  el\n       manejo  del  contexto  de  se\u00f1ales,  el  siguiente paso fue el par sigsetjmp()/siglongjmp().  El presente\n       mecanismo proporciona mucho m\u00e1s control. Por otra parte, no hay un m\u00e9todo  sencillo  de  detectar  si  un\n       regreso  de getcontext() es de la primera llamada o via una llamada a setcontext().  El usuario tiene que\n       inventar su propio mecanismo de `contabilidad' y no se servir\u00e1 una variable de tipo registro ya  que  los\n       registros se restauran.\n\n       Cuando  ocurre una se\u00f1al, el contexto de usuario actual se guarda y el n\u00facleo crea un nuevo contexto para\n       el manejador de se\u00f1ales.  No deje  al  manejador  usar  longjmp()  -  es  indefinido  que  ocurrir\u00eda  con\n       contextos. Use siglongjmp() o setcontext() en su lugar.\n\nCONFORME A\n       SUSv2\n\nV\u00c9ASE TAMBI\u00c9N\n       sigaction(2), sigaltstack(2), sigprocmask(2), longjmp(3), sigsetjmp(3), makecontext(3)\n\nLinux 2.4                                       15 noviembre 2001                                  GETCONTEXT(2)\n"},{"NOMBRE": "       getdomainname, setdomainname - obtiene/asigna el nombre del dominio\n\n", "SINOPSIS": "       #include <unistd.h>\n\n       int getdomainname(char *name, size_t len);\n       int setdomainname(const char *name, size_t len);\n\n", "DESCRIPCION": "       Estas  funciones se usan para acceder o cambiar el nombre de dominio del procesador actual.  Si el nombre\n       de dominio acabado en NULL requiere m\u00e1s de len bytes,  getdomainname  devuelve  los  primeros  len  bytes\n       (glibc) o devuelve un error (libc).\n\nVALOR DEVUELTO\n       En caso de \u00e9xito se devuelve 0. En caso de error, -1, y errno toma un valor adecuado.\n\n", "ERRORES": "       EINVAL Para getdomainname bajo libc: name es NULL o name tiene m\u00e1s de len bytes.\n\n       EINVAL Para setdomainname: len era demasiado grande o menor que 0.\n\n       EPERM  Para setdomainname: el invocador no era el superusuario.\n\n       EFAULT Para setdomainname: name apuntaba afuera del espacio de direcciones del usuario.\n\nCONFORME A\n       POSIX  no  especifica  estas  llamadas.   En   Linux,  getdomainname  est\u00e1  implementada  en el \u00e1mbito de\n       bibliotecas mediante la llamada\n\nV\u00c9ASE TAMBI\u00c9N\n       gethostname(2), sethostname(2), uname(2)\n\nLinux 2.0                                        25 agosto 1997                                 GETDOMAINNAME(2)\n"},{"NOMBRE": "       seteuid, setegid - establecen el identificador de usuario o de grupo\n\n", "SINOPSIS": "       #include <sys/types.h>\n       #include <unistd.h>\n\n       int seteuid(uid_t euid);\n       int setegid(gid_t egid);\n\n", "DESCRIPCION": "       seteuid  establece  el  identificador de usuario efectivo del proceso actual.  Los procesos de usuario no\n       privilegiados solamente pueden establecer el  identificador  de  usuario  efectivo  al  identificador  de\n       usuario real, el identificador de usuario efectivo o el identificador de usuario guardado.\n\n       Precisamente lo mismo puede decirse para setegid con \"grupo\" en lugar de \"usuario\".\n\nVALOR DEVUELTO\n       En caso de \u00e9xito, se devuelve cero. En caso de error, se devuelve -1, y errno se modifica apropiadamente.\n\n", "ERRORES": "       EPERM  El  proceso  actual  no  pertenece al super-usuario y euid (resp.  egid) no es el identificador de\n              usuario (grupo) real, el identificador de usuario (grupo) efectivo o el identificador  de  usuario\n              (grupo) guardado.\n\n", "OBSERVACIONES": "       Establecer  el  identificador de usuario (grupo) efectivo al identificador de usuario (grupo) guardado es\n       posible desde la versi\u00f3n 1.1.37  de  Linux  (1.1.38).   En  un  sistema  cualquiera  deber\u00eda  comprobarse\n       _POSIX_SAVED_IDS.\n\n       Bajo  libc4, libc5 y glibc2.0 seteuid(euid) es equivalente a setreuid(-1, euid) y por tanto puede cambiar\n       el identificador de usuario guardado.  Bajo glibc2.1 es equivalente a setresuid(-1, euid,-1) y por  tanto\n       no modifica el identificador de usuario guardado.\n\n       Las mismas anotaciones se aplican a setegid.\n\nCONFORME A\n       BSD 4.3\n\nV\u00c9ASE TAMBI\u00c9N\n       geteuid(2), setuid(2), setreuid(2), setresuid(2)\n\nLinux 2.4                                         17 mayo 2001                                        SETEUID(2)\n"},{"NOMBRE": "       seteuid, setegid - establecen el identificador de usuario o de grupo\n\n", "SINOPSIS": "       #include <sys/types.h>\n       #include <unistd.h>\n\n       int seteuid(uid_t euid);\n       int setegid(gid_t egid);\n\n", "DESCRIPCION": "       seteuid  establece  el  identificador de usuario efectivo del proceso actual.  Los procesos de usuario no\n       privilegiados solamente pueden establecer el  identificador  de  usuario  efectivo  al  identificador  de\n       usuario real, el identificador de usuario efectivo o el identificador de usuario guardado.\n\n       Precisamente lo mismo puede decirse para setegid con \"grupo\" en lugar de \"usuario\".\n\nVALOR DEVUELTO\n       En caso de \u00e9xito, se devuelve cero. En caso de error, se devuelve -1, y errno se modifica apropiadamente.\n\n", "ERRORES": "       EPERM  El  proceso  actual  no  pertenece al super-usuario y euid (resp.  egid) no es el identificador de\n              usuario (grupo) real, el identificador de usuario (grupo) efectivo o el identificador  de  usuario\n              (grupo) guardado.\n\n", "OBSERVACIONES": "       Establecer  el  identificador de usuario (grupo) efectivo al identificador de usuario (grupo) guardado es\n       posible desde la versi\u00f3n 1.1.37  de  Linux  (1.1.38).   En  un  sistema  cualquiera  deber\u00eda  comprobarse\n       _POSIX_SAVED_IDS.\n\n       Bajo  libc4, libc5 y glibc2.0 seteuid(euid) es equivalente a setreuid(-1, euid) y por tanto puede cambiar\n       el identificador de usuario guardado.  Bajo glibc2.1 es equivalente a setresuid(-1, euid,-1) y por  tanto\n       no modifica el identificador de usuario guardado.\n\n       Las mismas anotaciones se aplican a setegid.\n\nCONFORME A\n       BSD 4.3\n\nV\u00c9ASE TAMBI\u00c9N\n       geteuid(2), setuid(2), setreuid(2), setresuid(2)\n\nLinux 2.4                                         17 mayo 2001                                        SETEUID(2)\n"},{"NOMBRE": "       setfsgid - establece la identidad del grupo que accede al sistema de ficheros\n\n", "SINOPSIS": "       #include <unistd.h> /* glibc usa <sys/fsuid.h> */\n\n       int setfsgid(uid_t fsgid);\n\n", "DESCRIPCION": "       La  llamada  al  sistema  setfsgid  establece  el  identificador de grupo que el n\u00facleo de Linux usa para\n       comprobar todos los accesos al sistema de ficheros. Normalmente, el valor  de  fsgid  cambiar\u00e1  seg\u00fan  el\n       valor  del  grupo  efectivo.  De  hecho, cada vez que el grupo efectivo cambie, fsgid tambi\u00e9n cambiar\u00e1 al\n       nuevo valor del grupo efectivo.\n\n       Las llamadas expl\u00edcitas a setfsuid y setgsgid normalmente s\u00f3lo se usan en programas como el servidor  NFS\n       de  Linux,  que  necesitan cambiar el identificador de usuario y de grupo para acceder a un fichero, pero\n       sin cambiar los identificadores real y efectivo. Un cambio en el identificador real del usuario  para  un\n       programa  como  el  servidor NFS supondr\u00eda un agujero de seguridad, al quedar expuesto a otras se\u00f1ales no\n       deseadas. (v\u00e9ase m\u00e1s abajo.)\n\n       setfsgid s\u00f3lo tendr\u00e1 \u00e9xito si quien lo invoca es el superusuario o si fsgid coincide con el identificador\n       de  grupo  real,  con el identificador de grupo efectivo, con el setgid guardado o con el valor actual de\n       fsgid.\n\nVALOR DEVUELTO\n       En caso de \u00e9xito, se devolver\u00e1 el valor anterior de fsgid.  En caso  de  error,  se  devolver\u00e1  el  valor\n       actual de fsgid.\n\nCONFORME A\n       setfsgid  es  espec\u00edfico  de Linux y no deber\u00eda usarse en programas que se pretende sean portables.  Est\u00e1\n       presente desde la versi\u00f3n 1.1.44 de Linux y en libc desde la versi\u00f3n 4.7.6.\n\n", "ERRORES": "       No se devuelve ning\u00fan mensaje de error a quien lo invoca. Al menos, deber\u00eda devolverse EPERM cuando todas\n       las llamadas fallen.\n\n", "OBSERVACIONES": "       Cuando  glibc  determina  que  el argumento no es un ID de usuario v\u00e1lido, devuelve -1 y pone en errno el\n       valor EINVAL sin intentar la llamada al sistema.\n\n       Observe que en la \u00e9poca en la que esta llamada al sistema fue introducida, un proceso  pod\u00eda  enviar  una\n       se\u00f1al  a  un proceso con el mismo ID de usuario efectivo.  Hoy el manejo de los permisos sobre se\u00f1ales es\n       ligeramente diferente.\n\nV\u00c9ASE TAMBI\u00c9N\n       kill(2), setfsuid(2)\n\nLinux 1.3.15                                      23 julio 2002                                      SETFSGID(2)\n"},{"NOMBRE": "       setfsuid - establece la identidad del usuario que accede al sistema de ficheros\n\n", "SINOPSIS": "       #include <unistd.h> /* glibc usa <sys/fsuid.h> */\n\n       int setfsuid(uid_t fsuid);\n\n", "DESCRIPCION": "       La  llamada  al  sistema  setfsuid  establece el identificador de usuario que el n\u00facleo de Linux usa para\n       comprobar todos los accesos al sistema de ficheros. Normalmente, el valor  de  fsuid  cambiar\u00e1  seg\u00fan  el\n       valor  del usuario efectivo. De hecho, cada vez que el usuario efectivo cambie, fsuid tambi\u00e9n cambiar\u00e1 al\n       nuevo valor del usuario efectivo.\n\n       Las llamadas expl\u00edcitas a setfsuid y setgsgid normalmente s\u00f3lo se usan en programas como el servidor  NFS\n       de  Linux,  que  necesitan cambiar el identificador de usuario y de grupo para acceder a un fichero, pero\n       sin cambiar los identificadores real y efectivo. Un cambio en el identificador real del usuario  para  un\n       programa  como  el  servidor NFS supondr\u00eda un agujero de seguridad, al quedar expuesto a otras se\u00f1ales no\n       deseadas. (v\u00e9ase m\u00e1s abajo.)\n\n       setfsuid s\u00f3lo tendr\u00e1 \u00e9xito si quien lo invoca es el superusuario o si fsuid coincide con el identificador\n       de  usuario  real, con el identificador de usuario efectivo, con el setuid guardado o con el valor actual\n       de fsuid.\n\nVALOR DEVUELTO\n       En caso de \u00e9xito, se devolver\u00e1 el valor anterior de fsuid.  En caso  de  error,  se  devolver\u00e1  el  valor\n       actual de fsuid.\n\nCONFORME A\n       setfsuid  es  espec\u00edfico  de Linux y no deber\u00eda usarse en programas que se pretende sean portables.  Est\u00e1\n       presente desde la versi\u00f3n 1.1.44 de Linux y en libc desde la versi\u00f3n 4.7.6.\n\n", "ERRORES": "       No se devuelve ning\u00fan mensaje de error a quien lo invoca. Al menos, deber\u00eda devolverse EPERM cuando todas\n       las llamadas fallen.\n\n", "OBSERVACIONES": "       Cuando  glibc  determina  que  el argumento no es un ID de usuario v\u00e1lido, devuelve -1 y pone en errno el\n       valor EINVAL sin intentar la llamada al sistema.\n\n       Observe que en la \u00e9poca en la que esta llamada al sistema fue introducida, un proceso  pod\u00eda  enviar  una\n       se\u00f1al  a  un proceso con el mismo ID de usuario efectivo.  Hoy el manejo de los permisos sobre se\u00f1ales es\n       ligeramente diferente.\n\nV\u00c9ASE TAMBI\u00c9N\n       kill(2), setfsgid(2)\n\nLinux 1.3.15                                      23 julio 2002                                      SETFSUID(2)\n"},{"NOMBRE": "       setgid - establece la identidad de grupo\n\n", "SINOPSIS": "       #include <sys/types.h>\n       #include <unistd.h>\n\n       int setgid(gid_t gid);\n\n", "DESCRIPCION": "       setgid  establece  el ID de grupo efectivo del proceso en curso. Si quien llama a la funci\u00f3n es el s\u00faper-\n       usuario, se ponen tambi\u00e9n las IDs de grupo real y salvado.\n\n       Bajo Linux, setgid est\u00e1 implementada como la versi\u00f3n POSIX con la caracter\u00edstica _POSIX_SAVED_IDS.   Esto\n       permite  que  un  programa SGID (distinto de root) renuncie a todos sus privilegios de grupos, haga alg\u00fan\n       trabajo no privilegiado, y luego recupere su ID de grupo efectivo original de una manera segura.\n\nVALOR DEVUELTO\n       En caso de \u00e9xito, se devuelve cero. En caso de error, se devuelve -1, y se pone  un  valor  apropiado  en\n       errno.\n\n", "ERRORES": "       EPERM  El usuario no es el s\u00faper-usuario (no tiene la capacidad CAP_SETGID), y gid no concuerda con el ID\n              de grupo efectivo ni con el setgid salvado del proceso que llama a la funci\u00f3n.\n\nCONFORME A\n       SVr4, SVID.\n\nV\u00c9ASE TAMBI\u00c9N\n       getgid(2), setregid(2), setegid(2)\n\nLinux 2.5                                         9 marzo 2002                                         SETGID(2)\n"},{"NOMBRE": "       getgroups, setgroups - obtiene/asigna la lista de IDs de grupo suplementarios\n\n", "SINOPSIS": "       #include <sys/types.h>\n       #include <unistd.h>\n\n       int getgroups(int size, gid_t list[]);\n\n       #include <grp.h>\n\n       int setgroups(size_t size, const gid_t *list);\n\n", "DESCRIPCION": "       getgroups\n              Se  devuelven  como  mucho  size  identificadores  de  grupo  suplementarios  en  list.  Queda sin\n              especificar si el identificador de grupo efectivo del proceso invocador se  incluye  en  la  lista\n              devuelta.  (As\u00ed,  una  aplicaci\u00f3n deber\u00eda llamar tambi\u00e9n a getegid(2) y a\u00f1adir o eliminar el valor\n              resultante.)  Si size es cero,  list  no  se  modifica,  pero  se  devuelve  el  n\u00famero  total  de\n              identificadores de grupo suplementarios para el proceso.\n\n       setgroups\n              Asigna  los  identificadores  de  grupo suplementarios para el proceso. S\u00f3lo el superusuario puede\n              usar esta funci\u00f3n.\n\nVALOR DEVUELTO\n       getgroups\n              En caso de \u00e9xito, se devuelve el n\u00famero de grupos suplementarios.  En caso de error,  se  devuelve\n              -1 y se pone en errno un valor apropiado.\n\n       setgroups\n              En caso de \u00e9xito, se devuelve 0. Si hay un error, -1, y se pone en errno un valor apropiado.\n\n", "ERRORES": "       EFAULT list tiene una direcci\u00f3n inv\u00e1lida.\n\n       EPERM  Para setgroups, el usuario no es el superusuario.\n\n       EINVAL Para  setgroups,  size  es m\u00e1s grande que NGROUPS (32 para Linux 2.0.32).  Para getgroups, size es\n              menor que el n\u00famero de IDs de grupos suplementarios, pero no es cero.\n\n", "OBSERVACIONES": "       Un proceso puede tener como m\u00e1ximo al menos NGROUPS_MAX identificadores de  grupo  suplementarios  adem\u00e1s\n       del  identificador  de  grupo efectivo (EGID).  El conjunto de identificadores de grupo suplementarios es\n       heredado del proceso padre y puede ser modificado usando setgroups.  El n\u00famero m\u00e1ximo de  identificadores\n       de grupo suplementarios puede averiguarse usando sysconf(3):\n           long ngroups_max;\n           ngroups_max = sysconf(_SC_NGROUPS_MAX);\n       El valor m\u00e1ximo devuelto por getgroups no puede ser mayor que el valor obtenido de esta manera m\u00e1s uno.\n\n       El  prototipo para setgroups est\u00e1 disponible solamente si _BSD_SOURCE est\u00e1 definida (bien expl\u00edcitamente,\n       o impl\u00edcitamente, no definiendo _POSIX_SOURCE o compilando con la opci\u00f3n -ansi).\n\nCONFORME A\n       SVr4, SVID (s\u00f3lo en la distribuci\u00f3n 4; estas llamadas al sistema no estaban presentes en  SVr3),  X/OPEN,\n       4.3BSD.  La  funci\u00f3n  getgroups  est\u00e1  en  POSIX.1.   Puesto  que setgroups requiere privilegios, no est\u00e1\n       cubierta por POSIX.1.\n\nV\u00c9ASE TAMBI\u00c9N\n       initgroups(3), getgid(2), setgid(2)\n\nLinux 2.0.32                                    10 Diciembre 1997                                   GETGROUPS(2)\n"},{"NOMBRE": "       gethostid, sethostid - obtiene o asigna un identificador \u00fanico al anfitri\u00f3n (host) actual.\n\n", "SINOPSIS": "       #include <unistd.h>\n\n       long gethostid(void);\n       int sethostid(long hostid);\n\n", "DESCRIPCION": "       Obtiene  o asigna un identificador \u00fanico de 32-bits para el ordenador actual. El identificador de 32-bits\n       pretende ser \u00fanico entre todos los sistemas  UNIX  existentes.  Este  normalmente  asemeja  la  direcci\u00f3n\n       Internet para el sistema local, dado por gethostbyname(3), y por lo tanto, normalmente nunca necesita ser\n       asignado.\n\n       El uso de la llamada sethostid est\u00e1 restringida al superusuario.\n\n       El argumento hostid se encuentra almacenado en el fichero /etc/hostid.\n\nVALOR DEVUELTO\n       gethostid devuelve el identificador de 32-bits del anfitri\u00f3n (host) actual asignado por sethostid(2).\n\nCONFORME A\n       4.2BSD. Estas funciones se encuentran  en  4.4BSD.  POSIX.1  no  define  estas  funciones,  pero  ISO/IEC\n       9945-1:1990 las menciona en B.4.4.1. SVr4 incluye gethostid pero no sethostid.\n\n", "ARCHIVOS": "       /etc/hostid\n\nV\u00c9ASE TAMBI\u00c9N\n       hostid(1), gethostbyname(3)\n\nLinux 0.99.13                                     1 julio 1996                                      GETHOSTID(2)\n"},{"NOMBRE": "       gethostname, sethostname - obtiene/asigna el nombre del host\n\n", "SINOPSIS": "       #include <unistd.h>\n\n       int gethostname(char *name, size_t len);\n       int sethostname(const char *name, size_t len);\n\n", "DESCRIPCION": "       Estas  funciones  se  usan  para  obtener  o  cambiar  el nombre del host del proceso actual.  La funci\u00f3n\n       gethostname() devuelve un nombre de host acabado en NULL (establecido anteriormente por sethostname()) en\n       el  array  name que tiene una longitud de len bytes.  En el caso en que el nombre de host acabado en NULL\n       no quepa, no se devuelve un error, pero se trunca el nombre de host. Queda sin especificar si  el  nombre\n       de host truncado terminar\u00e1 en NULL.\n\nVALOR DEVUELTO\n       En caso de \u00e9xito devuelve un 0. En caso de error,devuelve un -1, y errno se asigna apropiadamente.\n\n", "ERRORES": "       EINVAL len  es  negativo o, para sethostname, len es mas largo que el m\u00e1ximo de tama\u00f1o permitido, o, para\n              gethostname en Linux/i386, len es mas corto que el tama\u00f1o actual.  (In this last  case  glibc  2.1\n              uses ENAMETOOLONG.)\n\n       EPERM  Para sethostname, realizar la llamada no hace falta estar como superusuario.\n\n       EFAULT name es una direcci\u00f3n inv\u00e1lida.\n\nCONFORME A\n       SVr4,  4.4BSD   (esta  funci\u00f3n  apareci\u00f3  por  primera  vez  en  4.2BSD).   POSIX  1003.1-2001 especifica\n       gethostname pero no sethostname.\n\n", "FALLOS": "       Para muchas combinaciones n\u00facleo Linux / libc gethostname devolver\u00e1 un error en lugar  de  un  nombre  de\n       host truncado.\n\n", "OBSERVACIONES": "       SUSv2  garantiza  que `Los nombres de host est\u00e1n limitados a 255 bytes'.  POSIX 1003.1-2001 garantiza que\n       `Los nombres de host (sin incluir el car\u00e1cter NULL del final) est\u00e1n limitados a HOST_NAME_MAX bytes'.\n\nV\u00c9ASE TAMBI\u00c9N\n       getdomainname(2), setdomainname(2), uname(2)\n\nLinux 2.5.0                                     15 Diciembre 2001                                 GETHOSTNAME(2)\n"},{"NOMBRE": "       getitimer, setitimer - get or set value of an interval timer\n\n", "SINOPSIS": "       #include <sys/time.h>\n\n       int getitimer(int which, struct itimerval *curr_value);\n       int setitimer(int which, const struct itimerval *new_value,\n                     struct itimerval *old_value);\n\n", "DESCRIPCION": "       These system calls provide access to interval timers, that is, timers that initially expire at some point\n       in the future, and (optionally) at regular intervals after that.  When a timer expires, a signal is  gen\u2010\n       erated for the calling process, and the timer is reset to the specified interval (if the interval is non\u2010\n       zero).\n\n       Three types of timers\u2014specified via the which argument\u2014are provided, each of which counts against a  dif\u2010\n       ferent clock and generates a different signal on timer expiration:\n\n       ITIMER_REAL\n              This  timer  counts down in real (i.e., wall clock) time.  At each expiration, a SIGALRM signal is\n              generated.\n\n       ITIMER_VIRTUAL\n              This timer counts down against the user-mode CPU time consumed by the process.   (The  measurement\n              includes CPU time consumed by all threads in the process.)  At each expiration, a SIGVTALRM signal\n              is generated.\n\n       ITIMER_PROF\n              This timer counts down against the total (i.e., both user and system) CPU  time  consumed  by  the\n              process.  (The measurement includes CPU time consumed by all threads in the process.)  At each ex\u2010\n              piration, a SIGPROF signal is generated.\n\n              In conjunction with ITIMER_VIRTUAL, this timer can be used to profile user  and  system  CPU  time\n              consumed by the process.\n\n       A process has only one of each of the three types of timers.\n\n       Timer values are defined by the following structures:\n\n           struct itimerval {\n               struct timeval it_interval; /* Interval for periodic timer */\n               struct timeval it_value;    /* Time until next expiration */\n           };\n\n           struct timeval {\n               time_t      tv_sec;         /* seconds */\n               suseconds_t tv_usec;        /* microseconds */\n           };\n\n   getitimer()\n       The  function  getitimer() places the current value of the timer specified by which in the buffer pointed\n       to by curr_value.\n\n       The it_value substructure is populated with the amount of time remaining until the next expiration of the\n       specified  timer.  This value changes as the timer counts down, and will be reset to it_interval when the\n       timer expires.  If both fields of it_value are zero, then this timer is currently disarmed (inactive).\n\n       The it_interval substructure is populated with the timer interval.  If both  fields  of  it_interval  are\n       zero, then this is a single-shot timer (i.e., it expires just once).\n\n   setitimer()\n       The  function setitimer() arms or disarms the timer specified by which, by setting the timer to the value\n       specified by new_value.  If old_value is non-NULL, the buffer it points to is used to return the previous\n       value of the timer (i.e., the same information that is returned by getitimer()).\n\n       If  either  field  in  new_value.it_value  is nonzero, then the timer is armed to initially expire at the\n       specified time.  If both fields in new_value.it_value are zero, then the timer is disarmed.\n\n       The new_value.it_interval field specifies the new interval for the timer; if both of  its  subfields  are\n       zero, the timer is single-shot.\n\nRETURN VALUE\n       On success, zero is returned.  On error, -1 is returned, and errno is set appropriately.\n\n", "ERRORES": "       EFAULT new_value, old_value, or curr_value is not valid a pointer.\n\n       EINVAL which  is  not  one of ITIMER_REAL, ITIMER_VIRTUAL, or ITIMER_PROF; or (since Linux 2.6.22) one of\n              the tv_usec fields in the structure pointed to by new_value contains a value outside the  range  0\n              to 999999.\n\nCONFORMING TO\n       POSIX.1-2001,  SVr4,  4.4BSD  (this  call  first appeared in 4.2BSD).  POSIX.1-2008 marks getitimer() and\n       setitimer() obsolete, recommending the use of the POSIX timers API  (timer_gettime(2),  timer_settime(2),\n       etc.) instead.\n\n", "NOTA": "       Timers will never expire before the requested time, but may expire some (short) time afterward, which de\u2010\n       pends on the system timer resolution and on the system load; see time(7).  (But see BUGS below.)  If  the\n       timer  expires while the process is active (always true for ITIMER_VIRTUAL), the signal will be delivered\n       immediately when generated.\n\n       A child created via fork(2) does not inherit its parent's interval timers.  Interval timers are preserved\n       across an execve(2).\n\n       POSIX.1  leaves  the  interaction  between  setitimer()  and the three interfaces alarm(2), sleep(3), and\n       usleep(3) unspecified.\n\n       The standards are silent on the meaning of the call:\n\n           setitimer(which, NULL, &old_value);\n\n       Many systems (Solaris, the BSDs, and perhaps others) treat this as equivalent to:\n\n           getitimer(which, &old_value);\n\n       In Linux, this is treated as being equivalent to a call in which the new_value fields are zero; that  is,\n       the timer is disabled.  Don't use this Linux misfeature: it is nonportable and unnecessary.\n\n", "FALLOS": "       The generation and delivery of a signal are distinct, and only one instance of each of the signals listed\n       above may be pending for a process.  Under very heavy loading, an ITIMER_REAL timer may expire before the\n       signal from a previous expiration has been delivered.  The second signal in such an event will be lost.\n\n       On  Linux  kernels  before  2.6.16,  timer values are represented in jiffies.  If a request is made set a\n       timer  with  a  value  whose  jiffies  representation  exceeds   MAX_SEC_IN_JIFFIES   (defined   in   in\u2010\n       clude/linux/jiffies.h),  then  the  timer  is  silently  truncated  to this ceiling value.  On Linux/i386\n       (where, since Linux 2.6.13, the default jiffy is 0.004 seconds), this means that the ceiling value for  a\n       timer  is approximately 99.42 days.  Since Linux 2.6.16, the kernel uses a different internal representa\u2010\n       tion for times, and this ceiling is removed.\n\n       On certain systems (including i386), Linux kernels before version 2.6.12 have a bug  which  will  produce\n       premature  timer  expirations  of  up to one jiffy under some circumstances.  This bug is fixed in kernel\n       2.6.12.\n\n       POSIX.1-2001 says that setitimer() should fail if a tv_usec value is specified that  is  outside  of  the\n       range 0 to 999999.  However, in kernels up to and including 2.6.21, Linux does not give an error, but in\u2010\n       stead silently adjusts the corresponding seconds value for the timer.  From kernel  2.6.22  onward,  this\n       nonconformance has been repaired: an improper tv_usec value results in an EINVAL error.\n\nSEE ALSO\n       gettimeofday(2), sigaction(2), signal(2), timer_create(2), timerfd_create(2), time(7)\n\n", "COLOFON": "       This page is part of release 5.10 of the Linux man-pages project.  A description of the project, informa\u2010\n       tion  about  reporting   bugs,   and   the   latest   version   of   this   page,   can   be   found   at\n       https://www.kernel.org/doc/man-pages/.\n\nLinux                                              2020-04-11                                       GETITIMER(2)\n"},{"NOMBRE": "       setpgid, getpgid, setpgrp, getpgrp - obtener/establecer el grupo de procesos\n\n", "SINOPSIS": "       #include <unistd.h>\n\n       int setpgid(pid_t pid, pid_t pgid);\n       pid_t getpgid(pid_t pid);\n       int setpgrp(void);\n       pid_t getpgrp(void);\n\n", "DESCRIPCION": "       setpgid  pone  el ID del grupo del proceso especificado por pid a pgid.  Si pid es cero, se emplea el PID\n       del proceso en curso. Si pgid es cero, se emplea el PID del proceso especificado por pid.  Si setpgid  se\n       utiliza  para  mover  un  proceso  de un grupo de procesos a otro (como hacen algunos shells cuando crean\n       tuber\u00edas), ambos grupos de procesos deben formar parte de la misma sesi\u00f3n. En este caso, pgid  especifica\n       el  grupo de procesos existente en el que vamos a entrar, y el ID de sesi\u00f3n de ese grupo de procesos debe\n       coincidir con el ID de sesi\u00f3n del proceso que quiere entrar.\n\n       getpgid devuelve el ID del grupo de proceso del especificado por pid.  Si pid es cero, se emplea  el  PID\n       del proceso en curso.\n\n       La llamada setpgrp() es equivalente a setpgid(0,0).\n\n       De manera similar getpgrp() es equivalente a getpgid(0).  Cada grupo de procesos es miembro de una sesi\u00f3n\n       y cada proceso es miembro de la sesi\u00f3n de la que su grupo de procesos es miembro.\n\n       Los grupos de proceso se emplean para la distribuci\u00f3n de se\u00f1ales, y  por  las  terminales  para  arbitrar\n       peticiones  para  su  entrada:  los  procesos que tienen el mismo grupo de proceso que la terminal son en\n       primer plano y pueden leer, mientras que otros se bloquear\u00e1n con una se\u00f1al si intentan leer.\n\n       Estas llamadas se usan pues por programas como csh(1) para crear grupos de proceso cuando implementan  el\n       control  de  trabajos.   Las  llamadas  TIOCGPGRP  y  TIOCSPGRP  descritas  en termios(3) se emplean para\n       obtener/poner el grupo de proceso de la terminal de control.\n\n       Si una sesi\u00f3n posee una terminal controladora, CLOCAL no est\u00e1 configurada  y  si  se  cierra  la  sesi\u00f3n,\n       entonces  se  enviar\u00e1  una  se\u00f1al  SIGHUP al lider de sesi\u00f3n. Si el lider de sesi\u00f3n existe, se enviar\u00e1 la\n       se\u00f1al SIGHUP a cada proceso del grupo de procesos en primer plano de la terminal controladora.\n\n       Si la terminaci\u00f3n del proceso hace que un grupo de procesos se quede hu\u00e9rfano y si cualquier miembro  del\n       grupo  de  procesos  que  se  acaba  de  quedar hu\u00e9rfano se detiene, entonces se enviar\u00e1 una se\u00f1al SIGHUP\n       seguida de una se\u00f1al SIGCONT a cada proceso en el grupo de procesos que se acaba de quedar hu\u00e9rfano.\n\nVALOR DEVUELTO\n       En caso de \u00e9xito, setpgid y setpgrp devuelven cero. En caso de error.  devuelven  -1  y  ponen  un  valor\n       apropiado en errno.\n\n       getpgid  devuelve  un  grupo  de proceso si acaba bien; -1 en caso de error, y pone un valor apropiado en\n       errno.\n\n       getpgrp siempre devuelve el grupo de proceso actual.\n\n", "ERRORES": "       EINVAL pgid es menor que 0 (setpgid, setpgrp).\n\n       EACCES Se intent\u00f3 cambiar el identificador de grupo de procesos de uno de los hijos del proceso invocador\n              y el proceso hijo ya hab\u00eda realizado una llamada a execve (setpgid, setpgrp).\n\n       EPERM  Se  intent\u00f3  cambiar  el  grupo  de procesos de un proceso a otro grupo en una sesi\u00f3n diferente, o\n              cambiar el identificador de grupo de procesos de uno de los hijos del proceso invocador estando el\n              proceso  hijo en una sesi\u00f3n diferente, o cambiar el identificador de grupo de procesos de un l\u00edder\n              de sesi\u00f3n (setpgid, setpgrp).\n\n       ESRCH  Para getpgid: pid no concuerda con ning\u00fan proceso.  Para setpgid: pid no  se  corresponde  con  el\n              proceso actual ni con uno de sus hijos.\n\nCONFORME A\n       Las  funciones  setpgid  y  getpgrp  siguen  el  est\u00e1ndar POSIX.1.  La funci\u00f3n setpgrp es de BSD 4.2.  La\n       funci\u00f3n getpgid conforma con SVr4.\n\n", "OBSERVACIONES": "       POSIX tom\u00f3 setpgid de la funci\u00f3n BSD setpgrp.  SysV tambi\u00e9n tiene una funci\u00f3n con el mismo  nombre,  pero\n       es id\u00e9ntica a setsid(2).\n\n       Para  obtener  los prototipos bajo glibc, debe definir tanto _XOPEN_SOURCE como _XOPEN_SOURCE_EXTENDED, o\n       usar \"#define _XOPEN_SOURCE n\" para alg\u00fan entero n mayor o igual a 500.\n\nV\u00c9ASE TAMBI\u00c9N\n       getuid(2), setsid(2), tcgetpgrp(3), tcsetpgrp(3), termios(3)\n\nLinux                                             20 enero 2003                                       SETPGID(2)\n"},{"NOMBRE": "       setpgid, getpgid, setpgrp, getpgrp - obtener/establecer el grupo de procesos\n\n", "SINOPSIS": "       #include <unistd.h>\n\n       int setpgid(pid_t pid, pid_t pgid);\n       pid_t getpgid(pid_t pid);\n       int setpgrp(void);\n       pid_t getpgrp(void);\n\n", "DESCRIPCION": "       setpgid  pone  el ID del grupo del proceso especificado por pid a pgid.  Si pid es cero, se emplea el PID\n       del proceso en curso. Si pgid es cero, se emplea el PID del proceso especificado por pid.  Si setpgid  se\n       utiliza  para  mover  un  proceso  de un grupo de procesos a otro (como hacen algunos shells cuando crean\n       tuber\u00edas), ambos grupos de procesos deben formar parte de la misma sesi\u00f3n. En este caso, pgid  especifica\n       el  grupo de procesos existente en el que vamos a entrar, y el ID de sesi\u00f3n de ese grupo de procesos debe\n       coincidir con el ID de sesi\u00f3n del proceso que quiere entrar.\n\n       getpgid devuelve el ID del grupo de proceso del especificado por pid.  Si pid es cero, se emplea  el  PID\n       del proceso en curso.\n\n       La llamada setpgrp() es equivalente a setpgid(0,0).\n\n       De manera similar getpgrp() es equivalente a getpgid(0).  Cada grupo de procesos es miembro de una sesi\u00f3n\n       y cada proceso es miembro de la sesi\u00f3n de la que su grupo de procesos es miembro.\n\n       Los grupos de proceso se emplean para la distribuci\u00f3n de se\u00f1ales, y  por  las  terminales  para  arbitrar\n       peticiones  para  su  entrada:  los  procesos que tienen el mismo grupo de proceso que la terminal son en\n       primer plano y pueden leer, mientras que otros se bloquear\u00e1n con una se\u00f1al si intentan leer.\n\n       Estas llamadas se usan pues por programas como csh(1) para crear grupos de proceso cuando implementan  el\n       control  de  trabajos.   Las  llamadas  TIOCGPGRP  y  TIOCSPGRP  descritas  en termios(3) se emplean para\n       obtener/poner el grupo de proceso de la terminal de control.\n\n       Si una sesi\u00f3n posee una terminal controladora, CLOCAL no est\u00e1 configurada  y  si  se  cierra  la  sesi\u00f3n,\n       entonces  se  enviar\u00e1  una  se\u00f1al  SIGHUP al lider de sesi\u00f3n. Si el lider de sesi\u00f3n existe, se enviar\u00e1 la\n       se\u00f1al SIGHUP a cada proceso del grupo de procesos en primer plano de la terminal controladora.\n\n       Si la terminaci\u00f3n del proceso hace que un grupo de procesos se quede hu\u00e9rfano y si cualquier miembro  del\n       grupo  de  procesos  que  se  acaba  de  quedar hu\u00e9rfano se detiene, entonces se enviar\u00e1 una se\u00f1al SIGHUP\n       seguida de una se\u00f1al SIGCONT a cada proceso en el grupo de procesos que se acaba de quedar hu\u00e9rfano.\n\nVALOR DEVUELTO\n       En caso de \u00e9xito, setpgid y setpgrp devuelven cero. En caso de error.  devuelven  -1  y  ponen  un  valor\n       apropiado en errno.\n\n       getpgid  devuelve  un  grupo  de proceso si acaba bien; -1 en caso de error, y pone un valor apropiado en\n       errno.\n\n       getpgrp siempre devuelve el grupo de proceso actual.\n\n", "ERRORES": "       EINVAL pgid es menor que 0 (setpgid, setpgrp).\n\n       EACCES Se intent\u00f3 cambiar el identificador de grupo de procesos de uno de los hijos del proceso invocador\n              y el proceso hijo ya hab\u00eda realizado una llamada a execve (setpgid, setpgrp).\n\n       EPERM  Se  intent\u00f3  cambiar  el  grupo  de procesos de un proceso a otro grupo en una sesi\u00f3n diferente, o\n              cambiar el identificador de grupo de procesos de uno de los hijos del proceso invocador estando el\n              proceso  hijo en una sesi\u00f3n diferente, o cambiar el identificador de grupo de procesos de un l\u00edder\n              de sesi\u00f3n (setpgid, setpgrp).\n\n       ESRCH  Para getpgid: pid no concuerda con ning\u00fan proceso.  Para setpgid: pid no  se  corresponde  con  el\n              proceso actual ni con uno de sus hijos.\n\nCONFORME A\n       Las  funciones  setpgid  y  getpgrp  siguen  el  est\u00e1ndar POSIX.1.  La funci\u00f3n setpgrp es de BSD 4.2.  La\n       funci\u00f3n getpgid conforma con SVr4.\n\n", "OBSERVACIONES": "       POSIX tom\u00f3 setpgid de la funci\u00f3n BSD setpgrp.  SysV tambi\u00e9n tiene una funci\u00f3n con el mismo  nombre,  pero\n       es id\u00e9ntica a setsid(2).\n\n       Para  obtener  los prototipos bajo glibc, debe definir tanto _XOPEN_SOURCE como _XOPEN_SOURCE_EXTENDED, o\n       usar \"#define _XOPEN_SOURCE n\" para alg\u00fan entero n mayor o igual a 500.\n\nV\u00c9ASE TAMBI\u00c9N\n       getuid(2), setsid(2), tcgetpgrp(3), tcsetpgrp(3), termios(3)\n\nLinux                                             20 enero 2003                                       SETPGID(2)\n"},{"NOMBRE": "       getpriority, setpriority - obtiene/asigna la prioridad de planificaci\u00f3n de un programa\n\n", "SINOPSIS": "       #include <sys/time.h>\n       #include <sys/resource.h>\n\n       int getpriority(int which, int who);\n       int setpriority(int which, int who, int prio);\n\n", "DESCRIPCION": "       La  prioridad  de planificaci\u00f3n del proceso, grupo de procesos o usuario, seg\u00fan se indique en which y who\n       se obtiene con la funci\u00f3n getpriority y  se  asigna  con  setpriority.   Which  puede  ser  PRIO_PROCESS,\n       PRIO_PGRP,  o  PRIO_USER,  y  who  se  interpreta  en funci\u00f3n de which (un indentificador de proceso para\n       PRIO_PROCESS, un indentificador de grupo de procesos para PRIO_PGRP, y un identificador de  usuario  para\n       PRIO_USER).   Un valor cero de who indica (respectivamente) el proceso invocador, el grupo de proceso del\n       proceso invocador, o el identificador de usuario real del proceso invocador.  Prio es un valor que  puede\n       variar  de -20 a 20 (vea la secci\u00f3n Observaciones m\u00e1s abajo) .  La prioridad por defecto es 0; cuanto m\u00e1s\n       baja es la prioridad m\u00e1s favorable es la planificaci\u00f3n.\n\n       La llamada getpriority devuelve la prioridad m\u00e1s alta (el valor num\u00e9rico m\u00e1s bajo)  de  la  que  disfruta\n       cualquiera  de  los  procesos  especificados.  La  llamada setpriority asigna el valor especificado a las\n       prioridades de todos los procesos especificados. S\u00f3lo el superusuario puede decrementar  las  prioridades\n       (haci\u00e9ndolas, por tanto, m\u00e1s altas).\n\nVALOR DEVUELTO\n       Ya  que  getpriority  leg\u00edtimamente  puede  devolver el valor -1, es necesario borrar la variable externa\n       errno antes de la llamada a la funci\u00f3n y comprobar su valor m\u00e1s adelante para  determinar  si  -1  es  un\n       error o un valor leg\u00edtimo.  La funci\u00f3n setpriority devuelve 0 si no hay error o -1 si lo hay.\n\n", "ERRORES": "       ESRCH   No se encontr\u00f3 ning\u00fan proceso que cumpliera con los valores especificados por which y who.\n\n       EINVAL  Which no era PRIO_PROCESS, PRIO_PGRP, ni PRIO_USER.\n\n       Adem\u00e1s de los errores indicados arriba, setpriority puede fallar si:\n\n       EPERM  Se  encontr\u00f3  un  proceso,  pero  ni  el  identificador de usuario efectivo ni el identificador de\n              usuario real del invocador coinciden con su identificador de usuario efectivo.\n\n       EACCES Un no superusuario intent\u00f3 decrementar la prioridad de un proceso.\n\n", "OBSERVACIONES": "       Los detalles sobre la condici\u00f3n para EPERM dependen del sistema.  La descripci\u00f3n dada arriba  es  lo  que\n       dice  SUSv3,  y  parece  ser  seguida  por  todos  los  sistemas  de  tipo  SYSV.   Linux requiere que el\n       identificador de usuario real o efectivo del invocador coincida con el usuario real del proceso  who  (en\n       lugar de su identificador de usuario efectivo).  Todos los sistemas de tipo BSD (SunOS 4.1.3, Ultrix 4.2,\n       BSD 4.3, FreeBSD 4.3, OpenBSD-2.5, ...) requieren que el identificador de usuario efectivo del  invocador\n       coincida con el identificador de usuario real o efectivo del proceso who.\n\n       El  rango  real  de  prioridad  var\u00eda  entre las diferentes versiones del n\u00facleo.  Las versiones de Linux\n       anteriores a la 1.3.36 ten\u00edan -infinito..15. A partir de la versi\u00f3n 1.3.43 se tiene -20..19, y la llamada\n       al sistema getpriority devuelve 40..1 para estos valores (puesto que los n\u00fameros negativos son c\u00f3digos de\n       error).  La llamada de biblioteca convierte N a 20-N.\n\n       Incluir  <sys/time.h>  no  es  obligatorio  hoy  d\u00eda,  pero  incrementa  la  portabilidad.   (De   hecho,\n       <sys/resource.h> define la estructura rusage con campos de tipo struct timeval definida en <sys/time.h>.)\n\nCONFORME A\n       SVr4, 4.4BSD (estas funciones aparecieron por primera vez en 4.2BSD).\n\nV\u00c9ASE TAMBI\u00c9N\n       nice(1), fork(2), renice(8)\n\nP\u00e1gina de Manual BSD                              21 junio 2002                                   GETPRIORITY(2)\n"},{"NOMBRE": "       setreuid, setregid - definir el identificador de usuario o de grupo real y/o efectivo\n\n", "SINOPSIS": "       #include <sys/types.h>\n       #include <unistd.h>\n\n       int setreuid(uid_t ruid, uid_t euid);\n       int setregid(gid_t rgid, gid_t egid);\n\n", "DESCRIPCION": "       setreuid  define  el  identificador  de  usuario  real  y  efectivo del proceso actual.  Los usuarios sin\n       privilegios solamente pueden cambiar el identificador de usuario real por  el  identificador  de  usuario\n       real  o el identificador de usuario efectivo, y el identificador de usuario efectivo por el identificador\n       de usuario real, el identificador de usuario efectivo o el identificador de usuario guardado.\n\n       Dando el valor -1 para el valor del identificador de usuario ya sea el real  o  el  efectivo,  fuerza  al\n       sistema a dejar dicho identificador sin cambios.\n\n       Si  el  identificador  de  usuario  real es cambiado, o el identificador de usuario efectivo se pone a un\n       valor distinto del identificador de usuario real previo, el identificador de usuario guardado ser\u00e1 puesto\n       al nuevo identificador de usuario efectivo.\n\n       De  manera  completamente  an\u00e1loga, setregid define el identificador de grupo real y efectivo del proceso\n       actual, aplic\u00e1ndose todo lo comentado arriba con \"grupo\" en lugar de \"usuario\".\n\nVALOR DEVUELTO\n       Si hay \u00e9xito, se devuelve cero. Si hay error, se devuelve -1, y errno se actualiza de la forma apropiada.\n\n", "ERRORES": "       EPERM  El proceso actual no es el superusuario y especifica un cambio  que  no  es  (1)  intercambiar  el\n              identificador  de usuario (grupo) efectivo con el real, o (2) poner el valor de uno al del otro, o\n              (3) poner el identificador de usuario (grupo) efectivo  al  valor  del  identificador  de  usuario\n              (grupo) guardado.\n\n", "OBSERVACIONES": "       Establecer  el  identificador de usuario (grupo) efectivo al identificador de usuario guardado es posible\n       desde la versi\u00f3n 1.1.37 de Linux (1.1.38).\n\nCONFORME A\n       BSD 4.3 (las funciones setreuid y setregid aparecieron por primera vez en 4.2BSD.)\n\nV\u00c9ASE TAMBI\u00c9N\n       getuid(2), getgid(2), setuid(2), setgid(2), seteuid(2), setresuid(2)\n\nLinux 1.1.38                                      2 agosto 1994                                      SETREUID(2)\n"},{"NOMBRE": "       setresuid, setresgid - establecen el UID o GID efectivo, real y salvado\n\n", "SINOPSIS": "       #include <unistd.h>\n\n       int setresuid(uid_t ruid, uid_t euid, uid_t suid);\n       int setresgid(gid_t rgid, gid_t egid, gid_t sgid);\n\n", "DESCRIPCION": "       setresuid establece el UID real, el UID efectivo y el SETUID salvado del proceso actual.\n\n       Los  procesos  de  usuarios no privilegiados (esto es, procesos con cada uno de los UIDs real, efectivo y\n       salvado distintos de cero) pueden cambiar el UID real, efectivo y salvado, cada uno  a  uno  de:  el  UID\n       actual, el UID efectivo actual o el UID salvado actual.\n\n       El s\u00faper-usuario puede establecer los UIDs real, efectivo y salvado a valores arbitrarios.\n\n       Si uno de los par\u00e1metros es igual a -1, el valor correspondiente no se cambia.\n\n       De forma completamente an\u00e1loga, setresgid establece el GID real, efectivo y salvado del proceso en curso,\n       con las mismas restricciones para procesos con cada uno de los UIDs real, efectivo y salvado distintos de\n       cero.\n\nVALOR DEVUELTO\n       En  caso  de  \u00e9xito,  se  devuelve  cero.  En  caso  de error, se devuelve -1 y se pone en errno un valor\n       adecuado.\n\n", "ERRORES": "       EPERM  El proceso en curso no era privilegiado e intent\u00f3 cambiar los IDs de una forma no permitida.\n\nCONFORME A\n       Esta llamada no es est\u00e1ndar.\n\n", "HISTORIA": "       Esta llamada al sistema fue introducida por primera vez en HP-UX.  En  Linux  est\u00e1  disponible  desde  la\n       versi\u00f3n  2.1.44.   Aquellos d\u00edas tambi\u00e9n se pod\u00eda encontrar en FreeBSD (para emulaci\u00f3n de los binarios de\n       Linux).\n\n", "OBSERVACIONES": "       Bajo HP-UX y FreeBSD el prototipo se encuentra en <unistd.h>.  Bajo Linux no hay hasta ahora  fichero  de\n       cabecera  que  incluya  el  prototipo - \u00e9sto es un fallo de glibc. Los programas que usen esta llamada al\n       sistema deben a\u00f1adir el prototipo ellos mismos.\n\nV\u00c9ASE TAMBI\u00c9N\n       getuid(2), setuid(2), getreuid(2), setreuid(2), getresuid(2)\n\nLinux 2.1.44                                    15 noviembre 2001                                   SETRESUID(2)\n"},{"NOMBRE": "       setresuid, setresgid - establecen el UID o GID efectivo, real y salvado\n\n", "SINOPSIS": "       #include <unistd.h>\n\n       int setresuid(uid_t ruid, uid_t euid, uid_t suid);\n       int setresgid(gid_t rgid, gid_t egid, gid_t sgid);\n\n", "DESCRIPCION": "       setresuid establece el UID real, el UID efectivo y el SETUID salvado del proceso actual.\n\n       Los  procesos  de  usuarios no privilegiados (esto es, procesos con cada uno de los UIDs real, efectivo y\n       salvado distintos de cero) pueden cambiar el UID real, efectivo y salvado, cada uno  a  uno  de:  el  UID\n       actual, el UID efectivo actual o el UID salvado actual.\n\n       El s\u00faper-usuario puede establecer los UIDs real, efectivo y salvado a valores arbitrarios.\n\n       Si uno de los par\u00e1metros es igual a -1, el valor correspondiente no se cambia.\n\n       De forma completamente an\u00e1loga, setresgid establece el GID real, efectivo y salvado del proceso en curso,\n       con las mismas restricciones para procesos con cada uno de los UIDs real, efectivo y salvado distintos de\n       cero.\n\nVALOR DEVUELTO\n       En  caso  de  \u00e9xito,  se  devuelve  cero.  En  caso  de error, se devuelve -1 y se pone en errno un valor\n       adecuado.\n\n", "ERRORES": "       EPERM  El proceso en curso no era privilegiado e intent\u00f3 cambiar los IDs de una forma no permitida.\n\nCONFORME A\n       Esta llamada no es est\u00e1ndar.\n\n", "HISTORIA": "       Esta llamada al sistema fue introducida por primera vez en HP-UX.  En  Linux  est\u00e1  disponible  desde  la\n       versi\u00f3n  2.1.44.   Aquellos d\u00edas tambi\u00e9n se pod\u00eda encontrar en FreeBSD (para emulaci\u00f3n de los binarios de\n       Linux).\n\n", "OBSERVACIONES": "       Bajo HP-UX y FreeBSD el prototipo se encuentra en <unistd.h>.  Bajo Linux no hay hasta ahora  fichero  de\n       cabecera  que  incluya  el  prototipo - \u00e9sto es un fallo de glibc. Los programas que usen esta llamada al\n       sistema deben a\u00f1adir el prototipo ellos mismos.\n\nV\u00c9ASE TAMBI\u00c9N\n       getuid(2), setuid(2), getreuid(2), setreuid(2), getresuid(2)\n\nLinux 2.1.44                                    15 noviembre 2001                                   SETRESUID(2)\n"},{"NOMBRE": "       setreuid, setregid - definir el identificador de usuario o de grupo real y/o efectivo\n\n", "SINOPSIS": "       #include <sys/types.h>\n       #include <unistd.h>\n\n       int setreuid(uid_t ruid, uid_t euid);\n       int setregid(gid_t rgid, gid_t egid);\n\n", "DESCRIPCION": "       setreuid  define  el  identificador  de  usuario  real  y  efectivo del proceso actual.  Los usuarios sin\n       privilegios solamente pueden cambiar el identificador de usuario real por  el  identificador  de  usuario\n       real  o el identificador de usuario efectivo, y el identificador de usuario efectivo por el identificador\n       de usuario real, el identificador de usuario efectivo o el identificador de usuario guardado.\n\n       Dando el valor -1 para el valor del identificador de usuario ya sea el real  o  el  efectivo,  fuerza  al\n       sistema a dejar dicho identificador sin cambios.\n\n       Si  el  identificador  de  usuario  real es cambiado, o el identificador de usuario efectivo se pone a un\n       valor distinto del identificador de usuario real previo, el identificador de usuario guardado ser\u00e1 puesto\n       al nuevo identificador de usuario efectivo.\n\n       De  manera  completamente  an\u00e1loga, setregid define el identificador de grupo real y efectivo del proceso\n       actual, aplic\u00e1ndose todo lo comentado arriba con \"grupo\" en lugar de \"usuario\".\n\nVALOR DEVUELTO\n       Si hay \u00e9xito, se devuelve cero. Si hay error, se devuelve -1, y errno se actualiza de la forma apropiada.\n\n", "ERRORES": "       EPERM  El proceso actual no es el superusuario y especifica un cambio  que  no  es  (1)  intercambiar  el\n              identificador  de usuario (grupo) efectivo con el real, o (2) poner el valor de uno al del otro, o\n              (3) poner el identificador de usuario (grupo) efectivo  al  valor  del  identificador  de  usuario\n              (grupo) guardado.\n\n", "OBSERVACIONES": "       Establecer  el  identificador de usuario (grupo) efectivo al identificador de usuario guardado es posible\n       desde la versi\u00f3n 1.1.37 de Linux (1.1.38).\n\nCONFORME A\n       BSD 4.3 (las funciones setreuid y setregid aparecieron por primera vez en 4.2BSD.)\n\nV\u00c9ASE TAMBI\u00c9N\n       getuid(2), getgid(2), setuid(2), setgid(2), seteuid(2), setresuid(2)\n\nLinux 1.1.38                                      2 agosto 1994                                      SETREUID(2)\n"},{"NOMBRE": "       getrlimit, getrusage, setrlimit - devuelve/establece el l\u00edmite de recursos y su utilizaci\u00f3n\n\n", "SINOPSIS": "       #include <sys/time.h>\n       #include <sys/resource.h>\n       #include <unistd.h>\n\n       int getrlimit(int resource, struct rlimit *rlim);\n       int getrusage(int who, struct rusage *usage);\n       int setrlimit(int resource, const struct rlimit *rlim);\n\n", "DESCRIPCION": "       getrlimit  y  setrlimit  devuelve / establece el l\u00edmite de recursos, respectivamente.  Cada recurso tiene\n       asociado un l\u00edmite flexible y otro estricto, tal como se define en la  estructura  rlimit  (el  argumento\n       rlim de las rutinas getrlimit() y setrlimit()):\n\n            struct rlimit {\n                rlim_t rlim_cur;   /* L\u00edmite flexible (Soft limit) */\n                rlim_t rlim_max;   /* L\u00edmite estricto (Hard limit)\n                                      (tope para rlim_cur) */\n            };\n\n       El  l\u00edmite flexible es el valor que impone el n\u00facleo para el recurso correspondiente.  El l\u00edmite estricto\n       act\u00faa como un tope para el l\u00edmite flexible: un proceso no  privilegiado  puede  solamente  establecer  su\n       l\u00edmite  flexible  a un valor comprendido entre 0 y el l\u00edmite estricto, y (irreversiblemente) menor que su\n       l\u00edmite estricto.  Un proceso privilegiado puede hacer cualquier cambio sobre ambos valores l\u00edmite.\n\n       El valor RLIM_INFINITY no impone ning\u00fan l\u00edmite sobre un recurso (tanto  en  la  estructura  devuelta  por\n       getrlimit() como en la estructura pasada a setrlimit()).\n\n       resource debe ser uno de los siguientes valores:\n\n       RLIMIT_CPU\n              Tiempo  de  CPU  en segundos.  Cuando el proceso alcanza el l\u00edmite flexible, se le env\u00eda una se\u00f1al\n              SIGXCPU.  La acci\u00f3n por defecto para esta se\u00f1al es terminar el proceso.   Sin  embargo,  la  se\u00f1al\n              puede ser atrapada, y el manejador puede devolver el control al programa principal.  Si el proceso\n              contin\u00faa consumiendo tiempo de CPU, se le enviar\u00e1 SIGXCPU una vez por segundo hasta que se alcance\n              el  l\u00edmite  estricto,  momento  en  el  cual  se  le enviar\u00e1 la se\u00f1al SIGKILL.  (Este \u00faltimo punto\n              describe el comportamiento de Linux 2.2 y 2.4.  Las implementaciones var\u00edan en el  tratamiento  de\n              los  procesos que contin\u00fana consumiendo tiempo de CPU despu\u00e9s de alcanzar el l\u00edmite flexible.  Las\n              aplicaciones portables que necesiten atrapar esta se\u00f1al deber\u00edan realizar una terminaci\u00f3n ordenada\n              despu\u00e9s de recibir la primera se\u00f1al SIGXCPU.)\n\n       RLIMIT_DATA\n              El  tama\u00f1o  m\u00e1ximo  del  segmento de datos del proceso (datos inicializados, no inicializados y el\n              mont\u00edculo).  Este l\u00edmite afecta a las llamadas a brk() and sbrk(), que fallan con el error  ENOMEM\n              al llegarse al l\u00edmite flexible de este recurso.\n\n       RLIMIT_FSIZE\n              El  tama\u00f1o  m\u00e1ximo  de  los ficheros que puede crear el proceso.  Los intentos por sobrepasar este\n              l\u00edmite provocan la comunicaci\u00f3n de una se\u00f1al SIGXFSZ.  Por defecto, esta se\u00f1al termina el proceso,\n              pero un proceso puede atrapar esta se\u00f1al en su lugar, en cuyo caso la llamada al sistema relevante\n              (p.e., write(), truncate()) falla con el error EFBIG.\n\n       RLIMIT_LOCKS\n              Un l\u00edmite sobre el n\u00famero combinado de bloqueos flock() y arrendamientos fcntl() que este  proceso\n              puede establecer (Linux 2.4 y posteriores).\n\n       RLIMIT_MEMLOCK\n              El  n\u00famero  m\u00e1ximo  de  bytes de memoria virtual que pueden ser bloqueados en RAM usando mlock() y\n              mlockall().\n\n       RLIMIT_NOFILE\n              Especifica un valor que es el n\u00famero m\u00e1ximo de descriptor de fichero que  puede  ser  abierto  por\n              este  proceso.   Los intentos de (open(), pipe(), dup(), etc.)  por exceder este l\u00edmite provocar\u00e1n\n              el error EMFILE.\n\n       RLIMIT_NPROC\n              El n\u00famero m\u00e1ximo de procesos que pueden ser creados por  el  identificador  de  usuario  real  del\n              proceso invocador.  Al alcanzar este l\u00edmite, fork() falla con el error EAGAIN.\n\n       RLIMIT_RSS\n              Especifica  el  l\u00edmite  (en  p\u00e1ginas)  del  conjunto  residente  del proceso (el n\u00famero de p\u00e1ginas\n              virtuales residentes en RAM).  Este l\u00edmite s\u00f3lo tiene efecto en Linux  2.4  en  adelante,  y  s\u00f3lo\n              afecta a las llamadas a madvise() especificando MADVISE_WILLNEED.\n\n       RLIMIT_STACK\n              El  tama\u00f1o  m\u00e1ximo de la pila del proceso, en bytes.  Al alcanzar este l\u00edmite, se genera una se\u00f1al\n              SIGSEGV.  Para manejar esta se\u00f1al, un  proceso  debe  emplear  una  pila  de  se\u00f1ales  alternativa\n              (sigaltstack(2)).\n\n       RLIMIT_OFILE es el nombre BSD para RLIMIT_NOFILE.\n\n       getrusage  devuelve  la  utilizaci\u00f3n actual de los recursos, para un who de cualquiera de los siguientes,\n       bien RUSAGE_SELF oo RUSAGE_CHILDREN.\n\n            struct rusage {\n                    struct timeval ru_utime; /* tiempo de usuario utilizado */\n                    struct timeval ru_stime; /* tiempo de sistema utilizado */\n                    long    ru_maxrss;       /* tama\u00f1o m\u00e1ximo de la parte\n                                                establecida como residente */\n                    long    ru_ixrss;        /* tama\u00f1o total de la memoria\n                                                compartida */\n                    long    ru_idrss;        /* tama\u00f1o total de la memoria\n                                                no compartida */\n                    long    ru_isrss;        /* tama\u00f1o de pila no compartido */\n                    long    ru_minflt;       /* peticiones de p\u00e1gina */\n                    long    ru_majflt;       /* fallos de p\u00e1gina */\n                    long    ru_nswap;        /* intercambios */\n                    long    ru_inblock;      /* operaciones de entrada de\n                                                bloques */\n                    long    ru_oublock;      /* operaciones de salida de\n                                                bloques */\n                    long    ru_msgsnd;       /* mensajes enviados */\n                    long    ru_msgrcv;       /* mensajes recibidos */\n                    long    ru_nsignals;     /* se\u00f1ales recibidas */\n                    long    ru_nvcsw;        /* cambios de contexto\n                                                voluntarios */\n                    long    ru_nivcsw;       /* cambios de contexto\n                                                involuntarios */\n            };\n\nVALOR DEVUELTO\n       Si tiene \u00e9xito, devuelve cero. Si hay error, devuelve -1, y errno toma el correspondiente valor.\n\n", "ERRORES": "       EFAULT rlim o usage apuntan fuera del espacio de direcciones accesible.\n\n       EINVAL getrlimit o setrlimit es llamado con un resource err\u00f3neo,  o  getrusage  es  llamado  con  un  who\n              err\u00f3neo.\n\n       EPERM  Un no-superusuario intenta utilizar setrlimit() para incrementar el l\u00edmite `flexible' o `estricto'\n              por encima del l\u00edmite estricto actual, o un superusuario  intenta  incrementar  RLIMIT_NOFILE  por\n              encima del m\u00e1ximo actual del n\u00facleo.\n\nCONFORME A\n       SVr4, BSD 4.3\n\n", "NOTA": "       Incluir  <sys/time.h>  no  es  necesario  actualmente,  pero incrementa la transportabilidad.  (De hecho,\n       struct timeval est\u00e1 definida en <sys/time.h>.)\n\n       En Linux, si la acci\u00f3n asociada a SIGCHLD es SIG_IGN los usos del  recurso  por  los  procesos  hijo  son\n       incluidos autom\u00e1ticamente en el valor devuelto por RUSAGE_CHILDREN, aunque POSIX 1003.1-2001 proh\u00edbe \u00e9sto\n       expl\u00edcitamente.\n\n       La estructura de arriba fue tomada de BSD 4.3 Reno.  No todos los campos son significativos  bajo  Linux.\n       En  la  actualidad  (Linux  2.4) s\u00f3lo los campos ru_utime, ru_stime, ru_minflt, ru_majflt, y ru_nswap son\n       mantenidos.\n\nV\u00c9ASE TAMBI\u00c9N\n       dup(2), fcntl(2), fork(2), mlock(2),  mlockall(2),  mmap(2),  open(2),  quotactl(2),  sbrk(2),  wait3(2),\n       wait4(2), malloc(3), ulimit(3), signal(7)\n\nLinux                                             9 julio 2002                                      GETRLIMIT(2)\n"},{"NOMBRE": "       setsid - run a program in a new session\n\n", "SINOPSIS": "       setsid [options] program [arguments]\n\n", "DESCRIPCION": "       setsid  runs  a  program  in  a new session. The command calls fork(2) if already a process group leader.\n       Otherwise, it executes a program in the current process.  This default behavior is possible  to  override\n       by the --fork option.\n\n", "OPCIONES": "       -c, --ctty\n              Set the controlling terminal to the current one.\n\n       -f, --fork\n              Always create a new process.\n\n       -w, --wait\n              Wait  for  the  execution of the program to end, and return the exit status of this program as the\n              exit status of setsid.\n\n       -V, --version\n              Display version information and exit.\n\n       -h, --help\n              Display help text and exit.\n\n", "AUTOR": "       Rick Sladkey <jrs@world.std.com>\n\nSEE ALSO\n       setsid(2)\n\n", "DISPONIBILIDAD": "       The  setsid  command  is  part  of  the  util-linux  package  and  is  available  from   https://www.ker\u2010\n       nel.org/pub/linux/utils/util-linux/.\n\nutil-linux                                          July 2014                                          SETSID(1)\n"},{"NOMBRE": "       getsockopt, setsockopt - obtiene y pone opciones en conectores (sockets)\n\n", "SINOPSIS": "       #include <sys/types.h>\n       #include <sys/socket.h>\n\n       int getsockopt(int s, int nivel, int nomopc, void *valopc, socklen_t *lonopc);\n\n       int setsockopt(int s, int nivel, int nomopc, const void *valopc, socklen_t lonopc);\n\n", "DESCRIPCION": "       Getsockopt y setsockopt manipulan las opciones asociadas a un conector. \u00c9stas pueden existir en m\u00faltiples\n       niveles de protocolo; siempre est\u00e1n presentes en el nivel m\u00e1s alto de conector.\n\n       Al manipular opciones de conector, deben especificarse el nivel en el que reside la opci\u00f3n, y su nombre.\n\n       Para manipular opciones en el nivel de conector, nivel se especifica  como  SOL_SOCKET.   Para  manipular\n       opciones  a  cualquier  otro  nivel,  se  suministra el n\u00famero de protocolo del apropiado que controle la\n       opci\u00f3n. Por ejemplo, para indicar que una opci\u00f3n ha de ser interpretada por el protocolo TCP, nivel  debe\n       ponerse como el n\u00famero de protocolo de TCP; vea getprotoent(3).\n\n       Los  par\u00e1metros  valopc  y  lonopc  se  emplean  para  acceder a valores de opciones de setsockopt.  Para\n       getsockopt identifican a un b\u00fafer en el que se pondr\u00e1 el valor para la opci\u00f3n pedida (u  opciones).  Para\n       getsockopt,  lonopc  es  un  par\u00e1metro  por  referencia,  que  contiene  inicialmente el tama\u00f1o del b\u00fafer\n       apuntado por optval, y que se modifica al acabar la funci\u00f3n  para  contener  el  tama\u00f1o  real  del  valor\n       devuelto. Si no se va a suministrar o devolver un valor de opci\u00f3n, valopc puede ser NULL.\n\n       Nomopc  y  cualesquiera  opciones especificadas se pasan sin interpretar al m\u00f3dulo de protocolo apropiado\n       para su interpretaci\u00f3n. El fichero de cabecera <sys/socket.h>  contiene  definiciones  para  opciones  de\n       nivel  de  conector,  descritas  m\u00e1s abajo. Las opciones a otros niveles de protocolo var\u00edan en formato y\n       nombre; consulte las p\u00e1ginas apropiadas de la secci\u00f3n 4 del Manual.\n\n       La mayor\u00eda de las opciones de nivel-conector utilizan un par\u00e1metro int para valopc.  Para setsockopt,  el\n       par\u00e1metro  debe  ser  distinto  de  cero  para permitir una opci\u00f3n booleana, o cero si la opci\u00f3n va a ser\n       deshabilitada.\n\n       Para una descripci\u00f3n de las opciones disponibles para conectores vea socket(7) y las  p\u00e1ginas  de  manual\n       del protocolo apropiado.\n\nVALOR DEVUELTO\n       Se devuelve cero en caso de \u00e9xito. En caso de error se devuelve -1 y errno toma un valor apropiado.\n\n", "ERRORES": "       EBADF  El argumento s no es un descriptor v\u00e1lido.\n\n       ENOTSOCK\n              El argumento s es un fichero, no un conector.\n\n       ENOPROTOOPT\n              La opci\u00f3n es desconocida al nivel indicado.\n\n       EFAULT La  direcci\u00f3n  apuntada  por  valopc  no  est\u00e1  en  un sitio v\u00e1lido del espacio de direcciones del\n              proceso. Para getsockopt, este error puede tambi\u00e9n ser devuelto si lonopc  no  est\u00e1  en  un  sitio\n              v\u00e1lido del espacio de direcciones del proceso.\n\nCONFORME A\n       SVr4,  4.4BSD  (estas  primitivas  aparecieron por primera vez en 4.2BSD).  SVr4 documenta los c\u00f3digos de\n       error adicionales ENOMEM y ENOSR, pero no documenta las opciones SO_SNDLOWAT, SO_RCVLOWAT, SO_SNDTIMEO ni\n       SO_RCVTIMEO\n\n", "NOTA": "       El  quinto argumento de getsockopt y setsockopt es en realidad un entero [*] (y esto es lo que tienen BSD\n       4.*, libc4 y libc5).  Cierta confusi\u00f3n en POSIX dio como resultado  el  actual  socklen_t.   El  est\u00e1ndar\n       propuesto  todav\u00eda no ha sido adoptado pero glibc2 ya lo sigue y tambi\u00e9n tiene socklen_t [*]. Vea tambi\u00e9n\n       accept(2).\n\n", "FALLOS": "       Algunas de las opciones de conector deber\u00edan ser manejadas a niveles m\u00e1s bajos del sistema.\n\nV\u00c9ASE TAMBI\u00c9N\n       ioctl(2), socket(2), getprotoent(3), protocols(5), socket(7), unix(7), tcp(7)\n\nP\u00e1gina man de Linux                               24 mayo 1999                                     GETSOCKOPT(2)\n"},{"NOMBRE": "       gettimeofday, settimeofday - pone u obtiene la hora\n\n", "SINOPSIS": "       #include <sys/time.h>\n\n       int gettimeofday(struct timeval *tv, struct timezone *tz);\n       int settimeofday(const struct timeval *tv , const struct timezone *tz);\n\n", "DESCRIPCION": "       Las funciones gettimeofday y settimeofday pueden obtener y poner tanto la hora como una zona horaria.  El\n       argumento tv es una estructura timeval, tal como se especifica en /usr/include/sys/time.h:\n\n       struct timeval {\n               long    tv_sec;         /* segundos */\n               long    tv_usec;        /* microsegundos */\n       };\n\n       y da el n\u00famer de segundos y microsegundos desde la  \u00c9poca  (v\u00e9ase  time(2)).   El  argumento  tz  es  una\n       estructura timezone :\n\n       struct timezone {\n               int   tz_minuteswest; /* minutos al O de Greenwich */\n               int   tz_dsttime;     /* tipo de correci\u00f3n horaria invierno/verano */\n       };\n\n       El  uso  de la estructura timezone es obsoleto; el campo tz_dsttime nunca ha sido utilizado en Linux - no\n       lo ha sido y nunca ser\u00e1 soportado por libc o glibc. Todas y cada una de las ocurrencias de este campo  en\n       el  fuente del n\u00facleo (distintas de la declaraci\u00f3n) son un fallo. Por tanto, lo siguiente es puramente de\n       inter\u00e9s hist\u00f3rico.\n\n       El campo tz_dsttime contiene una constante simb\u00f3lica (los valores se dan m\u00e1s abajo)  que  indica  en  qu\u00e9\n       parte  del  a\u00f1o  la `correci\u00f3n horaria invierno/verano' (Daylight Saving Time, DST, tambi\u00e9n conocida como\n       `horario de ahorro energ\u00e9tico') est\u00e1 en vigor.  (Nota: su valor es constante a lo  largo  del  a\u00f1o  -  no\n       indica  si  DST  est\u00e1 o no en vigor, s\u00f3lo selecciona un algoritmo).  Los algoritmos de correcci\u00f3n horaria\n       invierno/verano se definen como sigue:\n\n        DST_NONE       /* no hay */\n        DST_USA        /* estilo EE.UU. */\n        DST_AUST       /* estilo australiano */\n        DST_WET        /* como en Europa Occidental */\n        DST_MET        /* como en Europa Central */\n        DST_EET        /* como en Europa del Este */\n        DST_CAN        /* Canad\u00e1 */\n        DST_GB         /* Gran Breta\u00f1a e Irlanda */\n        DST_RUM        /* Ruman\u00eda */\n        DST_TUR        /* Turqu\u00eda */\n        DST_AUSTALT    /* est. australiano con cambio en 1986 */\n\n       Naturalmente, result\u00f3 ser que el periodo en el que la correcci\u00f3n horaria invierno/verano est\u00e1 en vigor no\n       se  pod\u00eda  dar  mediante  un  simple  algoritmo,  uno  por  pa\u00eds: de hecho, este periodo se determina por\n       decisiones pol\u00edticas impredecibles. Por tanto, este m\u00e9todo de representaci\u00f3n de las zonas horarias se  ha\n       abandonado. Bajo Linux, en una llamada a settimeofday el campo tz_dsttime debe ser cero.\n\n       Bajo  Linux  hay  algunas  sem\u00e1nticas  de  `Warp  clock'  peculariares  asociadas a la llamada al sistema\n       settimeofday si en la primera llamada de todas (despu\u00e9s del arranque) que tenga un argumento tz no  NULL,\n       el  argumento  tv  es  NULL y el campo tz_minuteswest es no cero. En tal caso, se asume que el reloj CMOS\n       est\u00e1 en el horario local y que tiene que ser incrementado en esta cantidad para obtener  el  horario  del\n       sistema UTC. No cabe duda que usar esta caracter\u00edstica es una mala idea.\n\n       Para operar sobre la estructura timeval se definen las siguientes macros:\n       #define timerisset(tvp)\\\n               ((tvp)->tv_sec || (tvp)->tv_usec)\n       #define timercmp(tvp, uvp, cmp)\\\n               ((tvp)->tv_sec cmp (uvp)->tv_sec ||\\\n               (tvp)->tv_sec == (uvp)->tv_sec &&\\\n               (tvp)->tv_usec cmp (uvp)->tv_usec)\n       #define timerclear(tvp)\\\n               ((tvp)->tv_sec = (tvp)->tv_usec = 0)\n\n       Si tv o tz es nulo, la estructura correspondiente no se ajusta ni se devuelve.\n\n       Solamente el super-usuario puede emplear settimeofday.\n\nVALOR DEVUELTO\n       gettimeofday y settimeofday devuelven 0 en caso de \u00e9xito \u00f3 -1 si ocurre un fallo (en cuyo caso errno toma\n       un valor apropiado).\n\n", "ERRORES": "       EPERM  Alguien que no es el super-usuario ha llamado a settimeofday\n\n       EINVAL La zona horaria (o algo m\u00e1s) es inv\u00e1lida.\n\n       EFAULT Uno de tv o tz apuntaba afuera de su espacio de direcciones accesible.\n\nCONFORME A\n       SVr4, BSD 4.3\n\nV\u00c9ASE TAMBI\u00c9N\n       date(1), adjtimex(2), time(2), ctime(3), ftime(3)\n\nLinux 2.0.32                                    10 diciembre 1997                                GETTIMEOFDAY(2)\n"},{"NOMBRE": "       setuid - establece la identidad del usuario\n\n", "SINOPSIS": "       #include <sys/types.h>\n       #include <unistd.h>\n\n       int setuid(uid_t uid);\n\n", "DESCRIPCION": "       setuid  establece  el UID efectivo del proceso en curso.  Si el UID efectivo de quien llama a esta rutina\n       es root, tambi\u00e9n se establecen los identificadores de usuario real y salvado.\n\n       Bajo Linux, setuid est\u00e1 implementado como la versi\u00f3n POSIX con la caracter\u00edstica  _POSIX_SAVED_IDS.  Esto\n       permite  que  un programa SUID (distinto de root) renuncie a todos sus privilegios de usuario, haga alg\u00fan\n       trabajo no privilegiado, y luego recupere su ID de usuario efectivo original de una manera segura.\n\n       Si el usuario es root o si el programa es SUID a root, deben tomarse precauciones especiales. La  funci\u00f3n\n       setuid  comprueba  el UID efectivo de quien la llama y si es el s\u00faper-usuario, todos los IDs relacionados\n       con el proceso se ponen a uid.  Despu\u00e9s de esto, es imposible para el programa recuperar sus  privilegios\n       de root.\n\n       As\u00ed,  un  programa  SUID  a  root  que desea temporalmente renunciar a sus provilegios de root, asumir la\n       identidad de un usuario no-root y luego recuperar sus privilegios de root no puede emplear setuid.   Esto\n       se puede hacer con la llamada (no POSIX, BSD) seteuid.\n\nVALOR DEVUELTO\n       En  caso  de  \u00e9xito,  se devuelve cero. En caso de error, se devuelve -1, y se pone un valor apropiado en\n       errno.\n\n", "ERRORES": "       EPERM   El usuario no es el s\u00faper-usuario, y uid no concuerda con el ID de usuario real ni  guardado  del\n               proceso invocador.\n\nCONFORME A\n       SVr4, SVID, POSIX.1.  No muy compatible con la llamada de 4.4BSD, que establece todos los IDs de usuario:\n       real, salvado y efectivo. SVr4 documenta una condici\u00f3n de error adicional, EINVAL.\n\nOBSREVACIONES ESPEC\u00cdFICAS DE LINUX\n       Linux posee el concepto de UID de sistema de ficheros, normalmente igual al UID efectivo.  La  llamada  a\n       setuid tambi\u00e9n establece el UID de sistema de ficheros del proceso en curso.  Vea setfsuid(2).\n\n       Si uid es diferente del uid efectivo antiguo, al proceso se le prohibir\u00e1 dejar volcados de memoria.\n\nV\u00c9ASE TAMBI\u00c9N\n       getuid(2), setreuid(2), seteuid(2), setfsuid(2)\n\nLinux 1.1.36                                      16 Junio 1997                                        SETUID(2)\n"},{"NOMBRE": "       setup - pone a punto dispositivos y sistemas de ficheros, monta el sistema de ficheros ra\u00edz\n\n", "SINOPSIS": "       #include <unistd.h>\n\n       _syscall0(int, setup);\n\n       int setup(void);\n\n", "DESCRIPCION": "       setup se llama una vez desde linux/init/main.c.  Llama a funciones de inicio para dispositivos y sistemas\n       de ficheros configurados en el n\u00facleo y luego monta el sistema de ficheros ra\u00edz.\n\n       Ning\u00fan proceso de usuario puede llamar a setup.  Cualquier proceso de usuario,  incluso  un  proceso  con\n       permisos de s\u00faper-usuario, recibir\u00e1 EPERM.\n\nVALOR DEVUELTO\n       setup siempre devuelve -1 para un proceso de usuario.\n\n", "ERRORES": "       EPERM  Siempre, para un proceso de usuario.\n\nCONFORME A\n       Esta  funci\u00f3n  es espec\u00edfica de Linux, y no debe emplearse en programas pretendidamente transportables o,\n       de hecho, en ning\u00fan programa en absoluto.  A partir de la versi\u00f3n 2.1.121 de Linux, esta funci\u00f3n dej\u00f3  de\n       existir.  La secuencia de llamada ha variado: tiene un \u00fanico par\u00e1metro void * BIOS y otras veces un \u00fanico\n       par\u00e1metro int magic.\n\nLinux 1.2.9                                        3 mayo 1996                                          SETUP(2)\n"},{"NOMBRE": "       signal - manejo de se\u00f1ales en ANSI C\n\n", "SINOPSIS": "       #include <signal.h>\n\n       typedef void (*sighandler_t)(int);\n\n       sighandler_t signal(int signum, sighandler_t handler);\n\n", "DESCRIPCION": "       La llamada al sistema signal() instala un nuevo manejador de se\u00f1ales para la se\u00f1al con n\u00famero signum.  El\n       manejador de se\u00f1ales queda establecido a sighandler que puede ser una funci\u00f3n especificada por el usuario\n       o bien SIG_IGN o SIG_DFL.\n\n       Cuando  llega  una  se\u00f1al  con  n\u00famero  signum ocurre lo siguiente.  Si el manejador correspondiente est\u00e1\n       establecido a SIG_IGN, la se\u00f1al es ignorada.  Si el manejador est\u00e1 establecido a SIG_DFL, se  realiza  la\n       acci\u00f3n  por  defecto asociada a la se\u00f1al (vea signal(7)).  Finalmente, si el manejador est\u00e1 establecido a\n       una funci\u00f3n sighandler lo primero que se hace es o bien restablecer el manejador a SIG_DFL o  un  bloqueo\n       de la se\u00f1al que depende de la implementaci\u00f3n, invocando despu\u00e9s a sighandler con el argumento signum.\n\n       Usar una funci\u00f3n manejadora de se\u00f1ales para una se\u00f1al se llama \"atrapar la se\u00f1al\".  Las se\u00f1ales\n\nLinux 2.2                                         28 abril 2000                                        SIGNAL(2)\n"},{"NOMBRE": "       shmop - operaciones con memoria compartida\n\n", "SINOPSIS": "       #include <sys/types.h>\n       #include <sys/shm.h>\n\n       void *shmat(int shmid, const void *shmaddr, int shmflg);\n\n       int shmdt(const void *shmaddr);\n\n", "DESCRIPCION": "       La  funci\u00f3n shmat pega el segmento de memoria compartida identificada por shmid al espacio de direcciones\n       del proceso que llama a la funci\u00f3n.  La direcci\u00f3n del pegado se especifica en shmaddr seg\u00fan  uno  de  los\n       criterios siguientes:\n\n       Si shmaddr es NULL, el sistema escoge una direcci\u00f3n adecuada (sin utilizar) en donde pegar el segmento.\n\n       Si  shmaddr  no  es  NULL  y  SHM_RND  est\u00e1 activado en shmflg, el pegado ocurre en la direcci\u00f3n igual al\n       redondeo por abajo de shmaddr al m\u00faltiplo m\u00e1s cercano de SHMLBA.  De otro  modo,  shmaddr  debe  ser  una\n       direcci\u00f3n alineada de una p\u00e1gina en la cual ocurra el pegado.\n\n       Si  SHM_RDONLY  est\u00e1 activado en shmflg, el segmento se pega para lectura y el proceso debe tener permiso\n       de lectura en el segmento.  De otro modo el segmento se pega  para  lectura  y  escritura  y  debe  tener\n       permisos  de lectura y escritura en el segmento. No existe la noci\u00f3n de un segmento de memoria compartida\n       de escritura exclusiva.\n\n       La  bandera  (espec\u00edfica  de  Linux)  SHM_REMAP  puede  ser  activada  en  shmflg  para  indicar  que  la\n       correspondencia  del  segmento  deber\u00eda  reemplazar  cualquier  correspondencia existente en el rango que\n       comienza en shmaddr y continua hasta el tama\u00f1o del segmento.  (Normalmente se producir\u00eda un error  EINVAL\n       si  ya  existiera  una  correspondencia en este rango de direcciones.)  En este caso, shmaddr no debe ser\n       NULL.  El valor de brk del proceso que llama a la funci\u00f3n no se altera por el  pegado.   El  segmento  se\n       despegar\u00e1  autom\u00e1ticamente  cuendo  el  proceso  se  acabe.   El mismo segmento puede ser pegaado como de\n       lectura y de lectura-escritura, y m\u00e1s de una vez, en el espacio de direcciones del proceso.\n\n       Tras una llamada exitosa a shmat el sistema actualiza los miembros de la estructura shmid_ds asociada  al\n       segmento de memoria compartida como sigue:\n\n              shm_atime toma el valor de la hora actual.\n\n              shm_lpid toma el valor del PID del proceso llamador.\n\n              shm_nattch se incrementa en uno.\n\n       Observe  que  el  pegado  tiene \u00e9xito tambi\u00e9n si el segmento de memoria compartida se marca como para ser\n       borrado.\n\n       La funci\u00f3n shmdt despega el segmento de memoria compartida localizado en la  direcci\u00f3n  especificada  por\n       shmaddr  del  espacio  de  direcciones  del  proceso  invocador.   El segmento a ser despegado debe estar\n       actualmente pegado con shmaddr igual al valor devuelto por su llamada de pegado shmat.\n\n       Tras una llamada exitosa a shmdt el sistema actualiza los miembros de la estructura shmid_ds asociada  al\n       segmento de memoria compartida como sigue:\n\n              shm_dtime toma el valor de la hora actual.\n\n              shm_lpid toma el valor del PID del proceso llamador.\n\n              shm_nattch  se  decrementa  en  uno.  Si llega a 0 y el segmento est\u00e1 marcado para ser borrado, el\n              segmento se borra.\n\n       La regi\u00f3n ocupada en el espacio de usuario del proceso llamador es desasociada.\n\nLLAMADAS AL SISTEMA\n       fork() Despu\u00e9s de un fork() el hijo hereda los segmentos de memoria compartidos pegados.\n\n       exec() Tras un exec() todos los segmentos de memoria compartida pegados son despegados del proceso.\n\n       exit() Tras exit() todos los segmentos de memoria compartida pegados son despegados del proceso.\n\nVALOR DEVUELTO\n       En caso de fallo ambas funciones devuelven -1 con errno indicando el  error.   En  caso  de  \u00e9xito  shmat\n       devuelve la direcci\u00f3n del segmento de memoria compartido pegado, y shmdt devuelve 0.\n\n", "ERRORES": "       Cuando shmat falla errno tiene uno de entre los siguientes valores:\n\n       EACCES     El proceso llamador no tiene permisos de acceso para el tipo de pegado pedido.\n\n       EINVAL     Valor  de  shmid  inv\u00e1lido,  no  alineado  (i.e.,  sin  alineamiento de p\u00e1gina y SHM_RND no se\n                  especific\u00f3), o valor de shmaddr inv\u00e1lido, o pegado fallido en brk, o se especific\u00f3 SHM_REMAP y\n                  shmaddr era NULL.\n\n       ENOMEM     No se pudo reservar memoria para el descriptor o para las tablas de p\u00e1gina.\n\n       La  funci\u00f3n  shmdt  puede fallar s\u00f3lo si no hay segmento de memoria compartida pegada en shmaddr, en cuyo\n       caso al regresar errno tendr\u00e1 el valor EINVAL.\n\n", "OBSERVACIONES": "       Usar shmat con shmaddr igual a NULL es la manera portable y preferida de pegar  un  segmento  de  memoria\n       compartida.   Sea  consciente  de  que  el segmento de memoria compartida pegado de esta manera puede ser\n       pegado en diferentes direcciones en diferentes procesos.  Por consiguiente, cualquier  puntero  mantenido\n       dentro  de  la  memoria  compartida debe ser hecho relativo (habitualmente a la direcci\u00f3n de comienzo del\n       segmento), en lugar de absoluto.\n\n       El siguiente par\u00e1metro del sistema afecta a shmat:\n\n       SHMLBA     Direcci\u00f3n  del  l\u00edmite  inferior  del  segmento.  Debe  estar  alineado  a  p\u00e1gina.   Para  la\n                  implementaci\u00f3n actual el valor de SHMBLA es PAGE_SIZE.\n\n       La  implementaci\u00f3n no tiene un l\u00edmite intr\u00ednseco para el n\u00famero m\u00e1ximo de segmentos de memoria compartida\n       por proceso (SHMSEG).\n\nCONFORME A\n       SVr4, SVID.  SVr4 documenta una condici\u00f3n de error adicional EMFILE.  En SVID-v4, el tipo  del  argumento\n       shmaddr  se cambi\u00f3 de char * a const void *, y el tipo del valor devuelto por shmat() de char * a void *.\n       (Linux libc4 y libc5 poseen los prototipos char *.  glibc2 posee void *.)\n\nV\u00c9ASE TAMBI\u00c9N\n       brk(2), ipc(5), mmap(2), shmctl(2), shmget(2)\n\nLinux 2.5                                         5 enero 2002                                          SHMOP(2)\n"},{"NOMBRE": "       shmctl - control de memoria compartida\n\n", "SINOPSIS": "       #include <sys/ipc.h>\n\n       #include <sys/shm.h>\n\n       int shmctl(int shmid, int cmd, struct shmid_ds *buf);\n\n", "DESCRIPCION": "       shmctl()  permite  al  usuario recibir informaci\u00f3n sobre un segmento de memoria compartida, establecer el\n       due\u00f1o, grupo y permisos del segmento, as\u00ed como destruirlo. La informaci\u00f3n sobre el segmento  identificado\n       como shmid se devuelve en una estructura shmid_ds:\n\n           struct shmid_ds {\n               struct ipc_perm shm_perm;  /* permisos de operaci\u00f3n */\n               int shm_segsz;             /* tama\u00f1o del segmento (bytes) */\n               time_t shm_atime;          /* tiempo de la \u00faltima uni\u00f3n */\n               time_t shm_dtime;          /* tiempo de la \u00faltima separaci\u00f3n */\n               time_t shm_ctime;          /* tiempo de la \u00faltima modificaci\u00f3n */\n               unsigned short shm_cpid;   /* pid del creador */\n               unsigned short shm_lpid;   /* pid of \u00faltimo operador */\n               short shm_nattch;          /* n\u00ba. de uniones actuales */\n               ...\n           };\n\n       Los campos resaltados del miembro shm_perm pueden ser modificados:\n\n           struct ipc_perm {\n               key_t  key;\n               ushort uid;   /* euid y egid del propietario */\n               ushort gid;\n               ushort cuid;  /* euid y egid del creador */\n               ushort cgid;\n               ushort mode;  /* 9 bits m\u00e1s bajos de los modos de acceso */\n               ushort seq;   /* n\u00famero de secuencia */\n           };\n\n       Est\u00e1n disponibles los siguientes cmds:\n\n       IPC_STAT    se  usa  para  copiar  la  informaci\u00f3n  sobre el segmento de memoria compartida en la memoria\n                   intermedia buf. El usuario debe tener permiso de lectura del segmento de memoria compartida.\n\n       IPC_SET     se usa para aplicar los cambios que el usuario ha efectuado en los miembros uid, gid, o  mode\n                   del campo shm_perms. S\u00f3lo se usan los 9 bits m\u00e1s bajos de mode.  El miembro shm_ctime tambi\u00e9n\n                   es actualizado. El usuario debe ser el due\u00f1o, creador o el superusuario.\n\n       IPC_RMID    se usa para marcar el segmento como destruido. En realidad, se destruir\u00e1 despu\u00e9s de la \u00faltima\n                   separaci\u00f3n  (es  decir,  cuando  el miembro shm_nattch de la estructura asociada shmid_ds sea\n                   cero). El usuario debe ser el due\u00f1o, creador o el superusuario.\n\n       El usuario debe asegurarse de que el segmento se destruye al final; de lo contrario, las p\u00e1ginas de dicho\n       segmento  que  se  cargaron  en  memoria  al producir un fallo de p\u00e1gina, permanecer\u00e1n en memoria o en el\n       fichero de intercambio.\n\n       Adem\u00e1s, el superusuario puede impedir o permitir que un segmento de memoria compartida pase al fichero de\n       intercambio con las siguientes \u00f3rdenes (s\u00f3lo Linux):\n\n       SHM_LOCK    impide que un segmento de memoria compartida pase al fichero de intercambio.  El usuario debe\n                   cargar en memoria mediante fallos de p\u00e1gina cualquier  p\u00e1gina  que  necesite  estar  presente\n                   despu\u00e9s de que se habilite el bloqueo.\n\n       SHM_UNLOCK  permite sacar del fichero de intercambio al segmento de memoria compartida.\n\n       Las  llamadas  de  control  IPC_INFO,  SHM_STAT  y  SHM_INFO  son  usadas  por  el  programa ipcs(8) para\n       proporcionar informaci\u00f3n sobre los recursos asignados. En el futuro, \u00e9stos pueden ser  modificados  seg\u00fan\n       se necesite o movidos a un sistema de ficheros proc.\n\nVALOR DEVUELTO\n       En caso de \u00e9xito se devuelve 0, en caso de error -1.\n\n", "ERRORES": "       En caso de error, errno tomar\u00e1 uno de los siguientes valores:\n\n       EACCES      se devuelve si se pide IPC_STAT y shm_perm.modes no permite acceso de lectura para shmid.\n\n       EFAULT      el  argumento  cmd tiene el valor IPC_SET o IPC_STAT pero la direcci\u00f3n apuntada por buf no es\n                   accesible.\n\n       EINVAL      se devuelve si shmid no es un identificador v\u00e1lido o cmd no es una orden v\u00e1lida.\n\n       EIDRM       se devuelve si shmid apunta a un identificador borrado.\n\n       EPERM       se devuelve si se intenta IPC_SET o IPC_RMID y  el  identificador  de  usuario  efectivo  del\n                   proceso  invocador  no  es  el creador (seg\u00fan figura en shm_perm.cuid), el propietario (seg\u00fan\n                   figura en shm_perm.uid), o el super-usuario.\n\n       EOVERFLOW   se devuelve si se intenta IPC_STAT, y el valor  gid  o  uid  es  demasiado  grande  para  ser\n                   almacenado en la estructura apuntada por buf.\n\n", "NOTA": "       Algunos  campos de la estructura shmid_ds eran de tipo short bajo Linux 2.2 y se han convertido a long en\n       Linux 2.4. Para aprovecharse de \u00e9sto, deber\u00eda bastar una recompilaci\u00f3n bajo glibc-2.1.91 o alguna versi\u00f3n\n       posterior.  (El n\u00facleo distingue las llamadas antiguas y nuevas por una bandera IPC_64 en cmd.)\n\nCONFORME A\n       SVr4,  SVID.  SVr4 documenta las condiciones de error adicionales EINVAL, ENOENT, ENOSPC, ENOMEM, EEXIST.\n       Ni SVr4 ni SVID documentan una condici\u00f3n de error EIDRM.\n\nV\u00c9ASE TAMBI\u00c9N\n       shmget(2), shmop(2)\n\nLinux 2.4.1                                       5 enero 2002                                         SHMCTL(2)\n"},{"NOMBRE": "       shmop - operaciones con memoria compartida\n\n", "SINOPSIS": "       #include <sys/types.h>\n       #include <sys/shm.h>\n\n       void *shmat(int shmid, const void *shmaddr, int shmflg);\n\n       int shmdt(const void *shmaddr);\n\n", "DESCRIPCION": "       La  funci\u00f3n shmat pega el segmento de memoria compartida identificada por shmid al espacio de direcciones\n       del proceso que llama a la funci\u00f3n.  La direcci\u00f3n del pegado se especifica en shmaddr seg\u00fan  uno  de  los\n       criterios siguientes:\n\n       Si shmaddr es NULL, el sistema escoge una direcci\u00f3n adecuada (sin utilizar) en donde pegar el segmento.\n\n       Si  shmaddr  no  es  NULL  y  SHM_RND  est\u00e1 activado en shmflg, el pegado ocurre en la direcci\u00f3n igual al\n       redondeo por abajo de shmaddr al m\u00faltiplo m\u00e1s cercano de SHMLBA.  De otro  modo,  shmaddr  debe  ser  una\n       direcci\u00f3n alineada de una p\u00e1gina en la cual ocurra el pegado.\n\n       Si  SHM_RDONLY  est\u00e1 activado en shmflg, el segmento se pega para lectura y el proceso debe tener permiso\n       de lectura en el segmento.  De otro modo el segmento se pega  para  lectura  y  escritura  y  debe  tener\n       permisos  de lectura y escritura en el segmento. No existe la noci\u00f3n de un segmento de memoria compartida\n       de escritura exclusiva.\n\n       La  bandera  (espec\u00edfica  de  Linux)  SHM_REMAP  puede  ser  activada  en  shmflg  para  indicar  que  la\n       correspondencia  del  segmento  deber\u00eda  reemplazar  cualquier  correspondencia existente en el rango que\n       comienza en shmaddr y continua hasta el tama\u00f1o del segmento.  (Normalmente se producir\u00eda un error  EINVAL\n       si  ya  existiera  una  correspondencia en este rango de direcciones.)  En este caso, shmaddr no debe ser\n       NULL.  El valor de brk del proceso que llama a la funci\u00f3n no se altera por el  pegado.   El  segmento  se\n       despegar\u00e1  autom\u00e1ticamente  cuendo  el  proceso  se  acabe.   El mismo segmento puede ser pegaado como de\n       lectura y de lectura-escritura, y m\u00e1s de una vez, en el espacio de direcciones del proceso.\n\n       Tras una llamada exitosa a shmat el sistema actualiza los miembros de la estructura shmid_ds asociada  al\n       segmento de memoria compartida como sigue:\n\n              shm_atime toma el valor de la hora actual.\n\n              shm_lpid toma el valor del PID del proceso llamador.\n\n              shm_nattch se incrementa en uno.\n\n       Observe  que  el  pegado  tiene \u00e9xito tambi\u00e9n si el segmento de memoria compartida se marca como para ser\n       borrado.\n\n       La funci\u00f3n shmdt despega el segmento de memoria compartida localizado en la  direcci\u00f3n  especificada  por\n       shmaddr  del  espacio  de  direcciones  del  proceso  invocador.   El segmento a ser despegado debe estar\n       actualmente pegado con shmaddr igual al valor devuelto por su llamada de pegado shmat.\n\n       Tras una llamada exitosa a shmdt el sistema actualiza los miembros de la estructura shmid_ds asociada  al\n       segmento de memoria compartida como sigue:\n\n              shm_dtime toma el valor de la hora actual.\n\n              shm_lpid toma el valor del PID del proceso llamador.\n\n              shm_nattch  se  decrementa  en  uno.  Si llega a 0 y el segmento est\u00e1 marcado para ser borrado, el\n              segmento se borra.\n\n       La regi\u00f3n ocupada en el espacio de usuario del proceso llamador es desasociada.\n\nLLAMADAS AL SISTEMA\n       fork() Despu\u00e9s de un fork() el hijo hereda los segmentos de memoria compartidos pegados.\n\n       exec() Tras un exec() todos los segmentos de memoria compartida pegados son despegados del proceso.\n\n       exit() Tras exit() todos los segmentos de memoria compartida pegados son despegados del proceso.\n\nVALOR DEVUELTO\n       En caso de fallo ambas funciones devuelven -1 con errno indicando el  error.   En  caso  de  \u00e9xito  shmat\n       devuelve la direcci\u00f3n del segmento de memoria compartido pegado, y shmdt devuelve 0.\n\n", "ERRORES": "       Cuando shmat falla errno tiene uno de entre los siguientes valores:\n\n       EACCES     El proceso llamador no tiene permisos de acceso para el tipo de pegado pedido.\n\n       EINVAL     Valor  de  shmid  inv\u00e1lido,  no  alineado  (i.e.,  sin  alineamiento de p\u00e1gina y SHM_RND no se\n                  especific\u00f3), o valor de shmaddr inv\u00e1lido, o pegado fallido en brk, o se especific\u00f3 SHM_REMAP y\n                  shmaddr era NULL.\n\n       ENOMEM     No se pudo reservar memoria para el descriptor o para las tablas de p\u00e1gina.\n\n       La  funci\u00f3n  shmdt  puede fallar s\u00f3lo si no hay segmento de memoria compartida pegada en shmaddr, en cuyo\n       caso al regresar errno tendr\u00e1 el valor EINVAL.\n\n", "OBSERVACIONES": "       Usar shmat con shmaddr igual a NULL es la manera portable y preferida de pegar  un  segmento  de  memoria\n       compartida.   Sea  consciente  de  que  el segmento de memoria compartida pegado de esta manera puede ser\n       pegado en diferentes direcciones en diferentes procesos.  Por consiguiente, cualquier  puntero  mantenido\n       dentro  de  la  memoria  compartida debe ser hecho relativo (habitualmente a la direcci\u00f3n de comienzo del\n       segmento), en lugar de absoluto.\n\n       El siguiente par\u00e1metro del sistema afecta a shmat:\n\n       SHMLBA     Direcci\u00f3n  del  l\u00edmite  inferior  del  segmento.  Debe  estar  alineado  a  p\u00e1gina.   Para  la\n                  implementaci\u00f3n actual el valor de SHMBLA es PAGE_SIZE.\n\n       La  implementaci\u00f3n no tiene un l\u00edmite intr\u00ednseco para el n\u00famero m\u00e1ximo de segmentos de memoria compartida\n       por proceso (SHMSEG).\n\nCONFORME A\n       SVr4, SVID.  SVr4 documenta una condici\u00f3n de error adicional EMFILE.  En SVID-v4, el tipo  del  argumento\n       shmaddr  se cambi\u00f3 de char * a const void *, y el tipo del valor devuelto por shmat() de char * a void *.\n       (Linux libc4 y libc5 poseen los prototipos char *.  glibc2 posee void *.)\n\nV\u00c9ASE TAMBI\u00c9N\n       brk(2), ipc(5), mmap(2), shmctl(2), shmget(2)\n\nLinux 2.5                                         5 enero 2002                                          SHMOP(2)\n"},{"NOMBRE": "       shmget - asigna un segmento de memoria compartida\n\n", "SINOPSIS": "       #include <sys/ipc.h>\n\n       #include <sys/shm.h>\n\n       int shmget(key_t key, int size, int shmflg);\n\n", "DESCRIPCION": "       shmget() devuelve el identificador del segmento de memoria compartida asociado con el valor del argumento\n       key.  Se crea un nuevo segmento de memoria compartida, de tama\u00f1o igual al valor de  PAGE_SIZE  redondeado\n       por  arriba  a  un m\u00faltiplo de size, si key tiene el valor IPC_PRIVATE o key no es IPC_PRIVATE, no existe\n       ning\u00fan segmento de memoria compartida correspondiente a key, y IPC_CREAT est\u00e1  declarado  en  shmflg  (es\n       decir, shmflg&IPC_CREAT es distinto de cero).\n\n       El valor shmflg est\u00e1 compuesto de:\n\n       IPC_CREAT   para  crear  un  nuevo segmento. Si este indicador no se usa, shmget() encontrar\u00e1 el segmento\n                   asociado con key y comprobar\u00e1 que el usuario tenga permiso para acceder al segmento.\n\n       IPC_EXCL    usado con IPC_CREAT para asegurar el fallo si el segmento ya existe.\n\n       mode_flags (9 bits m\u00e1s bajos)\n                   especifican los permisos otorgados al due\u00f1o, grupo y resto del mundo.  Actualmente el sistema\n                   no usa los permisos de ejecuci\u00f3n.\n\n       Si  se  crea  un  nuevo segmento, los permisos de acceso de shmflg son copiados al miembro shm_perm de la\n       estructura shmid_ds que define el segmento.  La estructura shmid_ds tiene el siguiente aspecto:\n\n            struct shmid_ds {\n                 struct    ipc_perm shm_perm;  /* permisos de operaci\u00f3n */\n                 int  shm_segsz;          /* tama\u00f1o del segmento (bytes) */\n                 time_t    shm_atime;          /* tiempo de la \u00faltima uni\u00f3n */\n                 time_t    shm_dtime;          /* tiempo de la \u00faltima separaci\u00f3n */\n                 time_t    shm_ctime;          /* tiempo del \u00faltimo cambio */\n                 unsigned short shm_cpid; /* pid del creador */\n                 unsigned short shm_lpid; /* pid del \u00faltimo operador */\n                 short     shm_nattch;         /* n\u00ba de uniones actuales */\n            };\n\n            struct ipc_perm {\n              key_t  key;\n              ushort uid;   /* euid y egid del due\u00f1o */\n              ushort gid;\n              ushort cuid;  /* euid y egid del creador */\n              ushort cgid;\n              ushort mode;  /* 9 bits m\u00e1s bajos de shmflg */\n              ushort seq;   /* n\u00famero de secuencia */\n            };\n\n       Cuando se crea un nuevo segmento de memoria compartida, la llamada al sistema inicializa la estructura de\n       datos shmid_ds como sigue:\n\n              shm_perm.cuid  y  shm_perm.uid  son  asignados  al  identificativo  de usuario efectivo (euid) del\n              proceso creador.\n\n              shm_perm.cgid y shm_perm.gid son asignados al identificativo de grupo efectivo (egid) del  proceso\n              creador.\n\n              Los 9 bits m\u00e1s bajos de shm_perm.mode toman el valor de los 9 bits m\u00e1s bajos de shmflg.\n\n              shm_segsz toma el valor de size.\n\n              shm_lpid, shm_nattch, shm_atime y shm_dtime son puestos a 0.\n\n              shm_ctime toma el valor del tiempo actual.\n\n       Si  el  segmento  de memoria compartida ya existe, se verifican los permisos de acceso, y se comprueba si\n       est\u00e1 marcado para destrucci\u00f3n.\n\nLLAMADAS DEL SISTEMA\n       fork() Despu\u00e9s de un fork() el hijo hereda los segmentos de memoria compartida unidos.\n\n       exec() Despu\u00e9s de un  exec()  todos  los  segmentos  de  memoria  compartida  unidos  son  separados  (no\n              destruidos).\n\n       exit() A trav\u00e9s de exit() todos los segmentos de memoria compartida unidos son separados (no destruidos).\n\nVALOR DEVUELTO\n       En  caso  de  \u00e9xito se devuelve el identificativo v\u00e1lido de segmento shmid.  En caso de error se devuelve\n       -1.\n\n", "ERRORES": "       En caso de error, errno tomar\u00e1 uno de los siguientes valores:\n\n       EINVAL      si se tiene que crear un nuevo segmento y size < SHMMIN o size > SHMMAX, o no  se  tiene  que\n                   crear  un  nuevo  segmento,  existe  un segmento con la clave dada, pero size es mayor que el\n                   tama\u00f1o de ese segmento.\n\n       EEXIST      si se especific\u00f3 IPC_CREAT | IPC_EXCL y el segmento existe.\n\n       ENOSPC      si se han usado todos los identificativos posibles  de  memoria  compartida  (SHMMNI),  o  si\n                   asignar un segmento del tama\u00f1o (size) solicitado causar\u00eda al sistema exceder su propio l\u00edmite\n                   de memoria compartida (SHMALL).\n\n       ENOENT      si no existe segmento para el key dado, y no se especific\u00f3 IPC_CREAT.\n\n       EACCES      si el usuario no tiene permiso para acceder al segmento de memoria compartida.\n\n       ENOMEM      si no pudo asignarse suficiente memoria para el segmento requerido.\n\n", "OBSERVACIONES": "       IPC_PRIVATE no es un indicador, sino un tipo key_t.  Si se usa este valor especial para key,  la  llamada\n       del  sistema  ignora  todos  menos  los  9  bits  m\u00e1s bajos de shmflg y crea un nuevo segmento de memoria\n       compartida (en caso de \u00e9xito).\n\n       Los siguientes son los l\u00edmites de los recursos de un segmento de memoria  compartida  afectados  por  una\n       llamada shmget:\n\n       SHMALL     M\u00e1ximo  n\u00famero  de  p\u00e1ginas de memoria compartida de todo el sistema. Dependiente del criterio\n                  que se use.\n\n       SHMMAX     M\u00e1ximo tama\u00f1o en bytes de un segmento de memoria compartida. Dependiente de la  implementaci\u00f3n\n                  (actualmente 4M).\n\n       SHMMIN     M\u00ednimo  tama\u00f1o en bytes de un segmento de memoria compartida. Dependiente de la implementaci\u00f3n\n                  (actualmente 1 byte, aunque PAGE_SIZE es el tama\u00f1o m\u00ednimo efectivo).\n\n       SHMMNI     M\u00e1ximo n\u00famero de segmentos de memoria compartida  de  todo  el  sistema.   Dependiente  de  la\n                  implementaci\u00f3n (actualmente 4096, era 128 antes de Linux 2.3.99).\n\n       La  implementaci\u00f3n  no  tiene  l\u00edmites  espec\u00edficos  respecto  al  m\u00e1ximo  n\u00famero de segmentos de memoria\n       compartida por proceso (SHMSEG).\n\n", "FALLOS": "       La elecci\u00f3n del nombre IPC_PRIVATE fue quiz\u00e1s desafortunada, IPC_NEW mostrar\u00eda m\u00e1s claramente su funci\u00f3n.\n\nCONFORME A\n       SVr4, SVID.  SVr4 documenta la condici\u00f3n de error  adicional  EEXIST.   Hasta  la  versi\u00f3n  2.3.30  Linux\n       devolv\u00eda EIDRM en una llamada shmget sobre un segmento de memoria compartida planificado para borrado.\n\nV\u00c9ASE TAMBI\u00c9N\n       ftok(3), ipc(5), shmctl(2), shmat(2), shmdt(2)\n\nLinux 0.99.11                                   28 noviembre 1993                                      SHMGET(2)\n"},{"NOMBRE": "       shmop - operaciones con memoria compartida\n\n", "SINOPSIS": "       #include <sys/types.h>\n       #include <sys/shm.h>\n\n       void *shmat(int shmid, const void *shmaddr, int shmflg);\n\n       int shmdt(const void *shmaddr);\n\n", "DESCRIPCION": "       La  funci\u00f3n shmat pega el segmento de memoria compartida identificada por shmid al espacio de direcciones\n       del proceso que llama a la funci\u00f3n.  La direcci\u00f3n del pegado se especifica en shmaddr seg\u00fan  uno  de  los\n       criterios siguientes:\n\n       Si shmaddr es NULL, el sistema escoge una direcci\u00f3n adecuada (sin utilizar) en donde pegar el segmento.\n\n       Si  shmaddr  no  es  NULL  y  SHM_RND  est\u00e1 activado en shmflg, el pegado ocurre en la direcci\u00f3n igual al\n       redondeo por abajo de shmaddr al m\u00faltiplo m\u00e1s cercano de SHMLBA.  De otro  modo,  shmaddr  debe  ser  una\n       direcci\u00f3n alineada de una p\u00e1gina en la cual ocurra el pegado.\n\n       Si  SHM_RDONLY  est\u00e1 activado en shmflg, el segmento se pega para lectura y el proceso debe tener permiso\n       de lectura en el segmento.  De otro modo el segmento se pega  para  lectura  y  escritura  y  debe  tener\n       permisos  de lectura y escritura en el segmento. No existe la noci\u00f3n de un segmento de memoria compartida\n       de escritura exclusiva.\n\n       La  bandera  (espec\u00edfica  de  Linux)  SHM_REMAP  puede  ser  activada  en  shmflg  para  indicar  que  la\n       correspondencia  del  segmento  deber\u00eda  reemplazar  cualquier  correspondencia existente en el rango que\n       comienza en shmaddr y continua hasta el tama\u00f1o del segmento.  (Normalmente se producir\u00eda un error  EINVAL\n       si  ya  existiera  una  correspondencia en este rango de direcciones.)  En este caso, shmaddr no debe ser\n       NULL.  El valor de brk del proceso que llama a la funci\u00f3n no se altera por el  pegado.   El  segmento  se\n       despegar\u00e1  autom\u00e1ticamente  cuendo  el  proceso  se  acabe.   El mismo segmento puede ser pegaado como de\n       lectura y de lectura-escritura, y m\u00e1s de una vez, en el espacio de direcciones del proceso.\n\n       Tras una llamada exitosa a shmat el sistema actualiza los miembros de la estructura shmid_ds asociada  al\n       segmento de memoria compartida como sigue:\n\n              shm_atime toma el valor de la hora actual.\n\n              shm_lpid toma el valor del PID del proceso llamador.\n\n              shm_nattch se incrementa en uno.\n\n       Observe  que  el  pegado  tiene \u00e9xito tambi\u00e9n si el segmento de memoria compartida se marca como para ser\n       borrado.\n\n       La funci\u00f3n shmdt despega el segmento de memoria compartida localizado en la  direcci\u00f3n  especificada  por\n       shmaddr  del  espacio  de  direcciones  del  proceso  invocador.   El segmento a ser despegado debe estar\n       actualmente pegado con shmaddr igual al valor devuelto por su llamada de pegado shmat.\n\n       Tras una llamada exitosa a shmdt el sistema actualiza los miembros de la estructura shmid_ds asociada  al\n       segmento de memoria compartida como sigue:\n\n              shm_dtime toma el valor de la hora actual.\n\n              shm_lpid toma el valor del PID del proceso llamador.\n\n              shm_nattch  se  decrementa  en  uno.  Si llega a 0 y el segmento est\u00e1 marcado para ser borrado, el\n              segmento se borra.\n\n       La regi\u00f3n ocupada en el espacio de usuario del proceso llamador es desasociada.\n\nLLAMADAS AL SISTEMA\n       fork() Despu\u00e9s de un fork() el hijo hereda los segmentos de memoria compartidos pegados.\n\n       exec() Tras un exec() todos los segmentos de memoria compartida pegados son despegados del proceso.\n\n       exit() Tras exit() todos los segmentos de memoria compartida pegados son despegados del proceso.\n\nVALOR DEVUELTO\n       En caso de fallo ambas funciones devuelven -1 con errno indicando el  error.   En  caso  de  \u00e9xito  shmat\n       devuelve la direcci\u00f3n del segmento de memoria compartido pegado, y shmdt devuelve 0.\n\n", "ERRORES": "       Cuando shmat falla errno tiene uno de entre los siguientes valores:\n\n       EACCES     El proceso llamador no tiene permisos de acceso para el tipo de pegado pedido.\n\n       EINVAL     Valor  de  shmid  inv\u00e1lido,  no  alineado  (i.e.,  sin  alineamiento de p\u00e1gina y SHM_RND no se\n                  especific\u00f3), o valor de shmaddr inv\u00e1lido, o pegado fallido en brk, o se especific\u00f3 SHM_REMAP y\n                  shmaddr era NULL.\n\n       ENOMEM     No se pudo reservar memoria para el descriptor o para las tablas de p\u00e1gina.\n\n       La  funci\u00f3n  shmdt  puede fallar s\u00f3lo si no hay segmento de memoria compartida pegada en shmaddr, en cuyo\n       caso al regresar errno tendr\u00e1 el valor EINVAL.\n\n", "OBSERVACIONES": "       Usar shmat con shmaddr igual a NULL es la manera portable y preferida de pegar  un  segmento  de  memoria\n       compartida.   Sea  consciente  de  que  el segmento de memoria compartida pegado de esta manera puede ser\n       pegado en diferentes direcciones en diferentes procesos.  Por consiguiente, cualquier  puntero  mantenido\n       dentro  de  la  memoria  compartida debe ser hecho relativo (habitualmente a la direcci\u00f3n de comienzo del\n       segmento), en lugar de absoluto.\n\n       El siguiente par\u00e1metro del sistema afecta a shmat:\n\n       SHMLBA     Direcci\u00f3n  del  l\u00edmite  inferior  del  segmento.  Debe  estar  alineado  a  p\u00e1gina.   Para  la\n                  implementaci\u00f3n actual el valor de SHMBLA es PAGE_SIZE.\n\n       La  implementaci\u00f3n no tiene un l\u00edmite intr\u00ednseco para el n\u00famero m\u00e1ximo de segmentos de memoria compartida\n       por proceso (SHMSEG).\n\nCONFORME A\n       SVr4, SVID.  SVr4 documenta una condici\u00f3n de error adicional EMFILE.  En SVID-v4, el tipo  del  argumento\n       shmaddr  se cambi\u00f3 de char * a const void *, y el tipo del valor devuelto por shmat() de char * a void *.\n       (Linux libc4 y libc5 poseen los prototipos char *.  glibc2 posee void *.)\n\nV\u00c9ASE TAMBI\u00c9N\n       brk(2), ipc(5), mmap(2), shmctl(2), shmget(2)\n\nLinux 2.5                                         5 enero 2002                                          SHMOP(2)\n"},{"NOMBRE": "       shutdown - cierra el sistema.\n\n", "SINOPSIS": "       /sbin/shutdown [-t sec] [-rkhncfF] time [warning-message]\n\n", "DESCRIPCION": "       shutdown  cierra  el  sistema  de  modo  seguro.  Todos los usuarios conectados son notificados de que el\n       sistema se est\u00e1 cerrando, y login(1) es bloqueado. Es posible cerrar al sistema inmediatamente o tras una\n       pausa  especificada.  Todos  los procesos son notificados de que el sistema se est\u00e1 cerrando mediante una\n       se\u00f1al SIGTERM. Esto da a los programas como vi(1) tiempo para guardar el archivo editado, correo  y  news\n       realizan  cambios  para  poder  salir  limpiamente,  etc.  shutdown hace su trabajo enviando una se\u00f1al al\n       proceso init, pregunt\u00e1ndole para cambiar de nivel.  Runlevel 0 es  utilizado  para  detener  el  sistema,\n       runlevel  6  es  usado para reiniciar el sistema y runlevel 1 es usado para poner el sistema en un estado\n       donde las tareas administrativas pueden ser ejecutadas; esto es por defecto si los  flags  -h  o  -r  son\n       puestos  en  shutdown.  Para  ver  que  acciones  son  realizadas en parada o rearranque vea las entradas\n       apropiadas para estos niveles en el fichero /etc/inittab.\n\n", "OPCIONES": "       -t seg Indica a init esperar seg segundos entre el env\u00edo de las se\u00f1ales de atenci\u00f3n y eliminaci\u00f3n,  antes\n              de cambiar a otro nivel de ejecuci\u00f3n.\n\n       -k     No realiza ninguna ca\u00edda; solo env\u00eda el mensaje de atenci\u00f3n a todo el mundo.\n\n       -r     Reinicia despu\u00e9s de cerrarlo.\n\n       -h     Detiene el sistema despu\u00e9s de cerrarlo.\n\n       -n     [ANULADO]  No  llama a init(8) para hacer la ca\u00edda, la hace por si mismo. El uso de esta opci\u00f3n es\n              desaconsejado, y sus resultados no ser\u00e1n siempre los que esperas.\n\n       -f     Se saltar\u00e1 fsck al reiniciar.\n\n       -F     Fuerza a fsck al reiniciar.\n\n       -c     Cancela una ca\u00edda en ejecuci\u00f3n. Con esta opci\u00f3n no es posible darle el argumento time, pero puedes\n              introducir un mensaje explicativo en la l\u00ednea de comandos que ser\u00e1 enviado a todos los usuarios.\n\n       time   Cuando hacer la ca\u00edda\n\n       warning-message\n              Mensaje enviado a todos los usuarios.\n\n       El  argumento  time  puede tener diferentes formatos. Primero, puede ser un tiempo absoluto en el formato\n       hh:mm, donde hh son las horas (1 o 2 d\u00edgitos) y mm son los minutos (en 2 d\u00edgitos). Segundo,  puede  estar\n       en el formato +m, en el cual m es el n\u00famero de minutos a esperar. La palabra now es sin\u00f3nimo de +0.\n\n       El  flag  -f  provoca  un  `arranque  r\u00e1pido'. Solamente crea un archivo de aviso /fastboot que puede ser\n       probado por el sistema la pr\u00f3xima vez. El archivo de arranque rc puede probar si  el  fichero  existe,  y\n       decide  no  ejecutar  fsck(1)  mientras se cierra el sistema de esta manera.  Despu\u00e9s de esto, el proceso\n       arranque debe borrar /fastboot.\n\n       El flag -F provoca un `obligado fsck'. Solamente crea un  archivo  de  aviso  /forcefsck  que  puede  ser\n       probado  por  el  sistema  la pr\u00f3xima vez. El archivo de arranque rc puede probar si el fichero existe, y\n       decide ejecutar fsck(1) con un flag especial de `obligaci\u00f3n' para la  comprobaci\u00f3n  de  los  ficheros  de\n       sistema desmontados.  Despu\u00e9s de esto, el proceso de arranque debe borrar forcefsck.\n\n       El  flag  -n  provoca  un shutdown sin llamar a init, pero eliminando todos los procesos autoejecutables.\n       shutdown entonces desconectar\u00e1 todas las partes, cuentas e intercambios y desmontara todos  los  archivos\n       de sistema.\n\nCONTROL DE ACCESO\n       shutdown  puede  ser  llamado desde init(8) cuando se pulsen las teclas m\u00e1gicas CTRL-ALT-DEL, creando una\n       entrada apropiada en /etc/inittab. Esto provoca que quien tenga acceso f\u00edsico a la consola  pueda  cerrar\n       el  sistema.  Para  prevenir esto, shutdown puede comprobar si alg\u00fan usuario autorizado esta conectado en\n       alguna consola virtual. Sishutdown es llamado desde init(8), comprobar\u00e1 si el archivo /etc/shutdown.allow\n       existe.  Comparar\u00e1  los  nombres  en  este  fichero con la lista de gente conectada en consolas virtuales\n       (desde /var/run/utmp). Solo si uno de estos usuarios autorizados o el root est\u00e1 conectado, proceder\u00e1.  Si\n       no es as\u00ed imprimir\u00e1 el mensaje\n\n       shutdown: no authorized users logged in\n\n       a  la  consola del sistema (f\u00edsica). El formato de /etc/shutdown.allow es un nombre de usuario por l\u00ednea.\n       Se permiten l\u00edneas vac\u00edas y comentarios (precedidos por #). Actualmente hay un l\u00edmite de 32  usuarios  en\n       este archivo.\n\n", "ARCHIVOS": "       /fastboot\n       /etc/inittab\n       /etc/init.d/halt\n       /etc/init.d/reboot\n       /etc/shutdown.allow\n\n", "ERRORES": "       En  realidad  no  hay  errores,  pero  la mayor\u00eda de usuarios olvidan dar el argumento time y se quedan a\n       cuadros con el mensaje de error que shutdown genera. El argumento time  es  obligatorio;  en  el  90  por\n       ciento de los casos ser\u00e1 la palabra now.\n\n", "AUTOR": "       Miquel van Smoorenburg, miquels@cistron.nl\n\nV\u00c9ASE TAMBI\u00c9N\n       fsck(8), init(1), halt(8), reboot(8)\n\nLinux                                           26 noviembre 1997                                    SHUTDOWN(8)\n"},{"NOMBRE": "       sigaction, sigprocmask, sigpending, sigsuspend - funciones POSIX de manejo de se\u00f1ales\n\n", "SINOPSIS": "       #include <signal.h>\n\n       int sigaction(int signum, const struct sigaction *act, struct sigaction *oldact);\n\n       int sigprocmask(int how, const sigset_t *set, sigset_t *oldset);\n\n       int sigpending(sigset_t *set);\n\n       int sigsuspend(const sigset_t *mask);\n\n", "DESCRIPCION": "       La  llamad  al sistema sigaction se emplea para cambiar la acci\u00f3n tomada por un proceso cuando recibe una\n       determinada se\u00f1al.\n\n       signum especifica la se\u00f1al y puede ser cualquiera v\u00e1lida salvo SIGKILL o SIGSTOP.\n\n       Si act no es nulo, la nueva acci\u00f3n para la se\u00f1al signum se instala como act.  Si oldact no  es  nulo,  la\n       acci\u00f3n anterior se guarda en oldact.\n\n       La estructura sigaction se define como algo parecido a\n\n              struct sigaction {\n                  void (*sa_handler)(int);\n                  void (*sa_sigaction)(int, siginfo_t *, void *);\n                  sigset_t sa_mask;\n                  int sa_flags;\n                  void (*sa_restorer)(void);\n              }\n\n       En algunas arquitecturas se utiliza una union - no asigne valores a sa_handler y sa_sigaction.\n\n       El  elemento  sa_restorer  est\u00e1  obsoleto  y  no  deber\u00eda  utilizarse.  POSIX  no  especifica un elemento\n       sa_restorer.\n\n       sa_handler especifica la acci\u00f3n que se va a asociar con  signum  y  puede  ser  SIG_DFL  para  la  acci\u00f3n\n       predeterminada,  SIG_IGN  para no tener en cuenta la se\u00f1al, o un puntero a una funci\u00f3n manejadora para la\n       se\u00f1al.\n\n       sa_mask da una m\u00e1scara de se\u00f1ales que deber\u00edan bloquearse durante la ejecuci\u00f3n del  manejador  de  se\u00f1al.\n       Adem\u00e1s,  la se\u00f1al que lance el manejador ser\u00e1 bloqueada, a menos que se activen las opciones SA_NODEFER o\n       SA_NOMASK.\n\n       sa_flags especifica un conjunto de opciones que modifican el comportamiento  del  proceso  de  manejo  de\n       se\u00f1al. Se forma por la aplicaci\u00f3n del operador de bits OR a cero o m\u00e1s de las siguientes constantes:\n\n              SA_NOCLDSTOP\n                     Si  signum  es  SIGCHLD, no se reciba notificaci\u00f3n cuando los procesos hijos se paren (esto\n                     es, cuando los procesos hijos reciban una  de  las  se\u00f1ales  SIGSTOP,  SIGTSTP,  SIGTTIN  o\n                     SIGTTOU).\n\n              SA_ONESHOT o SA_RESETHAND\n                     Rest\u00e1urese  la  acci\u00f3n  para  la se\u00f1al al estado predeterminado una vez que el manejador de\n                     se\u00f1al haya sido llamado.\n\n              SA_ONSTACK\n                     Llama al  manejador  de  se\u00f1al  en  una  pila  de  se\u00f1ales  alternativa  proporcionada  por\n                     sigaltstack(2).   Si  esta  pila  alternativa  no est\u00e1 disponible, se utilizar\u00e1 la pila por\n                     defecto.\n\n              SA_RESTART\n                     Proporciona un comportamiento compatible con la sem\u00e1ntica de se\u00f1ales de  BSD  haciendo  re-\n                     ejecutables algunas llamadas al sistema entre se\u00f1ales.\n\n              SA_NOMASK o SA_NODEFER\n                     No se impida que se reciba la se\u00f1al desde su propio manejador.\n\n              SA_SIGINFO\n                     El  manejador  de  se\u00f1al  toma  3  argumentos,  no  uno.  En  este caso, se debe configurar\n                     sa_sigaction en lugar de sa_handler.  (El campo sa_sigaction  fue  a\u00f1adido  en  la  versi\u00f3n\n                     2.1.86 de Linux.)\n\n       El par\u00e1metro siginfo_t para sa_sigaction es una estructura con los siguientes elementos\n\n              siginfo_t {\n                  int      si_signo;  /* N\u00famero de se\u00f1al */\n                  int      si_errno;  /* Un valor errno */\n                  int      si_code;   /* C\u00f3digo de se\u00f1al */\n                  pid_t    si_pid;    /* ID del proceso emisor */\n                  uid_t    si_uid;    /* ID del usuario real del proceso emisor */\n                  int      si_status; /* Valor de salida o se\u00f1al */\n                  clock_t  si_utime;  /* Tiempo de usuario consumido */\n                  clock_t  si_stime;  /* Tiempo de sistema consumido */\n                  sigval_t si_value;  /* Valor de se\u00f1al */\n                  int      si_int;    /* se\u00f1al POSIX.1b */\n                  void *   si_ptr;    /* se\u00f1al POSIX.1b */\n                  void *   si_addr;   /* Direcci\u00f3n de memoria que ha producido el fallo */\n                  int      si_band;   /* Evento de conjunto */\n                  int      si_fd;     /* Descriptor de fichero */\n              }\n       si_signo, si_errno y si_code est\u00e1n definidos para todas las se\u00f1ales.  El resto de la estructura puede ser\n       una uni\u00f3n, por lo que deber\u00edan leerse solamente los campos que  sean  de  inter\u00e9s  para  la  se\u00f1al  dada.\n       kill(2),  las  se\u00f1ales  POSIX.1b y SIGCHLD rellenan si_pid y si_uid.   SIGCHLD tambi\u00e9n rellena si_status,\n       si_utime y si_stime.  si_int y si_ptr son especificados por el emisor de la se\u00f1al POSIX.1b.\n        SIGILL, SIGFPE, SIGSEGV y SIGBUS rellenan si_addr con la direcci\u00f3n del fallo.  SIGPOLL rellena si_band y\n       si_fd.\n\n       si_code  indica por qu\u00e9 se ha enviado la se\u00f1al. Es un valor, no una m\u00e1scara de bits.  Los valores que son\n       posibles para cualquier se\u00f1al se listan en la siguiente tabla:\n\n       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n       \u2502                  si_code                   \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502Valor      \u2502 Origen de la se\u00f1al             \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502SI_USER    \u2502 kill, sigsend o raise          \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502SI_KERNEL  \u2502 El n\u00facleo                      \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502SI_QUEUE   \u2502 sigqueue                       \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502SI_TIMER   \u2502 el cron\u00f3metro ha vencido       \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502SI_MESGQ   \u2502 ha cambiado el estado de mesq  \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502SI_ASYNCIO \u2502 ha terminado una E/S as\u00edncrona \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502SI_SIGIO   \u2502 SIGIO encolada                 \u2502\n       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n       \u2502                   SIGILL                     \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502ILL_ILLOPC \u2502 c\u00f3digo de operaci\u00f3n ilegal       \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502ILL_ILLOPN \u2502 operando ilegal                  \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502ILL_ILLADR \u2502 modo de direccionamiento ilegal  \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502ILL_ILLTRP \u2502 trampa ilegal                    \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502ILL_PRVOPC \u2502 c\u00f3digo de operaci\u00f3n privilegiada \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502ILL_PRVREG \u2502 registro privilegiado            \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502ILL_COPROC \u2502 error del coprocesador           \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502ILL_BADSTK \u2502 error de la pila interna         \u2502\n       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n       \u2502                         SIGFPE                           \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502FPE_INTDIV \u2502 entero dividido por cero                     \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502FPE_INTOVF \u2502 desbordamiento de entero                     \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502FPE_FLTDIV \u2502 punto flotante dividido por cero             \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502FPE_FLTOVF \u2502 desbordamiento de punto flotante             \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502FPE_FLTUND \u2502 desbordamiento de punto flotante por defecto \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502FPE_FLTRES \u2502 resultado de punto flotante inexacto         \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502FPE_FLTINV \u2502 operaci\u00f3n de punto flotante inv\u00e1lida         \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502FPE_FLTSUB \u2502 subscript fuera de rango                     \u2502\n       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n       \u2502                              SIGSEGV                               \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502SEGV_MAPERR \u2502 direcci\u00f3n no asociada a un objeto                     \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502SEGV_ACCERR \u2502 permisos inv\u00e1lidos para un objeto presente en memoria \u2502\n       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n       \u2502                     SIGBUS                       \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502BUS_ADRALN \u2502 alineamiento de direcci\u00f3n inv\u00e1lido   \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502BUS_ADRERR \u2502 direcci\u00f3n f\u00edsica inexistente         \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502BUS_OBJERR \u2502 error hardware espec\u00edfico del objeto \u2502\n       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n       \u2502                          SIGTRAP                            \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502TRAP_BRKPT \u2502 punto de parada de un proceso                   \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502TRAP_TRACE \u2502 trampa de seguimiento paso a paso de un proceso \u2502\n       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n       \u2502                              SIGCHLD                                \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502CLD_EXITED    \u2502 ha terminado un hijo                                 \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502CLD_KILLED    \u2502 se ha matado a un hijo                               \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502CLD_DUMPED    \u2502 un hijo ha terminado anormalmente                    \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502CLD_TRAPPED   \u2502 un hijo con seguimiento paso a paso ha sido detenido \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502CLD_STOPPED   \u2502 ha parado un hijo                                    \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502CLD_CONTINUED \u2502 un hijo parado ha continuado                         \u2502\n       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n       \u2502                    SIGPOLL                     \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502POLL_IN  \u2502 datos de entrada disponibles         \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502POLL_OUT \u2502 buffers de salida disponibles        \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502POLL_MSG \u2502 mensaje de entrada disponible        \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502POLL_ERR \u2502 error de E/S                         \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502POLL_PRI \u2502 entrada de alta prioridad disponible \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502POLL_HUP \u2502 dispositivo desconectado             \u2502\n       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n       La  llamada  sigprocmask  se  emplea  para  cambiar  la  lista  de  se\u00f1ales  bloqueadas  actualmente.  El\n       comportamiento de la llamada depende del valor de how, como sigue:\n\n              SIG_BLOCK\n                     El conjunto de se\u00f1ales bloqueadas es la uni\u00f3n del conjunto actual y el argumento set.\n\n              SIG_UNBLOCK\n                     Las  se\u00f1ales  en set se quitan del conjunto actual de se\u00f1ales bloqueadas. Es legal intentar\n                     el desbloqueo de una se\u00f1al que no est\u00e1 bloqueada.\n\n              SIG_SETMASK\n                     El conjunto de se\u00f1ales bloqueadas se pone seg\u00fan el argumento set.\n\n       Si oldset no es nulo, el valor anterior de la m\u00e1scara de se\u00f1al se guarda en oldset.\n\n       La llamada sigpending permite el examen de se\u00f1ales pendientes  (las  que  han  sido  producidas  mientras\n       estaban bloqueadas). La m\u00e1scara de se\u00f1al de las se\u00f1ales pendientes se guarda en set.\n\n       La  llamada sigsuspend reemplaza temporalmente la m\u00e1scara de se\u00f1al para el proceso con la dada por mask y\n       luego suspende el proceso hasta que se recibe una se\u00f1al.\n\nVALOR DEVUELTO\n       Las funciones sigaction, sigprocmask y sigpending devuelven 0 en caso de \u00e9xito y -1 en caso de error.  La\n       funci\u00f3n sigsuspend siempre devuelve -1, normalmente acompa\u00f1ado del error EINTR.\n\n", "ERRORES": "       EINVAL Se  ha especificado una se\u00f1al inv\u00e1lida. Esto tambi\u00e9n se genera si se hace un intento de cambiar la\n              acci\u00f3n para SIGKILL o SIGSTOP, que no pueden ser capturadas.\n\n       EFAULT act, oldact, set, oldset u mask apuntan a una zona de  memoria  que  no  forma  parte  v\u00e1lida  del\n              espacio de direcciones del proceso.\n\n       EINTR  La llamada al sistema ha sido interrumpida.\n\n", "OBSERVACIONES": "       No  es  posible  bloquear  SIGKILL  ni SIGSTOP con una llamada a sigprocmask.  Los intentos de hacerlo no\n       ser\u00e1n tenidos en cuenta, silenciosamente.\n\n       De acuerdo con POSIX, el comportamiento de un proceso est\u00e1 indefinido despu\u00e9s de que no haga caso de  una\n       se\u00f1al SIGFPE, SIGILL o SIGSEGV que no haya sido generada por las funciones kill() o raise().  La divisi\u00f3n\n       entera por cero da un  resultado  indefinido.   En  algunas  arquitecturas  generar\u00e1  una  se\u00f1al  SIGFPE.\n       (Tambi\u00e9n,  el  dividir  el  entero m\u00e1s negativo por -1 puede generar una se\u00f1al SIGFPE.)  No hacer caso de\n       esta se\u00f1al puede llevar a un bucle infinito.\n\n       POSIX (B.3.3.1.3) anula el establecimiento de SIG_IGN como acci\u00f3n para SIGCHLD.  Los  comportamientos  de\n       BSD  y  SYSV  difieren,  provocando  el fallo en Linux de aquellos programas BSD que asignan SIG_IGN como\n       acci\u00f3n para SIGCHLD.\n\n       La especificaci\u00f3n POSIX s\u00f3lo define  SA_NOCLDSTOP.   El  empleo  de  otros  valores  en  sa_flags  no  es\n       transportable.\n\n       La opci\u00f3n SA_RESETHAND es compatible con la de SVr4 del mismo nombre.\n\n       La  opci\u00f3n SA_NODEFER es compatible con la de SVr4 del mismo nombre bajo los n\u00facleos 1.3.9 y posteriores.\n       En n\u00facleos m\u00e1s viejos la implementaci\u00f3n de Linux permit\u00eda la recepci\u00f3n de cualquier se\u00f1al, no s\u00f3lo la que\n       est\u00e1bamos instalando (sustituyendo as\u00ed efectivament cualquier valor de sa_mask).\n\n       Los  nombres  SA_RESETHAND  y  SA_NODEFER  para  compatibilidad con SVr4 est\u00e1n presentes solamente en las\n       versiones de la biblioteca 3.0.9 y mayores.\n\n       La opci\u00f3n SA_SIGINFO viene especificada por POSIX.1b. El soporte para ella se a\u00f1adi\u00f3 en la versi\u00f3n 2.2 de\n       Linux.\n\n       sigaction puede llamarse con un segundo argumento nulo para saber el manejador de se\u00f1al en curso. Tambi\u00e9n\n       puede emplearse para comprobar si una se\u00f1al dada es v\u00e1lida para la m\u00e1quina donde se est\u00e1, llam\u00e1ndola  con\n       el segundo y el tercer argumento nulos.\n\n       Vea sigsetops(3) para detalles sobre manipulaci\u00f3n de conjuntos de se\u00f1ales.\n\nCONFORME A\n       POSIX, SVr4.  SVr4 no documenta la condici\u00f3n EINTR.\n\nSIN DOCUMENTAR\n       Antes  de  la  introducci\u00f3n  de  SA_SIGINFO  tambi\u00e9n era posible obtener informaci\u00f3n adicional, usando un\n       manejador sa_handler con el segundo argumento del tipo struct sigcontext.  Vea  las  fuentes  del  n\u00facleo\n       relevantes para m\u00e1s detalles.  Este uso est\u00e1 obsoleto en la actualidad.\n\nV\u00c9ASE TAMBI\u00c9N\n       kill(1),  kill(2),  killpg(2), pause(2), sigaltstack(2), raise(3), siginterrupt(3), signal(2), signal(7),\n       sigsetops(3), sigvec(2)\n\nLinux 2.4                                       29 diciembre 2001                                   SIGACTION(2)\n"},{"NOMBRE": "       sigaltstack - definir y/u obtener el contexto de la pila de se\u00f1ales\n\n", "SINOPSIS": "       #include <signal.h>\n\n       int sigaltstack(const stack_t *ss, stack_t *oss);\n\n", "DESCRIPCION": "       sigaltstack permite a un proceso definir una nueva pila alternativa de se\u00f1ales y/o recuperar el estado de\n       una pila alternativa de se\u00f1ales existente. Una pila alternativa de se\u00f1ales se usa durante la ejecuci\u00f3n de\n       un manejador de se\u00f1ales si el establecimiento de ese manejador (ver sigaction(2)) lo solicita.\n\n       La secuencia normal de eventos para usar una pila alternativa de se\u00f1ales es la siguiente:\n\n       1.     Reservar un \u00e1rea de memoria para ser utilizada por la pila alternativa de se\u00f1ales.\n\n       2.     Utilizar  sigaltstack  para  informar  al  sistema  de  la existencia y la localizaci\u00f3n de la pila\n              alternativa de se\u00f1ales.\n\n       3.     Cuando se establece un manejador de se\u00f1ales usando  sigaction,  informar  al  sistema  de  que  el\n              manejador  de  se\u00f1ales  deber\u00eda  ser ejecutado en la pila alternativa de se\u00f1ales, especificando la\n              bandera SA_ONSTACK.\n\n       El argumento ss se usa para especificar una nueva pila alternativa de se\u00f1ales, mientras que el  argumento\n       oss  se  usa para recuperar informaci\u00f3n sobre la pila alternativa de se\u00f1ales establecida actualmente.  Si\n       estamos interesados en realizar s\u00f3lo una de estas tareas, entonces el otro argumento se puede especificar\n       como NULL.  Cada uno de estos argumentos es una estructura del tipo siguiente:\n\n              typedef struct {\n                  void  *ss_sp;     /* Direcci\u00f3n de la base de la pila */\n                  int    ss_flags;  /* Banderas */\n                  size_t ss_size;   /* Numero de bytes en la pila */\n              } stack_t;\n\n       Para  establecer  una  nueva  pila  alternativa  de se\u00f1ales, ss.ss_flags se inicializa a cero, ss.ss_sp y\n       ss.ss_size especifican la direcci\u00f3n de comienzo y el tama\u00f1o de la pila.  La constante SIGSTKSZ se  define\n       para  ser  suficientemente grande para cubrir el requerimiento de tama\u00f1o habitual en una pila alternativa\n       de se\u00f1ales, y la constante MINSIGSTKSZ define el tama\u00f1o m\u00ednimo requerido para ejecutar  un  manejador  de\n       se\u00f1ales.\n\n       Para deshabilitar una pila existente, se especifica ss.ss_flags como SS_DISABLE. En este caso, los campos\n       restantes en ss se ignoran.\n\n       Si oss no es NULL, entonces se utiliza para devolver informaci\u00f3n sobre la pila alternativa de se\u00f1ales que\n       estaba  en  uso  antes  de  la  llamada  a  sigaltstack.   Los campos oss.ss_sp y oss.ss_sizedevuelven la\n       direcci\u00f3n de comienzo y el tama\u00f1o de  esa  pila.   El  oss.ss_flags  puede  devolver  cualquiera  de  los\n       siguientes valores:\n\n       SS_ONSTACK\n              El  proceso  est\u00e1  actualmente  ejecut\u00e1ndose  en la pila alternativa de se\u00f1ales. (N\u00f3tese que no es\n              posible cambiar la pila alternativa de se\u00f1ales si el proceso est\u00e1 ejecut\u00e1ndose en ella.)\n\n       SS_DISABLE\n              La pila alternativa de se\u00f1ales est\u00e1 actualmente deshabilitada.\n\nVALOR DEVUELTO\n       sigaltstack devuelve 0 en caso de \u00e9xito, o -1 en caso de error, con errno definido para indicar el error.\n\n", "ERRORES": "       ENOMEM El tama\u00f1o especificado para la nueva pila  alternativa  de  se\u00f1ales  (ss.ss_size)  era  menor  que\n              MINSTKSZ.\n\n       EFAULT Ya sea ss o oss no es NULL y apunta a un \u00e1rea fuera del espacio de direcciones del proceso.\n\n       EPERM  Hubo un intento de cambiar la pila alternativa de se\u00f1ales mientras estaba activa (p.e.: el proceso\n              ya estaba ejecut\u00e1ndose en la pila alternativa de se\u00f1ales actual).\n\n       EINVAL ss no es NULL y el campo ss_flags contiene un valor distinto de cero y de SS_DISABLE.\n\n", "OBSERVACIONES": "       El c\u00f3digo siguiente muestra el uso de sigaltstack:\n\n              stack_t ss;\n\n              ss.ss_sp = malloc(SIGSTKSZ);\n              if (ss.ss_sp == NULL)\n                  /* Manejar error */;\n              ss.ss_size = SIGSTKSZ;\n              ss.ss_flags = 0;\n              if (sigaltstack(&ss, NULL) == -1)\n                  /* Manejar error */;\n\n       Establecer una pila alternativa de se\u00f1ales es \u00fatil si un proceso espera agotar su  pila  est\u00e1ndar.   Esto\n       puede  ocurrir,  por  ejemplo,  porque  la pila crezca tanto que se encuentre con el mont\u00edculo, que crece\n       hacia arriba, o que alcance un l\u00edmite establecido por una llamada a setrlimit(RLIMIT_STACK,  &rlim).   Si\n       la  pila  est\u00e1ndar  se  agota, el n\u00facleo env\u00eda al proceso una se\u00f1al SIGSEGV.  En estas circunstancias, la\n       \u00fanica manera de capturar esta se\u00f1al es en una pila alternativa de se\u00f1ales.\n\n       En la mayor\u00eda de las arquitecturas aceptadas  por  Linux,  las  pilas  crecen  hacia  abajo.  sigaltstack\n       reconoce autom\u00e1ticamente la direcci\u00f3n de crecimiento.\n\n       Las  funciones  llamadas  desde un manejador de se\u00f1ales que se ejecute en una pila alternativa de se\u00f1ales\n       tambi\u00e9n usar\u00e1n la pila alternativa de se\u00f1ales.  (Esto tambi\u00e9n es  aplicable  a  cualesquiera  manejadores\n       invocados  para  otras se\u00f1ales mientras el proceso se est\u00e1 ejecutando en la pila alternativa de se\u00f1ales.)\n       De manera diferente a la pila est\u00e1ndar, el sistema no extiende autom\u00e1ticamente  la  pila  alternativa  de\n       se\u00f1ales.    Exceder   el  tama\u00f1o  reservado  de  la  pila  alternativa  de  se\u00f1ales  conlleva  resultados\n       impredecibles.\n\n       Una llamada exitosa a execve elimina cualquier pila alternativa de se\u00f1ales existente.\n\n       sigaltstack sustituye la antigua llamada sigstack.  Para la compatibilidad  hacia  atr\u00e1s,  glibc  tambi\u00e9n\n       ofrece sigstack.  Todas las aplicaciones nuevas deber\u00edan ser usadas usando sigaltstack.\n\n", "HISTORIA": "       BSD  4.2  ten\u00eda una llamada al sistema sigstack(). Usaba una estructura ligeramente diferente, y como una\n       desventaja mayor, el invocador deb\u00eda saber la direcci\u00f3n de crecimiento de la pila.\n\nCONFORME A\n       SUSv2, SVr4, POSIX 1003.1-2001.\n\nV\u00c9ASE TAMBI\u00c9N\n       sigaction(2), setrlimit(2), execve(2), sigsetjmp(3), siglongjmp(3), signal(7)\n\n       Traducci\u00f3n realizada por Jorge Rodriguez Garcia (A.K.A. Tiriel) <tiriel@users.sourceforge.net>\n\nLinux 2.4                                      27 septiembre 2001                                 SIGALTSTACK(2)\n"},{"NOMBRE": "       sigblock, siggetmask, sigsetmask, sigmask - manipulan la m\u00e1scara de se\u00f1ales\n\n", "SINOPSIS": "       #include <signal.h>\n\n       int sigblock(int mascara);\n\n       int siggetmask(void);\n\n       int sigsetmask(int mascara);\n\n       int sigmask(int signum);\n\n", "DESCRIPCION": "       Esta interfaz est\u00e1 anticuada desde que existe sigprocmask(2).\n\n       La  llamada  al  sistema  sigblock  a\u00f1ade las se\u00f1ales especificadas en mascara al conjunto de se\u00f1ales que\n       actualmente est\u00e1n bloqueadas para su env\u00edo.\n\n       La llamada al sistema sigsetmask reemplaza totalmente el conjunto de  se\u00f1ales  bloqueadas  con  un  nuevo\n       conjunto especificado en mascara.  Las se\u00f1ales est\u00e1n bloqueadas si el bit correspondiente en mascara est\u00e1\n       a 1.\n\n       El conjunto actual de se\u00f1ales bloqueadas puede obtenerse empleando siggetmask.\n\n       La macro sigmask sirve para construir la m\u00e1scara para una se\u00f1al dada por su n\u00famero o macro signum.\n\nVALOR DEVUELTO\n       siggetmask devuelve el conjunto actual de se\u00f1ales en la m\u00e1scara.\n\n       sigsetmask y sigblock devuelven el conjunto anterior de se\u00f1ales en la m\u00e1scara.\n\n", "OBSERVACIONES": "       Los prototipos de estas funciones s\u00f3lo est\u00e1n disponibles si se define _BSD_SOURCE antes de  la  inclusi\u00f3n\n       de ning\u00fan fichero de cabecera del sistema.\n\n       No es posible bloquear SIGKILL o SIGSTOP - esta restricci\u00f3n viene impuesta calladamente por el sistema.\n\nCONFORME A\n       4.4BSD.  Estas  funciones  aparecieron  en  BSD  4.3 y no se recomienda su empleo, pues seguramente ser\u00e1n\n       retiradas en el futuro.  Para programas nuevos utilice las funciones de manejo de se\u00f1ales de POSIX.\n\nV\u00c9ASE TAMBI\u00c9N\n       kill(2), sigprocmask(2), signal(7)\n\nLinux 1.3                                        31 agosto 1995                                      SIGBLOCK(2)\n"},{"NOMBRE": "       sigblock, siggetmask, sigsetmask, sigmask - manipulan la m\u00e1scara de se\u00f1ales\n\n", "SINOPSIS": "       #include <signal.h>\n\n       int sigblock(int mascara);\n\n       int siggetmask(void);\n\n       int sigsetmask(int mascara);\n\n       int sigmask(int signum);\n\n", "DESCRIPCION": "       Esta interfaz est\u00e1 anticuada desde que existe sigprocmask(2).\n\n       La  llamada  al  sistema  sigblock  a\u00f1ade las se\u00f1ales especificadas en mascara al conjunto de se\u00f1ales que\n       actualmente est\u00e1n bloqueadas para su env\u00edo.\n\n       La llamada al sistema sigsetmask reemplaza totalmente el conjunto de  se\u00f1ales  bloqueadas  con  un  nuevo\n       conjunto especificado en mascara.  Las se\u00f1ales est\u00e1n bloqueadas si el bit correspondiente en mascara est\u00e1\n       a 1.\n\n       El conjunto actual de se\u00f1ales bloqueadas puede obtenerse empleando siggetmask.\n\n       La macro sigmask sirve para construir la m\u00e1scara para una se\u00f1al dada por su n\u00famero o macro signum.\n\nVALOR DEVUELTO\n       siggetmask devuelve el conjunto actual de se\u00f1ales en la m\u00e1scara.\n\n       sigsetmask y sigblock devuelven el conjunto anterior de se\u00f1ales en la m\u00e1scara.\n\n", "OBSERVACIONES": "       Los prototipos de estas funciones s\u00f3lo est\u00e1n disponibles si se define _BSD_SOURCE antes de  la  inclusi\u00f3n\n       de ning\u00fan fichero de cabecera del sistema.\n\n       No es posible bloquear SIGKILL o SIGSTOP - esta restricci\u00f3n viene impuesta calladamente por el sistema.\n\nCONFORME A\n       4.4BSD.  Estas  funciones  aparecieron  en  BSD  4.3 y no se recomienda su empleo, pues seguramente ser\u00e1n\n       retiradas en el futuro.  Para programas nuevos utilice las funciones de manejo de se\u00f1ales de POSIX.\n\nV\u00c9ASE TAMBI\u00c9N\n       kill(2), sigprocmask(2), signal(7)\n\nLinux 1.3                                        31 agosto 1995                                      SIGBLOCK(2)\n"},{"NOMBRE": "       sigblock, siggetmask, sigsetmask, sigmask - manipulan la m\u00e1scara de se\u00f1ales\n\n", "SINOPSIS": "       #include <signal.h>\n\n       int sigblock(int mascara);\n\n       int siggetmask(void);\n\n       int sigsetmask(int mascara);\n\n       int sigmask(int signum);\n\n", "DESCRIPCION": "       Esta interfaz est\u00e1 anticuada desde que existe sigprocmask(2).\n\n       La  llamada  al  sistema  sigblock  a\u00f1ade las se\u00f1ales especificadas en mascara al conjunto de se\u00f1ales que\n       actualmente est\u00e1n bloqueadas para su env\u00edo.\n\n       La llamada al sistema sigsetmask reemplaza totalmente el conjunto de  se\u00f1ales  bloqueadas  con  un  nuevo\n       conjunto especificado en mascara.  Las se\u00f1ales est\u00e1n bloqueadas si el bit correspondiente en mascara est\u00e1\n       a 1.\n\n       El conjunto actual de se\u00f1ales bloqueadas puede obtenerse empleando siggetmask.\n\n       La macro sigmask sirve para construir la m\u00e1scara para una se\u00f1al dada por su n\u00famero o macro signum.\n\nVALOR DEVUELTO\n       siggetmask devuelve el conjunto actual de se\u00f1ales en la m\u00e1scara.\n\n       sigsetmask y sigblock devuelven el conjunto anterior de se\u00f1ales en la m\u00e1scara.\n\n", "OBSERVACIONES": "       Los prototipos de estas funciones s\u00f3lo est\u00e1n disponibles si se define _BSD_SOURCE antes de  la  inclusi\u00f3n\n       de ning\u00fan fichero de cabecera del sistema.\n\n       No es posible bloquear SIGKILL o SIGSTOP - esta restricci\u00f3n viene impuesta calladamente por el sistema.\n\nCONFORME A\n       4.4BSD.  Estas  funciones  aparecieron  en  BSD  4.3 y no se recomienda su empleo, pues seguramente ser\u00e1n\n       retiradas en el futuro.  Para programas nuevos utilice las funciones de manejo de se\u00f1ales de POSIX.\n\nV\u00c9ASE TAMBI\u00c9N\n       kill(2), sigprocmask(2), signal(7)\n\nLinux 1.3                                        31 agosto 1995                                      SIGBLOCK(2)\n"},{"NOMBRE": "       signal - manejo de se\u00f1ales en ANSI C\n\n", "SINOPSIS": "       #include <signal.h>\n\n       typedef void (*sighandler_t)(int);\n\n       sighandler_t signal(int signum, sighandler_t handler);\n\n", "DESCRIPCION": "       La llamada al sistema signal() instala un nuevo manejador de se\u00f1ales para la se\u00f1al con n\u00famero signum.  El\n       manejador de se\u00f1ales queda establecido a sighandler que puede ser una funci\u00f3n especificada por el usuario\n       o bien SIG_IGN o SIG_DFL.\n\n       Cuando  llega  una  se\u00f1al  con  n\u00famero  signum ocurre lo siguiente.  Si el manejador correspondiente est\u00e1\n       establecido a SIG_IGN, la se\u00f1al es ignorada.  Si el manejador est\u00e1 establecido a SIG_DFL, se  realiza  la\n       acci\u00f3n  por  defecto asociada a la se\u00f1al (vea signal(7)).  Finalmente, si el manejador est\u00e1 establecido a\n       una funci\u00f3n sighandler lo primero que se hace es o bien restablecer el manejador a SIG_DFL o  un  bloqueo\n       de la se\u00f1al que depende de la implementaci\u00f3n, invocando despu\u00e9s a sighandler con el argumento signum.\n\n       Usar una funci\u00f3n manejadora de se\u00f1ales para una se\u00f1al se llama \"atrapar la se\u00f1al\".  Las se\u00f1ales\n\nLinux 2.2                                         28 abril 2000                                        SIGNAL(2)\n"},{"NOMBRE": "       sigpause - libera at\u00f3micamente se\u00f1ales bloqueadas y espera interrupci\u00f3n\n\n", "SINOPSIS": "       #include <signal.h>\n\n       int sigpause(int sigmask);\n\n", "DESCRIPCION": "       Esta interfaz est\u00e1 anticuada desde que existe sigsuspend(2).\n\n       sigpause  asigna  sigmask  al  conjunto  de  se\u00f1ales enmascaradas y luego espera que llegue una se\u00f1al; al\n       regresar, se restaura el conjunto de se\u00f1ales enmascaradas.\n\n       sigmask es normalmente 0 para indicar que no se va a bloquear ninguna se\u00f1al.   sigpause  siempre  termina\n       siendo interrumpida, devolviendo -1 con errno valiendo EINTR.\n\nCONFORME A\n       4.4BSD.   La  funci\u00f3n  sigpause  apareci\u00f3  en 4.3BSD y no se recomienda su uso pues puede ser retirada en\n       cualquier momento.\n\nV\u00c9ASE TAMBI\u00c9N\n       sigsuspend(2), kill(2), sigaction(2), sigprocmask(2), sigblock(2), sigvec(2)\n\nLinux 1.3                                         24 julio 1993                                      SIGPAUSE(2)\n"},{"NOMBRE": "       sigaction, sigprocmask, sigpending, sigsuspend - funciones POSIX de manejo de se\u00f1ales\n\n", "SINOPSIS": "       #include <signal.h>\n\n       int sigaction(int signum, const struct sigaction *act, struct sigaction *oldact);\n\n       int sigprocmask(int how, const sigset_t *set, sigset_t *oldset);\n\n       int sigpending(sigset_t *set);\n\n       int sigsuspend(const sigset_t *mask);\n\n", "DESCRIPCION": "       La  llamad  al sistema sigaction se emplea para cambiar la acci\u00f3n tomada por un proceso cuando recibe una\n       determinada se\u00f1al.\n\n       signum especifica la se\u00f1al y puede ser cualquiera v\u00e1lida salvo SIGKILL o SIGSTOP.\n\n       Si act no es nulo, la nueva acci\u00f3n para la se\u00f1al signum se instala como act.  Si oldact no  es  nulo,  la\n       acci\u00f3n anterior se guarda en oldact.\n\n       La estructura sigaction se define como algo parecido a\n\n              struct sigaction {\n                  void (*sa_handler)(int);\n                  void (*sa_sigaction)(int, siginfo_t *, void *);\n                  sigset_t sa_mask;\n                  int sa_flags;\n                  void (*sa_restorer)(void);\n              }\n\n       En algunas arquitecturas se utiliza una union - no asigne valores a sa_handler y sa_sigaction.\n\n       El  elemento  sa_restorer  est\u00e1  obsoleto  y  no  deber\u00eda  utilizarse.  POSIX  no  especifica un elemento\n       sa_restorer.\n\n       sa_handler especifica la acci\u00f3n que se va a asociar con  signum  y  puede  ser  SIG_DFL  para  la  acci\u00f3n\n       predeterminada,  SIG_IGN  para no tener en cuenta la se\u00f1al, o un puntero a una funci\u00f3n manejadora para la\n       se\u00f1al.\n\n       sa_mask da una m\u00e1scara de se\u00f1ales que deber\u00edan bloquearse durante la ejecuci\u00f3n del  manejador  de  se\u00f1al.\n       Adem\u00e1s,  la se\u00f1al que lance el manejador ser\u00e1 bloqueada, a menos que se activen las opciones SA_NODEFER o\n       SA_NOMASK.\n\n       sa_flags especifica un conjunto de opciones que modifican el comportamiento  del  proceso  de  manejo  de\n       se\u00f1al. Se forma por la aplicaci\u00f3n del operador de bits OR a cero o m\u00e1s de las siguientes constantes:\n\n              SA_NOCLDSTOP\n                     Si  signum  es  SIGCHLD, no se reciba notificaci\u00f3n cuando los procesos hijos se paren (esto\n                     es, cuando los procesos hijos reciban una  de  las  se\u00f1ales  SIGSTOP,  SIGTSTP,  SIGTTIN  o\n                     SIGTTOU).\n\n              SA_ONESHOT o SA_RESETHAND\n                     Rest\u00e1urese  la  acci\u00f3n  para  la se\u00f1al al estado predeterminado una vez que el manejador de\n                     se\u00f1al haya sido llamado.\n\n              SA_ONSTACK\n                     Llama al  manejador  de  se\u00f1al  en  una  pila  de  se\u00f1ales  alternativa  proporcionada  por\n                     sigaltstack(2).   Si  esta  pila  alternativa  no est\u00e1 disponible, se utilizar\u00e1 la pila por\n                     defecto.\n\n              SA_RESTART\n                     Proporciona un comportamiento compatible con la sem\u00e1ntica de se\u00f1ales de  BSD  haciendo  re-\n                     ejecutables algunas llamadas al sistema entre se\u00f1ales.\n\n              SA_NOMASK o SA_NODEFER\n                     No se impida que se reciba la se\u00f1al desde su propio manejador.\n\n              SA_SIGINFO\n                     El  manejador  de  se\u00f1al  toma  3  argumentos,  no  uno.  En  este caso, se debe configurar\n                     sa_sigaction en lugar de sa_handler.  (El campo sa_sigaction  fue  a\u00f1adido  en  la  versi\u00f3n\n                     2.1.86 de Linux.)\n\n       El par\u00e1metro siginfo_t para sa_sigaction es una estructura con los siguientes elementos\n\n              siginfo_t {\n                  int      si_signo;  /* N\u00famero de se\u00f1al */\n                  int      si_errno;  /* Un valor errno */\n                  int      si_code;   /* C\u00f3digo de se\u00f1al */\n                  pid_t    si_pid;    /* ID del proceso emisor */\n                  uid_t    si_uid;    /* ID del usuario real del proceso emisor */\n                  int      si_status; /* Valor de salida o se\u00f1al */\n                  clock_t  si_utime;  /* Tiempo de usuario consumido */\n                  clock_t  si_stime;  /* Tiempo de sistema consumido */\n                  sigval_t si_value;  /* Valor de se\u00f1al */\n                  int      si_int;    /* se\u00f1al POSIX.1b */\n                  void *   si_ptr;    /* se\u00f1al POSIX.1b */\n                  void *   si_addr;   /* Direcci\u00f3n de memoria que ha producido el fallo */\n                  int      si_band;   /* Evento de conjunto */\n                  int      si_fd;     /* Descriptor de fichero */\n              }\n       si_signo, si_errno y si_code est\u00e1n definidos para todas las se\u00f1ales.  El resto de la estructura puede ser\n       una uni\u00f3n, por lo que deber\u00edan leerse solamente los campos que  sean  de  inter\u00e9s  para  la  se\u00f1al  dada.\n       kill(2),  las  se\u00f1ales  POSIX.1b y SIGCHLD rellenan si_pid y si_uid.   SIGCHLD tambi\u00e9n rellena si_status,\n       si_utime y si_stime.  si_int y si_ptr son especificados por el emisor de la se\u00f1al POSIX.1b.\n        SIGILL, SIGFPE, SIGSEGV y SIGBUS rellenan si_addr con la direcci\u00f3n del fallo.  SIGPOLL rellena si_band y\n       si_fd.\n\n       si_code  indica por qu\u00e9 se ha enviado la se\u00f1al. Es un valor, no una m\u00e1scara de bits.  Los valores que son\n       posibles para cualquier se\u00f1al se listan en la siguiente tabla:\n\n       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n       \u2502                  si_code                   \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502Valor      \u2502 Origen de la se\u00f1al             \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502SI_USER    \u2502 kill, sigsend o raise          \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502SI_KERNEL  \u2502 El n\u00facleo                      \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502SI_QUEUE   \u2502 sigqueue                       \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502SI_TIMER   \u2502 el cron\u00f3metro ha vencido       \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502SI_MESGQ   \u2502 ha cambiado el estado de mesq  \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502SI_ASYNCIO \u2502 ha terminado una E/S as\u00edncrona \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502SI_SIGIO   \u2502 SIGIO encolada                 \u2502\n       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n       \u2502                   SIGILL                     \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502ILL_ILLOPC \u2502 c\u00f3digo de operaci\u00f3n ilegal       \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502ILL_ILLOPN \u2502 operando ilegal                  \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502ILL_ILLADR \u2502 modo de direccionamiento ilegal  \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502ILL_ILLTRP \u2502 trampa ilegal                    \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502ILL_PRVOPC \u2502 c\u00f3digo de operaci\u00f3n privilegiada \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502ILL_PRVREG \u2502 registro privilegiado            \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502ILL_COPROC \u2502 error del coprocesador           \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502ILL_BADSTK \u2502 error de la pila interna         \u2502\n       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n       \u2502                         SIGFPE                           \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502FPE_INTDIV \u2502 entero dividido por cero                     \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502FPE_INTOVF \u2502 desbordamiento de entero                     \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502FPE_FLTDIV \u2502 punto flotante dividido por cero             \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502FPE_FLTOVF \u2502 desbordamiento de punto flotante             \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502FPE_FLTUND \u2502 desbordamiento de punto flotante por defecto \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502FPE_FLTRES \u2502 resultado de punto flotante inexacto         \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502FPE_FLTINV \u2502 operaci\u00f3n de punto flotante inv\u00e1lida         \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502FPE_FLTSUB \u2502 subscript fuera de rango                     \u2502\n       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n       \u2502                              SIGSEGV                               \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502SEGV_MAPERR \u2502 direcci\u00f3n no asociada a un objeto                     \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502SEGV_ACCERR \u2502 permisos inv\u00e1lidos para un objeto presente en memoria \u2502\n       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n       \u2502                     SIGBUS                       \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502BUS_ADRALN \u2502 alineamiento de direcci\u00f3n inv\u00e1lido   \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502BUS_ADRERR \u2502 direcci\u00f3n f\u00edsica inexistente         \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502BUS_OBJERR \u2502 error hardware espec\u00edfico del objeto \u2502\n       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n       \u2502                          SIGTRAP                            \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502TRAP_BRKPT \u2502 punto de parada de un proceso                   \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502TRAP_TRACE \u2502 trampa de seguimiento paso a paso de un proceso \u2502\n       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n       \u2502                              SIGCHLD                                \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502CLD_EXITED    \u2502 ha terminado un hijo                                 \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502CLD_KILLED    \u2502 se ha matado a un hijo                               \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502CLD_DUMPED    \u2502 un hijo ha terminado anormalmente                    \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502CLD_TRAPPED   \u2502 un hijo con seguimiento paso a paso ha sido detenido \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502CLD_STOPPED   \u2502 ha parado un hijo                                    \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502CLD_CONTINUED \u2502 un hijo parado ha continuado                         \u2502\n       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n       \u2502                    SIGPOLL                     \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502POLL_IN  \u2502 datos de entrada disponibles         \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502POLL_OUT \u2502 buffers de salida disponibles        \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502POLL_MSG \u2502 mensaje de entrada disponible        \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502POLL_ERR \u2502 error de E/S                         \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502POLL_PRI \u2502 entrada de alta prioridad disponible \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502POLL_HUP \u2502 dispositivo desconectado             \u2502\n       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n       La  llamada  sigprocmask  se  emplea  para  cambiar  la  lista  de  se\u00f1ales  bloqueadas  actualmente.  El\n       comportamiento de la llamada depende del valor de how, como sigue:\n\n              SIG_BLOCK\n                     El conjunto de se\u00f1ales bloqueadas es la uni\u00f3n del conjunto actual y el argumento set.\n\n              SIG_UNBLOCK\n                     Las  se\u00f1ales  en set se quitan del conjunto actual de se\u00f1ales bloqueadas. Es legal intentar\n                     el desbloqueo de una se\u00f1al que no est\u00e1 bloqueada.\n\n              SIG_SETMASK\n                     El conjunto de se\u00f1ales bloqueadas se pone seg\u00fan el argumento set.\n\n       Si oldset no es nulo, el valor anterior de la m\u00e1scara de se\u00f1al se guarda en oldset.\n\n       La llamada sigpending permite el examen de se\u00f1ales pendientes  (las  que  han  sido  producidas  mientras\n       estaban bloqueadas). La m\u00e1scara de se\u00f1al de las se\u00f1ales pendientes se guarda en set.\n\n       La  llamada sigsuspend reemplaza temporalmente la m\u00e1scara de se\u00f1al para el proceso con la dada por mask y\n       luego suspende el proceso hasta que se recibe una se\u00f1al.\n\nVALOR DEVUELTO\n       Las funciones sigaction, sigprocmask y sigpending devuelven 0 en caso de \u00e9xito y -1 en caso de error.  La\n       funci\u00f3n sigsuspend siempre devuelve -1, normalmente acompa\u00f1ado del error EINTR.\n\n", "ERRORES": "       EINVAL Se  ha especificado una se\u00f1al inv\u00e1lida. Esto tambi\u00e9n se genera si se hace un intento de cambiar la\n              acci\u00f3n para SIGKILL o SIGSTOP, que no pueden ser capturadas.\n\n       EFAULT act, oldact, set, oldset u mask apuntan a una zona de  memoria  que  no  forma  parte  v\u00e1lida  del\n              espacio de direcciones del proceso.\n\n       EINTR  La llamada al sistema ha sido interrumpida.\n\n", "OBSERVACIONES": "       No  es  posible  bloquear  SIGKILL  ni SIGSTOP con una llamada a sigprocmask.  Los intentos de hacerlo no\n       ser\u00e1n tenidos en cuenta, silenciosamente.\n\n       De acuerdo con POSIX, el comportamiento de un proceso est\u00e1 indefinido despu\u00e9s de que no haga caso de  una\n       se\u00f1al SIGFPE, SIGILL o SIGSEGV que no haya sido generada por las funciones kill() o raise().  La divisi\u00f3n\n       entera por cero da un  resultado  indefinido.   En  algunas  arquitecturas  generar\u00e1  una  se\u00f1al  SIGFPE.\n       (Tambi\u00e9n,  el  dividir  el  entero m\u00e1s negativo por -1 puede generar una se\u00f1al SIGFPE.)  No hacer caso de\n       esta se\u00f1al puede llevar a un bucle infinito.\n\n       POSIX (B.3.3.1.3) anula el establecimiento de SIG_IGN como acci\u00f3n para SIGCHLD.  Los  comportamientos  de\n       BSD  y  SYSV  difieren,  provocando  el fallo en Linux de aquellos programas BSD que asignan SIG_IGN como\n       acci\u00f3n para SIGCHLD.\n\n       La especificaci\u00f3n POSIX s\u00f3lo define  SA_NOCLDSTOP.   El  empleo  de  otros  valores  en  sa_flags  no  es\n       transportable.\n\n       La opci\u00f3n SA_RESETHAND es compatible con la de SVr4 del mismo nombre.\n\n       La  opci\u00f3n SA_NODEFER es compatible con la de SVr4 del mismo nombre bajo los n\u00facleos 1.3.9 y posteriores.\n       En n\u00facleos m\u00e1s viejos la implementaci\u00f3n de Linux permit\u00eda la recepci\u00f3n de cualquier se\u00f1al, no s\u00f3lo la que\n       est\u00e1bamos instalando (sustituyendo as\u00ed efectivament cualquier valor de sa_mask).\n\n       Los  nombres  SA_RESETHAND  y  SA_NODEFER  para  compatibilidad con SVr4 est\u00e1n presentes solamente en las\n       versiones de la biblioteca 3.0.9 y mayores.\n\n       La opci\u00f3n SA_SIGINFO viene especificada por POSIX.1b. El soporte para ella se a\u00f1adi\u00f3 en la versi\u00f3n 2.2 de\n       Linux.\n\n       sigaction puede llamarse con un segundo argumento nulo para saber el manejador de se\u00f1al en curso. Tambi\u00e9n\n       puede emplearse para comprobar si una se\u00f1al dada es v\u00e1lida para la m\u00e1quina donde se est\u00e1, llam\u00e1ndola  con\n       el segundo y el tercer argumento nulos.\n\n       Vea sigsetops(3) para detalles sobre manipulaci\u00f3n de conjuntos de se\u00f1ales.\n\nCONFORME A\n       POSIX, SVr4.  SVr4 no documenta la condici\u00f3n EINTR.\n\nSIN DOCUMENTAR\n       Antes  de  la  introducci\u00f3n  de  SA_SIGINFO  tambi\u00e9n era posible obtener informaci\u00f3n adicional, usando un\n       manejador sa_handler con el segundo argumento del tipo struct sigcontext.  Vea  las  fuentes  del  n\u00facleo\n       relevantes para m\u00e1s detalles.  Este uso est\u00e1 obsoleto en la actualidad.\n\nV\u00c9ASE TAMBI\u00c9N\n       kill(1),  kill(2),  killpg(2), pause(2), sigaltstack(2), raise(3), siginterrupt(3), signal(2), signal(7),\n       sigsetops(3), sigvec(2)\n\nLinux 2.4                                       29 diciembre 2001                                   SIGACTION(2)\n"},{"NOMBRE": "       sigaction, sigprocmask, sigpending, sigsuspend - funciones POSIX de manejo de se\u00f1ales\n\n", "SINOPSIS": "       #include <signal.h>\n\n       int sigaction(int signum, const struct sigaction *act, struct sigaction *oldact);\n\n       int sigprocmask(int how, const sigset_t *set, sigset_t *oldset);\n\n       int sigpending(sigset_t *set);\n\n       int sigsuspend(const sigset_t *mask);\n\n", "DESCRIPCION": "       La  llamad  al sistema sigaction se emplea para cambiar la acci\u00f3n tomada por un proceso cuando recibe una\n       determinada se\u00f1al.\n\n       signum especifica la se\u00f1al y puede ser cualquiera v\u00e1lida salvo SIGKILL o SIGSTOP.\n\n       Si act no es nulo, la nueva acci\u00f3n para la se\u00f1al signum se instala como act.  Si oldact no  es  nulo,  la\n       acci\u00f3n anterior se guarda en oldact.\n\n       La estructura sigaction se define como algo parecido a\n\n              struct sigaction {\n                  void (*sa_handler)(int);\n                  void (*sa_sigaction)(int, siginfo_t *, void *);\n                  sigset_t sa_mask;\n                  int sa_flags;\n                  void (*sa_restorer)(void);\n              }\n\n       En algunas arquitecturas se utiliza una union - no asigne valores a sa_handler y sa_sigaction.\n\n       El  elemento  sa_restorer  est\u00e1  obsoleto  y  no  deber\u00eda  utilizarse.  POSIX  no  especifica un elemento\n       sa_restorer.\n\n       sa_handler especifica la acci\u00f3n que se va a asociar con  signum  y  puede  ser  SIG_DFL  para  la  acci\u00f3n\n       predeterminada,  SIG_IGN  para no tener en cuenta la se\u00f1al, o un puntero a una funci\u00f3n manejadora para la\n       se\u00f1al.\n\n       sa_mask da una m\u00e1scara de se\u00f1ales que deber\u00edan bloquearse durante la ejecuci\u00f3n del  manejador  de  se\u00f1al.\n       Adem\u00e1s,  la se\u00f1al que lance el manejador ser\u00e1 bloqueada, a menos que se activen las opciones SA_NODEFER o\n       SA_NOMASK.\n\n       sa_flags especifica un conjunto de opciones que modifican el comportamiento  del  proceso  de  manejo  de\n       se\u00f1al. Se forma por la aplicaci\u00f3n del operador de bits OR a cero o m\u00e1s de las siguientes constantes:\n\n              SA_NOCLDSTOP\n                     Si  signum  es  SIGCHLD, no se reciba notificaci\u00f3n cuando los procesos hijos se paren (esto\n                     es, cuando los procesos hijos reciban una  de  las  se\u00f1ales  SIGSTOP,  SIGTSTP,  SIGTTIN  o\n                     SIGTTOU).\n\n              SA_ONESHOT o SA_RESETHAND\n                     Rest\u00e1urese  la  acci\u00f3n  para  la se\u00f1al al estado predeterminado una vez que el manejador de\n                     se\u00f1al haya sido llamado.\n\n              SA_ONSTACK\n                     Llama al  manejador  de  se\u00f1al  en  una  pila  de  se\u00f1ales  alternativa  proporcionada  por\n                     sigaltstack(2).   Si  esta  pila  alternativa  no est\u00e1 disponible, se utilizar\u00e1 la pila por\n                     defecto.\n\n              SA_RESTART\n                     Proporciona un comportamiento compatible con la sem\u00e1ntica de se\u00f1ales de  BSD  haciendo  re-\n                     ejecutables algunas llamadas al sistema entre se\u00f1ales.\n\n              SA_NOMASK o SA_NODEFER\n                     No se impida que se reciba la se\u00f1al desde su propio manejador.\n\n              SA_SIGINFO\n                     El  manejador  de  se\u00f1al  toma  3  argumentos,  no  uno.  En  este caso, se debe configurar\n                     sa_sigaction en lugar de sa_handler.  (El campo sa_sigaction  fue  a\u00f1adido  en  la  versi\u00f3n\n                     2.1.86 de Linux.)\n\n       El par\u00e1metro siginfo_t para sa_sigaction es una estructura con los siguientes elementos\n\n              siginfo_t {\n                  int      si_signo;  /* N\u00famero de se\u00f1al */\n                  int      si_errno;  /* Un valor errno */\n                  int      si_code;   /* C\u00f3digo de se\u00f1al */\n                  pid_t    si_pid;    /* ID del proceso emisor */\n                  uid_t    si_uid;    /* ID del usuario real del proceso emisor */\n                  int      si_status; /* Valor de salida o se\u00f1al */\n                  clock_t  si_utime;  /* Tiempo de usuario consumido */\n                  clock_t  si_stime;  /* Tiempo de sistema consumido */\n                  sigval_t si_value;  /* Valor de se\u00f1al */\n                  int      si_int;    /* se\u00f1al POSIX.1b */\n                  void *   si_ptr;    /* se\u00f1al POSIX.1b */\n                  void *   si_addr;   /* Direcci\u00f3n de memoria que ha producido el fallo */\n                  int      si_band;   /* Evento de conjunto */\n                  int      si_fd;     /* Descriptor de fichero */\n              }\n       si_signo, si_errno y si_code est\u00e1n definidos para todas las se\u00f1ales.  El resto de la estructura puede ser\n       una uni\u00f3n, por lo que deber\u00edan leerse solamente los campos que  sean  de  inter\u00e9s  para  la  se\u00f1al  dada.\n       kill(2),  las  se\u00f1ales  POSIX.1b y SIGCHLD rellenan si_pid y si_uid.   SIGCHLD tambi\u00e9n rellena si_status,\n       si_utime y si_stime.  si_int y si_ptr son especificados por el emisor de la se\u00f1al POSIX.1b.\n        SIGILL, SIGFPE, SIGSEGV y SIGBUS rellenan si_addr con la direcci\u00f3n del fallo.  SIGPOLL rellena si_band y\n       si_fd.\n\n       si_code  indica por qu\u00e9 se ha enviado la se\u00f1al. Es un valor, no una m\u00e1scara de bits.  Los valores que son\n       posibles para cualquier se\u00f1al se listan en la siguiente tabla:\n\n       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n       \u2502                  si_code                   \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502Valor      \u2502 Origen de la se\u00f1al             \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502SI_USER    \u2502 kill, sigsend o raise          \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502SI_KERNEL  \u2502 El n\u00facleo                      \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502SI_QUEUE   \u2502 sigqueue                       \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502SI_TIMER   \u2502 el cron\u00f3metro ha vencido       \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502SI_MESGQ   \u2502 ha cambiado el estado de mesq  \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502SI_ASYNCIO \u2502 ha terminado una E/S as\u00edncrona \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502SI_SIGIO   \u2502 SIGIO encolada                 \u2502\n       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n       \u2502                   SIGILL                     \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502ILL_ILLOPC \u2502 c\u00f3digo de operaci\u00f3n ilegal       \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502ILL_ILLOPN \u2502 operando ilegal                  \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502ILL_ILLADR \u2502 modo de direccionamiento ilegal  \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502ILL_ILLTRP \u2502 trampa ilegal                    \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502ILL_PRVOPC \u2502 c\u00f3digo de operaci\u00f3n privilegiada \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502ILL_PRVREG \u2502 registro privilegiado            \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502ILL_COPROC \u2502 error del coprocesador           \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502ILL_BADSTK \u2502 error de la pila interna         \u2502\n       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n       \u2502                         SIGFPE                           \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502FPE_INTDIV \u2502 entero dividido por cero                     \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502FPE_INTOVF \u2502 desbordamiento de entero                     \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502FPE_FLTDIV \u2502 punto flotante dividido por cero             \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502FPE_FLTOVF \u2502 desbordamiento de punto flotante             \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502FPE_FLTUND \u2502 desbordamiento de punto flotante por defecto \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502FPE_FLTRES \u2502 resultado de punto flotante inexacto         \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502FPE_FLTINV \u2502 operaci\u00f3n de punto flotante inv\u00e1lida         \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502FPE_FLTSUB \u2502 subscript fuera de rango                     \u2502\n       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n       \u2502                              SIGSEGV                               \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502SEGV_MAPERR \u2502 direcci\u00f3n no asociada a un objeto                     \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502SEGV_ACCERR \u2502 permisos inv\u00e1lidos para un objeto presente en memoria \u2502\n       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n       \u2502                     SIGBUS                       \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502BUS_ADRALN \u2502 alineamiento de direcci\u00f3n inv\u00e1lido   \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502BUS_ADRERR \u2502 direcci\u00f3n f\u00edsica inexistente         \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502BUS_OBJERR \u2502 error hardware espec\u00edfico del objeto \u2502\n       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n       \u2502                          SIGTRAP                            \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502TRAP_BRKPT \u2502 punto de parada de un proceso                   \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502TRAP_TRACE \u2502 trampa de seguimiento paso a paso de un proceso \u2502\n       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n       \u2502                              SIGCHLD                                \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502CLD_EXITED    \u2502 ha terminado un hijo                                 \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502CLD_KILLED    \u2502 se ha matado a un hijo                               \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502CLD_DUMPED    \u2502 un hijo ha terminado anormalmente                    \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502CLD_TRAPPED   \u2502 un hijo con seguimiento paso a paso ha sido detenido \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502CLD_STOPPED   \u2502 ha parado un hijo                                    \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502CLD_CONTINUED \u2502 un hijo parado ha continuado                         \u2502\n       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n       \u2502                    SIGPOLL                     \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502POLL_IN  \u2502 datos de entrada disponibles         \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502POLL_OUT \u2502 buffers de salida disponibles        \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502POLL_MSG \u2502 mensaje de entrada disponible        \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502POLL_ERR \u2502 error de E/S                         \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502POLL_PRI \u2502 entrada de alta prioridad disponible \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502POLL_HUP \u2502 dispositivo desconectado             \u2502\n       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n       La  llamada  sigprocmask  se  emplea  para  cambiar  la  lista  de  se\u00f1ales  bloqueadas  actualmente.  El\n       comportamiento de la llamada depende del valor de how, como sigue:\n\n              SIG_BLOCK\n                     El conjunto de se\u00f1ales bloqueadas es la uni\u00f3n del conjunto actual y el argumento set.\n\n              SIG_UNBLOCK\n                     Las  se\u00f1ales  en set se quitan del conjunto actual de se\u00f1ales bloqueadas. Es legal intentar\n                     el desbloqueo de una se\u00f1al que no est\u00e1 bloqueada.\n\n              SIG_SETMASK\n                     El conjunto de se\u00f1ales bloqueadas se pone seg\u00fan el argumento set.\n\n       Si oldset no es nulo, el valor anterior de la m\u00e1scara de se\u00f1al se guarda en oldset.\n\n       La llamada sigpending permite el examen de se\u00f1ales pendientes  (las  que  han  sido  producidas  mientras\n       estaban bloqueadas). La m\u00e1scara de se\u00f1al de las se\u00f1ales pendientes se guarda en set.\n\n       La  llamada sigsuspend reemplaza temporalmente la m\u00e1scara de se\u00f1al para el proceso con la dada por mask y\n       luego suspende el proceso hasta que se recibe una se\u00f1al.\n\nVALOR DEVUELTO\n       Las funciones sigaction, sigprocmask y sigpending devuelven 0 en caso de \u00e9xito y -1 en caso de error.  La\n       funci\u00f3n sigsuspend siempre devuelve -1, normalmente acompa\u00f1ado del error EINTR.\n\n", "ERRORES": "       EINVAL Se  ha especificado una se\u00f1al inv\u00e1lida. Esto tambi\u00e9n se genera si se hace un intento de cambiar la\n              acci\u00f3n para SIGKILL o SIGSTOP, que no pueden ser capturadas.\n\n       EFAULT act, oldact, set, oldset u mask apuntan a una zona de  memoria  que  no  forma  parte  v\u00e1lida  del\n              espacio de direcciones del proceso.\n\n       EINTR  La llamada al sistema ha sido interrumpida.\n\n", "OBSERVACIONES": "       No  es  posible  bloquear  SIGKILL  ni SIGSTOP con una llamada a sigprocmask.  Los intentos de hacerlo no\n       ser\u00e1n tenidos en cuenta, silenciosamente.\n\n       De acuerdo con POSIX, el comportamiento de un proceso est\u00e1 indefinido despu\u00e9s de que no haga caso de  una\n       se\u00f1al SIGFPE, SIGILL o SIGSEGV que no haya sido generada por las funciones kill() o raise().  La divisi\u00f3n\n       entera por cero da un  resultado  indefinido.   En  algunas  arquitecturas  generar\u00e1  una  se\u00f1al  SIGFPE.\n       (Tambi\u00e9n,  el  dividir  el  entero m\u00e1s negativo por -1 puede generar una se\u00f1al SIGFPE.)  No hacer caso de\n       esta se\u00f1al puede llevar a un bucle infinito.\n\n       POSIX (B.3.3.1.3) anula el establecimiento de SIG_IGN como acci\u00f3n para SIGCHLD.  Los  comportamientos  de\n       BSD  y  SYSV  difieren,  provocando  el fallo en Linux de aquellos programas BSD que asignan SIG_IGN como\n       acci\u00f3n para SIGCHLD.\n\n       La especificaci\u00f3n POSIX s\u00f3lo define  SA_NOCLDSTOP.   El  empleo  de  otros  valores  en  sa_flags  no  es\n       transportable.\n\n       La opci\u00f3n SA_RESETHAND es compatible con la de SVr4 del mismo nombre.\n\n       La  opci\u00f3n SA_NODEFER es compatible con la de SVr4 del mismo nombre bajo los n\u00facleos 1.3.9 y posteriores.\n       En n\u00facleos m\u00e1s viejos la implementaci\u00f3n de Linux permit\u00eda la recepci\u00f3n de cualquier se\u00f1al, no s\u00f3lo la que\n       est\u00e1bamos instalando (sustituyendo as\u00ed efectivament cualquier valor de sa_mask).\n\n       Los  nombres  SA_RESETHAND  y  SA_NODEFER  para  compatibilidad con SVr4 est\u00e1n presentes solamente en las\n       versiones de la biblioteca 3.0.9 y mayores.\n\n       La opci\u00f3n SA_SIGINFO viene especificada por POSIX.1b. El soporte para ella se a\u00f1adi\u00f3 en la versi\u00f3n 2.2 de\n       Linux.\n\n       sigaction puede llamarse con un segundo argumento nulo para saber el manejador de se\u00f1al en curso. Tambi\u00e9n\n       puede emplearse para comprobar si una se\u00f1al dada es v\u00e1lida para la m\u00e1quina donde se est\u00e1, llam\u00e1ndola  con\n       el segundo y el tercer argumento nulos.\n\n       Vea sigsetops(3) para detalles sobre manipulaci\u00f3n de conjuntos de se\u00f1ales.\n\nCONFORME A\n       POSIX, SVr4.  SVr4 no documenta la condici\u00f3n EINTR.\n\nSIN DOCUMENTAR\n       Antes  de  la  introducci\u00f3n  de  SA_SIGINFO  tambi\u00e9n era posible obtener informaci\u00f3n adicional, usando un\n       manejador sa_handler con el segundo argumento del tipo struct sigcontext.  Vea  las  fuentes  del  n\u00facleo\n       relevantes para m\u00e1s detalles.  Este uso est\u00e1 obsoleto en la actualidad.\n\nV\u00c9ASE TAMBI\u00c9N\n       kill(1),  kill(2),  killpg(2), pause(2), sigaltstack(2), raise(3), siginterrupt(3), signal(2), signal(7),\n       sigsetops(3), sigvec(2)\n\nLinux 2.4                                       29 diciembre 2001                                   SIGACTION(2)\n"},{"NOMBRE": "       sigqueue - env\u00eda una se\u00f1al y un bloque de datos a un proceso\n\n", "SINOPSIS": "       #include <signal.h>\n\n       int sigqueue(pid_t pid, int sig, const union sigval value);\n\n", "DESCRIPCION": "       sigqueue()  env\u00eda  la  se\u00f1al especificada en sig al proceso cuyo identificador de proceso es dado en pid.\n       Los permisos requeridos para enviar la se\u00f1al son los mismos que para kill(2).  Como pasa con kill(2),  la\n       se\u00f1al nula (0) puede emplearse para comprobar si existe un proceso con un identificador de proceso dado.\n\n       El  argumento  value  se  utiliza  para especificar un bloque de datos acompa\u00f1ante (o bien un entero o un\n       puntero) que se enviar\u00e1 con la se\u00f1al, y que tiene el siguiente tipo:\n\n         union sigval {\n             int   sival_int;\n             void *sival_ptr;\n         };\n\n       Si el proceso receptor tiene un manejador instalado para esta se\u00f1al usando la  opci\u00f3n  SA_SIGINFO  en  la\n       llamada  a  sigaction(2),  puede obtener los datos a trav\u00e9s del campo si_value de la estructura siginfo_t\n       pasada como segundo argumento al manejador.  Adem\u00e1s, se asignar\u00e1 al campo si_code de esta  estructura  el\n       valor SI_QUEUE.\n\nVALOR DEVUELTO\n       En  caso  de  \u00e9xito,  sigqueue()  devuelve  0,  indicando que la se\u00f1al fue ennviada satisfactoriamente al\n       proceso receptor.  En otro caso se devuelve -1 y errno se modifica para indicar el error.\n\n", "ERRORES": "       EAGAIN Se alcanz\u00f3 el l\u00edmite de se\u00f1ales que puede ser encolado.  (V\u00e9ase signal(7) para m\u00e1s informaci\u00f3n.)\n\n       EINVAL sig es inv\u00e1lido.\n\n       ESRCH  No hay ning\u00fan proceso cuyo identificador de proceso coincida con pid.\n\n       EPERM  El proceso no tiene permiso para enviar la se\u00f1al al proceso receptor.   (V\u00e9ase  kill(2)  para  m\u00e1s\n              informaci\u00f3n.)\n\n", "OBSERVACIONES": "       Si  esta  funci\u00f3n termina por enviar una se\u00f1al al proceso que la invoc\u00f3, y esa se\u00f1al no fue bloqueada por\n       el hilo invocador, y no hay otros hilos dispuestos  a  manejar  esta  se\u00f1al  (ya  sea  porque  la  tienen\n       desbloqueada  o  porque la esperan con sigwait(3)), entonces deber\u00e1 enviarse al menos alguna se\u00f1al a este\n       hilo antes de que esta funci\u00f3n regrese.\n\nCONFORME A\n       POSIX 1003.1-2001\n\nV\u00c9ASE TAMBI\u00c9N\n       kill(2), sigaction(2), signal(2), sigwait(3), signal(7)\n\nLinux 2.4.18                                      7 junio 2002                                       SIGQUEUE(2)\n"},{"NOMBRE": "       sigreturn - regresa desde el manejador de se\u00f1ales y limpia el marco de pila\n\n", "SINOPSIS": "       int sigreturn(unsigned long __unused);\n\n", "DESCRIPCION": "       Cuando  el n\u00facleo de Linux crea la estructura de pila para el manejador de se\u00f1ales, inserta una llamada a\n       sigreturn en la estructura de pila aunque el manejador de se\u00f1ales llamar\u00e1 a sigreturn a su  vuelta.  Esta\n       llamada  a sigreturn limpia la pila aunque el proceso puede restaurar desde donde fue interrumpido por la\n       se\u00f1al.\n\nVALOR DEVUELTO\n       sigreturn nunca regresa.\n\n", "ADVERTENCIA": "       La llamada sigreturn es usada por el n\u00facleo para inplementar el manejador de  se\u00f1ales.   Nunca  debe  ser\n       llamada  directamente.  Mejor  a\u00fan,  el  uso  espec\u00edfico  del  argumento __unused var\u00eda dependiendo de la\n       arquitectura.\n\nCONFORME A\n       sigreturn es espec\u00edfico para Linux y no debe ser usado en programas que deban ser portados.\n\n", "ARCHIVOS": "       /usr/src/linux/arch/i386/kernel/signal.c\n       /usr/src/linux/arch/alpha/kernel/entry.S\n\nV\u00c9ASE TAMBI\u00c9N\n       kill(2), signal(2), signal(7)\n\nLinux 1.3.20                                     21 agosto 1995                                     SIGRETURN(2)\n"},{"NOMBRE": "       sigblock, siggetmask, sigsetmask, sigmask - manipulan la m\u00e1scara de se\u00f1ales\n\n", "SINOPSIS": "       #include <signal.h>\n\n       int sigblock(int mascara);\n\n       int siggetmask(void);\n\n       int sigsetmask(int mascara);\n\n       int sigmask(int signum);\n\n", "DESCRIPCION": "       Esta interfaz est\u00e1 anticuada desde que existe sigprocmask(2).\n\n       La  llamada  al  sistema  sigblock  a\u00f1ade las se\u00f1ales especificadas en mascara al conjunto de se\u00f1ales que\n       actualmente est\u00e1n bloqueadas para su env\u00edo.\n\n       La llamada al sistema sigsetmask reemplaza totalmente el conjunto de  se\u00f1ales  bloqueadas  con  un  nuevo\n       conjunto especificado en mascara.  Las se\u00f1ales est\u00e1n bloqueadas si el bit correspondiente en mascara est\u00e1\n       a 1.\n\n       El conjunto actual de se\u00f1ales bloqueadas puede obtenerse empleando siggetmask.\n\n       La macro sigmask sirve para construir la m\u00e1scara para una se\u00f1al dada por su n\u00famero o macro signum.\n\nVALOR DEVUELTO\n       siggetmask devuelve el conjunto actual de se\u00f1ales en la m\u00e1scara.\n\n       sigsetmask y sigblock devuelven el conjunto anterior de se\u00f1ales en la m\u00e1scara.\n\n", "OBSERVACIONES": "       Los prototipos de estas funciones s\u00f3lo est\u00e1n disponibles si se define _BSD_SOURCE antes de  la  inclusi\u00f3n\n       de ning\u00fan fichero de cabecera del sistema.\n\n       No es posible bloquear SIGKILL o SIGSTOP - esta restricci\u00f3n viene impuesta calladamente por el sistema.\n\nCONFORME A\n       4.4BSD.  Estas  funciones  aparecieron  en  BSD  4.3 y no se recomienda su empleo, pues seguramente ser\u00e1n\n       retiradas en el futuro.  Para programas nuevos utilice las funciones de manejo de se\u00f1ales de POSIX.\n\nV\u00c9ASE TAMBI\u00c9N\n       kill(2), sigprocmask(2), signal(7)\n\nLinux 1.3                                        31 agosto 1995                                      SIGBLOCK(2)\n"},{"NOMBRE": "       sigaction, sigprocmask, sigpending, sigsuspend - funciones POSIX de manejo de se\u00f1ales\n\n", "SINOPSIS": "       #include <signal.h>\n\n       int sigaction(int signum, const struct sigaction *act, struct sigaction *oldact);\n\n       int sigprocmask(int how, const sigset_t *set, sigset_t *oldset);\n\n       int sigpending(sigset_t *set);\n\n       int sigsuspend(const sigset_t *mask);\n\n", "DESCRIPCION": "       La  llamad  al sistema sigaction se emplea para cambiar la acci\u00f3n tomada por un proceso cuando recibe una\n       determinada se\u00f1al.\n\n       signum especifica la se\u00f1al y puede ser cualquiera v\u00e1lida salvo SIGKILL o SIGSTOP.\n\n       Si act no es nulo, la nueva acci\u00f3n para la se\u00f1al signum se instala como act.  Si oldact no  es  nulo,  la\n       acci\u00f3n anterior se guarda en oldact.\n\n       La estructura sigaction se define como algo parecido a\n\n              struct sigaction {\n                  void (*sa_handler)(int);\n                  void (*sa_sigaction)(int, siginfo_t *, void *);\n                  sigset_t sa_mask;\n                  int sa_flags;\n                  void (*sa_restorer)(void);\n              }\n\n       En algunas arquitecturas se utiliza una union - no asigne valores a sa_handler y sa_sigaction.\n\n       El  elemento  sa_restorer  est\u00e1  obsoleto  y  no  deber\u00eda  utilizarse.  POSIX  no  especifica un elemento\n       sa_restorer.\n\n       sa_handler especifica la acci\u00f3n que se va a asociar con  signum  y  puede  ser  SIG_DFL  para  la  acci\u00f3n\n       predeterminada,  SIG_IGN  para no tener en cuenta la se\u00f1al, o un puntero a una funci\u00f3n manejadora para la\n       se\u00f1al.\n\n       sa_mask da una m\u00e1scara de se\u00f1ales que deber\u00edan bloquearse durante la ejecuci\u00f3n del  manejador  de  se\u00f1al.\n       Adem\u00e1s,  la se\u00f1al que lance el manejador ser\u00e1 bloqueada, a menos que se activen las opciones SA_NODEFER o\n       SA_NOMASK.\n\n       sa_flags especifica un conjunto de opciones que modifican el comportamiento  del  proceso  de  manejo  de\n       se\u00f1al. Se forma por la aplicaci\u00f3n del operador de bits OR a cero o m\u00e1s de las siguientes constantes:\n\n              SA_NOCLDSTOP\n                     Si  signum  es  SIGCHLD, no se reciba notificaci\u00f3n cuando los procesos hijos se paren (esto\n                     es, cuando los procesos hijos reciban una  de  las  se\u00f1ales  SIGSTOP,  SIGTSTP,  SIGTTIN  o\n                     SIGTTOU).\n\n              SA_ONESHOT o SA_RESETHAND\n                     Rest\u00e1urese  la  acci\u00f3n  para  la se\u00f1al al estado predeterminado una vez que el manejador de\n                     se\u00f1al haya sido llamado.\n\n              SA_ONSTACK\n                     Llama al  manejador  de  se\u00f1al  en  una  pila  de  se\u00f1ales  alternativa  proporcionada  por\n                     sigaltstack(2).   Si  esta  pila  alternativa  no est\u00e1 disponible, se utilizar\u00e1 la pila por\n                     defecto.\n\n              SA_RESTART\n                     Proporciona un comportamiento compatible con la sem\u00e1ntica de se\u00f1ales de  BSD  haciendo  re-\n                     ejecutables algunas llamadas al sistema entre se\u00f1ales.\n\n              SA_NOMASK o SA_NODEFER\n                     No se impida que se reciba la se\u00f1al desde su propio manejador.\n\n              SA_SIGINFO\n                     El  manejador  de  se\u00f1al  toma  3  argumentos,  no  uno.  En  este caso, se debe configurar\n                     sa_sigaction en lugar de sa_handler.  (El campo sa_sigaction  fue  a\u00f1adido  en  la  versi\u00f3n\n                     2.1.86 de Linux.)\n\n       El par\u00e1metro siginfo_t para sa_sigaction es una estructura con los siguientes elementos\n\n              siginfo_t {\n                  int      si_signo;  /* N\u00famero de se\u00f1al */\n                  int      si_errno;  /* Un valor errno */\n                  int      si_code;   /* C\u00f3digo de se\u00f1al */\n                  pid_t    si_pid;    /* ID del proceso emisor */\n                  uid_t    si_uid;    /* ID del usuario real del proceso emisor */\n                  int      si_status; /* Valor de salida o se\u00f1al */\n                  clock_t  si_utime;  /* Tiempo de usuario consumido */\n                  clock_t  si_stime;  /* Tiempo de sistema consumido */\n                  sigval_t si_value;  /* Valor de se\u00f1al */\n                  int      si_int;    /* se\u00f1al POSIX.1b */\n                  void *   si_ptr;    /* se\u00f1al POSIX.1b */\n                  void *   si_addr;   /* Direcci\u00f3n de memoria que ha producido el fallo */\n                  int      si_band;   /* Evento de conjunto */\n                  int      si_fd;     /* Descriptor de fichero */\n              }\n       si_signo, si_errno y si_code est\u00e1n definidos para todas las se\u00f1ales.  El resto de la estructura puede ser\n       una uni\u00f3n, por lo que deber\u00edan leerse solamente los campos que  sean  de  inter\u00e9s  para  la  se\u00f1al  dada.\n       kill(2),  las  se\u00f1ales  POSIX.1b y SIGCHLD rellenan si_pid y si_uid.   SIGCHLD tambi\u00e9n rellena si_status,\n       si_utime y si_stime.  si_int y si_ptr son especificados por el emisor de la se\u00f1al POSIX.1b.\n        SIGILL, SIGFPE, SIGSEGV y SIGBUS rellenan si_addr con la direcci\u00f3n del fallo.  SIGPOLL rellena si_band y\n       si_fd.\n\n       si_code  indica por qu\u00e9 se ha enviado la se\u00f1al. Es un valor, no una m\u00e1scara de bits.  Los valores que son\n       posibles para cualquier se\u00f1al se listan en la siguiente tabla:\n\n       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n       \u2502                  si_code                   \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502Valor      \u2502 Origen de la se\u00f1al             \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502SI_USER    \u2502 kill, sigsend o raise          \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502SI_KERNEL  \u2502 El n\u00facleo                      \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502SI_QUEUE   \u2502 sigqueue                       \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502SI_TIMER   \u2502 el cron\u00f3metro ha vencido       \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502SI_MESGQ   \u2502 ha cambiado el estado de mesq  \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502SI_ASYNCIO \u2502 ha terminado una E/S as\u00edncrona \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502SI_SIGIO   \u2502 SIGIO encolada                 \u2502\n       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n       \u2502                   SIGILL                     \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502ILL_ILLOPC \u2502 c\u00f3digo de operaci\u00f3n ilegal       \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502ILL_ILLOPN \u2502 operando ilegal                  \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502ILL_ILLADR \u2502 modo de direccionamiento ilegal  \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502ILL_ILLTRP \u2502 trampa ilegal                    \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502ILL_PRVOPC \u2502 c\u00f3digo de operaci\u00f3n privilegiada \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502ILL_PRVREG \u2502 registro privilegiado            \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502ILL_COPROC \u2502 error del coprocesador           \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502ILL_BADSTK \u2502 error de la pila interna         \u2502\n       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n       \u2502                         SIGFPE                           \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502FPE_INTDIV \u2502 entero dividido por cero                     \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502FPE_INTOVF \u2502 desbordamiento de entero                     \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502FPE_FLTDIV \u2502 punto flotante dividido por cero             \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502FPE_FLTOVF \u2502 desbordamiento de punto flotante             \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502FPE_FLTUND \u2502 desbordamiento de punto flotante por defecto \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502FPE_FLTRES \u2502 resultado de punto flotante inexacto         \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502FPE_FLTINV \u2502 operaci\u00f3n de punto flotante inv\u00e1lida         \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502FPE_FLTSUB \u2502 subscript fuera de rango                     \u2502\n       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n       \u2502                              SIGSEGV                               \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502SEGV_MAPERR \u2502 direcci\u00f3n no asociada a un objeto                     \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502SEGV_ACCERR \u2502 permisos inv\u00e1lidos para un objeto presente en memoria \u2502\n       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n       \u2502                     SIGBUS                       \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502BUS_ADRALN \u2502 alineamiento de direcci\u00f3n inv\u00e1lido   \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502BUS_ADRERR \u2502 direcci\u00f3n f\u00edsica inexistente         \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502BUS_OBJERR \u2502 error hardware espec\u00edfico del objeto \u2502\n       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n       \u2502                          SIGTRAP                            \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502TRAP_BRKPT \u2502 punto de parada de un proceso                   \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502TRAP_TRACE \u2502 trampa de seguimiento paso a paso de un proceso \u2502\n       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n       \u2502                              SIGCHLD                                \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502CLD_EXITED    \u2502 ha terminado un hijo                                 \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502CLD_KILLED    \u2502 se ha matado a un hijo                               \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502CLD_DUMPED    \u2502 un hijo ha terminado anormalmente                    \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502CLD_TRAPPED   \u2502 un hijo con seguimiento paso a paso ha sido detenido \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502CLD_STOPPED   \u2502 ha parado un hijo                                    \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502CLD_CONTINUED \u2502 un hijo parado ha continuado                         \u2502\n       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n       \u2502                    SIGPOLL                     \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502POLL_IN  \u2502 datos de entrada disponibles         \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502POLL_OUT \u2502 buffers de salida disponibles        \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502POLL_MSG \u2502 mensaje de entrada disponible        \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502POLL_ERR \u2502 error de E/S                         \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502POLL_PRI \u2502 entrada de alta prioridad disponible \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502POLL_HUP \u2502 dispositivo desconectado             \u2502\n       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n       La  llamada  sigprocmask  se  emplea  para  cambiar  la  lista  de  se\u00f1ales  bloqueadas  actualmente.  El\n       comportamiento de la llamada depende del valor de how, como sigue:\n\n              SIG_BLOCK\n                     El conjunto de se\u00f1ales bloqueadas es la uni\u00f3n del conjunto actual y el argumento set.\n\n              SIG_UNBLOCK\n                     Las  se\u00f1ales  en set se quitan del conjunto actual de se\u00f1ales bloqueadas. Es legal intentar\n                     el desbloqueo de una se\u00f1al que no est\u00e1 bloqueada.\n\n              SIG_SETMASK\n                     El conjunto de se\u00f1ales bloqueadas se pone seg\u00fan el argumento set.\n\n       Si oldset no es nulo, el valor anterior de la m\u00e1scara de se\u00f1al se guarda en oldset.\n\n       La llamada sigpending permite el examen de se\u00f1ales pendientes  (las  que  han  sido  producidas  mientras\n       estaban bloqueadas). La m\u00e1scara de se\u00f1al de las se\u00f1ales pendientes se guarda en set.\n\n       La  llamada sigsuspend reemplaza temporalmente la m\u00e1scara de se\u00f1al para el proceso con la dada por mask y\n       luego suspende el proceso hasta que se recibe una se\u00f1al.\n\nVALOR DEVUELTO\n       Las funciones sigaction, sigprocmask y sigpending devuelven 0 en caso de \u00e9xito y -1 en caso de error.  La\n       funci\u00f3n sigsuspend siempre devuelve -1, normalmente acompa\u00f1ado del error EINTR.\n\n", "ERRORES": "       EINVAL Se  ha especificado una se\u00f1al inv\u00e1lida. Esto tambi\u00e9n se genera si se hace un intento de cambiar la\n              acci\u00f3n para SIGKILL o SIGSTOP, que no pueden ser capturadas.\n\n       EFAULT act, oldact, set, oldset u mask apuntan a una zona de  memoria  que  no  forma  parte  v\u00e1lida  del\n              espacio de direcciones del proceso.\n\n       EINTR  La llamada al sistema ha sido interrumpida.\n\n", "OBSERVACIONES": "       No  es  posible  bloquear  SIGKILL  ni SIGSTOP con una llamada a sigprocmask.  Los intentos de hacerlo no\n       ser\u00e1n tenidos en cuenta, silenciosamente.\n\n       De acuerdo con POSIX, el comportamiento de un proceso est\u00e1 indefinido despu\u00e9s de que no haga caso de  una\n       se\u00f1al SIGFPE, SIGILL o SIGSEGV que no haya sido generada por las funciones kill() o raise().  La divisi\u00f3n\n       entera por cero da un  resultado  indefinido.   En  algunas  arquitecturas  generar\u00e1  una  se\u00f1al  SIGFPE.\n       (Tambi\u00e9n,  el  dividir  el  entero m\u00e1s negativo por -1 puede generar una se\u00f1al SIGFPE.)  No hacer caso de\n       esta se\u00f1al puede llevar a un bucle infinito.\n\n       POSIX (B.3.3.1.3) anula el establecimiento de SIG_IGN como acci\u00f3n para SIGCHLD.  Los  comportamientos  de\n       BSD  y  SYSV  difieren,  provocando  el fallo en Linux de aquellos programas BSD que asignan SIG_IGN como\n       acci\u00f3n para SIGCHLD.\n\n       La especificaci\u00f3n POSIX s\u00f3lo define  SA_NOCLDSTOP.   El  empleo  de  otros  valores  en  sa_flags  no  es\n       transportable.\n\n       La opci\u00f3n SA_RESETHAND es compatible con la de SVr4 del mismo nombre.\n\n       La  opci\u00f3n SA_NODEFER es compatible con la de SVr4 del mismo nombre bajo los n\u00facleos 1.3.9 y posteriores.\n       En n\u00facleos m\u00e1s viejos la implementaci\u00f3n de Linux permit\u00eda la recepci\u00f3n de cualquier se\u00f1al, no s\u00f3lo la que\n       est\u00e1bamos instalando (sustituyendo as\u00ed efectivament cualquier valor de sa_mask).\n\n       Los  nombres  SA_RESETHAND  y  SA_NODEFER  para  compatibilidad con SVr4 est\u00e1n presentes solamente en las\n       versiones de la biblioteca 3.0.9 y mayores.\n\n       La opci\u00f3n SA_SIGINFO viene especificada por POSIX.1b. El soporte para ella se a\u00f1adi\u00f3 en la versi\u00f3n 2.2 de\n       Linux.\n\n       sigaction puede llamarse con un segundo argumento nulo para saber el manejador de se\u00f1al en curso. Tambi\u00e9n\n       puede emplearse para comprobar si una se\u00f1al dada es v\u00e1lida para la m\u00e1quina donde se est\u00e1, llam\u00e1ndola  con\n       el segundo y el tercer argumento nulos.\n\n       Vea sigsetops(3) para detalles sobre manipulaci\u00f3n de conjuntos de se\u00f1ales.\n\nCONFORME A\n       POSIX, SVr4.  SVr4 no documenta la condici\u00f3n EINTR.\n\nSIN DOCUMENTAR\n       Antes  de  la  introducci\u00f3n  de  SA_SIGINFO  tambi\u00e9n era posible obtener informaci\u00f3n adicional, usando un\n       manejador sa_handler con el segundo argumento del tipo struct sigcontext.  Vea  las  fuentes  del  n\u00facleo\n       relevantes para m\u00e1s detalles.  Este uso est\u00e1 obsoleto en la actualidad.\n\nV\u00c9ASE TAMBI\u00c9N\n       kill(1),  kill(2),  killpg(2), pause(2), sigaltstack(2), raise(3), siginterrupt(3), signal(2), signal(7),\n       sigsetops(3), sigvec(2)\n\nLinux 2.4                                       29 diciembre 2001                                   SIGACTION(2)\n"},{"NOMBRE": "       sigwaitinfo, sigtimedwait - espera s\u00edncrona de se\u00f1ales encoladas\n\n", "SINOPSIS": "       #include <signal.h>\n\n       int sigwaitinfo(const sigset_t *set, siginfo_t *info);\n\n       int sigtimedwait(const sigset_t *set, siginfo_t *info, const struct timespec timeout);\n\n", "DESCRIPCION": "       sigwaitinfo()  suspende  la  ejecuci\u00f3n  del proceso invocador hasta que se comunica una de las se\u00f1ales en\n       set.  (Si una de las se\u00f1ales en set ya est\u00e1 siendo  esperada  por  el  proceso  invocador,  sigwaitinfo()\n       regresar\u00e1 inmediatamente con informaci\u00f3n sobre la se\u00f1al.)\n\n       sigwaitinfo()  elimina  la  se\u00f1al  comunicada  de  la lista de se\u00f1ales pendientes del proceso invocador y\n       devuelve el n\u00famero de se\u00f1al como resultado.  Si el argumento info  es  distinto  de  NULL,  devuelve  una\n       estructura del tipo siginfo_t (v\u00e9ase sigaction(2)) que contiene informaci\u00f3n sobre la se\u00f1al.\n\n       Las  se\u00f1ales  devueltas  via sigwaitinfo() son comunicadas en el orden habitual; v\u00e9ase signal(7) para m\u00e1s\n       detalles.\n\n       sigtimedwait() opera de la misma forma que sigwaitinfo() salvo que tiene un argumento adicional, timeout,\n       que habilita un l\u00edmite superior de tiempo en el que el proceso puede estar suspendido.  Este argumento es\n       del siguiente tipo:\n\n         struct timespec {\n             long    tv_sec;         /* seconds */\n             long    tv_nsec;        /* nanoseconds */\n         }\n\n       Si ambos campos de esta  estructura  tienen  valor  0,  se  realiza  un  sondeo:  sigtimedwait()  regresa\n       inmediatamente,  ya sea con informaci\u00f3n sobre una se\u00f1al pendiente para el invocador, o con un error si no\n       hab\u00eda se\u00f1ales pendientes en set.\n\nVALOR DEVUELTO\n       En caso de \u00e9xito, tanto sigwaitinfo() como sigtimedwait() devuelven un n\u00famero de se\u00f1al  (un  valor  mayor\n       que cero).  En caso de fallo ambas llamadas devuelven -1, y modifican errno para reflejar el error.\n\n", "ERRORES": "       EAGAIN No se comunic\u00f3 ninguna se\u00f1al en set dentro del per\u00edodo timeout especificado a sigtimedwait().\n\n       EINVAL timeout inv\u00e1lido.\n\n       EINTR  La  espera  fue  interrumpida  por un manejador de se\u00f1ales.  (Este manejador se ocupa de una se\u00f1al\n              distinta de las que hay en set.)\n\n", "OBSERVACIONES": "       Si se usa normalmente, el invocador bloquea las  se\u00f1ales  en  set  a  trav\u00e9s  de  una  llamada  previa  a\n       sigprocmask() (para que la acci\u00f3n por defecto para estas se\u00f1ales no tenga efecto si son comunicadas entre\n       sucesivas llamadas a sigwaitinfo()o sigtimedwait()) y no establece manejadores para estas se\u00f1ales.\n\n       POSIX deja como indefinido el significado de un valor NULL para el argumento timeout de sigtimedwait()  ,\n       permitiendo  la posibilidad de que \u00e9sta tenga el mismo significado que una llamada a sigwaitinfo(), y, de\n       hecho, as\u00ed es lo que est\u00e1 establecido en Linux.\n\nCONFORME A\n       POSIX 1003.1-2001\n\nV\u00c9ASE TAMBI\u00c9N\n       kill(2), sigaction(2), signal(2), sigpending(2), sigprocmask(2), sigqueue(2), signal(7), sigsetops(3)\n\nLinux 2.4.18                                      7 junio 2002                                    SIGWAITINFO(2)\n"},{"NOMBRE": "       sigvec - facilidades de se\u00f1ales del software BSD\n\n", "SINOPSIS": "       #include <bsd/signal.h>\n\n       int sigvec(int sig, struct sigvec *vec, struct sigvec *ovec);\n\n", "DESCRIPCION": "       Este interface se hace obsoleto por sigaction(2).\n\n       Bajo  Linux  sigvec  es una macro definida mediante sigaction, y sirve como la m\u00e1s tosca aproximaci\u00f3n del\n       interface BSD sigvec.\n\nCONFORME A\n       BSD, SVr4\n\nV\u00c9ASE TAMBI\u00c9N\n       sigaction(2), signal(2)\n\nLinux 1.3                                        31 agosto 1995                                        SIGVEC(2)\n"},{"NOMBRE": "       sigwaitinfo, sigtimedwait - espera s\u00edncrona de se\u00f1ales encoladas\n\n", "SINOPSIS": "       #include <signal.h>\n\n       int sigwaitinfo(const sigset_t *set, siginfo_t *info);\n\n       int sigtimedwait(const sigset_t *set, siginfo_t *info, const struct timespec timeout);\n\n", "DESCRIPCION": "       sigwaitinfo()  suspende  la  ejecuci\u00f3n  del proceso invocador hasta que se comunica una de las se\u00f1ales en\n       set.  (Si una de las se\u00f1ales en set ya est\u00e1 siendo  esperada  por  el  proceso  invocador,  sigwaitinfo()\n       regresar\u00e1 inmediatamente con informaci\u00f3n sobre la se\u00f1al.)\n\n       sigwaitinfo()  elimina  la  se\u00f1al  comunicada  de  la lista de se\u00f1ales pendientes del proceso invocador y\n       devuelve el n\u00famero de se\u00f1al como resultado.  Si el argumento info  es  distinto  de  NULL,  devuelve  una\n       estructura del tipo siginfo_t (v\u00e9ase sigaction(2)) que contiene informaci\u00f3n sobre la se\u00f1al.\n\n       Las  se\u00f1ales  devueltas  via sigwaitinfo() son comunicadas en el orden habitual; v\u00e9ase signal(7) para m\u00e1s\n       detalles.\n\n       sigtimedwait() opera de la misma forma que sigwaitinfo() salvo que tiene un argumento adicional, timeout,\n       que habilita un l\u00edmite superior de tiempo en el que el proceso puede estar suspendido.  Este argumento es\n       del siguiente tipo:\n\n         struct timespec {\n             long    tv_sec;         /* seconds */\n             long    tv_nsec;        /* nanoseconds */\n         }\n\n       Si ambos campos de esta  estructura  tienen  valor  0,  se  realiza  un  sondeo:  sigtimedwait()  regresa\n       inmediatamente,  ya sea con informaci\u00f3n sobre una se\u00f1al pendiente para el invocador, o con un error si no\n       hab\u00eda se\u00f1ales pendientes en set.\n\nVALOR DEVUELTO\n       En caso de \u00e9xito, tanto sigwaitinfo() como sigtimedwait() devuelven un n\u00famero de se\u00f1al  (un  valor  mayor\n       que cero).  En caso de fallo ambas llamadas devuelven -1, y modifican errno para reflejar el error.\n\n", "ERRORES": "       EAGAIN No se comunic\u00f3 ninguna se\u00f1al en set dentro del per\u00edodo timeout especificado a sigtimedwait().\n\n       EINVAL timeout inv\u00e1lido.\n\n       EINTR  La  espera  fue  interrumpida  por un manejador de se\u00f1ales.  (Este manejador se ocupa de una se\u00f1al\n              distinta de las que hay en set.)\n\n", "OBSERVACIONES": "       Si se usa normalmente, el invocador bloquea las  se\u00f1ales  en  set  a  trav\u00e9s  de  una  llamada  previa  a\n       sigprocmask() (para que la acci\u00f3n por defecto para estas se\u00f1ales no tenga efecto si son comunicadas entre\n       sucesivas llamadas a sigwaitinfo()o sigtimedwait()) y no establece manejadores para estas se\u00f1ales.\n\n       POSIX deja como indefinido el significado de un valor NULL para el argumento timeout de sigtimedwait()  ,\n       permitiendo  la posibilidad de que \u00e9sta tenga el mismo significado que una llamada a sigwaitinfo(), y, de\n       hecho, as\u00ed es lo que est\u00e1 establecido en Linux.\n\nCONFORME A\n       POSIX 1003.1-2001\n\nV\u00c9ASE TAMBI\u00c9N\n       kill(2), sigaction(2), signal(2), sigpending(2), sigprocmask(2), sigqueue(2), signal(7), sigsetops(3)\n\nLinux 2.4.18                                      7 junio 2002                                    SIGWAITINFO(2)\n"},{"NOMBRE": "       socket - crea un extremo de una comunicaci\u00f3n\n\n", "SINOPSIS": "       #include <sys/types.h>\n       #include <sys/socket.h>\n\n       int socket(int dominio, int tipo, int protocolo);\n\n", "DESCRIPCION": "       Socket crea un extremo de una comunicaci\u00f3n y devuelve un descriptor.\n\n       El  par\u00e1metro dominio especifica un dominio de comunicaciones. Esto selecciona la familia de protocol que\n       se usar\u00e1 para la comunicaci\u00f3n. Estas familias se definen en  <sys/socket.h>.   Los  formatos  actualmente\n       reconocidos incluyen:\n\n       Nombre             Prop\u00f3sito                         P\u00e1gina de manual\n       PF_UNIX,PF_LOCAL   Comunicaci\u00f3n local                unix(7)\n       PF_INET            Protocolos de Internet IPv4       ip(7)\n       PF_INET6           Protocolos de Internet IPv6\n       PF_IPX             Protocolos IPX - Novell\n       PF_NETLINK         Dispositivo  de  la  intefaz de   netlink(7)\n                          usuario del n\u00facleo\n       PF_X25             Protocolo ITU-T X.25 / ISO-8208   x25(7)\n       PF_AX25            Protocolo AX.25 de  radio  para\n                          aficionados\n       PF_ATMPVC          Acceso directo a PVCs ATM\n       PF_APPLETALK       Appletalk                         ddp(7)\n       PF_PACKET          Interfaz  de  paquetes  de bajo   packet(7)\n                          nivel\n\n       El conector tiene el tipo indicado, que especifica la sem\u00e1ntica de la comunicaci\u00f3n. Los  tipos  definidos\n       en la actualidad son:\n\n       SOCK_STREAM\n              Proporciona flujos de bytes basados en una conexi\u00f3n bidireccional secuenciada, confiable. Se puede\n              admitir un mecanismo de transmisi\u00f3n de datos fuera-de-banda.\n\n       SOCK_DGRAM\n              Admite datagramas (mensajes no confiables, sin conexi\u00f3n, de una longitud m\u00e1xima fija).\n\n       SOCK_SEQPACKET\n              Proporciona un camino de transmisi\u00f3n  de  datos  basado  en  conexi\u00f3n  bidireccional  secuenciado,\n              confiable, para datagramas de longitud m\u00e1xima fija; se requiere un consumidor para leer un paquete\n              entero con cada llamada al sistema de lectura.\n\n       SOCK_RAW\n              Proporciona acceso directo a los protocolos de red.\n\n       SOCK_RDM\n              Proporciona una capa de datagramas fiables que no garantiza el orden.\n\n       SOCK_PACKET\n              Obsoleto y no deber\u00eda utilizarse en programas nuevos. Vea packet(7).\n\n       Algunos tipos de conectores pueden no ser  implementados  por  todas  las  familias  de  protocolos.  Por\n       ejemplo, SOCK_SEQPACKET no est\u00e1 implementado para AF_INET.\n\n       El  protocolo  especifica un protocolo particular para ser usado con el conector. Normalmente s\u00f3lo existe\n       un protocolo que admita un tipo particular de conector dentro de una familia de protocolos dada, en  cuyo\n       caso  protocolo  se  puede  especificar  como  0.   Sin  embargo,  es  posible  que puedan existir varios\n       protocolos, en cuyo caso un protocolo particular  puede  especificarse  de  esta  manera.  El  n\u00famero  de\n       protocolo  a  emplear  es  espec\u00edfico  al  \u201cdominio de comunicaci\u00f3n\u201d en el que la comunicaci\u00f3n va a tener\n       lugar; vea protocols(5).  Consulte getprotoent(3) para ver c\u00f3mo asociar una cadenas con el nombre  de  un\n       protocolo a un n\u00famero de protocolo.\n\n       Los  conectores  del  tipo  SOCK_STREAM son flujos de bytes bidireccionales, similares a tuber\u00edas, que no\n       conservan los l\u00edmites de registro. Un conector de flujo debe estar en un estado conectado  antes  de  que\n       cualquier  dato  pueda  ser  enviado o recibido en \u00e9l. Se crea una conexi\u00f3n con otro conector mediante la\n       llamada connect(2).  Una vez hecha la conexi\u00f3n, los datos pueden transferirse utilizando llamadas read(2)\n       y  write(2)  o alguna variante de las llamadas send(2) y recv(2).  Cuando una sesi\u00f3n se ha completado, se\n       puede efectuar un close(2).  Los datos fuera-de-banda pueden transmitirse tambi\u00e9n  como  se  describe  en\n       send(2) y recibirse seg\u00fan se describe en recv(2).\n\n       Los  protocolos  de comunicaciones que implementan un SOCK_STREAM aseguran que los datos no se pierden ni\n       se duplican. Si un trozo de dato para el cual el protocolo de la pareja tiene espacio de b\u00fafer  no  puede\n       ser  transmitido  satisfactoriamente en un per\u00edodo razonable de tiempo, entonces la conexi\u00f3n se considera\n       muerta. Cuando se activa SO_KEEPALIVE en el conector el protocolo comprueba de una manera espec\u00edfica  del\n       protocolo  si  el otro extremo todav\u00eda est\u00e1 vivo. Se lanza una se\u00f1al SIGPIPE si un proceso env\u00eda o recibe\n       en un flujo roto; esto provoca que procesos simples, que no manejan la  se\u00f1al,  acaben.   Los  conectores\n       SOCK_SEQPACKET  emplean  las  mismas llamadas al sistema que los SOCK_STREAM.  La \u00fanica diferencia es que\n       las llamadas a read(2) devolver\u00e1n solamente la cantidad de datos pedidos, y los que queden en el  paquete\n       que llega se perder\u00e1n. Tambi\u00e9n se conservar\u00e1n todos los l\u00edmites de mensaje en los datagramas que lleguen.\n\n       Los  conectores SOCK_DGRAM y SOCK_RAW permiten el env\u00edo de datagramas a los correspondientes nombrados en\n       llamadas a send(2).  Los datagramas se reciben generalmente con recvfrom(2), que  devuelve  el  siguiente\n       datagrama con su direcci\u00f3n de retorno.\n\n       SOCK_PACKET  es un tipo de conector obsoleto para recibir paquetes crudos directamente desde el manejador\n       de dispositivo. Use packet(7) en su lugar.\n\n       Una llamada a fcntl(2) con el argumento F_SETOWN puede  utilizarse  para  especificar  que  un  grupo  de\n       proceso  reciba  una  se\u00f1al  SIGURG cuando lleguen los datos fuera-de-banda o la se\u00f1al SIGPIPE cuando una\n       conexi\u00f3n SOCK_STREAM se rompa inesperadamente. Tambi\u00e9n puede usarse para configurar el proceso o grupo de\n       procesos  que recibir\u00e1n la E/S y la notificaci\u00f3n as\u00edncrona de los eventos de E/S a trav\u00e9s de SIGIO.  Usar\n       F_SETOWN es equivalente a una llamada a ioctl(2) con el argumento FIOSETOWN o SIOCSPGRP.\n\n       Cuando la red se\u00f1ala una condici\u00f3n de error al m\u00f3dulo del protocolo (por ejemplo, usando un mensaje  ICMP\n       para  IP)  se  activa  la  bandera  de error pendiente para el conector. La siguiente operaci\u00f3n sobre ese\n       conector devolver\u00e1 el c\u00f3digo de error del error pendiente. Para algunos protocolos es  posible  habilitar\n       una cola de error por conector para obtener informaci\u00f3n detallada del error. Vea IP_RECVERR en ip(7).\n\n       La operaci\u00f3n de los conectores se controla por opciones en el nivel de los conectores.  Estas opciones se\n       definen en <sys/socket.h>.  Las funciones setsockopt(2) y getsockopt(2)  se  emplean  para  establecer  y\n       obtener opciones, respectivamente.\n\nVALOR DEVUELTO\n       Se devuelve un -1 si ocurre un error; en otro caso el valor devuelto es un descriptor para referenciar el\n       conector.\n\n", "ERRORES": "       EPROTONOSUPPORT\n              El tipo de protocolo, o el protocolo especificado, no es reconocido dentro de este dominio.\n\n       EAFNOSUPPORT\n              La implementaci\u00f3n no soporta la familia de direcciones especificada.\n\n       ENFILE No hay suficiente memoria en el n\u00facleo para reservar una nueva estructura de conector.\n\n       EMFILE Se ha desbordado la tabla de ficheros del proceso.\n\n       EACCES Se deniega el permiso para crear un conector del tipo o protocolo especificado.\n\n       ENOBUFS  o  ENOMEM\n              No hay suficiente memoria disponible. El conector no puede crearse hasta que no queden libres  los\n              recursos suficientes.\n\n       EINVAL Protocolo desconocido o familia de protocolo no disponible.\n\n       Los m\u00f3dulos de los protocolos subyacentes pueden generar otros errores.\n\nCONFORME A\n       4.4BSD (la llamada a funci\u00f3n socket apareci\u00f3 en 4.2BSD). Generalmente transportable a o desde sistemas no\n       BSD que admitan clones de la capa de conectores de BSD (incluyendo variantes System V).\n\n", "NOTA": "       Las constantes evidentes usadas en BSD 4.* para las familias de protocolos son  PF_UNIX,  PF_INET,  etc.,\n       mientras  que AF_UNIX, etc. se usan para las familias de direcciones. Sin embargo, ya la p\u00e1gina de manual\n       BSD promete: \"La familia de protocolos generalmente es la misma que la  familia  de  direcciones\"  y  los\n       est\u00e1ndares subsiguientes usan AF_* en todas partes.\n\n", "FALLOS": "       SOCK_UUCP todav\u00eda no est\u00e1 implementado.\n\nV\u00c9ASE TAMBI\u00c9N\n       accept(2),  bind(2),  connect(2),  fcntl(2),  getpeername(2),  getsockname(2),  getsockopt(2),  ioctl(2),\n       listen(2), read(2), recv(2), select(2), send(2), shutdown(2),  socketpair(2),  write(2),  getprotoent(3),\n       ip(7), socket(7), tcp(7), udp(7), unix(7)\n\n       \u201cAn  Introductory  4.3  BSD  Interprocess  Communication  Tutorial\u201d  est\u00e1  reimpreso en UNIX Programmer's\n       Supplementary Documents Volume 1.\n\n       \u201cBSD Interprocess Communication Tutorial\u201d est\u00e1 reimpreso en  UNIX  Programmer's  Supplementary  Documents\n       Volume 1.\n\nP\u00e1gina man de Linux                               24 abril 1999                                        SOCKET(2)\n"},{"NOMBRE": "       socketcall - llamadas al sistema relativas a z\u00f3calos\n\n", "SINOPSIS": "       int socketcall(int llamada, unsigned long *args);\n\n", "DESCRIPCION": "       socketcall  es  un punto de entrada al n\u00facleo com\u00fan para las llamadas al sistema relativas a z\u00f3calos.  El\n       argumento llamada determina a qu\u00e9 funci\u00f3n de z\u00f3calos llamar.  El par\u00e1metro args apunta a  un  bloque  que\n       contiene los argumentos reales, que se pasan tal cual a la funci\u00f3n apropiada.\n\n       Los  programas  de  usuario deber\u00edan llamar a las funciones apropiadas por sus nombres usuales. Solamente\n       los implementadores de la biblioteca est\u00e1ndar y los buenos programadores del n\u00facleo necesitan conocer  la\n       existencia de socketcall.\n\nCONFORME A\n       Esta llamada es espec\u00edfica de Linux, y no deber\u00eda emplearse en programas pretendidamente transportables.\n\nV\u00c9ASE TAMBI\u00c9N\n       accept(2),  bind(2),  connect(2),  getpeername(2),  getsockname(2),  getsockopt(2),  listen(2),  recv(2),\n       recvfrom(2), send(2), sendto(2), setsockopt(2), shutdown(2), socket(2), socketpair(2)\n\nLinux 1.2.4                                      17 Febrero 1998                                          IPC(2)\n"},{"NOMBRE": "       socketpair - crea un par de conectores conectados\n\n", "SINOPSIS": "       #include <sys/types.h>\n       #include <sys/socket.h>\n\n       int socketpair(int d, int tipo, int protocolo, int sv[2]);\n\n", "DESCRIPCION": "       La  llamada  a  socketpair  crea  una pareja sin nombre de conectores (`sockets', enchufes) en el dominio\n       especificado por d, del tipo especificado por tipo, y empleando opcionalmente el  protocolo  especificado\n       por  protocolo.  Los descriptores utilizados para referenciar los nuevos conectores se devuelven en sv[0]\n       y sv[1].  Los dos conectores son indistinguibles.\n\nVALOR DEVUELTO\n       En caso de \u00e9xito, se devuelve cero. En caso de error, se  devuelve  -1  y  se  pone  en  errno  un  valor\n       apropiado.\n\n", "ERRORES": "       EMFILE Demasiados descriptores est\u00e1n en uso por este proceso.\n\n       EAFNOSUPPORT\n              La familia de direcciones especificada no est\u00e1 admitida en esta m\u00e1quina.\n\n       EPROTONOSUPPORT\n              El protocolo especificado no est\u00e1 admitido en esta m\u00e1quina.\n\n       EOPNOTSUPP\n              El protocolo especificado no admite la creaci\u00f3n de parejas de conectores.\n\n       EFAULT La direcci\u00f3n sv no especifica una parte v\u00e1lida del espacio de direcciones del proceso.\n\nCONFORME A\n       4.4BSD  (la  llamada  al  sistema  socketpair  apareci\u00f3  en 4.2BSD). Generalmente transportable a o desde\n       sistemas no BSD que admitan cl\u00f3nicos de la capa de conectores BSD (incluyendo variantes System V).\n\n", "OBSERVACIONES": "       En Linux, el \u00fanico dominio soportado por esta llamada es AF_UNIX (o con el mismo significado,  AF_LOCAL).\n       (La mayor\u00eda de implementaciones tienen la misma restricci\u00f3n..)\n\nV\u00c9ASE TAMBI\u00c9N\n       read(2), write(2), pipe(2), socket(2), unix(7)\n\nBSD                                              3 febrero 1998                                    SOCKETPAIR(2)\n"},{"NOMBRE": "       signal - manejo de se\u00f1ales en ANSI C\n\n", "SINOPSIS": "       #include <signal.h>\n\n       typedef void (*sighandler_t)(int);\n\n       sighandler_t signal(int signum, sighandler_t handler);\n\n", "DESCRIPCION": "       La llamada al sistema signal() instala un nuevo manejador de se\u00f1ales para la se\u00f1al con n\u00famero signum.  El\n       manejador de se\u00f1ales queda establecido a sighandler que puede ser una funci\u00f3n especificada por el usuario\n       o bien SIG_IGN o SIG_DFL.\n\n       Cuando  llega  una  se\u00f1al  con  n\u00famero  signum ocurre lo siguiente.  Si el manejador correspondiente est\u00e1\n       establecido a SIG_IGN, la se\u00f1al es ignorada.  Si el manejador est\u00e1 establecido a SIG_DFL, se  realiza  la\n       acci\u00f3n  por  defecto asociada a la se\u00f1al (vea signal(7)).  Finalmente, si el manejador est\u00e1 establecido a\n       una funci\u00f3n sighandler lo primero que se hace es o bien restablecer el manejador a SIG_DFL o  un  bloqueo\n       de la se\u00f1al que depende de la implementaci\u00f3n, invocando despu\u00e9s a sighandler con el argumento signum.\n\n       Usar una funci\u00f3n manejadora de se\u00f1ales para una se\u00f1al se llama \"atrapar la se\u00f1al\".  Las se\u00f1ales\n\nLinux 2.2                                         28 abril 2000                                        SIGNAL(2)\n"},{"NOMBRE": "       stat - display file or file system status\n\n", "SINOPSIS": "       stat [OPTION]... FILE...\n\n", "DESCRIPCION": "       Display file or file system status.\n\n       Mandatory arguments to long options are mandatory for short options too.\n\n       -L, --dereference\n              follow links\n\n       -f, --file-system\n              display file system status instead of file status\n\n       --cached=MODE\n              specify how to use cached attributes; useful on remote file systems. See MODE below\n\n       -c  --format=FORMAT\n              use the specified FORMAT instead of the default; output a newline after each use of FORMAT\n\n       --printf=FORMAT\n              like --format, but interpret backslash escapes, and do not output a mandatory trailing newline; if\n              you want a newline, include \\n in FORMAT\n\n       -t, --terse\n              print the information in terse form\n\n       --help display this help and exit\n\n       --version\n              output version information and exit\n\n       The --cached MODE argument can be; always, never, or default.  `always` will  use  cached  attributes  if\n       available,  while `never` will try to synchronize with the latest attributes, and `default` will leave it\n       up to the underlying file system.\n\n       The valid format sequences for files (without --file-system):\n\n       %a     permission bits in octal (note '#' and '0' printf flags)\n\n       %A     permission bits and file type in human readable form\n\n       %b     number of blocks allocated (see %B)\n\n       %B     the size in bytes of each block reported by %b\n\n       %C     SELinux security context string\n\n       %d     device number in decimal\n\n       %D     device number in hex\n\n       %f     raw mode in hex\n\n       %F     file type\n\n       %g     group ID of owner\n\n       %G     group name of owner\n\n       %h     number of hard links\n\n       %i     inode number\n\n       %m     mount point\n\n       %n     file name\n\n       %N     quoted file name with dereference if symbolic link\n\n       %o     optimal I/O transfer size hint\n\n       %s     total size, in bytes\n\n       %t     major device type in hex, for character/block device special files\n\n       %T     minor device type in hex, for character/block device special files\n\n       %u     user ID of owner\n\n       %U     user name of owner\n\n       %w     time of file birth, human-readable; - if unknown\n\n       %W     time of file birth, seconds since Epoch; 0 if unknown\n\n       %x     time of last access, human-readable\n\n       %X     time of last access, seconds since Epoch\n\n       %y     time of last data modification, human-readable\n\n       %Y     time of last data modification, seconds since Epoch\n\n       %z     time of last status change, human-readable\n\n       %Z     time of last status change, seconds since Epoch\n\n       Valid format sequences for file systems:\n\n       %a     free blocks available to non-superuser\n\n       %b     total data blocks in file system\n\n       %c     total file nodes in file system\n\n       %d     free file nodes in file system\n\n       %f     free blocks in file system\n\n       %i     file system ID in hex\n\n       %l     maximum length of filenames\n\n       %n     file name\n\n       %s     block size (for faster transfers)\n\n       %S     fundamental block size (for block counts)\n\n       %t     file system type in hex\n\n       %T     file system type in human readable form\n\n   --terse is equivalent to the following FORMAT:\n              %n %s %b %f %u %g %D %i %h %t %T %X %Y %Z %W %o %C\n\n   --terse --file-system is equivalent to the following FORMAT:\n              %n %i %l %t %s %S %b %f %a %c %d\n\n       NOTE: your shell may have its own version of stat, which usually supersedes the version  described  here.\n       Please refer to your shell's documentation for details about the options it supports.\n\n", "AUTOR": "       Written by Michael Meskes.\n\nREPORTING BUGS\n       GNU coreutils online help: <https://www.gnu.org/software/coreutils/>\n       Report any translation bugs to <https://translationproject.org/team/>\n\n", "COPYRIGHT": "       Copyright  \u00a9  2020  Free  Software  Foundation,  Inc.   License  GPLv3+:  GNU  GPL  version  3  or  later\n       <https://gnu.org/licenses/gpl.html>.\n       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to  the  extent\n       permitted by law.\n\nSEE ALSO\n       stat(2), statfs(2), statx(2)\n\n       Full documentation <https://www.gnu.org/software/coreutils/stat>\n       or available locally via: info '(coreutils) stat invocation'\n\nGNU coreutils 8.32                                  July 2021                                            STAT(1)\n"},{"NOMBRE": "       statfs, fstatfs - obtiene estad\u00edsticas del sistema de ficheros\n\n", "SINOPSIS": "       #include <sys/vfs.h>\n\n       int statfs(const char *path, struct statfs *buf);\n       int fstatfs(int fd, struct statfs *buf);\n\n", "DESCRIPCION": "       statfs devuelve informaci\u00f3n de un sistema de ficheros montado.  path el el camino de cualquier fichero en\n       el sistema de ficheros montado.  buf es un puntero a una estructura statfs definida como sigue:\n\n              struct statfs {\n                 long    f_type;     /* tipo sistema ficheros (ver bajo) */\n                 long    f_bsize;    /* tama\u00f1o \u00f3ptimo de bloque\n                                        de transferencia */\n                 long    f_blocks;   /* total de bloques de datos en el sistema\n                                        de ficheros */\n                 long    f_bfree;    /* bloques libres en el sf */\n                 long    f_bavail;   /* bloques libres disponibles para\n                                        no-superusuarios */\n                 long    f_files;    /* total de nodos de ficheros en el sf */\n                 long    f_ffree;    /* nodos de ficheros libres en el sf */\n                 fsid_t  f_fsid;     /* id del sistema de ficheros */\n                 long    f_namelen;  /* longitud m\u00e1xima de nombre de ficheros */\n                 long    f_spare[6]; /* de sobra, para m\u00e1s tarde */\n              };\n\n       Tipos de sistema de ficheros:\n              linux/affs_fs.h:\n                 AFFS_SUPER_MAGIC      0xADFF\n              linux/efs_fs.h:\n                 EFS_SUPER_MAGIC       0x00414A53\n              linux/ext_fs.h:\n                 EXT_SUPER_MAGIC       0x137D\n              linux/ext2_fs.h:\n                 EXT2_OLD_SUPER_MAGIC  0xEF51\n                 EXT2_SUPER_MAGIC      0xEF53\n              linux/hpfs_fs.h:\n                 HPFS_SUPER_MAGIC      0xF995E849\n              linux/iso_fs.h:\n                 ISOFS_SUPER_MAGIC     0x9660\n              linux/minix_fs.h:\n                 MINIX_SUPER_MAGIC     0x137F /* minix orig.*/\n                 MINIX_SUPER_MAGIC2    0x138F /* minix 30 carac.*/\n                 MINIX2_SUPER_MAGIC    0x2468 /* minix V2 */\n                 MINIX2_SUPER_MAGIC2   0x2478 /* minix V2, nombres 30 carac. */\n              linux/msdos_fs.h:\n                 MSDOS_SUPER_MAGIC     0x4d44\n              linux/ncp_fs.h:\n                 NCP_SUPER_MAGIC       0x564c\n              linux/nfs_fs.h:\n                 NFS_SUPER_MAGIC       0x6969\n              linux/proc_fs.h:\n                 PROC_SUPER_MAGIC      0x9fa0\n              linux/smb_fs.h:\n                 SMB_SUPER_MAGIC       0x517B\n              linux/sysv_fs.h:\n                 XENIX_SUPER_MAGIC     0x012FF7B4\n                 SYSV4_SUPER_MAGIC     0x012FF7B5\n                 SYSV2_SUPER_MAGIC     0x012FF7B6\n                 COH_SUPER_MAGIC       0x012FF7B7\n              linux/ufs_fs.h:\n                 UFS_MAGIC             0x00011954\n              linux/xfs_fs.h:\n                 XFS_SUPER_MAGIC       0x58465342\n              linux/xia_fs.h:\n                 _XIAFS_SUPER_MAGIC    0x012FD16D\n\n       Nadie sabe lo que f_fsid se supone que contiene (vea m\u00e1s abajo).\n\n       Los campos no definidos para un sistema de ficheros particular se ponen a 0.  fstatfs devuelve  la  misma\n       informaci\u00f3n sobre un fichero abierto referenciado por el descriptor fd.\n\nVALOR DEVUELTO\n       Si hubo \u00e9xito se devuelve cero. Si hubo error, se devuelve -1, y errno es actualizado apropiadamente.\n\n", "ERRORES": "       Para statfs:\n\n       ENOTDIR\n              Un componente del camino path no es un directorio.\n\n       ENAMETOOLONG\n              path es demasiado largo.\n\n       ENOENT El fichero al que se refiere path no existe.\n\n       EACCES El permiso de b\u00fasqueda se deniega para un componente del camino path.\n\n       ELOOP  Se encontraron demasiados enlaces simb\u00f3licos al traducir path.\n\n       EFAULT buf o path apuntan a una direcci\u00f3n inv\u00e1lida.\n\n       EIO    Ocurri\u00f3 un error de E/S mientras se le\u00eda o escrib\u00eda en el sistema de ficheros.\n\n       ENOMEM No hab\u00eda suficiente memoria disponible en el n\u00facleo.\n\n       ENOSYS El sistema de ficheros sobre el que se encuentra path no soporta statfs.\n\n       Para fstatfs:\n\n       EBADF  fd no es un descriptor de fichero v\u00e1lido.\n\n       EFAULT buf apunta a una direcci\u00f3n inv\u00e1lida.\n\n       EIO    Ocurri\u00f3 un error de E/S mientras se le\u00eda o escrib\u00eda en el sistema de ficheros.\n\n       ENOSYS El sistema de ficheros sobre el que est\u00e1 abierto fd no soporta statfs.\n\nCONFORME A\n       La versi\u00f3n de Linux de statfs est\u00e1 inspirada en la de 4.4BSD (aunque no usan la misma estructura).\n\n   f_fsid\n       Solaris  y  POSIX  1003.1-2001  poseen una llamada al sistema statvfs que devuelve una estructura statvfs\n       (definida en <sys/statvfs.h>) con un campo f_fsid de tipo unsigned long .  Linux, SunOS,  HPUX  y  4.4BSD\n       poseen  una llamada al sistema statfs que devuelve una estructura statfs (definida en <sys/vfs.h>) con un\n       campo f_fsid de tipo fsid_t , donde fsid_t est\u00e1 definido como struct { int val[2]; }.  Lo mismo se aplica\n       para FreeBSD, salvo que utiliza el fichero de cabecera <sys/mount.h>.\n\n       La  idea general es que f_fsid contenga informaci\u00f3n aleatoria de manera que el par (f_fsid,ino) determine\n       un\u00edvocamente un fichero.  Algunos SOs usan (una variante de) el n\u00famero de dispositivo,  o  el  n\u00famero  de\n       dispositivo  combinado  con  el  tipo  de  sistema de ficheros.  Muchos SOs restringen el acceso al campo\n       f_fsid solamente al superusuario (poni\u00e9ndolo a cero para aquellos usuarios sin privilegios), ya que  este\n       campo  es  usado  en  el  manejo  de ficheros del sistema de ficheros cuando es exportado mediante NFS, y\n       conceder acceso a \u00e9l es un problema de seguridad.\n\n       En algunos SOs fsid puede ser usado como segundo par\u00e1metro en la llamada al sistema sysfs().\n\nV\u00c9ASE TAMBI\u00c9N\n       stat(2)\n\nLinux 2.0.30                                     21 agosto 1997                                        STATFS(2)\n"},{"NOMBRE": "       stime - pone la hora y fecha\n\n", "SINOPSIS": "       #define _SVID_SOURCE /* glibc2 necesita \u00e9sto */\n       #include <time.h>\n\n       int stime(time_t *t);\n\n", "DESCRIPCION": "       stime  pone la hora y fecha seg\u00fan la idea que el sistema tiene de ello. La hora/fecha, a la que apunta t,\n       se mide en segundos transcurridos desde \"La \u00c9poca\", las 00:00:00 GMT del 1 de  Enero  de  1970.   stime()\n       s\u00f3lo puede ser llamado por el s\u00faper-usuario.\n\nVALOR DEVUELTO\n       En  caso  de  \u00e9xito,  se  devuelve  cero.  En  caso  de error, se devuelve -1 y se pone en errno un valor\n       apropiado.\n\n", "ERRORES": "       EPERM  El que llama a la funci\u00f3n no es el s\u00faper-usuario.\n\nCONFORME A\n       SVr4, SVID, X/OPEN\n\n", "OBSERVACIONES": "       Bajo glibc2, <time.h> solamente proporciona un prototipo cuando _SVID_SOURCE est\u00e1 definida.\n\nV\u00c9ASE TAMBI\u00c9N\n       date(1), settimeofday(2)\n\nLinux 0.99.11                                     24 julio 1993                                         STIME(2)\n"},{"NOMBRE": "       stty - Cambia y escribe las opciones de la comunicaci\u00f3n con los terminales\n\n", "SINOPSIS": "       stty [opci\u00f3n...]\n       stty {-a,--all,-g,--help,--save,--version}\n\n", "DESCRIPCION": "       Este  documento  ya  no  es  mantenido y puede ser impreciso o incompleto. La documentaci\u00f3n de Texinfo es\n       ahora la fuente de informaci\u00f3n recomendada.\n\n       Esta p\u00e1gina del manual documenta la versi\u00f3n GNU de stty.  Si no  se  especifica  ning\u00fan  argumento,  stty\n       escribe  por la salida est\u00e1ndard la velocidad en baudios, el n\u00famero de disciplina de la l\u00ednea (\u00fanicamente\n       en sistemas que lo soportan) y las opciones de la l\u00ednea que han sido modificados respecto a  los  valores\n       especificados  mediante  el conmando `stty sane'. La lectura y el ajuste de los par\u00e1metros son ejecutados\n       en la l\u00ednea del terminal conectada a la entrada est\u00e1ndar.\n\n       stty acepta los siguientes argumentos, no considerados como opciones, que cambian  aspectos  relativos  a\n       como  opera  la  l\u00ednea  del terminal.  Los argumentos precedidos por `[-]' pueden ser desactivados si van\n       precedidos por `-'. Algunos argumentos no est\u00e1n disponibles  en  todos  los  sistemas,  ya  que  utilizan\n       extensiones que no son POSIX.  Dichos argumentos est\u00e1n marcados en este documento con `(np)'.\n\n       Opciones de control:\n\n       [-]parenb\n              Generar un bit de paridad en las salidas y espera un bit de paridad en las entradas.\n\n       [-]parodd\n              Fijar la paridad como impar (incluso si se especifica `-').\n\n       cs5 cs6 cs7 cs8\n              Fijar el tama\u00f1o del car\u00e1cter en 5, 6, 7, u 8 bits respectivamente.\n\n       [-]hupcl [-]hup\n              Enviar una se\u00f1al de colgado (SIGHUP) cuando el \u00faltimo proceso cierra el terminal.\n\n       [-]cstopb\n              Usar dos bits de parada por cada car\u00e1cter (\u00fanicamente uno si se especifica `-').\n\n       [-]cread\n              Permitir recibir entradas.\n\n       [-]clocal\n              Ignorar las se\u00f1ales de control del m\u00f3dem.\n\n       [-]crtscts (np)\n              Permitir el control mediante las se\u00f1ales RTS/CTS.\n\n       Opciones de entrada:\n\n       [-]ignbrk\n              Ignorar los car\u00e1cteres de interrupci\u00f3n.\n\n       [-]brkint\n              Los car\u00e1cteres de interrupci\u00f3n provocar\u00e1n una se\u00f1al de interrupci\u00f3n.\n\n       [-]ignpar\n              Ignorar los car\u00e1cteres con errores de paridad.\n\n       [-]parmrk\n              Marcar los errores de paridad (con una secuencia de 255-0-car\u00e1cteres).\n\n       [-]inpck\n              Activar el chequeo de la paridad de las entradas.\n\n       [-]istrip\n              Poner a cero el bit alto (el octavo) de los car\u00e1cteres de entrada.\n\n       [-]inlcr\n              Traducir los car\u00e1cteres de nueva l\u00ednea a car\u00e1cteres de retorno de carro.\n\n       [-]igncr\n              Ignorar los retornos de carro.\n\n       [-]icrnl\n              Traducir los car\u00e1cteres de retorno de carro a car\u00e1cteres de nueva l\u00ednea.\n\n       [-]ixon\n              Activar el control del flujo mediante XON/XOFF.\n\n       [-]ixoff [-]tandem\n              Permitir  el  env\u00edo  de  un car\u00e1cter de parada cuando la memoria intermedia de entrada del sistema\n              est\u00e9 casi llena, y un car\u00e1cter de comienzo cuando dicha memoria  vuelve  a  estar  casi  vac\u00eda  de\n              nuevo.\n\n       [-]iuclc (np)\n              Traducir los car\u00e1cteres en may\u00fasculas a car\u00e1cteres en min\u00fasculas.\n\n       [-]ixany (np)\n              Permitir  que  cualquier  car\u00e1cter  recomience la salida (\u00fanicamente el car\u00e1cter de comienzo si se\n              especifica `-').\n\n       [-]imaxbel (np)\n              Emitir un pitido y no vaciar la memoria intermedia de entrada si un car\u00e1cter  llega  cuando  dicha\n              memoria se encuentra llena.\n\n       Opciones de salida:\n\n       [-]opost\n              Postproceso de salida.\n\n       [-]olcuc (np)\n              Traducir los car\u00e1cteres en min\u00fasculas a car\u00e1cteres en may\u00fasculas.\n\n       [-]ocrnl (np)\n              Traducir los car\u00e1cteres de retorno de carro a car\u00e1cteres de nueva l\u00ednea.\n\n       [-]onlcr (np)\n              Traducir los car\u00e1cteres de nueva l\u00ednea a car\u00e1cteres de retorno de carro.\n\n       [-]onocr (np)\n              No escribir los retornos de carro en la primera columna.\n\n       [-]onlret (np)\n              Los car\u00e1cteres de nueva l\u00ednea producen un retorno de carro.\n\n       [-]ofill (np)\n              Rellenar con car\u00e1cteres (padding) en vez de utilizar tiempos para las esperas.\n\n       [-]ofdel (np)\n              Usar car\u00e1cteres de borrado para rellenar en vez de car\u00e1cteres nulos.\n\n       nl1 nl0 (np)\n              Estilo a utilizar para los retrasos de nueva l\u00ednea.\n\n       cr3 cr2 cr1 cr0 (np)\n              Estilo a utilizar para los retrasos de retorno de carro.\n\n       tab3 tab2 tab1 tab0 (np)\n              Estilo a utilizar para los retrasos de tabulaci\u00f3n horizontal.\n\n       bs1 bs0 (np)\n              Estilo a utilizar para los retrasos de backspace.\n\n       vt1 vt0 (np)\n              Estilo a utilizar para los retrasos de tabulaci\u00f3n vertical.\n\n       ff1 ff0 (np)\n              Estilo a utilizar para los retrasos de salto de p\u00e1gina.\n\n       Opciones locales:\n\n       [-]isig\n              Permitir los car\u00e1cteres especiales INTERRUPT, QUIT y SUSPEND.\n\n       [-]icanon\n              Permitir los car\u00e1cteres especiales ERASE, KILL, WERASE y RPRNT.\n\n       [-]iexten\n              Permitir car\u00e1cteres especiales no POSIX.\n\n       [-]echo\n              Hacer eco de los car\u00e1cteres de entrada.\n\n       [-]echoe, [-]crterase\n              Hacer eco de los car\u00e1cteres de borrado tales como backspace-espacio-backspace.\n\n       [-]echok\n              Escribir una nueva l\u00ednea despu\u00e9s de un car\u00e1cter KILL.\n\n       [-]echonl\n              Escribir una nueva l\u00ednea incluso si no se est\u00e1 escribiendo ning\u00fan otro car\u00e1cter.\n\n       [-]noflsh\n              No  permitir  el  vaciado  de  la  memoria  intermedia despu\u00e9s de los car\u00e1cteres especiales QUIT e\n              INTERRUPT.\n\n       [-]xcase (np)\n              Permitir la entrada y salida de car\u00e1cteres en may\u00fasculas siempre que se preceda el correspondiente\n              car\u00e1cter en min\u00fascula con `\\', y \u00fanicamente si la opci\u00f3n icanon est\u00e1 activada.\n\n       [-]tostop (np)\n              Detener  los  trabajos  que  se  est\u00e1n  ejecutando  en  segundo  plano que intenten escribir en el\n              terminal.\n\n       [-]echoprt [-]prterase (np)\n              Hacer eco de los car\u00e1cteres borrados \u00faltimamente, entre `\\' y `/'.\n\n       [-]echoctl [-]ctlecho (np)\n              Hacer eco de los car\u00e1cteres de control usando notaci\u00f3n circunfleja (`^c') en vez de mostrar dichos\n              car\u00e1cteres de manera literal.\n\n       [-]echoke [-]crtkill (np)\n              Hacer  eco  del  car\u00e1cter  especial  KILL de manera que se borre cada car\u00e1cter de la l\u00ednea como se\n              indica en las opciones echoprt y echoe, en vez de como se indica en las opciones echoctl y echok.\n\n       Opciones combinadas:\n\n       [-]evenp [-]parity\n              Igual que parenb -parodd cs7. Con `-', igual que -parenb cs8.\n\n       [-]oddp\n              Igual que parenb parodd cs7. Con `-', igual que -parenb cs8.\n\n       [-]nl  Igual que -icrnl -onlcr. Con `-', igual que icrnl -inlcr -igncr onlcr -ocrnl -onlret.\n\n       ek     Devolver los car\u00e1cteres especiales ERASE y KILL a su valor por defecto.\n\n       sane   Igual que cread -ignbrk brkint -inlcr -igncr icrnl  -ixoff  -iuclc  -ixany  imaxbel  opost  -olcuc\n              -ocrnl  onlcr  -onocr -onlret -ofill -ofdel nl0 cr0 tab0 bs0 vt0 ff0 isig icanon iexten echo echoe\n              echok -echonl -noflsh -xcase -tostop -echoprt echoctl echoke, adem\u00e1s devuelve todos los car\u00e1cteres\n              especiales a su valor por defecto.\n\n       [-]cooked\n              Igual  que brkint ignpar istrip icrnl ixon opost isig icanon, adem\u00e1s devuelve los car\u00e1cteres EOF y\n              EOL a su valor por defecto si sus valores respectivos son los mismos  que  los  car\u00e1cteres  min  y\n              time. Con `-' esta opci\u00f3n se comporta igual que la opci\u00f3n raw.\n\n       [-]raw Igual  que -ignbrk -brkint -ignpar -parmrk -inpck -istrip -inlcr -igncr -icrnl -ixon -ixoff -iuclc\n              -ixany -imaxbel -opost -isig -icanon -xcase min 1 time 0.  Con `-', esta opci\u00f3n se comporta  igual\n              que la opci\u00f3n cooked.\n\n       [-]cbreak\n              Igual que -icanon.\n\n       [-]pass8\n              Igual  que  -parenb  -istrip  cs8.  Con `-', esta opci\u00f3n se comporta igual que las opciones parenb\n              istrip cs7.\n\n       [-]litout\n              Igual que -parenb -istrip -opost cs8.  Con `-', esta opci\u00f3n se comporta  igual  que  las  opciones\n              parenb istrip opost cs7.\n\n       [-]decctlq (np)\n              Igual que la opci\u00f3n -ixany.\n\n       [-]tabs (np)\n              Igual que la opci\u00f3n tab0.  Con `-', esta opci\u00f3n se comporta igua que la opci\u00f3n tab3.\n\n       [-]lcase [-]LCASE (np)\n              Igual que las opciones xcase iuclc olcuc.\n\n       crt    Igual que las opciones echoe echoctl echoke.\n\n       dec    Igual  que  las  opciones  echoe echoctl echoke -ixany, ademas tambi\u00e9n asigna el car\u00e1cter especial\n              INTERRUPT a la tecla Ctrl-C, ERASE a la tecla Supr y KILL a la tecla Ctrl-U.\n\n       Car\u00e1cteres especiales:\n\n       El valor por defecto de los car\u00e1cteres especiales var\u00eda de un sistema a otro. Para inicializarlos, se usa\n       la  sintaxis  `nombre  valor', donde los nombres son los listados a continuaci\u00f3n y los valores pueden ser\n       dados de manera literal, en notaci\u00f3n circunfleja (`^c') o como un entero que debe empezar con  `0x',  (de\n       manera que indique un n\u00famero hexadecimal) con `0', (para indicar un n\u00famero octal) o cualquier otro d\u00edgito\n       para indicar un n\u00famero decimal. Si se especifica el valor `^-'o `undef' el car\u00e1cter especial asociado  es\n       desactivado.\n\n       intr   Enviar la se\u00f1al de interrupci\u00f3n.\n\n       quit   Enviar la se\u00f1al de terminaci\u00f3n.\n\n       erase  Borrar el \u00faltimo car\u00e1cter escrito.\n\n       kill   Borrar la l\u00ednea actual.\n\n       eof    Enviar un final de fichero (terminar la entrada actual).\n\n       eol    Final de l\u00ednea.\n\n       eol2 (np)\n              Car\u00e1cter alternativo para indicar final de l\u00ednea.\n\n       swtch (np)\n              Cambiar a un nivel distinto de la shell.\n\n       start  Reemprender la salida despu\u00e9s de haberla detenido.\n\n       stop   Detener la salida.\n\n       susp   Enviar una se\u00f1al de parada del terminal.\n\n       dsusp (np)\n              Enviar una se\u00f1al de parada del terminal despu\u00e9s de vaciar la entrada.\n\n       rprnt (np)\n              Reescribir la l\u00ednea actual.\n\n       werase (np)\n              Borrar la \u00faltima palabra escrita.\n\n       lnext (np)\n              Aceptar el siguiente car\u00e1cter escrito de manera literal, incluso si este es un car\u00e1cter especial.\n\n       Opciones especiales:\n\n       min N  Fijar  el  n\u00famero  m\u00ednimo de car\u00e1cteres que generar\u00e1n una lectura mientras el tiempo de lectura no\n              haya expirado, cuando la opci\u00f3n -icanon est\u00e9 activada.\n\n       time N Fijar el n\u00famero de d\u00e9cimas de segundo antes de que la lectura acabe por expiraci\u00f3n  de  tiempo  si\n              todav\u00eda  no  se han leido los min car\u00e1cteres especificados en la opci\u00f3n anterior, cuando la opci\u00f3n\n              -icanon est\u00e9 activada.\n\n       ispeed N\n              Fijar la velocidad de entrada a N.\n\n       ospeed N\n              Fijar la velocidad de salida a N.\n\n       rows N (np)\n              Informar al kernel que el terminal tiene N filas.\n\n       cols N columns N (np)\n              Informar al kernel que el terminal tiene N columnas.\n\n       size (np)\n              Escribe el n\u00famero de filas y columnas que el kernel cree que tiene el terminal. (En  los  sistemas\n              donde  el  n\u00famero  de filas y columnas no sea soportado por el kernel, t\u00edpicamente se utilizan las\n              variables LINES y COLUMNS en vez de \u00e9sta opci\u00f3n; sin embargo, la versi\u00f3n GNU de  stty  no  utiliza\n              estas variables).\n\n       line N (np)\n              Utilizar el n\u00famero de disciplina de la l\u00ednea N.\n\n       speed  Escribir la velocidad del terminal.\n\n       N      Fijar  las velocidades de entrada y salida a N. N puede ser uno de los siguientes valores: 0 50 75\n              110 134 134.5 150 200 300 600 1200 1800 2400 4800 9600 19200 38400 exta extb.  exta corresponde  a\n              19200; extb corresponde a 38400.  0 cuelga la l\u00ednea si la opci\u00f3n -clocal est\u00e1 activada.\n\n   OPCIONES\n       -a, --all\n              Escribir todas las opciones actuales.\n\n       --help Escribe un mensaje sobre el uso en la salida est\u00e1ndar y acaba sin provocar error.\n\n       -g, --save\n              Escribe todas las opciones actuales en un formato tal que puede ser usado como argumento para otro\n              comando stty a fin de restaurar las opciones actuales.\n\n       --version\n              Escribe informaci\u00f3n sobre la versi\u00f3n en la salida est\u00e1ndar y acaba sin provocar error.\n\nFSF                                          Utilidades Shell de GNU                                     STTY(1)\n"},{"NOMBRE": "       swapon, swapoff - (des)habilita dispositivos o ficheros para el paginado y el trasiego\n\n", "SINOPSIS": "       /sbin/swapon [-h -V]\n       /sbin/swapon -a [-v]\n       /sbin/swapon [-v] [-p prioridad]  fichero-especial ...\n       /sbin/swapon [-s]\n       /sbin/swapoff [-h -V]\n       /sbin/swapoff -a\n       /sbin/swapoff fichero-especial ...\n\n", "DESCRIPCION": "       Swapon  se  emplea  para  especificar  dispositivos sobre los cuales van a tener lugar las actividades de\n       paginado y trasiego.  Las llamadas a swapon se hacen normalmente en el fichero de inicio del  sistema  en\n       modo  multi-usuario,  normalmente  /etc/rc,  haciendo  ah\u00ed  que  todos los dispositivos de trasiego est\u00e9n\n       disponibles, de modo que las actividades de paginado y trasiego se intercalen entre varios dispositivos o\n       ficheros.\n\n       Normalmente, se emplea la primera forma:\n\n       -h     Proporciona ayuda.\n\n       -V     Muestra la versi\u00f3n.\n\n       -s     Muestra un sumario del uso del trasiego por dispositivo.\n\n       -a     Se  hacen disponibles para el trasiego todos los dispositivos marcados con ``sw'', de tipo `swap',\n              en el fichero /etc/fstab.\n\n       -p prioridad\n              Especifica la prioridad para swapon.  Esta opci\u00f3n s\u00f3lo est\u00e1 disponible si swapon se ha compilado y\n              se  est\u00e1  usando  bajo  un  n\u00facleo  1.3.2  \u00f3 superior.  prioridad es un valor entre 0 y 32767. Vea\n              swapon(2) para una descripci\u00f3n completa de las prioridades de trasiego. A\u00f1ada pri=valor  al  campo\n              de opciones de /etc/fstab para el empleo con swapon -a.\n\n       Swapoff  deshabilita el trasiego en los dispositivos o ficheros especificados, o en todas las entradas de\n       tipo `swap' de /etc/fstab cuando se da la opci\u00f3n -a.\n\nV\u00c9ASE TAMBI\u00c9N\n       swapon(2), swapoff(2), fstab(5), init(8), mkswap(8), rc(8), mount(8)\n\n", "ARCHIVOS": "       /dev/hd??  dispositivos est\u00e1ndar de paginaci\u00f3n.\n       /dev/sd??  dispositivos est\u00e1ndar (SCSI) de paginaci\u00f3n.\n       /etc/fstab tabla ASCII de descripci\u00f3n est\u00e1tica de los sistemas de ficheros.\n\n", "HISTORIA": "       La orden swapon apareci\u00f3 en 4.0BSD.\n\n", "AUTOR": "       Vea la p\u00e1gina del Manual de Linux mount(8) para una lista completa  de  autores.  Entre  los  principales\n       contribuyentes se incluyen Doug Quale, H. J. Lu, Rick Sladkey y Stephen Tweedie.\n\nLinux 1.x                                      25 Septiembre 1995                                      SWAPON(8)\n"},{"NOMBRE": "       swapon, swapoff - (des)habilita dispositivos o ficheros para el paginado y el trasiego\n\n", "SINOPSIS": "       /sbin/swapon [-h -V]\n       /sbin/swapon -a [-v]\n       /sbin/swapon [-v] [-p prioridad]  fichero-especial ...\n       /sbin/swapon [-s]\n       /sbin/swapoff [-h -V]\n       /sbin/swapoff -a\n       /sbin/swapoff fichero-especial ...\n\n", "DESCRIPCION": "       Swapon  se  emplea  para  especificar  dispositivos sobre los cuales van a tener lugar las actividades de\n       paginado y trasiego.  Las llamadas a swapon se hacen normalmente en el fichero de inicio del  sistema  en\n       modo  multi-usuario,  normalmente  /etc/rc,  haciendo  ah\u00ed  que  todos los dispositivos de trasiego est\u00e9n\n       disponibles, de modo que las actividades de paginado y trasiego se intercalen entre varios dispositivos o\n       ficheros.\n\n       Normalmente, se emplea la primera forma:\n\n       -h     Proporciona ayuda.\n\n       -V     Muestra la versi\u00f3n.\n\n       -s     Muestra un sumario del uso del trasiego por dispositivo.\n\n       -a     Se  hacen disponibles para el trasiego todos los dispositivos marcados con ``sw'', de tipo `swap',\n              en el fichero /etc/fstab.\n\n       -p prioridad\n              Especifica la prioridad para swapon.  Esta opci\u00f3n s\u00f3lo est\u00e1 disponible si swapon se ha compilado y\n              se  est\u00e1  usando  bajo  un  n\u00facleo  1.3.2  \u00f3 superior.  prioridad es un valor entre 0 y 32767. Vea\n              swapon(2) para una descripci\u00f3n completa de las prioridades de trasiego. A\u00f1ada pri=valor  al  campo\n              de opciones de /etc/fstab para el empleo con swapon -a.\n\n       Swapoff  deshabilita el trasiego en los dispositivos o ficheros especificados, o en todas las entradas de\n       tipo `swap' de /etc/fstab cuando se da la opci\u00f3n -a.\n\nV\u00c9ASE TAMBI\u00c9N\n       swapon(2), swapoff(2), fstab(5), init(8), mkswap(8), rc(8), mount(8)\n\n", "ARCHIVOS": "       /dev/hd??  dispositivos est\u00e1ndar de paginaci\u00f3n.\n       /dev/sd??  dispositivos est\u00e1ndar (SCSI) de paginaci\u00f3n.\n       /etc/fstab tabla ASCII de descripci\u00f3n est\u00e1tica de los sistemas de ficheros.\n\n", "HISTORIA": "       La orden swapon apareci\u00f3 en 4.0BSD.\n\n", "AUTOR": "       Vea la p\u00e1gina del Manual de Linux mount(8) para una lista completa  de  autores.  Entre  los  principales\n       contribuyentes se incluyen Doug Quale, H. J. Lu, Rick Sladkey y Stephen Tweedie.\n\nLinux 1.x                                      25 Septiembre 1995                                      SWAPON(8)\n"},{"NOMBRE": "       symlink - construye un nombre nuevo para un fichero\n\n", "SINOPSIS": "       #include <unistd.h>\n\n       int symlink(const char *caminoviejo, const char *caminonuevo);\n\n", "DESCRIPCION": "       symlink crea un enlace simb\u00f3lico llamado caminonuevo que contiene la cadena de caracteres caminoviejo.\n\n       A  fin de encontrar un fichero o directorio, los enlaces simb\u00f3licos se interpretan en tiempo de ejecuci\u00f3n\n       como si los contenidos del enlace hubiesen sido sustituidos en el camino que se est\u00e9 siguiendo.\n\n       Los enlaces simb\u00f3licos pueden contener como componentes del camino ..  y, si se emplean al principio  del\n       enlace, se refieren a los directorios padre de aqu\u00e9l en el que reside el enlace.\n\n       Un  enlace  simb\u00f3lico  (tambi\u00e9n conocido como enlace blando) puede apuntar a un fichero existente o a uno\n       que no existe; en este \u00faltimo caso se conoce como un enlace colgante.\n\n       Los permisos de un enlace simb\u00f3lico son irrelevantes; el propietario no se  tiene  en  cuenta  cuando  se\n       sigue  el  enlace,  pero  s\u00ed se comprueba cuando se quiere borrar o renombrar el enlace y \u00e9ste est\u00e1 en un\n       directorio con el bit pegajoso (STIcky) activado.\n\n       Si caminonuevo existe, no ser\u00e1 sobreescrito.\n\nVALOR DEVUELTO\n       En caso de \u00e9xito, se devuelve 0. En caso de error, se devuelve -1 y se pone en errno un valor apropiado.\n\n", "ERRORES": "       EPERM  El sistema de ficheros que contiene caminonuevo no admite la creaci\u00f3n de enlaces simb\u00f3licos.\n\n       EFAULT caminoviejo o caminonuevo apuntan afuera de su espacio de direcciones accesible.\n\n       EACCES No se permite acceso de escritura en el directorio que contiene caminonuevo para el  UID  efectivo\n              del  proceso,  o  uno de los directorios de caminonuevo no permite b\u00fasqueda (permiso de ejecuci\u00f3n,\n              x).\n\n       ENAMETOOLONG\n              caminoviejo o caminonuevo eran muy largos.\n\n       ENOENT Un componente directorio en caminonuevo no existe o es un enlace simb\u00f3lico colgante, o caminoviejo\n              es la cadena vac\u00eda.\n\n       ENOTDIR\n              Un componente usado como directorio en caminonuevo no es, de hecho, un directorio.\n\n       ENOMEM No hab\u00eda bastante memoria del n\u00facleo.\n\n       EROFS  caminonuevo est\u00e1 en un sistema de ficheros de lectura exclusiva.\n\n       EEXIST caminonuevo ya existe.\n\n       ELOOP  Se encontraron demasiados enlaces simb\u00f3licos al resolver caminonuevo.\n\n       ENOSPC El dispositivo que contiene al fichero no tiene sitio para la nueva entrada de directorio.\n\n       EIO    Se ha producido un error de E/S.\n\n", "OBSERVACIONES": "       No se hace ninguna comprobaci\u00f3n sobre caminoviejo.\n\n       Borrar  el  nombre referenciado por un enlace simb\u00f3lico borrar\u00e1 realmente el fichero (a menos que tambi\u00e9n\n       tenga otros enlaces duros). Si no se desea este comportamiento, emplee link.\n\nCONFORME A\n       SVr4, SVID, POSIX, BSD 4.3, X/OPEN.  SVr4 documenta los c\u00f3digos de error adicionales EDQUOT y ENOSYS.\n\n", "FALLOS": "       Vea open(2) con referencia a varios ficheros con el mismo nombre, y NFS.\n\nV\u00c9ASE TAMBI\u00c9N\n       readlink(2), link(2), unlink(2), rename(2), open(2), lstat(2), ln(1)\n\nLinux 2.0.30                                     21 agosto 1997                                       SYMLINK(2)\n"},{"NOMBRE": "       sync - Synchronize cached writes to persistent storage\n\n", "SINOPSIS": "       sync [OPTION] [FILE]...\n\n", "DESCRIPCION": "       Synchronize cached writes to persistent storage\n\n       If one or more files are specified, sync only them, or their containing file systems.\n\n       -d, --data\n              sync only file data, no unneeded metadata\n\n       -f, --file-system\n              sync the file systems that contain the files\n\n       --help display this help and exit \n\n       --version\n              output version information and exit\n\n", "FALLOS": "       Persistence guarantees vary per system.  See the system calls below for more details.\n\n", "AUTOR": "       Written by Jim Meyering and Giuseppe Scrivano.\n\nREPORTING BUGS\n       GNU coreutils online help: <https://www.gnu.org/software/coreutils/>\n       Report any translation bugs to <https://translationproject.org/team/>\n\n", "COPYRIGHT": "       Copyright  \u00a9  2020  Free  Software  Foundation,  Inc.   License  GPLv3+:  GNU  GPL  version  3  or  later\n       <https://gnu.org/licenses/gpl.html>.\n       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to  the  extent\n       permitted by law.\n\nSEE ALSO\n       fdatasync(2), fsync(2), sync(2), syncfs(2)\n\n       Full documentation <https://www.gnu.org/software/coreutils/sync>\n       or available locally via: info '(coreutils) sync invocation'\n\nGNU coreutils 8.32                                  July 2021                                            SYNC(1)\n"},{"NOMBRE": "     syscall \u2014 llamada al sistema indirecta\n\n", "SINOPSIS": "     #include <sys/syscall.h>\n     #include <unistd.h>\n     int syscall(int number, ...)\n\n", "DESCRIPCION": "     Syscall() lleva a cabo la llamada al sistema cuya interfaz con el lenguaje ensamblador est\u00e1 definida por\n     number con los argumentos especificados.  Las constantes simb\u00f3licas para llamadas al sistema pueden\n     encontrarse en el fichero de cabecera \u27e8sys/syscall.h\u27e9.\n\nVALOR DEVUELTO\n     El valor devuelto est\u00e1 definido por la llamada al sistema que se invoque.  En general, un valor 0 indica\n     \u00e9xito.  Un valor -1 indica que ocurri\u00f3 un error, almacen\u00e1ndose un c\u00f3digo de error en la variable errno.\n\n", "FALLOS": "     No es posible simular llamadas al sistema que devuelven m\u00faltiples valores como pipe(2).\n\n", "HISTORIA": "     La llamada a funci\u00f3n syscall() apareci\u00f3n en 4.0BSD.\n\n"},{"NOMBRE": "       nada - lista de todas las llamadas al sistema\n\n", "SINOPSIS": "       Llamadas al sistema de Linux 2.4.\n\n", "DESCRIPCION": "       La  llamada  al sistema es la interfaz fundamental entre una aplicaci\u00f3n y el n\u00facleo de Linux. A partir de\n       la    versi\u00f3n    2.4.17    de    Linux,    hay    1100    llamadass    al     sistemas     listadas     en\n       /usr/src/linux/include/asm-*/unistd.h.  Esta p\u00e1gina de manual lista aquellas que son comunes a la mayor\u00eda\n       de plataformas (incorporando hiperv\u00ednculos si lee esto con un navegador).\n\n       _llseek(2), _newselect(2), _sysctl(2), accept(2), access(2), acct(2), adjtimex(2), afs_syscall, alarm(2),\n       bdflush(2),  bind(2),  break,  brk(2), cacheflush(2), capget(2), capset(2), chdir(2), chmod(2), chown(2),\n       chown32, chroot(2), clone(2), close(2), connect(2), creat(2), create_module(2), delete_module(2), dup(2),\n       dup2(2),  execve(2), exit(2), fchdir(2), fchmod(2), fchown(2), fchown32, fcntl(2), fcntl64, fdatasync(2),\n       flock(2), fork(2), fstat(2), fstat64, fstatfs(2), fsync(2), ftime, ftruncate(2), ftruncate64, get_kernel\u2010\n       _syms(2),  getcwd(2),  getdents(2),  getdents64, getegid(2), getegid32, geteuid(2), geteuid32, getgid(2),\n       getgid32, getgroups(2), getgroups32, getitimer(2), getpagesize(2), getpeername(2),  getpmsg,  getpgid(2),\n       getpgrp(2),  getpid(2), getppid(2), getpriority(2), getresgid(2), getresgid32, getresuid(2), getresuid32,\n       getrlimit(2), getrusage(2), getsid(2), getsockname(2), getsockopt(2), gettid, gettimeofday(2), getuid(2),\n       getuid32, gtty, idle, init_module(2), ioctl(2), ioperm(2), iopl(2), ipc(2), kill(2), lchown(2), lchown32,\n       link(2), listen(2), lock,  lseek(2),  lstat(2),  lstat64,  madvise(2),  mincore(2),  mkdir(2),  mknod(2),\n       mlock(2),   mlockall(2),   mmap(2),  modify_ldt(2),  mount(2),  mprotect(2),  mpx,  mremap(2),  msync(2),\n       munlock(2),  munlockall(2),  munmap(2),  nanosleep(2),  nfsservctl(2),   nice(2),   oldfstat,   oldlstat,\n       oldolduname,   oldstat,   oldumount,   olduname,   open(2),   pause(2),  personality(2),  phys,  pipe(2),\n       pivot_root(2), poll(2), prctl(2), pread(2), prof, profil, ptrace(2), putpmsg, pwrite(2), query_module(2),\n       quotactl(2),  read(2),  readahead,  readdir(2),  readlink(2),  readv(2), reboot(2), recv(2), recvfrom(2),\n       recvmsg(2),  rename(2),   rmdir(2),   rt_sigaction,   rt_sigpending,   rt_sigprocmask,   rt_sigqueueinfo,\n       rt_sigreturn,   rt_sigsuspend,   rt_sigtimedwait,  sched_get_priority_max(2),  sched_get_priority_min(2),\n       sched_getparam(2),   sched_getscheduler(2),   sched_rr_get_interval(2),   sched_setparam(2),   sched_set\u2010\n       scheduler(2),  sched_yield(2),  security,  select(2),  sendfile(2),  send(2), sendmsg(2), sendto(2), set\u2010\n       domainname(2), setfsgid(2), setfsgid32, setfsuid(2), setfsuid32, setgid(2), setgid32, setgroups(2),  set\u2010\n       groups32,   sethostname(2),  setitimer(2),  setpgid(2),  setpriority(2),  setregid(2),  setregid32,  set\u2010\n       resgid(2), setresgid32, setresuid(2), setresuid32, setreuid(2), setreuid32, setrlimit(2), setsid(2), set\u2010\n       sockopt(2),  settimeofday(2),  setuid(2),  setuid32,  setup(2),  sgetmask(2),  shutdown(2), sigaction(2),\n       sigaltstack(2),  signal(2),  sigpending(2),  sigprocmask(2),  sigreturn(2),   sigsuspend(2),   socket(2),\n       socketcall(2),  socketpair(2),  ssetmask(2),  stat(2),  stat64,  statfs(2),  stime(2),  stty, swapoff(2),\n       swapon(2),  symlink(2),  sync(2),  sysfs(2),  sysinfo(2),  syslog(2),  time(2),  times(2),   truncate(2),\n       truncate64,  ulimit,  umask(2),  umount(2), uname(2), unlink(2), uselib(2), ustat(2), utime(2), vfork(2),\n       vhangup(2), vm86(2), vm86old, wait4(2), waitpid(2), write(2), writev(2).\n\n       De todas estas, 9 est\u00e1n obsoletas, que son getrlimit, oldfstat, oldlstat, oldolduname, oldstat, olduname,\n       readdir,  select y vm86old (v\u00e9ase tambi\u00e9n obsolete(2)), y 15 de ellas no est\u00e1n implementadas en el n\u00facleo\n       est\u00e1ndar, que son afs_syscall, break, ftime, getpmsg, gtty, idle, lock, mpx, phys, prof, profil, putpmsg,\n       security, stty and ulimit (v\u00e9ase tambi\u00e9n unimplemented(2)).  No obstante, ftime(3), profil(3) y ulimit(3)\n       existen como rutinas de biblioteca.  La entrada para phys la utiliza umount  desde  la  versi\u00f3n  2.1.116;\n       phys  nunca  se implementar\u00e1. Las llamadas getpmsg y putpmsg est\u00e1n disponibles en n\u00facleos parcheados para\n       soportar flujos, y pueden no estar nunca en el n\u00facleo est\u00e1ndar.  La llamada security es para uso futuro.\n\n       Hablando m\u00e1s en detalle, el c\u00f3digo que pertenece a la llamada al sistema con n\u00famero __NR_xxx definido  en\n       /usr/include/asm/unistd.h  puede  encontrarse  en  los  fuentes del n\u00facleo como la rutina sys_xxx().  (La\n       tabla de llamadas para el i386 puede encontrarse en /usr/src/linux/arch/i386/kernel/entry.S.)   De  todas\n       maneras,  hay algunas excepciones, la mayor\u00eda como consecuencia de actualizaciones de viejas llamadas que\n       hayan sido introducidas de forma poco sistem\u00e1tica. En plataformas con emulaci\u00f3n de SO  propietario,  como\n       parisc, sparc, sparc64 y alpha, hay otras muchas llamadas al sistema adicionales; mips64 contiene tambi\u00e9n\n       un conjunto completo de llamadas al sistema de 32 bits.\n\n       A continuaci\u00f3n los detalles de Linux 2.4.17.\n\n       Las definiciones  __NR_oldstat  y  __NR_stat  se  refieren  a  las  rutinas  sys_stat()  y  sys_newstat()\n       respectivamente,  y  de  igual  forma para fstat y lstat.  Igualmente, las definiciones __NR_oldolduname,\n       __NR_olduname y __NR_uname se refieren a las rutinas sys_olduname(), sys_uname()  y  sys_newuname().   De\n       esta  manera,  __NR_stat  y  __NR_uname  siempre  hacen referencia a la \u00faltima versi\u00f3n de cada llamada al\n       sistema, y las otras m\u00e1s antiguas son para mantener la compatibilidad.\n\n       Es diferente con select y mmap.  Estas usan cinco o m\u00e1s par\u00e1metros, y causan problemas con la  manera  en\n       la  que  los  par\u00e1metros  se  pasaban en el i386. De esta manera, mientras que otras arquitecturas tienen\n       sys_select() y sys_mmap() correspondiendo con __NR_select y __NR_mmap, en el  i386  nos  encontramos  con\n       old_select()  y  old_mmap() (rutinas que usan un puntero a un bloque de par\u00e1metros). Actualmente el pasar\n       cinco par\u00e1metros no es un problema, y existe una __NR_newselect (usada por libc  6)  que  se  corresponde\n       directamente con sys_select() y de manera similar una  __NR_mmap2.\n\n       Para  otros n\u00fameros de llamadas al sistema, __NR__llseek y __NR__sysctl tienen un subrayado adicional que\n       no aparece en sys_llseek() y sys_sysctl().\n\n       Adem\u00e1s existe __NR_readdir que se corresponde con old_readdir(), la cual leer\u00e1 como mucho una entrada  de\n       directorio al mismo tiempo, y que ha sido mejorada por sys_getdents().\n\n       En  muchas  plataformas,  incluyendo i386, todas las llamadas de conectores son multiplexadas a trav\u00e9s de\n       socketcall() y las llamadas IPC de System V a trav\u00e9s de ipc().\n\n       En plataformas m\u00e1s recientes que s\u00f3lo disponen de acceso a fichero de 64 bits y uids  de  32  bits  (p.e.\n       alpha,  ia64,  s390x)  no  hay  llamadas *64 o *32 calls. Donde existen las llamadas *64 y *32, las otras\n       versiones est\u00e1n obsoletas.\n\n       Las llamadas al sistema chown y lchown fueron intercambiadas en la versi\u00f3n 2.1.81.  Las  llamadas  *64  y\n       *32  fueron  a\u00f1adidas  en  el n\u00facleo 2.4, as\u00ed como las nuevas versiones de getrlimit y mmap, y las nuevas\n       llamadas pivot_root, mincore, madvise, security, gettid y readahead.\n\nLinux 2.4                                         7 enero 2002                                       SYSCALLS(2)\n"},{"NOMBRE": "       sysctl - lee/escribe par\u00e1metros del sistema\n\n", "SINOPSIS": "       #include <unistd.h>\n\n       #include <linux/unistd.h>\n\n       #include <linux/sysctl.h>\n\n       _syscall1(int, _sysctl, struct __sysctl_args *, args);\n\n       int _sysctl(struct __sysctl_args *args);\n\n", "DESCRIPCION": "       La  llamada  _sysctl  lee  o  escribe  par\u00e1metros del n\u00facleo. Por ejemplo, el nombre del computador, o el\n       n\u00famero m\u00e1ximo de ficheros abiertos. El argumento tiene la forma\n\n       struct __sysctl_args {\n               int *name;        /* vector describiendo la variable */\n               int nlen;         /* longitud de este vector */\n               void *oldval;     /* 0 \u00f3 dir. donde guardar valor antiguo */\n               size_t *oldlenp;  /* sitio disponible para el valor antiguo,\n                           sobrescrito por el tama\u00f1o real de dicho valor */\n               void *newval;     /* 0 \u00f3 direcci\u00f3n del nuevo valor */\n               size_t newlen;    /* tama\u00f1o del nuevo valor */\n       };\n\n       Esta llamada efect\u00faa una b\u00fasqueda en una estructura  de  \u00e1rbol,  posiblemente  parecido  a  un  \u00e1rbol  de\n       directorios  bajo  /proc/sys,  y  si  lo pedido se encuentra, llama a alguna rutina apropiada para leer o\n       modificar el valor.\n\n", "EJEMPLOS": "       #include <linux/unistd.h>\n       #include <linux/types.h>\n       #include <linux/sysctl.h>\n\n       _syscall1(int, _sysctl, struct __sysctl_args *, args);\n       int sysctl(int *name, int nlen, void *oldval, size_t *oldlenp,\n                  void *newval, size_t newlen)\n       {\n               struct __sysctl_args args={name,nlen,oldval,oldlenp,newval,newlen};\n               return _sysctl(&args);\n       }\n\n       #define SIZE(x) sizeof(x)/sizeof(x[0])\n       #define OSNAMESZ 100\n\n       char osname[OSNAMESZ];\n       int osnamelth;\n       int name[] = { CTL_KERN, KERN_OSTYPE };\n\n       main(){\n               osnamelth = sizeof(osname);\n               if (sysctl(name, SIZE(name), osname, &osnamelth, 0, 0))\n                       perror(\"sysctl\");\n               else\n                       printf(\"Esta m\u00e1quina ejecuta %*s\\n\", osnamelth, osname);\n               return 0;\n       }\n\nVALOR DEVUELTO\n       Tras una terminaci\u00f3n exitosa, _sysctl devuelve 0. En otro caso, se devuelve el valor  -1  y  se  pone  en\n       errno un valor que indica el error.\n\n", "ERRORES": "       ENOTDIR\n              name no se ha encontrado.\n\n       EPERM  No  hab\u00eda permiso de paso para uno de los `directorios' encontrados, o no hab\u00eda permiso de lectura\n              donde oldval era no-cero, o no hab\u00eda permiso de escritura donde newval era no-cero.\n\n       EFAULT La llamada pidi\u00f3 el valor anterior poniendo oldval como no NULL, pero se permiti\u00f3 un espacio  cero\n              en oldlenp.\n\nCONFORME A\n       Esta  llamada es espec\u00edfica de Linux, y no deber\u00eda emplearse en programas pretendidamente transportables.\n       Una llamada sysctl ha estado presente en Linux desde la versi\u00f3n 1.3.57. Se origin\u00f3 en 4.4BSD. S\u00f3lo  Linux\n       tiene el espejo /proc/sys, y los esquemas de nomenclatura de objetos difieren entre Linux y BSD 4.4, pero\n       la declaraci\u00f3n de la funci\u00f3n sysctl(2) es la misma en ambos.\n\n", "FALLOS": "       Los nombres de los objetos var\u00edan entre versiones del n\u00facleo.  ESTO HACE QUE ESTA LLAMADA AL SISTEMA  SEA\n       IN\u00daTIL PARA LAS APLICACIONES.  Use en su lugar la interfaz /proc/sys.\n       No todos los objetos disponibles est\u00e1n correctamente documentados.\n       A\u00fan no es posible cambiar el sistema operativo escribiendo en /proc/sys/kernel/ostype.  :-)\n\nV\u00c9ASE TAMBI\u00c9N\n       proc(5)\n\nLinux 1.3.85                                      11 abril 1996                                        SYSCTL(2)\n"},{"NOMBRE": "       sysctl - configure kernel parameters at runtime\n\n", "SINOPSIS": "       sysctl [options] [variable[=value]] [...]\n       sysctl -p [file or regexp] [...]\n\n", "DESCRIPCION": "       sysctl  is  used to modify kernel parameters at runtime.  The parameters available are those listed under\n       /proc/sys/.  Procfs is required for sysctl support in Linux.  You can use sysctl to both read  and  write\n       sysctl data.\n\n", "PARAMETROS": "       variable\n              The  name of a key to read from.  An example is kernel.ostype.  The '/' separator is also accepted\n              in place of a '.'.\n\n       variable=value\n              To set a key, use the form variable=value where variable is the key and value is the value to  set\n              it  to.  If the value contains quotes or characters which are parsed by the shell, you may need to\n              enclose the value in double quotes.\n\n       -n, --values\n              Use this option to disable printing of the key name when printing values.\n\n       -e, --ignore\n              Use this option to ignore errors about unknown keys.\n\n       -N, --names\n              Use this option to only print the names.  It may be useful with shells that have programmable com\u2010\n              pletion.\n\n       -q, --quiet\n              Use this option to not display the values set to stdout.\n\n       -w, --write\n              Use this option when all arguments prescribe a key to be set.\n\n       -p[FILE], --load[=FILE]\n              Load  in  sysctl settings from the file specified or /etc/sysctl.conf if none given.  Specifying -\n              as filename means reading data from standard input.  Using this  option  will  mean  arguments  to\n              sysctl are files, which are read in the order they are specified.  The file argument may be speci\u2010\n              fied as regular expression.\n\n       -a, --all\n              Display all values currently available.\n\n       --deprecated\n              Include deprecated parameters to --all values listing.\n\n       -b, --binary\n              Print value without new line.\n\n       --system\n              Load settings from all system configuration files. Files are read from directories in the  follow\u2010\n              ing  list  in given order from top to bottom.  Once a file of a given filename is loaded, any file\n              of the same name in subsequent directories is ignored.\n              /etc/sysctl.d/*.conf\n              /run/sysctl.d/*.conf\n              /usr/local/lib/sysctl.d/*.conf\n              /usr/lib/sysctl.d/*.conf\n              /lib/sysctl.d/*.conf\n              /etc/sysctl.conf\n\n       -r, --pattern pattern\n              Only apply settings that match pattern.  The pattern uses extended regular expression syntax.\n\n       -A     Alias of -a\n\n       -d     Alias of -h\n\n       -f     Alias of -p\n\n       -X     Alias of -a\n\n       -o     Does nothing, exists for BSD compatibility.\n\n       -x     Does nothing, exists for BSD compatibility.\n\n       -h, --help\n              Display help text and exit.\n\n       -V, --version\n              Display version information and exit.\n\n", "EJEMPLOS": "       /sbin/sysctl -a\n       /sbin/sysctl -n kernel.hostname\n       /sbin/sysctl -w kernel.domainname=\"example.com\"\n       /sbin/sysctl -p/etc/sysctl.conf\n       /sbin/sysctl -a --pattern forward\n       /sbin/sysctl -a --pattern forward$\n       /sbin/sysctl -a --pattern 'net.ipv4.conf.(eth|wlan)0.arp'\n       /sbin/sysctl --system --pattern '^net.ipv6'\n\nDEPRECATED PARAMETERS\n       The base_reachable_time and retrans_time are deprecated.  The sysctl command does not allow changing val\u2010\n       ues  of  these  parameters.   Users  who insist to use deprecated kernel interfaces should push values to\n       /proc file system by other means.  For example:\n\n       echo 256 > /proc/sys/net/ipv6/neigh/eth0/base_reachable_time\n\n", "ARCHIVOS": "       /proc/sys\n       /etc/sysctl.d/*.conf\n       /run/sysctl.d/*.conf\n       /usr/local/lib/sysctl.d/*.conf\n       /usr/lib/sysctl.d/*.conf\n       /lib/sysctl.d/*.conf\n       /etc/sysctl.conf\n\nSEE ALSO\n       sysctl.conf(5) regex(7)\n\n", "AUTOR": "       George Staikos \u27e8staikos@0wned.org\u27e9\n\nREPORTING BUGS\n       Please send bug reports to \u27e8procps@freelists.org\u27e9\n\nprocps-ng                                          2020-02-27                                          SYSCTL(8)\n"},{"NOMBRE": "       sysfs - devuelve informaci\u00f3n sobre el tipo de sistema de ficheros\n\n", "SINTAXIS": "       int sysfs(int option, const char *fsname);\n\n       int sysfs(int option, unsigned int fs_index, char *buf);\n\n       int sysfs(int option);\n\n", "DESCRIPCION": "       sysfs  devuelve  informaci\u00f3n sobre el sistema de ficheros presente en el n\u00facleo. La form a concreta de la\n       llamada sysfs y la informaci\u00f3n devuelta depende de option eso es:\n\n       1      Traduce la tira que identifica el tipo de sistema de ficheros fsname en un tipo \u00edndice de  sistema\n              de ficheros.\n\n       2      Traduce  el  tipo  \u00edndice  de  sistema de ficheros fs_index en una tira finalizada por un car\u00e1cter\n              NULL. Esta tira sera escrita en el buffer apuntado por buf.  Aseg\u00farese que  buf  tiene  suficiente\n              espacio para alojar la tira.\n\n       3      Devuelve el numero total de sistemas de ficheros presentes en el n\u00facleo.\n\n       El numero de tipos de indices de sistemas de ficheros comienza en cero.\n\nVALOR DEVUELTO\n       Si  ha funcionado, sysfs devuelve el indice del sistema de ficheros para la opcion 1, cero para la opcion\n       2, y en numero de sistemas de ficheros configurados para la opcion 3.  Caso de error, -1 es devuelto y el\n       valor de errno es fijado apropiadamente.\n\nERRORES.\n       EINVAL fsname  no es un identificador de sistema de fichero valido.  fs_index esta fuera de rango; option\n              es invalido.\n\n       EFAULT O fsname o buf esta fuera del espacio de direcciones accesible por vd.\n\nCONFORME A\n       SVr4.\n\n", "NOTA": "       En Linux con el sistema de ficheros proc montado en  /proc,  puede  obtenerse  la  misma  informaci\u00f3n  de\n       /proc/filesystems.\n\n", "FALLOS": "       No hay soporte de libc ni glibc.  No hay ninguna manera de determinar el tama\u00f1o que buf deber\u00eda tener.\n\nLinux 1.3.16                                   9 de Agosto de 1995                                      SYSFS(2)\n"},{"NOMBRE": "       syslog, klogctl - lee o limpia el b\u00fafer del anillo de mensajes del n\u00facleo; establece el nivel de registro\n       de la consola\n\n", "SINOPSIS": "       /* La interfaz glibc */\n       #include <sys/klog.h>\n\n       int klogctl(int type, char *bufp, int len);\n\n       /* La llamada al sistema desnuda */\n       #include <unistd.h>\n       #include <linux/unistd.h>\n\n       _syscall3(int, syslog, int, type, char *, bufp, int, len);\n\n       int syslog(int type, char *bufp, int len);\n\n", "DESCRIPCION": "       Si necesita la funci\u00f3n de libc syslog(), (que se comunica con syslogd(8)), mire en syslog(3).  La llamada\n       al sistema de este nombre explica c\u00f3mo controlar el buffer del n\u00facleo printk() , y la versi\u00f3n de glibc se\n       llama klogctl().\n\n       El argumento tipo determina la acci\u00f3n tomada por esta funci\u00f3n.\n\n       Extra\u00eddo (y traducido) de kernel/printk.c:\n       /*\n        * \u00d3rdenes a sys_syslog:\n        *\n        *      0 -- Cierra el registro. Actualmente no hace nada.\n        *      1 -- Abre el registro. Actualmente no hace nada.\n        *      2 -- Lee del registro.\n        *      3 -- Lee hasta los \u00faltimos 4kB de mensajes en el b\u00fafer del anillo\n        *      4 -- Lee y limpia hasta los \u00faltimos 4kB de mensajes en el b\u00fafer del anillo\n        *      5 -- Limpia el b\u00fafer del anillo\n        *      6 -- Desactiva los printk's a consola\n        *      7 -- Activa los printk's a consola\n        *      8 -- Establece el nivel de mensajes mostrados en la consola\n        *      9 -- Devuelve el n\u00famero de car\u00e1cters no le\u00eddos en el buffer de registro\n        */\n\n       Solamente se permite la funci\u00f3n 3 para procesos no de root.  (La funci\u00f3n 9  fue  a\u00f1adida  en  la  versi\u00f3n\n       2.4.10.)\n\n       El b\u00fafer de registro del n\u00facleo\n       El  n\u00facleo  tiene un b\u00fafer c\u00edclico de longitud LOG_BUF_LEN (4096, desde la versi\u00f3n 1.3.54: 8192, desde la\n       versi\u00f3n 2.1.113: 16384; en n\u00facleos recientes el tama\u00f1o puede ser establecido en tiempo de compilaci\u00f3n) en\n       el  que  se  guardan (sin importar su nivel de registro) los mensajes pasados como argumento a la funci\u00f3n\n       del n\u00facleo printk().\n\n       La llamada syslog (2,buf,lon) espera hasta que este b\u00fafer  de  registro  del  n\u00facleo  no  est\u00e9  vac\u00edo,  y\n       entonces  lee como mucho lon bytes en el b\u00faffer buf. Devuelve el n\u00famero de bytes le\u00eddos. Los bytes le\u00eddos\n       del registro desaparecen del b\u00fafer de registro; la informaci\u00f3n s\u00f3lo puede leerse una  vez.   Esta  es  la\n       funci\u00f3n ejecutada por el n\u00facleo cuando un programa de usuario lee /proc/kmsg.\n\n       La  llamada  syslog  (3,buf,lon)  leer\u00e1  los  \u00faltimos  lon  bytes  del  b\u00fafer  de  registro  (de forma no\n       destructiva), pero no leer\u00e1 m\u00e1s de lo que se haya escrito en el b\u00fafer desde la \u00faltima orden  'limpiar  el\n       b\u00fafer del anillo' (que no limpia el b\u00fafer en absoluto). Devuelve el n\u00famero de bytes le\u00eddos.\n\n       La llamada syslog (4,buf,lon) hace precisamente lo mismo, pero tambi\u00e9n ejecuta la orden 'limpiar el b\u00fafer\n       del anillo'.\n\n       La llamada syslog (5,dummy,idummy) s\u00f3lo ejecuta la orden 'limpiar el b\u00fafer del anillo'.\n\n       EL nivel de registro\n       La rutina del n\u00facleo printk() solamente mostrar\u00e1 un mensaje en la consola, si tiene un nivel de  registro\n       menor  que  el  valor  de  la  variable console_loglevel (inicialmente DEFAULT_CONSOLE_LOGLEVEL (7), pero\n       puesto a 10 si la l\u00ednea de \u00f3rdenes del n\u00facleo contiene la palabra `debug', y a 15 en caso de un fallo del\n       n\u00facleo  - los 10 y 15 son una tonter\u00eda, y equivalen a 8).  Esta variable es establecida (a un valor en el\n       rango de     1 a 8) por la llamada syslog (8,dummy,value).  Las llamadas syslog  (tipo,dummy,idummy)  con\n       tipo  igual  a  6  \u00f3  7,  lo  ponen  a 1 (s\u00f3lo p\u00e1nicos del n\u00facleo) o a 7 (todos los mensajes salvo los de\n       depuraci\u00f3n), respectivamente.\n\n       Cada  l\u00ednea  de  texto  en  un  mensaje  tiene   su   propio   nivel   de   registro.   Este   nivel   es\n       DEFAULT_MESSAGE_LOGLEVEL  - 1 (6) a menos que la l\u00ednea comience con <d>, donde d es un d\u00edgito en el rango\n       de 1 a 7, en cuyo caso el nivel es d. El significado convencional del nivel  de  registro  se  define  en\n       <linux/kernel.h> as\u00ed:\n\n       #define KERN_EMERG    \"<0>\"  /* el sistema no es utilizable         */\n       #define KERN_ALERT    \"<1>\"  /* debe tomarse una acci\u00f3n inmediata   */\n       #define KERN_CRIT     \"<2>\"  /* condiciones cr\u00edticas                */\n       #define KERN_ERR      \"<3>\"  /* condiciones de error                */\n       #define KERN_WARNING  \"<4>\"  /* condiciones de advertencia          */\n       #define KERN_NOTICE   \"<5>\"  /* condici\u00f3n normal pero significativa */\n       #define KERN_INFO     \"<6>\"  /* informaci\u00f3n                         */\n       #define KERN_DEBUG    \"<7>\"  /* mensajes del nivel de depuraci\u00f3n    */\n\nVALOR DEVUELTO\n       En caso de error, se devuelve -1 y se pone un valor en errno. Si no, para tipo igual a 2, 3 \u00f3 4, syslog()\n       devuelve el n\u00famero de bytes le\u00eddos, y de otro modo 0.\n\n", "ERRORES": "       EPERM  Se ha intentado cambiar console_loglevel o limpiar el b\u00fafer de anillo de mensajes del n\u00facleo, pero\n              el proceso no ten\u00eda permisos de root.\n\n       EINVAL Malos par\u00e1metros.\n\n       ERESTARTSYS\n              La  llamada  al sistema ha sido interrumpida por una se\u00f1al; no se ha le\u00eddo nada.  (\u00c9sto s\u00f3lo puede\n              ser observado durante una traza.)\n\nCONFORME A\n       Esta llamada al sistema es espec\u00edfica de Linux y no deber\u00eda  emplearse  en  programas  que  se  pretendan\n       transportables.\n\n", "OBSERVACIONES": "       Desde  muy  temprano  la  gente  se dio cuenta de que resulta desafortunado que la llamada al n\u00facleo y la\n       rutina de biblioteca del mismo nombre sean completamente diferentes.  En libc4 y libc5 el n\u00famero de  esta\n       llamada estaba definido por SYS_klog.  En glibc 2.0 la llamada al sistema est\u00e1 bautizada como klogctl.\n\nV\u00c9ASE TAMBI\u00c9N\n       syslog(3)\n\nLinux 1.2.9                                     25 noviembre 2001                                      SYSLOG(2)\n"},{"NOMBRE": "       time - temporiza una orden sencilla o devuelve la utilizaci\u00f3n de recursos\n\n", "SINOPSIS": "       time [opciones] orden [argumentos...]\n\nDESCRIPCI\u00f3N\n       La  orden  time  ejecuta  el programa orden con los argumentos suministrados. Cuando orden finaliza, time\n       escribe un mensaje en la salida est\u00e1ndar devolviendo estad\u00edsticas temporales sobre la ejecuci\u00f3n  de  este\n       programa.   Estas estad\u00edsticas est\u00e1n compuestas por (i) el tiempo real transcurrido entre la llamada y la\n       finalizaci\u00f3n de orden , (ii) el tiempo de usuario del procesador (la suma  de  los  valores  tms_utime  y\n       tms_cutime  en  un  struct tms tal y como devuelve times(2)), y (iii) el tiempo de sistema del procesador\n       (la suma de los valores tms_stime y tms_cstime en un struct tms tal y como devuelve times(2)).\n\n", "OPCIONES": "       -p     Cuando se use la localizaci\u00f3n POSIX, usar el formato tradicional preciso\n                   \"real %f\\nuser %f\\nsys %f\\n\"\n              (con n\u00fameros en segundos) donde el n\u00famero de decimales en la salida de  %f  est\u00e1  sin  especificar\n              pero es suficiente para expresar la precisi\u00f3n del flanco de reloj, y al menos uno.\n\n", "ENTORNO": "       Se utilizan las variables LANG, LC_ALL, LC_CTYPE, LC_MESSAGES, LC_NUMERIC, NLSPATH y PATH. La \u00faltima para\n       buscar orden.  El resto para el texto y el formato de la salida.\n\nESTADO DE SALIDA\n       Si se invoc\u00f3 orden , el estado de salida ser\u00e1 el de orden.  En otro caso, es 127  si  orden  no  se  pudo\n       encontrar,  126  si se pudo encontrar pero no pudo invocarse, y alg\u00fan otro valor distinto de cero (1-125)\n       si ocurri\u00f3 algun otro error.\n\nV\u00c9ASE TAMBI\u00c9N\n       times(2),\n\nVERSI\u00d3N GNU\n       A continuaci\u00f3n, una descripci\u00f3n de la versi\u00f3n 1.7 de GNU de time.  A pesar del nombre de la utilidad, GNU\n       hace que devuelva gran cantidad de informaci\u00f3n \u00fatil, no s\u00f3lo sobre el tiempo utilizado, sino adem\u00e1s sobre\n       otros recursos como memoria, llamadas E/S o IPC (si est\u00e1n disponibles).  La salida se formatea utilizando\n       una cadena de formato que se puede especificar utilizando la opci\u00f3n -f o la variable de entorno TIME.\n\n       La cadena de formato por defecto es\n          %Uusuario %Ssistema %Etranscurrido %PCPU (%Xtexto+%Ddatos %Mmax)k\n          %Ientradas+%Osalidas (%Fprincipal+%Rmenor)faltas de p\u00e1gina %Wintercambios\n\n       Cuando se indica la opci\u00f3n -p, se usa el formato de salida transportable\n          real %e\n          user %U\n          sys %S\n\n   La cadena de formato\n       El  formato  se interpreta en el modo usual de printf.  Los caracteres habituales se copian directamente,\n       tabulaci\u00f3n, nueva l\u00ednea y barra invertida se escapan usando \\t, \\n  y  \\\\,  el  signo  de  porcentaje  se\n       representa  por  %%, y de otra manera % indica una conversi\u00f3n. El programa time a\u00f1adir\u00e1 siempre una l\u00ednea\n       final.  A continuaci\u00f3n se presentan las conversiones. Todas las utilizadas por tcsh(1) est\u00e1n respaldadas\n\n       Tiempo\n\n       %E     Tiempo real transcurrido (en [horas:]minutos:segundos).\n\n       %e     (No aparece en tcsh.) Tiempo real transcurrido (en segundos).\n\n       %S     N\u00famero total de segundos de CPU que el proceso consumi\u00f3 en modo de n\u00facleo.\n\n       %U     N\u00famero total de segundos de CPU que el proceso consumi\u00f3 en modo de usuario.\n\n       %P     Porcentaje de CPU que recibi\u00f3 este trabajo, calculado como (%U + %S) / %E.\n\n       Memoria\n\n       %M     Conjunto m\u00e1ximo residente del proceso durante su tiempo de vida, en KBytes.\n\n       %t     (No aparece en tsch.) Tama\u00f1o aproximado del conjunto residente del proceso, en KBytes.\n\n       %K     Uso de memoria total aproximado (datos+pila+texto) del proceso, en KBytes.\n\n       %D     Tama\u00f1o aproximado del \u00e1rea de datos no compartida del proceso, en KBytes.\n\n       %p     (No aparece en tsch.) Tama\u00f1o aproximado del espacio de pila no compartido del proceso, en KBytes.\n\n       %X     Tama\u00f1o aproximado del espacio de texto compartido del proceso, en KBytes.\n\n       %Z     (No aparece en tsch.) Tama\u00f1o de p\u00e1gina del sistema, en KBytes.  Esto es una constante del sistema,\n              pero var\u00eda entre un sistema y otro.\n\n       %F     N\u00famero  de  faltas  de p\u00e1gina principales, que ocurrieron mientras el proceso se ejecutaba.  Estas\n              son faltas en las que la p\u00e1gina debe ser le\u00edda desde disco.\n\n       %R     N\u00famero de faltas de p\u00e1gina menores o recuperables.  Estas son  faltas  para  p\u00e1ginas  que  no  son\n              v\u00e1lidas  pero  que no han sido reclamadas a\u00fan por otras p\u00e1ginas virtuales. De este modo, los datos\n              en la p\u00e1gina son todav\u00eda v\u00e1lidos, pero las tablas de sistema deben actualizarse.\n\n       %W     N\u00famero de veces que el proceso fue intercambiado hacia afuera de la memoria principal.\n\n       %c     N\u00famero de veces que el proceso fue intercambiado de contexto involuntariamente (porque  finalizase\n              la porci\u00f3n de tiempo).\n\n       %w     N\u00famero  de  esperas:  veces  que  el  programa  fue intercambiado de contexto voluntariamente, por\n              ejemplo, mientras se espera a que se complete una operaci\u00f3n de E/S.\n\n       E/S\n\n       %I     N\u00famero de entradas al sistema de archivos por el proceso.\n\n       %O     N\u00famero de salidas al sistema de archivos por el proceso.\n\n       %r     N\u00famero de mensajes de conexi\u00f3n recibidos por el proceso.\n\n       %s     N\u00famero de mensajes de conexi\u00f3n enviados por el proceso.\n\n       %k     N\u00famero de se\u00f1ales entregadas al proceso.\n\n       %C     (No aparece en tcsh.) Nombre y argumentos en l\u00ednea de \u00f3rdenes de la orden temporizada.\n\n       %x     (No aparece en tcsh.) Estado de salida de la orden.\n\nOPCIONES GNU\n       -f FORMATO, --format=FORMATO\n              Especificar el formato de salida, posiblemente redefiniendo el formato especificado en la variable\n              de entorno TIME.\n\n       -p, --portability\n              Usar el formato de salida transportable.\n\n       -o FICHERO, --output=FICHERO\n              No enviar los resultados a stderr, sino sobreescribir el fichero especificado.\n\n       -a, --append\n              (Usado en conjunci\u00f3n con -o.) No sobreescribir, sino a\u00f1adir al final.\n\n       -v, --verbose\n              Ofrece una salida detallada sobre todo lo que el programa conoce.\n\nOPCIONES GNU EST\u00c1NDAR\n       --help Imprime un mensaje de uso en la salida est\u00e1ndar y termina satisfactoriamente.\n\n       -V, --version\n              Imprime la informaci\u00f3n sobre la versi\u00f3n en la salida est\u00e1ndar y termina satisfactoriamente.\n\n       --     Terminar la lista de opciones.\n\n", "FALLOS": "       No todos los recursos son medidos por todas las versiones de Unix, de modo que algunos valores pueden ser\n       devueltos como cero.  La selecci\u00f3n presente fue mayormente inspirada por los datos suministrados por  4.2\n       o 4.3BSD.\n\n       La versi\u00f3n 1.7 de GNU de time a\u00fan no est\u00e1 localizada.  De modo que no implementa los requisitos de POSIX.\n\n       La variable de entorno TIME no fue elegida correctamente.  No es inusual en sistemas como autoconf o make\n       usar variables de entorno con el nombre de una utilidad para reemplazar la utilidad  a  usar.  Usos  como\n       MORE  o  TIME  para  opciones  a  programas  (en  lugar de nombres de ruta a programas) tiende a llevar a\n       dificultades.\n\n       Parece desafortunado que -o sobreescriba en lugar de a\u00f1adir al final.  (Esto es, la  opci\u00f3n  por  defecto\n       deber\u00eda ser -a.)\n\n       Sugerencias por correo e informe de fallos de time de GNU a\n       bug-utils@prep.ai.mit.edu\n       Por favor, incluyase la versi\u00f3n de time , que puedes obtener ejecutando\n       time --version\n       y el sistema operativo y el compilador de C utilizado.\n\nV\u00c9ASE TAMBI\u00c9N\n       tcsh(1), times(2), wait3(2)\n\n", "AUTOR": "       David Keppel\n              Versi\u00f3n original\n\n       David MacKenzie\n              POSIXizaci\u00f3n,  autoconfiscaci\u00f3n,  GNU  getoptizaci\u00f3n, documentaci\u00f3n, otras correciones de fallos y\n              mejoras.\n\n       Arne Henrik Juul\n              Ayud\u00f3 a la portabilidad\n\n       Francois Pinard\n              Ayud\u00f3 a la portabilidad\n\n       Jorge Rodr\u00edguez (A.K.A. Tiriel)\n              Realiz\u00f3 la traducci\u00f3n de la versi\u00f3n 1.55\n\n                                                11 diciembre 2000                                        TIME(1)\n"},{"NOMBRE": "       bash,  :,  .,  [,  alias, bg, bind, break, builtin, caller, cd, command, compgen, complete, compopt, con\u2010\n       tinue, declare, dirs, disown, echo, enable, eval, exec, exit, export, false, fc, fg, getopts, hash, help,\n       history,  jobs, kill, let, local, logout, mapfile, popd, printf, pushd, pwd, read, readonly, return, set,\n       shift, shopt, source, suspend, test, times, trap, true, type, typeset,  ulimit,  umask,  unalias,  unset,\n       wait - bash built-in commands, see bash(1)\n\nBASH BUILTIN COMMANDS\n       Unless  otherwise noted, each builtin command documented in this section as accepting options preceded by\n       - accepts -- to signify the end of the options.  The :, true, false, and test/[ builtins  do  not  accept\n       options  and  do  not  treat  --  specially.   The  exit, logout, return, break, continue, let, and shift\n       builtins accept and process arguments beginning with - without requiring --.  Other builtins that  accept\n       arguments  but are not specified as accepting options interpret arguments beginning with - as invalid op\u2010\n       tions and require -- to prevent this interpretation.\n       : [arguments]\n              No effect; the command does nothing beyond expanding arguments and performing any specified  redi\u2010\n              rections.  The return status is zero.\n\n        .  filename [arguments]\n       source filename [arguments]\n              Read  and execute commands from filename in the current shell environment and return the exit sta\u2010\n              tus of the last command executed from filename.  If filename does not contain a  slash,  filenames\n              in  PATH  are  used to find the directory containing filename.  The file searched for in PATH need\n              not be executable.  When bash is not in posix mode, the current directory is searched if  no  file\n              is  found  in PATH.  If the sourcepath option to the shopt builtin command is turned off, the PATH\n              is not searched.  If any arguments are supplied, they become the positional parameters when  file\u2010\n              name  is  executed.   Otherwise  the positional parameters are unchanged.  If the -T option is en\u2010\n              abled, source inherits any trap on DEBUG; if it is not, any DEBUG trap string  is  saved  and  re\u2010\n              stored  around  the  call to source, and source unsets the DEBUG trap while it executes.  If -T is\n              not set, and the sourced file changes the DEBUG trap, the new value is retained when  source  com\u2010\n              pletes.   The  return  status  is the status of the last command exited within the script (0 if no\n              commands are executed), and false if filename is not found or cannot be read.\n\n       alias [-p] [name[=value] ...]\n              Alias with no arguments or with the -p option prints  the  list  of  aliases  in  the  form  alias\n              name=value  on  standard  output.   When arguments are supplied, an alias is defined for each name\n              whose value is given.  A trailing space in value causes the next word to be checked for alias sub\u2010\n              stitution  when  the  alias is expanded.  For each name in the argument list for which no value is\n              supplied, the name and value of the alias is printed.  Alias returns true unless a name  is  given\n              for which no alias has been defined.\n\n       bg [jobspec ...]\n              Resume each suspended job jobspec in the background, as if it had been started with &.  If jobspec\n              is not present, the shell's notion of the current job is used.  bg jobspec returns  0  unless  run\n              when  job control is disabled or, when run with job control enabled, any specified jobspec was not\n              found or was started without job control.\n\n       bind [-m keymap] [-lpsvPSVX]\n       bind [-m keymap] [-q function] [-u function] [-r keyseq]\n       bind [-m keymap] -f filename\n       bind [-m keymap] -x keyseq:shell-command\n       bind [-m keymap] keyseq:function-name\n       bind [-m keymap] keyseq:readline-command\n              Display current readline key and function bindings, bind a key sequence to a readline function  or\n              macro,  or  set  a readline variable.  Each non-option argument is a command as it would appear in\n              .inputrc, but each binding or command must be passed as a separate  argument;  e.g.,  '\"\\C-x\\C-r\":\n              re-read-init-file'.  Options, if supplied, have the following meanings:\n              -m keymap\n                     Use  keymap  as  the  keymap  to be affected by the subsequent bindings.  Acceptable keymap\n                     names are emacs, emacs-standard,  emacs-meta,  emacs-ctlx,  vi,  vi-move,  vi-command,  and\n                     vi-insert.  vi is equivalent to vi-command (vi-move is also a synonym); emacs is equivalent\n                     to emacs-standard.\n              -l     List the names of all readline functions.\n              -p     Display readline function names and bindings in such a way that they can be re-read.\n              -P     List current readline function names and bindings.\n              -s     Display readline key sequences bound to macros and the strings they output in  such  a  way\n                     that they can be re-read.\n              -S     Display readline key sequences bound to macros and the strings they output.\n              -v     Display readline variable names and values in such a way that they can be re-read.\n              -V     List current readline variable names and values.\n              -f filename\n                     Read key bindings from filename.\n              -q function\n                     Query about which keys invoke the named function.\n              -u function\n                     Unbind all keys bound to the named function.\n              -r keyseq\n                     Remove any current binding for keyseq.\n              -x keyseq:shell-command\n                     Cause  shell-command to be executed whenever keyseq is entered.  When shell-command is exe\u2010\n                     cuted, the shell sets the READLINE_LINE variable to the contents of the readline line  buf\u2010\n                     fer  and  the READLINE_POINT and READLINE_MARK variables to the current location of the in\u2010\n                     sertion point and the saved insertion point (the mark), respectively.  If the executed com\u2010\n                     mand changes the value of any of READLINE_LINE, READLINE_POINT, or READLINE_MARK, those new\n                     values will be reflected in the editing state.\n              -X     List all key sequences bound to shell commands and the associated commands in a format that\n                     can be reused as input.\n\n              The return value is 0 unless an unrecognized option is given or an error occurred.\n\n       break [n]\n              Exit  from within a for, while, until, or select loop.  If n is specified, break n levels.  n must\n              be \u2265 1.  If n is greater than the number of enclosing loops, all enclosing loops are exited.   The\n              return value is 0 unless n is not greater than or equal to 1.\n\n       builtin shell-builtin [arguments]\n              Execute  the  specified  shell builtin, passing it arguments, and return its exit status.  This is\n              useful when defining a function whose name is the same as a shell builtin, retaining the function\u2010\n              ality of the builtin within the function.  The cd builtin is commonly redefined this way.  The re\u2010\n              turn status is false if shell-builtin is not a shell builtin command.\n\n       caller [expr]\n              Returns the context of any active subroutine call (a shell function or a script executed with  the\n              .  or  source builtins).  Without expr, caller displays the line number and source filename of the\n              current subroutine call.  If a non-negative integer is supplied as expr, caller displays the  line\n              number,  subroutine  name, and source file corresponding to that position in the current execution\n              call stack.  This extra information may be used, for example, to print a stack trace.  The current\n              frame  is  frame  0.  The return value is 0 unless the shell is not executing a subroutine call or\n              expr does not correspond to a valid position in the call stack.\n\n       cd [-L|[-P [-e]] [-@]] [dir]\n              Change the current directory to dir.  if dir is not supplied, the value of the HOME shell variable\n              is  the default.  Any additional arguments following dir are ignored.  The variable CDPATH defines\n              the search path for the directory containing dir: each directory name in CDPATH  is  searched  for\n              dir.   Alternative  directory names in CDPATH are separated by a colon (:).  A null directory name\n              in CDPATH is the same as the current directory, i.e., ``.''.  If dir begins with a slash (/), then\n              CDPATH  is not used.  The -P option causes cd to use the physical directory structure by resolving\n              symbolic links while traversing dir and before processing instances of .. in dir (see also the  -P\n              option  to the set builtin command); the -L option forces symbolic links to be followed by resolv\u2010\n              ing the link after processing instances of .. in dir.  If .. appears in dir, it  is  processed  by\n              removing the immediately previous pathname component from dir, back to a slash or the beginning of\n              dir.  If the -e option is supplied with -P, and the current working directory cannot  be  success\u2010\n              fully  determined  after a successful directory change, cd will return an unsuccessful status.  On\n              systems that support it, the -@ option presents the extended attributes associated with a file  as\n              a  directory.   An argument of - is converted to $OLDPWD before the directory change is attempted.\n              If a non-empty directory name from CDPATH is used, or if - is the first argument, and  the  direc\u2010\n              tory  change  is  successful, the absolute pathname of the new working directory is written to the\n              standard output.  The return value is true if the directory was successfully changed; false other\u2010\n              wise.\n\n       command [-pVv] command [arg ...]\n              Run command with args suppressing the normal shell function lookup.  Only builtin commands or com\u2010\n              mands found in the PATH are executed.  If the -p option is given, the search for command  is  per\u2010\n              formed  using  a  default value for PATH that is guaranteed to find all of the standard utilities.\n              If either the -V or -v option is supplied, a description of command is  printed.   The  -v  option\n              causes  a  single  word indicating the command or filename used to invoke command to be displayed;\n              the -V option produces a more verbose description.  If the -V or -v option is supplied,  the  exit\n              status  is  0  if command was found, and 1 if not.  If neither option is supplied and an error oc\u2010\n              curred or command cannot be found, the exit status is 127.  Otherwise, the exit status of the com\u2010\n              mand builtin is the exit status of command.\n\n       compgen [option] [word]\n              Generate  possible  completion  matches for word according to the options, which may be any option\n              accepted by the complete builtin with the exception of -p and -r, and write  the  matches  to  the\n              standard output.  When using the -F or -C options, the various shell variables set by the program\u2010\n              mable completion facilities, while available, will not have useful values.\n\n              The matches will be generated in the same way as if the programmable completion code had generated\n              them  directly  from  a  completion specification with the same flags.  If word is specified, only\n              those completions matching word will be displayed.\n\n              The return value is true unless an invalid option is supplied, or no matches were generated.\n\n       complete [-abcdefgjksuv] [-o comp-option] [-DEI] [-A action] [-G globpat] [-W wordlist]\n              [-F function] [-C command] [-X filterpat] [-P prefix] [-S suffix] name [name ...]\n       complete -pr [-DEI] [name ...]\n              Specify how arguments to each name should be completed.  If the -p option is supplied,  or  if  no\n              options  are supplied, existing completion specifications are printed in a way that allows them to\n              be reused as input.  The -r option removes a completion specification for each  name,  or,  if  no\n              names  are  supplied,  all completion specifications.  The -D option indicates that other supplied\n              options and actions should apply to the ``default'' command completion; that  is,  completion  at\u2010\n              tempted on a command for which no completion has previously been defined.  The -E option indicates\n              that other supplied options and actions should apply to ``empty''  command  completion;  that  is,\n              completion attempted on a blank line.  The -I option indicates that other supplied options and ac\u2010\n              tions should apply to completion on the initial non-assignment word on the line, or after  a  com\u2010\n              mand  delimiter such as ; or |, which is usually command name completion.  If multiple options are\n              supplied, the -D option takes precedence over -E, and both take precedence over -I.  If any of -D,\n              -E,  or -I are supplied, any other name arguments are ignored; these completions only apply to the\n              case specified by the option.\n\n              The process of applying these completion specifications when word completion is attempted  is  de\u2010\n              scribed above under Programmable Completion.\n\n              Other options, if specified, have the following meanings.  The arguments to the -G, -W, and -X op\u2010\n              tions (and, if necessary, the -P and -S options) should be quoted to protect them  from  expansion\n              before the complete builtin is invoked.\n              -o comp-option\n                      The comp-option controls several aspects of the compspec's behavior beyond the simple gen\u2010\n                      eration of completions.  comp-option may be one of:\n                      bashdefault\n                              Perform the rest of the default bash completions  if  the  compspec  generates  no\n                              matches.\n                      default Use readline's default filename completion if the compspec generates no matches.\n                      dirnames\n                              Perform directory name completion if the compspec generates no matches.\n                      filenames\n                              Tell  readline  that the compspec generates filenames, so it can perform any file\u2010\n                              name-specific processing (like adding a slash to directory names, quoting  special\n                              characters, or suppressing trailing spaces).  Intended to be used with shell func\u2010\n                              tions.\n                      noquote Tell readline not to quote the completed words  if  they  are  filenames  (quoting\n                              filenames is the default).\n                      nosort  Tell readline not to sort the list of possible completions alphabetically.\n                      nospace Tell readline not to append a space (the default) to words completed at the end of\n                              the line.\n                      plusdirs\n                              After any matches defined by the compspec are generated, directory name completion\n                              is attempted and any matches are added to the results of the other actions.\n              -A action\n                      The action may be one of the following to generate a list of possible completions:\n                      alias   Alias names.  May also be specified as -a.\n                      arrayvar\n                              Array variable names.\n                      binding Readline key binding names.\n                      builtin Names of shell builtin commands.  May also be specified as -b.\n                      command Command names.  May also be specified as -c.\n                      directory\n                              Directory names.  May also be specified as -d.\n                      disabled\n                              Names of disabled shell builtins.\n                      enabled Names of enabled shell builtins.\n                      export  Names of exported shell variables.  May also be specified as -e.\n                      file    File names.  May also be specified as -f.\n                      function\n                              Names of shell functions.\n                      group   Group names.  May also be specified as -g.\n                      helptopic\n                              Help topics as accepted by the help builtin.\n                      hostname\n                              Hostnames, as taken from the file specified by the HOSTFILE shell variable.\n                      job     Job names, if job control is active.  May also be specified as -j.\n                      keyword Shell reserved words.  May also be specified as -k.\n                      running Names of running jobs, if job control is active.\n                      service Service names.  May also be specified as -s.\n                      setopt  Valid arguments for the -o option to the set builtin.\n                      shopt   Shell option names as accepted by the shopt builtin.\n                      signal  Signal names.\n                      stopped Names of stopped jobs, if job control is active.\n                      user    User names.  May also be specified as -u.\n                      variable\n                              Names of all shell variables.  May also be specified as -v.\n              -C command\n                      command is executed in a subshell environment, and its output is used as the possible com\u2010\n                      pletions.\n              -F function\n                      The shell function function is executed in the current shell environment.  When the  func\u2010\n                      tion  is  executed, the first argument ($1) is the name of the command whose arguments are\n                      being completed, the second argument ($2) is the word being completed, and the third argu\u2010\n                      ment  ($3)  is  the  word  preceding the word being completed on the current command line.\n                      When it finishes, the possible completions are retrieved from the value of  the  COMPREPLY\n                      array variable.\n              -G globpat\n                      The pathname expansion pattern globpat is expanded to generate the possible completions.\n              -P prefix\n                      prefix  is added at the beginning of each possible completion after all other options have\n                      been applied.\n              -S suffix\n                      suffix is appended to each possible completion after all other options have been applied.\n              -W wordlist\n                      The wordlist is split using the characters in the IFS special variable as delimiters,  and\n                      each  resultant  word  is expanded.  Shell quoting is honored within wordlist, in order to\n                      provide a mechanism for the words to contain shell metacharacters  or  characters  in  the\n                      value  of IFS.  The possible completions are the members of the resultant list which match\n                      the word being completed.\n              -X filterpat\n                      filterpat is a pattern as used for pathname expansion.  It is applied to the list of  pos\u2010\n                      sible  completions  generated  by the preceding options and arguments, and each completion\n                      matching filterpat is removed from the list.  A leading ! in filterpat  negates  the  pat\u2010\n                      tern; in this case, any completion not matching filterpat is removed.\n\n              The  return  value  is true unless an invalid option is supplied, an option other than -p or -r is\n              supplied without a name argument, an attempt is made to remove a completion  specification  for  a\n              name for which no specification exists, or an error occurs adding a completion specification.\n\n       compopt [-o option] [-DEI] [+o option] [name]\n              Modify  completion  options for each name according to the options, or for the currently-executing\n              completion if no names are supplied.  If no options are given, display the completion options  for\n              each  name  or the current completion.  The possible values of option are those valid for the com\u2010\n              plete builtin described above.  The -D option indicates that other supplied options  should  apply\n              to  the  ``default''  command  completion; that is, completion attempted on a command for which no\n              completion has previously been defined.  The -E  option  indicates  that  other  supplied  options\n              should  apply to ``empty'' command completion; that is, completion attempted on a blank line.  The\n              -I option indicates that other supplied options should apply to completion on the initial  non-as\u2010\n              signment  word  on the line, or after a command delimiter such as ; or |, which is usually command\n              name completion.\n\n              The return value is true unless an invalid option is supplied, an attempt is made  to  modify  the\n              options for a name for which no completion specification exists, or an output error occurs.\n\n       continue [n]\n              Resume  the next iteration of the enclosing for, while, until, or select loop.  If n is specified,\n              resume at the nth enclosing loop.  n must be \u2265 1.  If n is greater than the  number  of  enclosing\n              loops,  the last enclosing loop (the ``top-level'' loop) is resumed.  The return value is 0 unless\n              n is not greater than or equal to 1.\n\n       declare [-aAfFgiIlnrtux] [-p] [name[=value] ...]\n       typeset [-aAfFgiIlnrtux] [-p] [name[=value] ...]\n              Declare variables and/or give them attributes.  If no names are given then display the  values  of\n              variables.   The  -p  option will display the attributes and values of each name.  When -p is used\n              with name arguments, additional options, other than -f and -F, are ignored.  When -p  is  supplied\n              without  name arguments, it will display the attributes and values of all variables having the at\u2010\n              tributes specified by the additional options.  If no other options are supplied with  -p,  declare\n              will  display  the  attributes and values of all shell variables.  The -f option will restrict the\n              display to shell functions.  The -F option inhibits the display of function definitions; only  the\n              function  name  and  attributes are printed.  If the extdebug shell option is enabled using shopt,\n              the source file name and line number where each name is defined are displayed as well.  The -F op\u2010\n              tion  implies  -f.   The -g option forces variables to be created or modified at the global scope,\n              even when declare is executed in a shell function.  It is ignored in all other cases.  The -I  op\u2010\n              tion  causes local variables to inherit the attributes (except the nameref attribute) and value of\n              any existing variable with the same name at a surrounding scope.  If there is  no  existing  vari\u2010\n              able, the local variable is initially unset.  The following options can be used to restrict output\n              to variables with the specified attribute or to give variables attributes:\n              -a     Each name is an indexed array variable (see Arrays above).\n              -A     Each name is an associative array variable (see Arrays above).\n              -f     Use function names only.\n              -i     The variable is treated as an integer; arithmetic  evaluation  (see  ARITHMETIC  EVALUATION\n                     above) is performed when the variable is assigned a value.\n              -l     When  the  variable  is assigned a value, all upper-case characters are converted to lower-\n                     case.  The upper-case attribute is disabled.\n              -n     Give each name the nameref attribute, making it a name reference to another variable.  That\n                     other variable is defined by the value of name.  All references, assignments, and attribute\n                     modifications to name, except those using or changing the -n  attribute  itself,  are  per\u2010\n                     formed on the variable referenced by name's value.  The nameref attribute cannot be applied\n                     to array variables.\n              -r     Make names readonly.  These names cannot then be assigned values by  subsequent  assignment\n                     statements or unset.\n              -t     Give  each  name  the trace attribute.  Traced functions inherit the DEBUG and RETURN traps\n                     from the calling shell.  The trace attribute has no special meaning for variables.\n              -u     When the variable is assigned a value, all lower-case characters are  converted  to  upper-\n                     case.  The lower-case attribute is disabled.\n              -x     Mark names for export to subsequent commands via the environment.\n\n              Using  `+'  instead of `-' turns off the attribute instead, with the exceptions that +a and +A may\n              not be used to destroy array variables and +r will not remove the readonly attribute.   When  used\n              in  a function, declare and typeset make each name local, as with the local command, unless the -g\n              option is supplied.  If a variable name is followed by =value, the value of the variable is set to\n              value.   When  using  -a or -A and the compound assignment syntax to create array variables, addi\u2010\n              tional attributes do not take effect until subsequent assignments.  The return value is  0  unless\n              an invalid option is encountered, an attempt is made to define a function using ``-f foo=bar'', an\n              attempt is made to assign a value to a readonly variable, an attempt is made to assign a value  to\n              an  array  variable  without  using  the compound assignment syntax (see Arrays above), one of the\n              names is not a valid shell variable name, an attempt is made to turn off  readonly  status  for  a\n              readonly  variable,  an  attempt is made to turn off array status for an array variable, or an at\u2010\n              tempt is made to display a non-existent function with -f.\n\n       dirs [-clpv] [+n] [-n]\n              Without options, displays the list of currently remembered directories.  The default display is on\n              a  single  line  with directory names separated by spaces.  Directories are added to the list with\n              the pushd command; the popd command removes entries from the list.  The current directory  is  al\u2010\n              ways the first directory in the stack.\n              -c     Clears the directory stack by deleting all of the entries.\n              -l     Produces  a listing using full pathnames; the default listing format uses a tilde to denote\n                     the home directory.\n              -p     Print the directory stack with one entry per line.\n              -v     Print the directory stack with one entry per line, prefixing each entry with its  index  in\n                     the stack.\n              +n     Displays  the nth entry counting from the left of the list shown by dirs when invoked with\u2010\n                     out options, starting with zero.\n              -n     Displays the nth entry counting from the right of the list shown by dirs when invoked with\u2010\n                     out options, starting with zero.\n\n              The  return value is 0 unless an invalid option is supplied or n indexes beyond the end of the di\u2010\n              rectory stack.\n\n       disown [-ar] [-h] [jobspec ... | pid ... ]\n              Without options, remove each jobspec from the table of active jobs.  If jobspec  is  not  present,\n              and  neither  the  -a nor the -r option is supplied, the current job is used.  If the -h option is\n              given, each jobspec is not removed from the table, but is marked so that SIGHUP is not sent to the\n              job  if  the shell receives a SIGHUP.  If no jobspec is supplied, the -a option means to remove or\n              mark all jobs; the -r option without a jobspec argument restricts operation to running jobs.   The\n              return value is 0 unless a jobspec does not specify a valid job.\n\n       echo [-neE] [arg ...]\n              Output  the  args,  separated  by  spaces, followed by a newline.  The return status is 0 unless a\n              write error occurs.  If -n is specified, the trailing newline is suppressed.  If the -e option  is\n              given,  interpretation  of  the  following backslash-escaped characters is enabled.  The -E option\n              disables the interpretation of these escape characters, even on systems where they are interpreted\n              by  default.   The  xpg_echo shell option may be used to dynamically determine whether or not echo\n              expands these escape characters by default.  echo does not interpret -- to mean  the  end  of  op\u2010\n              tions.  echo interprets the following escape sequences:\n              \\a     alert (bell)\n              \\b     backspace\n              \\c     suppress further output\n              \\e\n              \\E     an escape character\n              \\f     form feed\n              \\n     new line\n              \\r     carriage return\n              \\t     horizontal tab\n              \\v     vertical tab\n              \\\\     backslash\n              \\0nnn  the eight-bit character whose value is the octal value nnn (zero to three octal digits)\n              \\xHH   the eight-bit character whose value is the hexadecimal value HH (one or two hex digits)\n              \\uHHHH the  Unicode  (ISO/IEC  10646)  character whose value is the hexadecimal value HHHH (one to\n                     four hex digits)\n              \\UHHHHHHHH\n                     the Unicode (ISO/IEC 10646) character whose value is the hexadecimal value HHHHHHHH (one to\n                     eight hex digits)\n\n       enable [-a] [-dnps] [-f filename] [name ...]\n              Enable  and  disable  builtin shell commands.  Disabling a builtin allows a disk command which has\n              the same name as a shell builtin to be executed without specifying a full  pathname,  even  though\n              the  shell  normally searches for builtins before disk commands.  If -n is used, each name is dis\u2010\n              abled; otherwise, names are enabled.  For example, to use the test binary found via the  PATH  in\u2010\n              stead  of  the shell builtin version, run ``enable -n test''.  The -f option means to load the new\n              builtin command name from shared object filename, on systems that support dynamic loading.  The -d\n              option will delete a builtin previously loaded with -f.  If no name arguments are given, or if the\n              -p option is supplied, a list of shell builtins is printed.  With no other option  arguments,  the\n              list  consists  of  all  enabled  shell  builtins.   If -n is supplied, only disabled builtins are\n              printed.  If -a is supplied, the list printed includes all builtins, with an indication of whether\n              or  not  each  is  enabled.   If  -s  is  supplied,  the output is restricted to the POSIX special\n              builtins.  The return value is 0 unless a name is not a shell builtin or there is an error loading\n              a new builtin from a shared object.\n\n       eval [arg ...]\n              The  args are read and concatenated together into a single command.  This command is then read and\n              executed by the shell, and its exit status is returned as the value of  eval.   If  there  are  no\n              args, or only null arguments, eval returns 0.\n\n       exec [-cl] [-a name] [command [arguments]]\n              If  command is specified, it replaces the shell.  No new process is created.  The arguments become\n              the arguments to command.  If the -l option is supplied, the shell places a dash at the  beginning\n              of  the zeroth argument passed to command.  This is what login(1) does.  The -c option causes com\u2010\n              mand to be executed with an empty environment.  If -a is supplied, the shell passes  name  as  the\n              zeroth argument to the executed command.  If command cannot be executed for some reason, a non-in\u2010\n              teractive shell exits, unless the execfail shell option is enabled.   In  that  case,  it  returns\n              failure.   An  interactive shell returns failure if the file cannot be executed.  A subshell exits\n              unconditionally if exec fails.  If command is not specified, any redirections take effect  in  the\n              current  shell, and the return status is 0.  If there is a redirection error, the return status is\n              1.\n\n       exit [n]\n              Cause the shell to exit with a status of n.  If n is omitted, the exit status is that of the  last\n              command executed.  A trap on EXIT is executed before the shell terminates.\n\n       export [-fn] [name[=word]] ...\n       export -p\n              The  supplied  names  are  marked for automatic export to the environment of subsequently executed\n              commands.  If the -f option is given, the names refer to functions.  If no names are given, or  if\n              the  -p  option  is supplied, a list of names of all exported variables is printed.  The -n option\n              causes the export property to be removed from each name.  If a variable name is followed by =word,\n              the  value  of  the variable is set to word.  export returns an exit status of 0 unless an invalid\n              option is encountered, one of the names is not a valid shell variable name, or -f is supplied with\n              a name that is not a function.\n\n       fc [-e ename] [-lnr] [first] [last]\n       fc -s [pat=rep] [cmd]\n              The  first  form selects a range of commands from first to last from the history list and displays\n              or edits and re-executes them.  First and last may be specified as a string (to  locate  the  last\n              command  beginning with that string) or as a number (an index into the history list, where a nega\u2010\n              tive number is used as an offset from the current command number).  When listing, a first or  last\n              of  0  is  equivalent  to -1 and -0 is equivalent to the current command (usually the fc command);\n              otherwise 0 is equivalent to -1 and -0 is invalid.  If last is not specified, it  is  set  to  the\n              current  command for listing (so that ``fc -l -10'' prints the last 10 commands) and to first oth\u2010\n              erwise.  If first is not specified, it is set to the previous command  for  editing  and  -16  for\n              listing.\n\n              The  -n  option  suppresses the command numbers when listing.  The -r option reverses the order of\n              the commands.  If the -l option is given, the commands are listed on standard output.   Otherwise,\n              the  editor given by ename is invoked on a file containing those commands.  If ename is not given,\n              the value of the FCEDIT variable is used, and the value of EDITOR if FCEDIT is not set.   If  nei\u2010\n              ther  variable  is  set, vi is used.  When editing is complete, the edited commands are echoed and\n              executed.\n\n              In the second form, command is re-executed after each instance of pat is replaced by rep.  Command\n              is interpreted the same as first above.  A useful alias to use with this is ``r=\"fc -s\"'', so that\n              typing ``r cc'' runs the last command beginning with ``cc'' and typing ``r'' re-executes the  last\n              command.\n\n              If  the first form is used, the return value is 0 unless an invalid option is encountered or first\n              or last specify history lines out of range.  If the -e option is supplied, the return value is the\n              value  of  the last command executed or failure if an error occurs with the temporary file of com\u2010\n              mands.  If the second form is used, the return status is that of the command  re-executed,  unless\n              cmd does not specify a valid history line, in which case fc returns failure.\n\n       fg [jobspec]\n              Resume  jobspec  in  the  foreground, and make it the current job.  If jobspec is not present, the\n              shell's notion of the current job is used.  The return value is that of the  command  placed  into\n              the  foreground,  or failure if run when job control is disabled or, when run with job control en\u2010\n              abled, if jobspec does not specify a valid job or jobspec specifies a job that was started without\n              job control.\n\n       getopts optstring name [arg ...]\n              getopts is used by shell procedures to parse positional parameters.  optstring contains the option\n              characters to be recognized; if a character is followed by a colon, the option is expected to have\n              an  argument, which should be separated from it by white space.  The colon and question mark char\u2010\n              acters may not be used as option characters.  Each time it is invoked, getopts places the next op\u2010\n              tion in the shell variable name, initializing name if it does not exist, and the index of the next\n              argument to be processed into the variable OPTIND.  OPTIND is initialized to 1 each time the shell\n              or  a  shell script is invoked.  When an option requires an argument, getopts places that argument\n              into the variable OPTARG.  The shell does not reset OPTIND automatically; it must be manually  re\u2010\n              set  between multiple calls to getopts within the same shell invocation if a new set of parameters\n              is to be used.\n\n              When the end of options is encountered, getopts exits with  a  return  value  greater  than  zero.\n              OPTIND is set to the index of the first non-option argument, and name is set to ?.\n\n              getopts  normally parses the positional parameters, but if more arguments are supplied as arg val\u2010\n              ues, getopts parses those instead.\n\n              getopts can report errors in two ways.  If the first character of optstring is a colon, silent er\u2010\n              ror  reporting is used.  In normal operation, diagnostic messages are printed when invalid options\n              or missing option arguments are encountered.  If the variable OPTERR is set to 0,  no  error  mes\u2010\n              sages will be displayed, even if the first character of optstring is not a colon.\n\n              If  an invalid option is seen, getopts places ? into name and, if not silent, prints an error mes\u2010\n              sage and unsets OPTARG.  If getopts is silent, the option character found is placed in OPTARG  and\n              no diagnostic message is printed.\n\n              If  a  required argument is not found, and getopts is not silent, a question mark (?) is placed in\n              name, OPTARG is unset, and a diagnostic message is printed.  If getopts is silent,  then  a  colon\n              (:) is placed in name and OPTARG is set to the option character found.\n\n              getopts  returns  true  if an option, specified or unspecified, is found.  It returns false if the\n              end of options is encountered or an error occurs.\n\n       hash [-lr] [-p filename] [-dt] [name]\n              Each time hash is invoked, the full pathname of the command name is determined  by  searching  the\n              directories  in $PATH and remembered.  Any previously-remembered pathname is discarded.  If the -p\n              option is supplied, no path search is performed, and filename is used as the full filename of  the\n              command.  The -r option causes the shell to forget all remembered locations.  The -d option causes\n              the shell to forget the remembered location of each name.  If the -t option is supplied, the  full\n              pathname  to which each name corresponds is printed.  If multiple name arguments are supplied with\n              -t, the name is printed before the hashed full pathname.  The -l option causes output to  be  dis\u2010\n              played  in a format that may be reused as input.  If no arguments are given, or if only -l is sup\u2010\n              plied, information about remembered commands is printed.  The return status is true unless a  name\n              is not found or an invalid option is supplied.\n\n       help [-dms] [pattern]\n              Display  helpful information about builtin commands.  If pattern is specified, help gives detailed\n              help on all commands matching pattern; otherwise help for  all  the  builtins  and  shell  control\n              structures is printed.\n              -d     Display a short description of each pattern\n              -m     Display the description of each pattern in a manpage-like format\n              -s     Display only a short usage synopsis for each pattern\n\n              The return status is 0 unless no command matches pattern.\n\n       history [n]\n       history -c\n       history -d offset\n       history -d start-end\n       history -anrw [filename]\n       history -p arg [arg ...]\n       history -s arg [arg ...]\n              With  no  options, display the command history list with line numbers.  Lines listed with a * have\n              been modified.  An argument of n lists only the last n lines.  If the shell variable  HISTTIMEFOR\u2010\n              MAT  is  set and not null, it is used as a format string for strftime(3) to display the time stamp\n              associated with each displayed history entry.  No intervening blank is printed between the format\u2010\n              ted  time stamp and the history line.  If filename is supplied, it is used as the name of the his\u2010\n              tory file; if not, the value of HISTFILE is used.  Options, if supplied, have the following  mean\u2010\n              ings:\n              -c     Clear the history list by deleting all the entries.\n              -d offset\n                     Delete  the  history entry at position offset.  If offset is negative, it is interpreted as\n                     relative to one greater than the last history position, so negative indices count back from\n                     the end of the history, and an index of -1 refers to the current history -d command.\n              -d start-end\n                     Delete  the history entries between positions start and end, inclusive.  Positive and nega\u2010\n                     tive values for start and end are interpreted as described above.\n              -a     Append the ``new'' history lines to the history file.   These  are  history  lines  entered\n                     since  the  beginning  of the current bash session, but not already appended to the history\n                     file.\n              -n     Read the history lines not already read from the history  file  into  the  current  history\n                     list.  These are lines appended to the history file since the beginning of the current bash\n                     session.\n              -r     Read the contents of the history file and append them to the current history list.\n              -w     Write the current history list to the history file, overwriting  the  history  file's  con\u2010\n                     tents.\n              -p     Perform  history  substitution on the following args and display the result on the standard\n                     output.  Does not store the results in the history list.  Each arg must be quoted  to  dis\u2010\n                     able normal history expansion.\n              -s     Store the args in the history list as a single entry.  The last command in the history list\n                     is removed before the args are added.\n\n              If the HISTTIMEFORMAT variable is set, the time stamp information associated with each history en\u2010\n              try  is  written to the history file, marked with the history comment character.  When the history\n              file is read, lines beginning with the history comment character followed immediately by  a  digit\n              are  interpreted  as  timestamps for the following history entry.  The return value is 0 unless an\n              invalid option is encountered, an error occurs while reading or writing the history file,  an  in\u2010\n              valid offset is supplied as an argument to -d, or the history expansion supplied as an argument to\n              -p fails.\n\n       jobs [-lnprs] [ jobspec ... ]\n       jobs -x command [ args ... ]\n              The first form lists the active jobs.  The options have the following meanings:\n              -l     List process IDs in addition to the normal information.\n              -n     Display information only about jobs that have changed status since the user was last  noti\u2010\n                     fied of their status.\n              -p     List only the process ID of the job's process group leader.\n              -r     Display only running jobs.\n              -s     Display only stopped jobs.\n\n              If  jobspec  is given, output is restricted to information about that job.  The return status is 0\n              unless an invalid option is encountered or an invalid jobspec is supplied.\n\n              If the -x option is supplied, jobs replaces any jobspec found in command or args with  the  corre\u2010\n              sponding process group ID, and executes command passing it args, returning its exit status.\n\n       kill [-s sigspec | -n signum | -sigspec] [pid | jobspec] ...\n       kill -l|-L [sigspec | exit_status]\n              Send  the  signal named by sigspec or signum to the processes named by pid or jobspec.  sigspec is\n              either a case-insensitive signal name such as SIGKILL (with or without the SIG prefix) or a signal\n              number;  signum is a signal number.  If sigspec is not present, then SIGTERM is assumed.  An argu\u2010\n              ment of -l lists the signal names.  If any arguments are supplied when -l is given, the  names  of\n              the  signals corresponding to the arguments are listed, and the return status is 0.  The exit_sta\u2010\n              tus argument to -l is a number specifying either a signal number or the exit status of  a  process\n              terminated  by  a  signal.   The -L option is equivalent to -l.  kill returns true if at least one\n              signal was successfully sent, or false if an error occurs or an invalid option is encountered.\n\n       let arg [arg ...]\n              Each arg is an arithmetic expression to be evaluated (see ARITHMETIC EVALUATION  above).   If  the\n              last arg evaluates to 0, let returns 1; 0 is returned otherwise.\n\n       local [option] [name[=value] ... | - ]\n              For  each argument, a local variable named name is created, and assigned value.  The option can be\n              any of the options accepted by declare.  When local is used within a function, it causes the vari\u2010\n              able name to have a visible scope restricted to that function and its children.  If name is -, the\n              set of shell options is made local to the function  in  which  local  is  invoked:  shell  options\n              changed  using  the set builtin inside the function are restored to their original values when the\n              function returns.  The restore is effected as if a series of set commands were executed to restore\n              the values that were in place before the function.  With no operands, local writes a list of local\n              variables to the standard output.  It is an error to use local when not within  a  function.   The\n              return  status  is 0 unless local is used outside a function, an invalid name is supplied, or name\n              is a readonly variable.\n\n       logout Exit a login shell.\n\n       mapfile [-d delim] [-n count] [-O origin] [-s count] [-t] [-u fd] [-C callback] [-c quantum] [array]\n       readarray [-d delim] [-n count] [-O origin] [-s count] [-t] [-u fd] [-C callback] [-c quantum] [array]\n              Read lines from the standard input into the indexed array variable array, or from file  descriptor\n              fd  if  the  -u  option is supplied.  The variable MAPFILE is the default array.  Options, if sup\u2010\n              plied, have the following meanings:\n              -d     The first character of delim is used to terminate each input line, rather than newline.  If\n                     delim is the empty string, mapfile will terminate a line when it reads a NUL character.\n              -n     Copy at most count lines.  If count is 0, all lines are copied.\n              -O     Begin assigning to array at index origin.  The default index is 0.\n              -s     Discard the first count lines read.\n              -t     Remove a trailing delim (default newline) from each line read.\n              -u     Read lines from file descriptor fd instead of the standard input.\n              -C     Evaluate callback each time quantum lines are read.  The -c option specifies quantum.\n              -c     Specify the number of lines read between each call to callback.\n\n              If  -C  is  specified  without -c, the default quantum is 5000.  When callback is evaluated, it is\n              supplied the index of the next array element to be assigned and the line to be  assigned  to  that\n              element  as additional arguments.  callback is evaluated after the line is read but before the ar\u2010\n              ray element is assigned.\n\n              If not supplied with an explicit origin, mapfile will clear array before assigning to it.\n\n              mapfile returns successfully unless an invalid option or option argument is supplied, array is in\u2010\n              valid or unassignable, or if array is not an indexed array.\n\n       popd [-n] [+n] [-n]\n              Removes  entries  from the directory stack.  With no arguments, removes the top directory from the\n              stack, and performs a cd to the new top directory.  Arguments, if  supplied,  have  the  following\n              meanings:\n              -n     Suppresses the normal change of directory when removing directories from the stack, so that\n                     only the stack is manipulated.\n              +n     Removes the nth entry counting from the left of the list shown by dirs, starting with zero.\n                     For example: ``popd +0'' removes the first directory, ``popd +1'' the second.\n              -n     Removes  the  nth  entry  counting  from the right of the list shown by dirs, starting with\n                     zero.  For example: ``popd -0'' removes the last directory, ``popd -1'' the next to last.\n\n              If the popd command is successful, a dirs is performed as well, and the return status is 0.   popd\n              returns  false  if  an invalid option is encountered, the directory stack is empty, a non-existent\n              directory stack entry is specified, or the directory change fails.\n\n       printf [-v var] format [arguments]\n              Write the formatted arguments to the standard output under the control of the format.  The -v  op\u2010\n              tion  causes  the output to be assigned to the variable var rather than being printed to the stan\u2010\n              dard output.\n\n              The format is a character string which contains three types of objects:  plain  characters,  which\n              are  simply  copied to standard output, character escape sequences, which are converted and copied\n              to the standard output, and format specifications, each of which causes printing of the next  suc\u2010\n              cessive  argument.  In addition to the standard printf(1) format specifications, printf interprets\n              the following extensions:\n              %b     causes printf to expand backslash escape sequences in the  corresponding  argument  in  the\n                     same way as echo -e.\n              %q     causes  printf to output the corresponding argument in a format that can be reused as shell\n                     input.\n              %(datefmt)T\n                     causes printf to output the date-time string resulting  from  using  datefmt  as  a  format\n                     string  for  strftime(3).  The corresponding argument is an integer representing the number\n                     of seconds since the epoch.  Two special argument values may be  used:  -1  represents  the\n                     current  time,  and -2 represents the time the shell was invoked.  If no argument is speci\u2010\n                     fied, conversion behaves as if -1 had been given.  This is an exception to the usual printf\n                     behavior.\n\n              The  %b,  %q,  and  %T  directives all use the field width and precision arguments from the format\n              specification and write that many bytes from (or use that wide a field for) the expanded argument,\n              which usually contains more characters than the original.\n\n              Arguments  to  non-string format specifiers are treated as C constants, except that a leading plus\n              or minus sign is allowed, and if the leading character is a single or double quote, the  value  is\n              the ASCII value of the following character.\n\n              The  format  is  reused as necessary to consume all of the arguments.  If the format requires more\n              arguments than are supplied, the extra format specifications behave as if a  zero  value  or  null\n              string, as appropriate, had been supplied.  The return value is zero on success, non-zero on fail\u2010\n              ure.\n\n       pushd [-n] [+n] [-n]\n       pushd [-n] [dir]\n              Adds a directory to the top of the directory stack, or rotates the stack, making the  new  top  of\n              the  stack the current working directory.  With no arguments, pushd exchanges the top two directo\u2010\n              ries and returns 0, unless the directory stack is empty.  Arguments, if supplied, have the follow\u2010\n              ing meanings:\n              -n     Suppresses the normal change of directory when rotating or adding directories to the stack,\n                     so that only the stack is manipulated.\n              +n     Rotates the stack so that the nth directory (counting from the left of the  list  shown  by\n                     dirs, starting with zero) is at the top.\n              -n     Rotates  the  stack so that the nth directory (counting from the right of the list shown by\n                     dirs, starting with zero) is at the top.\n              dir    Adds dir to the directory stack at the top, making it the new current working directory  as\n                     if it had been supplied as the argument to the cd builtin.\n\n              If the pushd command is successful, a dirs is performed as well.  If the first form is used, pushd\n              returns 0 unless the cd to dir fails.  With the second form, pushd returns 0 unless the  directory\n              stack  is  empty,  a non-existent directory stack element is specified, or the directory change to\n              the specified new current directory fails.\n\n       pwd [-LP]\n              Print the absolute pathname of the current working directory.  The pathname  printed  contains  no\n              symbolic  links  if the -P option is supplied or the -o physical option to the set builtin command\n              is enabled.  If the -L option is used, the pathname printed may contain symbolic links.   The  re\u2010\n              turn  status is 0 unless an error occurs while reading the name of the current directory or an in\u2010\n              valid option is supplied.\n\n       read [-ers] [-a aname] [-d delim] [-i text] [-n nchars] [-N nchars] [-p  prompt]  [-t  timeout]  [-u  fd]\n       [name ...]\n              One  line  is read from the standard input, or from the file descriptor fd supplied as an argument\n              to the -u option, split into words as described above under Word Splitting, and the first word  is\n              assigned  to  the  first  name,  the second word to the second name, and so on.  If there are more\n              words than names, the remaining words and their intervening delimiters are assigned  to  the  last\n              name.  If there are fewer words read from the input stream than names, the remaining names are as\u2010\n              signed empty values.  The characters in IFS are used to split the line into words using  the  same\n              rules  the shell uses for expansion (described above under Word Splitting).  The backslash charac\u2010\n              ter (\\) may be used to remove any special meaning for the next character read and for line contin\u2010\n              uation.  Options, if supplied, have the following meanings:\n              -a aname\n                     The  words  are  assigned to sequential indices of the array variable aname, starting at 0.\n                     aname is unset before any new values are assigned.  Other name arguments are ignored.\n              -d delim\n                     The first character of delim is used to terminate the input line, rather than newline.   If\n                     delim is the empty string, read will terminate a line when it reads a NUL character.\n              -e     If  the  standard input is coming from a terminal, readline (see READLINE above) is used to\n                     obtain the line.  Readline uses the current (or default, if line editing was not previously\n                     active) editing settings, but uses Readline's default filename completion.\n              -i text\n                     If  readline  is being used to read the line, text is placed into the editing buffer before\n                     editing begins.\n              -n nchars\n                     read returns after reading nchars characters rather than waiting for a complete line of in\u2010\n                     put, but honors a delimiter if fewer than nchars characters are read before the delimiter.\n              -N nchars\n                     read  returns  after  reading  exactly nchars characters rather than waiting for a complete\n                     line of input, unless EOF is encountered or read times out.  Delimiter  characters  encoun\u2010\n                     tered  in  the input are not treated specially and do not cause read to return until nchars\n                     characters are read.  The result is not split on the characters in IFS; the intent is  that\n                     the  variable is assigned exactly the characters read (with the exception of backslash; see\n                     the -r option below).\n              -p prompt\n                     Display prompt on standard error, without a trailing newline, before attempting to read any\n                     input.  The prompt is displayed only if input is coming from a terminal.\n              -r     Backslash  does  not act as an escape character.  The backslash is considered to be part of\n                     the line.  In particular, a backslash-newline pair may not then be used as a line continua\u2010\n                     tion.\n              -s     Silent mode.  If input is coming from a terminal, characters are not echoed.\n              -t timeout\n                     Cause  read to time out and return failure if a complete line of input (or a specified num\u2010\n                     ber of characters) is not read within timeout seconds.  timeout may  be  a  decimal  number\n                     with  a  fractional  portion following the decimal point.  This option is only effective if\n                     read is reading input from a terminal, pipe, or other special file; it has no  effect  when\n                     reading  from regular files.  If read times out, read saves any partial input read into the\n                     specified variable name.  If timeout is 0, read returns immediately, without trying to read\n                     any  data.   The  exit  status is 0 if input is available on the specified file descriptor,\n                     non-zero otherwise.  The exit status is greater than 128 if the timeout is exceeded.\n              -u fd  Read input from file descriptor fd.\n\n              If no names are supplied, the line read, without the ending delimiter but otherwise unmodified, is\n              assigned  to the variable REPLY.  The exit status is zero, unless end-of-file is encountered, read\n              times out (in which case the status is greater than 128), a variable assignment error (such as as\u2010\n              signing  to a readonly variable) occurs, or an invalid file descriptor is supplied as the argument\n              to -u.\n\n       readonly [-aAf] [-p] [name[=word] ...]\n              The given names are marked readonly; the values of these names may not be  changed  by  subsequent\n              assignment.  If the -f option is supplied, the functions corresponding to the names are so marked.\n              The -a option restricts the variables to indexed arrays; the -A option restricts the variables  to\n              associative  arrays.  If both options are supplied, -A takes precedence.  If no name arguments are\n              given, or if the -p option is supplied, a list of all readonly names is printed.   The  other  op\u2010\n              tions  may be used to restrict the output to a subset of the set of readonly names.  The -p option\n              causes output to be displayed in a format that may be reused as input.  If a variable name is fol\u2010\n              lowed  by  =word,  the value of the variable is set to word.  The return status is 0 unless an in\u2010\n              valid option is encountered, one of the names is not a valid shell variable name, or  -f  is  sup\u2010\n              plied with a name that is not a function.\n\n       return [n]\n              Causes  a  function  to stop executing and return the value specified by n to its caller.  If n is\n              omitted, the return status is that of the last command executed in the function body.   If  return\n              is  executed  by a trap handler, the last command used to determine the status is the last command\n              executed before the trap handler.  If return is executed during a DEBUG  trap,  the  last  command\n              used  to  determine  the status is the last command executed by the trap handler before return was\n              invoked.  If return is used outside a function,  but  during  execution  of  a  script  by  the  .\n              (source)  command,  it  causes  the shell to stop executing that script and return either n or the\n              exit status of the last command executed within the script as the exit status of the script.  If n\n              is  supplied,  the return value is its least significant 8 bits.  The return status is non-zero if\n              return is supplied a non-numeric argument, or is used outside a function and not during  execution\n              of a script by . or source.  Any command associated with the RETURN trap is executed before execu\u2010\n              tion resumes after the function or script.\n\n       set [--abefhkmnptuvxBCEHPT] [-o option-name] [arg ...]\n       set [+abefhkmnptuvxBCEHPT] [+o option-name] [arg ...]\n              Without options, the name and value of each shell variable are displayed in a format that  can  be\n              reused  as input for setting or resetting the currently-set variables.  Read-only variables cannot\n              be reset.  In posix mode, only shell variables are listed.  The output is sorted according to  the\n              current  locale.   When  options are specified, they set or unset shell attributes.  Any arguments\n              remaining after option processing are treated as values for the positional parameters and are  as\u2010\n              signed, in order, to $1, $2, ...  $n.  Options, if specified, have the following meanings:\n              -a      Each  variable  or  function that is created or modified is given the export attribute and\n                      marked for export to the environment of subsequent commands.\n              -b      Report the status of terminated background jobs immediately, rather than before  the  next\n                      primary prompt.  This is effective only when job control is enabled.\n              -e      Exit  immediately if a pipeline (which may consist of a single simple command), a list, or\n                      a compound command (see SHELL GRAMMAR above), exits with a  non-zero  status.   The  shell\n                      does  not exit if the command that fails is part of the command list immediately following\n                      a while or until keyword, part of the test following the if or elif reserved  words,  part\n                      of  any  command  executed in a && or || list except the command following the final && or\n                      ||, any command in a pipeline but the last, or if the command's return value is being  in\u2010\n                      verted  with !.  If a compound command other than a subshell returns a non-zero status be\u2010\n                      cause a command failed while -e was being ignored, the shell does not  exit.   A  trap  on\n                      ERR,  if  set, is executed before the shell exits.  This option applies to the shell envi\u2010\n                      ronment and each  subshell  environment  separately  (see  COMMAND  EXECUTION  ENVIRONMENT\n                      above), and may cause subshells to exit before executing all the commands in the subshell.\n\n                      If  a  compound command or shell function executes in a context where -e is being ignored,\n                      none of the commands executed within the compound command or function  body  will  be  af\u2010\n                      fected  by the -e setting, even if -e is set and a command returns a failure status.  If a\n                      compound command or shell function sets -e while executing in a context where  -e  is  ig\u2010\n                      nored,  that  setting  will  not have any effect until the compound command or the command\n                      containing the function call completes.\n              -f      Disable pathname expansion.\n              -h      Remember the location of commands as they are looked up for execution.  This is enabled by\n                      default.\n              -k      All  arguments  in  the  form of assignment statements are placed in the environment for a\n                      command, not just those that precede the command name.\n              -m      Monitor mode.  Job control is enabled.  This option  is  on  by  default  for  interactive\n                      shells  on  systems that support it (see JOB CONTROL above).  All processes run in a sepa\u2010\n                      rate process group.  When a background job completes, the shell prints a  line  containing\n                      its exit status.\n              -n      Read  commands but do not execute them.  This may be used to check a shell script for syn\u2010\n                      tax errors.  This is ignored by interactive shells.\n              -o option-name\n                      The option-name can be one of the following:\n                      allexport\n                              Same as -a.\n                      braceexpand\n                              Same as -B.\n                      emacs   Use an emacs-style command line editing interface.  This  is  enabled  by  default\n                              when  the  shell  is interactive, unless the shell is started with the --noediting\n                              option.  This also affects the editing interface used for read -e.\n                      errexit Same as -e.\n                      errtrace\n                              Same as -E.\n                      functrace\n                              Same as -T.\n                      hashall Same as -h.\n                      histexpand\n                              Same as -H.\n                      history Enable command history, as described above under HISTORY.  This option  is  on  by\n                              default in interactive shells.\n                      ignoreeof\n                              The  effect  is  as  if  the shell command ``IGNOREEOF=10'' had been executed (see\n                              Shell Variables above).\n                      keyword Same as -k.\n                      monitor Same as -m.\n                      noclobber\n                              Same as -C.\n                      noexec  Same as -n.\n                      noglob  Same as -f.\n                      nolog   Currently ignored.\n                      notify  Same as -b.\n                      nounset Same as -u.\n                      onecmd  Same as -t.\n                      physical\n                              Same as -P.\n                      pipefail\n                              If set, the return value of a pipeline is the value of the last  (rightmost)  com\u2010\n                              mand  to exit with a non-zero status, or zero if all commands in the pipeline exit\n                              successfully.  This option is disabled by default.\n                      posix   Change the behavior of bash where the default operation  differs  from  the  POSIX\n                              standard  to  match the standard (posix mode).  See SEE ALSO below for a reference\n                              to a document that details how posix mode affects bash's behavior.\n                      privileged\n                              Same as -p.\n                      verbose Same as -v.\n                      vi      Use a vi-style command line editing interface.  This also affects the editing  in\u2010\n                              terface used for read -e.\n                      xtrace  Same as -x.\n                      If  -o is supplied with no option-name, the values of the current options are printed.  If\n                      +o is supplied with no option-name, a series of set commands to recreate the  current  op\u2010\n                      tion settings is displayed on the standard output.\n              -p      Turn  on  privileged  mode.  In this mode, the $ENV and $BASH_ENV files are not processed,\n                      shell functions are not inherited from the environment, and the SHELLOPTS,  BASHOPTS,  CD\u2010\n                      PATH,  and  GLOBIGNORE  variables, if they appear in the environment, are ignored.  If the\n                      shell is started with the effective user (group) id not equal to the real user (group) id,\n                      and  the  -p  option is not supplied, these actions are taken and the effective user id is\n                      set to the real user id.  If the -p option is supplied at startup, the effective  user  id\n                      is  not  reset.  Turning this option off causes the effective user and group ids to be set\n                      to the real user and group ids.\n              -t      Exit after reading and executing one command.\n              -u      Treat unset variables and parameters other than the special parameters \"@\" and \"*\"  as  an\n                      error when performing parameter expansion.  If expansion is attempted on an unset variable\n                      or parameter, the shell prints an error message, and, if not  interactive,  exits  with  a\n                      non-zero status.\n              -v      Print shell input lines as they are read.\n              -x      After  expanding each simple command, for command, case command, select command, or arith\u2010\n                      metic for command, display the expanded value of PS4, followed by the command and its  ex\u2010\n                      panded arguments or associated word list.\n              -B      The shell performs brace expansion (see Brace Expansion above).  This is on by default.\n              -C      If set, bash does not overwrite an existing file with the >, >&, and <> redirection opera\u2010\n                      tors.  This may be overridden when creating output files by using the redirection operator\n                      >| instead of >.\n              -E      If  set,  any trap on ERR is inherited by shell functions, command substitutions, and com\u2010\n                      mands executed in a subshell environment.  The ERR trap is normally not inherited in  such\n                      cases.\n              -H      Enable  !  style history substitution.  This option is on by default when the shell is in\u2010\n                      teractive.\n              -P      If set, the shell does not resolve symbolic links when executing commands such as cd  that\n                      change  the  current working directory.  It uses the physical directory structure instead.\n                      By default, bash follows the logical chain of directories when performing  commands  which\n                      change the current directory.\n              -T      If  set, any traps on DEBUG and RETURN are inherited by shell functions, command substitu\u2010\n                      tions, and commands executed in a subshell environment.  The DEBUG and  RETURN  traps  are\n                      normally not inherited in such cases.\n              --      If  no arguments follow this option, then the positional parameters are unset.  Otherwise,\n                      the positional parameters are set to the args, even if some of them begin with a -.\n              -       Signal the end of options, cause all remaining args to be assigned to the  positional  pa\u2010\n                      rameters.  The -x and -v options are turned off.  If there are no args, the positional pa\u2010\n                      rameters remain unchanged.\n\n              The options are off by default unless otherwise noted.  Using + rather than - causes these options\n              to  be  turned off.  The options can also be specified as arguments to an invocation of the shell.\n              The current set of options may be found in $-.  The return status is always true unless an invalid\n              option is encountered.\n\n       shift [n]\n              The  positional parameters from n+1 ... are renamed to $1 ....  Parameters represented by the num\u2010\n              bers $# down to $#-n+1 are unset.  n must be a non-negative number less than or equal to $#.  If n\n              is  0, no parameters are changed.  If n is not given, it is assumed to be 1.  If n is greater than\n              $#, the positional parameters are not changed.  The return status is greater than  zero  if  n  is\n              greater than $# or less than zero; otherwise 0.\n\n       shopt [-pqsu] [-o] [optname ...]\n              Toggle  the  values  of  settings controlling optional shell behavior.  The settings can be either\n              those listed below, or, if the -o option is used, those available with the -o option  to  the  set\n              builtin  command.   With no options, or with the -p option, a list of all settable options is dis\u2010\n              played, with an indication of whether or not each is set; if optnames are supplied, the output  is\n              restricted  to  those  options.  The -p option causes output to be displayed in a form that may be\n              reused as input.  Other options have the following meanings:\n              -s     Enable (set) each optname.\n              -u     Disable (unset) each optname.\n              -q     Suppresses normal output (quiet mode); the return status indicates whether the  optname  is\n                     set  or  unset.  If multiple optname arguments are given with -q, the return status is zero\n                     if all optnames are enabled; non-zero otherwise.\n              -o     Restricts the values of optname to be those defined for the -o option to the set builtin.\n\n              If either -s or -u is used with no optname arguments, shopt shows only those options which are set\n              or  unset,  respectively.   Unless  otherwise noted, the shopt options are disabled (unset) by de\u2010\n              fault.\n\n              The return status when listing options is zero if all optnames are  enabled,  non-zero  otherwise.\n              When  setting  or  unsetting  options,  the return status is zero unless an optname is not a valid\n              shell option.\n\n              The list of shopt options is:\n\n              assoc_expand_once\n                      If set, the shell suppresses multiple evaluation of associative  array  subscripts  during\n                      arithmetic  expression  evaluation, while executing builtins that can perform variable as\u2010\n                      signments, and while executing builtins that perform array dereferencing.\n              autocd  If set, a command name that is the name of a directory is executed as if it were the argu\u2010\n                      ment to the cd command.  This option is only used by interactive shells.\n              cdable_vars\n                      If set, an argument to the cd builtin command that is not a directory is assumed to be the\n                      name of a variable whose value is the directory to change to.\n              cdspell If set, minor errors in the spelling of a directory component in a cd command will be cor\u2010\n                      rected.   The  errors  checked for are transposed characters, a missing character, and one\n                      character too many.  If a correction is found, the corrected filename is printed, and  the\n                      command proceeds.  This option is only used by interactive shells.\n              checkhash\n                      If set, bash checks that a command found in the hash table exists before trying to execute\n                      it.  If a hashed command no longer exists, a normal path search is performed.\n              checkjobs\n                      If set, bash lists the status of any stopped and running jobs before exiting  an  interac\u2010\n                      tive  shell.   If any jobs are running, this causes the exit to be deferred until a second\n                      exit is attempted without an intervening command (see JOB CONTROL above).  The  shell  al\u2010\n                      ways postpones exiting if any jobs are stopped.\n              checkwinsize\n                      If set, bash checks the window size after each external (non-builtin) command and, if nec\u2010\n                      essary, updates the values of LINES and COLUMNS.  This option is enabled by default.\n              cmdhist If set, bash attempts to save all lines of a multiple-line command in the same history en\u2010\n                      try.   This  allows easy re-editing of multi-line commands.  This option is enabled by de\u2010\n                      fault, but only has an effect if command history is enabled, as described above under HIS\u2010\n                      TORY.\n              compat31\n              compat32\n              compat40\n              compat41\n              compat42\n              compat43\n              compat44\n                      These  control aspects of the shell's compatibility mode (see SHELL COMPATIBILITY MODE be\u2010\n                      low).\n\n              complete_fullquote\n                      If set, bash quotes all shell metacharacters in filenames and directory  names  when  per\u2010\n                      forming  completion.  If not set, bash removes metacharacters such as the dollar sign from\n                      the set of characters that will be quoted in completed filenames when these metacharacters\n                      appear  in  shell  variable  references  in words to be completed.  This means that dollar\n                      signs in variable names that expand to directories will not be quoted; however, any dollar\n                      signs appearing in filenames will not be quoted, either.  This is active only when bash is\n                      using backslashes to quote completed filenames.  This variable is set by default, which is\n                      the default bash behavior in versions through 4.2.\n\n              direxpand\n                      If  set,  bash replaces directory names with the results of word expansion when performing\n                      filename completion.  This changes the contents of the readline editing  buffer.   If  not\n                      set, bash attempts to preserve what the user typed.\n\n              dirspell\n                      If set, bash attempts spelling correction on directory names during word completion if the\n                      directory name initially supplied does not exist.\n\n              dotglob If set, bash includes filenames beginning with a `.' in the results of pathname expansion.\n                      The  filenames  ``.''   and  ``..''  must always be matched explicitly, even if dotglob is\n                      set.\n\n              execfail\n                      If set, a non-interactive shell will not exit if it cannot execute the file  specified  as\n                      an  argument  to  the  exec  builtin  command.  An interactive shell does not exit if exec\n                      fails.\n\n              expand_aliases\n                      If set, aliases are expanded as described above under ALIASES.  This option is enabled  by\n                      default for interactive shells.\n\n              extdebug\n                      If  set  at  shell invocation, or in a shell startup file, arrange to execute the debugger\n                      profile before the shell starts, identical to the --debugger option.  If set after invoca\u2010\n                      tion, behavior intended for use by debuggers is enabled:\n\n                      1.     The  -F option to the declare builtin displays the source file name and line number\n                             corresponding to each function name supplied as an argument.\n\n                      2.     If the command run by the DEBUG trap returns a non-zero value, the next command  is\n                             skipped and not executed.\n\n                      3.     If the command run by the DEBUG trap returns a value of 2, and the shell is execut\u2010\n                             ing in a subroutine (a shell function or a shell script executed by the . or source\n                             builtins), the shell simulates a call to return.\n\n                      4.     BASH_ARGC and BASH_ARGV are updated as described in their descriptions above.\n\n                      5.     Function  tracing  is enabled: command substitution, shell functions, and subshells\n                             invoked with ( command ) inherit the DEBUG and RETURN traps.\n\n                      6.     Error tracing is enabled: command substitution, shell functions, and subshells  in\u2010\n                             voked with ( command ) inherit the ERR trap.\n\n              extglob If  set,  the  extended pattern matching features described above under Pathname Expansion\n                      are enabled.\n\n              extquote\n                      If set, $'string' and $\"string\" quoting is performed within  ${parameter}  expansions  en\u2010\n                      closed in double quotes.  This option is enabled by default.\n\n              failglob\n                      If  set, patterns which fail to match filenames during pathname expansion result in an ex\u2010\n                      pansion error.\n\n              force_fignore\n                      If set, the suffixes specified by the FIGNORE shell variable cause  words  to  be  ignored\n                      when  performing  word  completion even if the ignored words are the only possible comple\u2010\n                      tions.  See SHELL VARIABLES above for a description of FIGNORE.  This option is enabled by\n                      default.\n\n              globasciiranges\n                      If set, range expressions used in pattern matching bracket expressions (see Pattern Match\u2010\n                      ing above) behave as if in the traditional C locale when performing comparisons.  That is,\n                      the  current  locale's collating sequence is not taken into account, so b will not collate\n                      between A and B, and upper-case and lower-case ASCII characters will collate together.\n\n              globstar\n                      If set, the pattern ** used in a pathname expansion context will match all files and  zero\n                      or  more directories and subdirectories.  If the pattern is followed by a /, only directo\u2010\n                      ries and subdirectories match.\n\n              gnu_errfmt\n                      If set, shell error messages are written in the standard GNU error message format.\n\n              histappend\n                      If set, the history list is appended to the file named by the value of the HISTFILE  vari\u2010\n                      able when the shell exits, rather than overwriting the file.\n\n              histreedit\n                      If  set,  and  readline is being used, a user is given the opportunity to re-edit a failed\n                      history substitution.\n\n              histverify\n                      If set, and readline is being used, the results of history substitution  are  not  immedi\u2010\n                      ately passed to the shell parser.  Instead, the resulting line is loaded into the readline\n                      editing buffer, allowing further modification.\n\n              hostcomplete\n                      If set, and readline is being used, bash will attempt to perform hostname completion  when\n                      a  word  containing a @ is being completed (see Completing under READLINE above).  This is\n                      enabled by default.\n\n              huponexit\n                      If set, bash will send SIGHUP to all jobs when an interactive login shell exits.\n\n              inherit_errexit\n                      If set, command substitution inherits the value of the errexit option, instead  of  unset\u2010\n                      ting it in the subshell environment.  This option is enabled when posix mode is enabled.\n\n              interactive_comments\n                      If  set,  allow a word beginning with # to cause that word and all remaining characters on\n                      that line to be ignored in an interactive shell (see COMMENTS above).  This option is  en\u2010\n                      abled by default.\n\n              lastpipe\n                      If  set,  and job control is not active, the shell runs the last command of a pipeline not\n                      executed in the background in the current shell environment.\n\n              lithist If set, and the cmdhist option is enabled, multi-line commands are saved  to  the  history\n                      with embedded newlines rather than using semicolon separators where possible.\n\n              localvar_inherit\n                      If  set,  local  variables inherit the value and attributes of a variable of the same name\n                      that exists at a previous scope before any new value is assigned.  The  nameref  attribute\n                      is not inherited.\n\n              localvar_unset\n                      If  set, calling unset on local variables in previous function scopes marks them so subse\u2010\n                      quent lookups find them unset until that function returns. This is identical to the behav\u2010\n                      ior of unsetting local variables at the current function scope.\n\n              login_shell\n                      The  shell sets this option if it is started as a login shell (see INVOCATION above).  The\n                      value may not be changed.\n\n              mailwarn\n                      If set, and a file that bash is checking for mail has been accessed since the last time it\n                      was checked, the message ``The mail in mailfile has been read'' is displayed.\n\n              no_empty_cmd_completion\n                      If  set, and readline is being used, bash will not attempt to search the PATH for possible\n                      completions when completion is attempted on an empty line.\n\n              nocaseglob\n                      If set, bash matches filenames in a case-insensitive fashion when performing pathname  ex\u2010\n                      pansion (see Pathname Expansion above).\n\n              nocasematch\n                      If set, bash matches patterns in a case-insensitive fashion when performing matching while\n                      executing case or [[ conditional commands, when performing pattern substitution  word  ex\u2010\n                      pansions, or when filtering possible completions as part of programmable completion.\n\n              nullglob\n                      If set, bash allows patterns which match no files (see Pathname Expansion above) to expand\n                      to a null string, rather than themselves.\n\n              progcomp\n                      If set, the programmable completion facilities (see Programmable Completion above) are en\u2010\n                      abled.  This option is enabled by default.\n\n              progcomp_alias\n                      If  set,  and  programmable completion is enabled, bash treats a command name that doesn't\n                      have any completions as a possible alias and attempts alias expansion. If it has an alias,\n                      bash  attempts  programmable completion using the command word resulting from the expanded\n                      alias.\n\n              promptvars\n                      If set, prompt strings undergo parameter expansion, command substitution,  arithmetic  ex\u2010\n                      pansion, and quote removal after being expanded as described in PROMPTING above.  This op\u2010\n                      tion is enabled by default.\n\n              restricted_shell\n                      The shell sets this option if it is started in restricted mode (see RESTRICTED  SHELL  be\u2010\n                      low).   The  value  may not be changed.  This is not reset when the startup files are exe\u2010\n                      cuted, allowing the startup files to discover whether or not a shell is restricted.\n\n              shift_verbose\n                      If set, the shift builtin prints an error message when the shift count exceeds the  number\n                      of positional parameters.\n\n              sourcepath\n                      If set, the source (.) builtin uses the value of PATH to find the directory containing the\n                      file supplied as an argument.  This option is enabled by default.\n\n              xpg_echo\n                      If set, the echo builtin expands backslash-escape sequences by default.\n\n       suspend [-f]\n              Suspend the execution of this shell until it receives a SIGCONT signal.  A login shell  cannot  be\n              suspended; the -f option can be used to override this and force the suspension.  The return status\n              is 0 unless the shell is a login shell and -f is not supplied, or if job control is not enabled.\n\n       test expr\n       [ expr ]\n              Return a status of 0 (true) or 1 (false) depending on the evaluation of the conditional expression\n              expr.   Each  operator  and  operand must be a separate argument.  Expressions are composed of the\n              primaries described in the bash manual page under CONDITIONAL EXPRESSIONS.  test does  not  accept\n              any options, nor does it accept and ignore an argument of -- as signifying the end of options.\n\n              Expressions  may  be  combined using the following operators, listed in decreasing order of prece\u2010\n              dence.  The evaluation depends on the number of arguments; see below.  Operator precedence is used\n              when there are five or more arguments.\n              ! expr True if expr is false.\n              ( expr )\n                     Returns  the  value  of expr.  This may be used to override the normal precedence of opera\u2010\n                     tors.\n              expr1 -a expr2\n                     True if both expr1 and expr2 are true.\n              expr1 -o expr2\n                     True if either expr1 or expr2 is true.\n\n              test and [ evaluate conditional expressions using a set of rules based on the number of arguments.\n\n              0 arguments\n                     The expression is false.\n              1 argument\n                     The expression is true if and only if the argument is not null.\n              2 arguments\n                     If the first argument is !, the expression is true if and only if the  second  argument  is\n                     null.   If  the first argument is one of the unary conditional operators listed above under\n                     CONDITIONAL EXPRESSIONS, the expression is true if the unary test is true.   If  the  first\n                     argument is not a valid unary conditional operator, the expression is false.\n              3 arguments\n                     The following conditions are applied in the order listed.  If the second argument is one of\n                     the binary conditional operators listed above under CONDITIONAL EXPRESSIONS, the result  of\n                     the  expression is the result of the binary test using the first and third arguments as op\u2010\n                     erands.  The -a and -o operators are considered binary operators when there are three argu\u2010\n                     ments.   If the first argument is !, the value is the negation of the two-argument test us\u2010\n                     ing the second and third arguments.  If the first argument is exactly ( and the third argu\u2010\n                     ment  is exactly ), the result is the one-argument test of the second argument.  Otherwise,\n                     the expression is false.\n              4 arguments\n                     If the first argument is !, the result is the negation  of  the  three-argument  expression\n                     composed of the remaining arguments.  Otherwise, the expression is parsed and evaluated ac\u2010\n                     cording to precedence using the rules listed above.\n              5 or more arguments\n                     The expression is parsed and evaluated according  to  precedence  using  the  rules  listed\n                     above.\n\n              When used with test or [, the < and > operators sort lexicographically using ASCII ordering.\n\n       times  Print  the  accumulated  user and system times for the shell and for processes run from the shell.\n              The return status is 0.\n\n       trap [-lp] [[arg] sigspec ...]\n              The command arg is to be read and executed when the shell receives signal(s) sigspec.  If  arg  is\n              absent (and there is a single sigspec) or -, each specified signal is reset to its original dispo\u2010\n              sition (the value it had upon entrance to the shell).  If arg is the null string the signal speci\u2010\n              fied  by  each  sigspec  is  ignored  by  the shell and by the commands it invokes.  If arg is not\n              present and -p has been supplied, then the trap commands associated with  each  sigspec  are  dis\u2010\n              played.  If no arguments are supplied or if only -p is given, trap prints the list of commands as\u2010\n              sociated with each signal.  The -l option causes the shell to print a list  of  signal  names  and\n              their  corresponding  numbers.   Each  sigspec is either a signal name defined in <signal.h>, or a\n              signal number.  Signal names are case insensitive and the SIG prefix is optional.\n\n              If a sigspec is EXIT (0) the command arg is executed on exit from the shell.  If a sigspec is  DE\u2010\n              BUG,  the  command  arg is executed before every simple command, for command, case command, select\n              command, every arithmetic for command, and before the first command executes in a  shell  function\n              (see  SHELL  GRAMMAR above).  Refer to the description of the extdebug option to the shopt builtin\n              for details of its effect on the DEBUG trap.  If a sigspec is RETURN, the command arg is  executed\n              each time a shell function or a script executed with the . or source builtins finishes executing.\n\n              If  a sigspec is ERR, the command arg is executed whenever a pipeline (which may consist of a sin\u2010\n              gle simple command), a list, or a compound command returns a non-zero exit status, subject to  the\n              following  conditions.   The ERR trap is not executed if the failed command is part of the command\n              list immediately following a while or until keyword, part of the test in an if statement, part  of\n              a command executed in a && or || list except the command following the final && or ||, any command\n              in a pipeline but the last, or if the command's return value is being inverted using !.  These are\n              the same conditions obeyed by the errexit (-e) option.\n\n              Signals  ignored upon entry to the shell cannot be trapped, reset or listed.  Trapped signals that\n              are not being ignored are reset to their original values in a  subshell  or  subshell  environment\n              when one is created.  The return status is false if any sigspec is invalid; otherwise trap returns\n              true.\n\n       type [-aftpP] name [name ...]\n              With no options, indicate how each name would be interpreted if used as a command name.  If the -t\n              option is used, type prints a string which is one of alias, keyword, function, builtin, or file if\n              name is an alias, shell reserved word, function, builtin, or disk file, respectively.  If the name\n              is  not found, then nothing is printed, and an exit status of false is returned.  If the -p option\n              is used, type either returns the name of the disk file that would be executed if name were  speci\u2010\n              fied  as  a  command  name,  or  nothing if ``type -t name'' would not return file.  The -P option\n              forces a PATH search for each name, even if ``type -t name'' would not return file.  If a  command\n              is  hashed, -p and -P print the hashed value, which is not necessarily the file that appears first\n              in PATH.  If the -a option is used, type prints all of the places that contain an executable named\n              name.   This  includes  aliases and functions, if and only if the -p option is not also used.  The\n              table of hashed commands is not consulted when using -a.  The -f option suppresses shell  function\n              lookup,  as  with the command builtin.  type returns true if all of the arguments are found, false\n              if any are not found.\n\n       ulimit [-HS] -a\n       ulimit [-HS] [-bcdefiklmnpqrstuvxPRT [limit]]\n              Provides control over the resources available to the shell and to processes started by it, on sys\u2010\n              tems  that  allow  such control.  The -H and -S options specify that the hard or soft limit is set\n              for the given resource.  A hard limit cannot be increased by a non-root user once  it  is  set;  a\n              soft limit may be increased up to the value of the hard limit.  If neither -H nor -S is specified,\n              both the soft and hard limits are set.  The value of limit can be a number in the  unit  specified\n              for  the  resource or one of the special values hard, soft, or unlimited, which stand for the cur\u2010\n              rent hard limit, the current soft limit, and no limit, respectively.  If  limit  is  omitted,  the\n              current  value  of the soft limit of the resource is printed, unless the -H option is given.  When\n              more than one resource is specified, the limit name and unit, if appropriate, are  printed  before\n              the value.  Other options are interpreted as follows:\n              -a     All current limits are reported; no limits are set\n              -b     The maximum socket buffer size\n              -c     The maximum size of core files created\n              -d     The maximum size of a process's data segment\n              -e     The maximum scheduling priority (\"nice\")\n              -f     The maximum size of files written by the shell and its children\n              -i     The maximum number of pending signals\n              -k     The maximum number of kqueues that may be allocated\n              -l     The maximum size that may be locked into memory\n              -m     The maximum resident set size (many systems do not honor this limit)\n              -n     The  maximum  number  of  open file descriptors (most systems do not allow this value to be\n                     set)\n              -p     The pipe size in 512-byte blocks (this may not be set)\n              -q     The maximum number of bytes in POSIX message queues\n              -r     The maximum real-time scheduling priority\n              -s     The maximum stack size\n              -t     The maximum amount of cpu time in seconds\n              -u     The maximum number of processes available to a single user\n              -v     The maximum amount of virtual memory available to the shell and, on some  systems,  to  its\n                     children\n              -x     The maximum number of file locks\n              -P     The maximum number of pseudoterminals\n              -R     The maximum time a real-time process can run before blocking, in microseconds\n              -T     The maximum number of threads\n\n              If  limit  is  given,  and  the -a option is not used, limit is the new value of the specified re\u2010\n              source.  If no option is given, then -f is assumed.  Values are in  1024-byte  increments,  except\n              for  -t,  which  is  in  seconds;  -R, which is in microseconds; -p, which is in units of 512-byte\n              blocks; -P, -T, -b, -k, -n, and -u, which are unscaled values; and, when in posix mode, -c and -f,\n              which  are in 512-byte increments.  The return status is 0 unless an invalid option or argument is\n              supplied, or an error occurs while setting a new limit.  In POSIX Mode 512-byte  blocks  are  used\n              for the `-c' and `-f' options.\n\n       umask [-p] [-S] [mode]\n              The  user file-creation mask is set to mode.  If mode begins with a digit, it is interpreted as an\n              octal number; otherwise it is interpreted as a symbolic mode mask  similar  to  that  accepted  by\n              chmod(1).  If mode is omitted, the current value of the mask is printed.  The -S option causes the\n              mask to be printed in symbolic form; the default output is an octal number.  If the -p  option  is\n              supplied,  and  mode  is omitted, the output is in a form that may be reused as input.  The return\n              status is 0 if the mode was successfully changed or if no mode argument was  supplied,  and  false\n              otherwise.\n\n       unalias [-a] [name ...]\n              Remove  each  name from the list of defined aliases.  If -a is supplied, all alias definitions are\n              removed.  The return value is true unless a supplied name is not a defined alias.\n\n       unset [-fv] [-n] [name ...]\n              For each name, remove the corresponding variable or function.  If the -v  option  is  given,  each\n              name refers to a shell variable, and that variable is removed.  Read-only variables may not be un\u2010\n              set.  If -f is specified, each name refers to a shell function, and the function definition is re\u2010\n              moved.  If the -n option is supplied, and name is a variable with the nameref attribute, name will\n              be unset rather than the variable it references.  -n has no effect if the -f option  is  supplied.\n              If  no options are supplied, each name refers to a variable; if there is no variable by that name,\n              a function with that name, if any, is unset.  Each unset variable or function is removed from  the\n              environment  passed  to  subsequent  commands.   If  any  of  BASH_ALIASES, BASH_ARGV0, BASH_CMDS,\n              BASH_COMMAND, BASH_SUBSHELL,  BASHPID,  COMP_WORDBREAKS,  DIRSTACK,  EPOCHREALTIME,  EPOCHSECONDS,\n              FUNCNAME,  GROUPS, HISTCMD, LINENO, RANDOM, SECONDS, or SRANDOM are unset, they lose their special\n              properties, even if they are subsequently reset.  The exit status is true unless a name  is  read\u2010\n              only.\n\n       wait [-fn] [-p varname] [id ...]\n              Wait for each specified child process and return its termination status.  Each id may be a process\n              ID or a job specification; if a job spec is given, all processes in that job's pipeline are waited\n              for.  If id is not given, wait waits for all running background jobs and the last-executed process\n              substitution, if its process id is the same as $!, and the return status is zero.  If the  -n  op\u2010\n              tion is supplied, wait waits for a single job from the list of ids or, if no ids are supplied, any\n              job, to complete and returns its exit status.  If none of the supplied arguments is a child of the\n              shell, or if no arguments are supplied and the shell has no unwaited-for children, the exit status\n              is 127.  If the -p option is supplied, the process or job identifier of the job for which the exit\n              status is returned is assigned to the variable varname named by the option argument.  The variable\n              will be unset initially, before any assignment.  This is useful only when the -n  option  is  sup\u2010\n              plied.  Supplying the -f option, when job control is enabled, forces wait to wait for id to termi\u2010\n              nate before returning its status, instead of returning when it changes status.  If id specifies  a\n              non-existent  process  or job, the return status is 127.  Otherwise, the return status is the exit\n              status of the last process or job waited for.\n\nSHELL COMPATIBILITY MODE\n       Bash-4.0 introduced the concept of a `shell compatibility level', specified as a set of  options  to  the\n       shopt  builtin compat31, compat32, compat40, compat41, and so on).  There is only one current compatibil\u2010\n       ity level -- each option is mutually exclusive.  The compatibility level is intended to  allow  users  to\n       select  behavior  from  previous  versions  that  is  incompatible with newer versions while they migrate\n       scripts to use current features and behavior. It's intended to be a temporary solution.\n\n       This section does not mention behavior that is standard for a particular version (e.g., setting  compat32\n       means  that quoting the rhs of the regexp matching operator quotes special regexp characters in the word,\n       which is default behavior in bash-3.2 and above).\n\n       If a user enables, say, compat32, it may affect the behavior of other compatibility levels up to and  in\u2010\n       cluding  the  current  compatibility  level.  The idea is that each compatibility level controls behavior\n       that changed in that version of bash, but that behavior may have been present in earlier  versions.   For\n       instance,  the  change  to use locale-based comparisons with the [[ command came in bash-4.1, and earlier\n       versions used ASCII-based comparisons, so enabling compat32 will enable ASCII-based comparisons as  well.\n       That  granularity  may  not be sufficient for all uses, and as a result users should employ compatibility\n       levels carefully.  Read the documentation for a particular feature to find out the current behavior.\n\n       Bash-4.3 introduced a new shell variable: BASH_COMPAT.  The value assigned to this  variable  (a  decimal\n       version number like 4.2, or an integer corresponding to the compatNN option, like 42) determines the com\u2010\n       patibility level.\n\n       Starting with bash-4.4, Bash has begun deprecating older compatibility levels.  Eventually,  the  options\n       will be removed in favor of BASH_COMPAT.\n\n       Bash-5.0  is  the  final version for which there will be an individual shopt option for the previous ver\u2010\n       sion. Users should use BASH_COMPAT on bash-5.0 and later versions.\n\n       The following table describes the behavior changes controlled by each compatibility level  setting.   The\n       compatNN  tag  is  used as shorthand for setting the compatibility level to NN using one of the following\n       mechanisms.  For versions prior to bash-5.0, the compatibility level may be set using  the  corresponding\n       compatNN shopt option.  For bash-4.3 and later versions, the BASH_COMPAT variable is preferred, and it is\n       required for bash-5.1 and later versions.\n\n       compat31\n              \u2022      quoting the rhs of the [[ command's regexp matching operator (=~) has no special effect\n\n       compat32\n              \u2022      interrupting a command list such as \"a ; b ; c\" causes the execution of the next command in\n                     the  list  (in bash-4.0 and later versions, the shell acts as if it received the interrupt,\n                     so interrupting one command in a list aborts the execution of the entire list)\n\n       compat40\n              \u2022      the < and > operators to the [[ command do not consider the current locale  when  comparing\n                     strings;  they use ASCII ordering.  Bash versions prior to bash-4.1 use ASCII collation and\n                     strcmp(3); bash-4.1 and later use the current locale's collation sequence and strcoll(3).\n\n       compat41\n              \u2022      in posix mode, time may be followed by options and still be recognized as a  reserved  word\n                     (this is POSIX interpretation 267)\n              \u2022      in  posix  mode, the parser requires that an even number of single quotes occur in the word\n                     portion of a double-quoted parameter expansion and treats them specially, so  that  charac\u2010\n                     ters within the single quotes are considered quoted (this is POSIX interpretation 221)\n\n       compat42\n              \u2022      the  replacement  string  in  double-quoted pattern substitution does not undergo quote re\u2010\n                     moval, as it does in versions after bash-4.2\n              \u2022      in posix mode, single quotes are considered special when expanding the word  portion  of  a\n                     double-quoted parameter expansion and can be used to quote a closing brace or other special\n                     character (this is part of POSIX interpretation 221); in later versions, single quotes  are\n                     not special within double-quoted word expansions\n\n       compat43\n              \u2022      the  shell  does not print a warning message if an attempt is made to use a quoted compound\n                     assignment as an argument to declare (declare -a foo='(1 2)').  Later  versions  warn  that\n                     this usage is deprecated\n              \u2022      word  expansion  errors  are  considered non-fatal errors that cause the current command to\n                     fail, even in posix mode (the default behavior is to make them fatal errors that cause  the\n                     shell to exit)\n              \u2022      when  executing a shell function, the loop state (while/until/etc.)  is not reset, so break\n                     or continue in that function will break or continue loops in the calling context.  Bash-4.4\n                     and later reset the loop state to prevent this\n\n       compat44\n              \u2022      the  shell  sets  up  the  values used by BASH_ARGV and BASH_ARGC so they can expand to the\n                     shell's positional parameters even if extended debugging mode is not enabled\n              \u2022      a subshell inherits loops from its parent context, so break or continue will cause the sub\u2010\n                     shell to exit.  Bash-5.0 and later reset the loop state to prevent the exit\n              \u2022      variable  assignments  preceding builtins like export and readonly that set attributes con\u2010\n                     tinue to affect variables with the same name in the calling environment even if  the  shell\n                     is not in posix mode\n\n       compat50\n              \u2022      Bash-5.1 changed the way $RANDOM is generated to introduce slightly more randomness. If the\n                     shell compatibility level is set to 50 or lower, it reverts to the method from bash-5.0 and\n                     previous  versions,  so  seeding the random number generator by assigning a value to RANDOM\n                     will produce the same sequence as in bash-5.0\n              \u2022      If the command hash table is empty, bash versions prior to  bash-5.1  printed  an  informa\u2010\n                     tional  message  to  that  effect,  even when producing output that can be reused as input.\n                     Bash-5.1 suppresses that message when the -l option is supplied.\n\nSEE ALSO\n       bash(1), sh(1)\n\nGNU Bash 5.0                                       2004 Apr 20                                  BASH_BUILTINS(1)\n"},{"NOMBRE": "       tkill - env\u00eda una se\u00f1al a un \u00fanico proceso\n\n", "SINOPSIS": "       #include <sys/types.h>\n       #include <linux/unistd.h>\n\n       _syscall2(int, tkill, pid_t, tid, int, sig)\n\n       int tkill(pid_t tid, int sig);\n\n", "DESCRIPCION": "       La  llamada  al sistema tkill es an\u00e1loga a kill(2), excepto cuando el proceso especificado es parte de un\n       grupo de hilos (creado especificando la opci\u00f3n CLONE_THREAD en la llamada a clone).  Puesto que todos los\n       procesos  en  un  grupo  de  hilos  tienen  el  mismo  identificador  de proceso, no pueden ser manejados\n       individualmente con la llamada kill.  Con tkill, sin embargo, se puede referenciar cada  proceso  por  su\n       \u00fanico identificador de hilo (TID).\n\nVALOR DEVUELTO\n       En  caso  de  \u00e9xito,  se devuelve cero. En caso de error, se devuelve -1 y se modifica errno con el valor\n       apropiado.\n\n", "ERRORES": "       EINVAL Se especific\u00f3 un TID o una se\u00f1al inv\u00e1lidos.\n\n       ESRCH  No existe ning\u00fan proceso con el TID especificado.\n\n       EPERM  El invocador no tiene permisos para enviar la se\u00f1al al proceso especificado. Para que  un  proceso\n              tenga  permiso  para  enviar  una se\u00f1al, debe, o bien tener privilegios de super-usuario, o que su\n              identificador de usuario real o efectivo sea igual al set-user-ID real o  almacenado  del  proceso\n              receptor.\n\nCONFORME A\n       tkill  es  espec\u00edfica  de  Linux  y  no  deber\u00eda  usarse  en aquellos programas que se pretenden que sean\n       portables.\n\nV\u00c9ASE TAMBI\u00c9N\n       gettid(2), kill(2)\n\nLinux 2.4.20                                     1 febrero 2003                                         TKILL(2)\n"},{"NOMBRE": "       truncate - shrink or extend the size of a file to the specified size\n\n", "SINOPSIS": "       truncate OPTION... FILE...\n\n", "DESCRIPCION": "       Shrink or extend the size of each FILE to the specified size\n\n       A FILE argument that does not exist is created.\n\n       If  a  FILE  is  larger than the specified size, the extra data is lost.  If a FILE is shorter, it is ex\u2010\n       tended and the sparse extended part (hole) reads as zero bytes.\n\n       Mandatory arguments to long options are mandatory for short options too.\n\n       -c, --no-create\n              do not create any files\n\n       -o, --io-blocks\n              treat SIZE as number of IO blocks instead of bytes\n\n       -r, --reference=RFILE\n              base size on RFILE\n\n       -s, --size=SIZE\n              set or adjust the file size by SIZE bytes\n\n       --help display this help and exit\n\n       --version\n              output version information and exit\n\n       The SIZE argument is an integer and optional unit (example: 10K is 10*1024).  Units  are  K,M,G,T,P,E,Z,Y\n       (powers  of  1024) or KB,MB,... (powers of 1000).  Binary prefixes can be used, too: KiB=K, MiB=M, and so\n       on.\n\n       SIZE may also be prefixed by one of the following modifying characters: '+' extend by, '-' reduce by, '<'\n       at most, '>' at least, '/' round down to multiple of, '%' round up to multiple of.\n\n", "AUTOR": "       Written by Padraig Brady.\n\nREPORTING BUGS\n       GNU coreutils online help: <https://www.gnu.org/software/coreutils/>\n       Report any translation bugs to <https://translationproject.org/team/>\n\n", "COPYRIGHT": "       Copyright  \u00a9  2020  Free  Software  Foundation,  Inc.   License  GPLv3+:  GNU  GPL  version  3  or  later\n       <https://gnu.org/licenses/gpl.html>.\n       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to  the  extent\n       permitted by law.\n\nSEE ALSO\n       dd(1), truncate(2), ftruncate(2)\n\n       Full documentation <https://www.gnu.org/software/coreutils/truncate>\n       or available locally via: info '(coreutils) truncate invocation'\n\nGNU coreutils 8.32                                  July 2021                                        TRUNCATE(1)\n"},{"NOMBRE": "       bash,  :,  .,  [,  alias, bg, bind, break, builtin, caller, cd, command, compgen, complete, compopt, con\u2010\n       tinue, declare, dirs, disown, echo, enable, eval, exec, exit, export, false, fc, fg, getopts, hash, help,\n       history,  jobs, kill, let, local, logout, mapfile, popd, printf, pushd, pwd, read, readonly, return, set,\n       shift, shopt, source, suspend, test, times, trap, true, type, typeset,  ulimit,  umask,  unalias,  unset,\n       wait - bash built-in commands, see bash(1)\n\nBASH BUILTIN COMMANDS\n       Unless  otherwise noted, each builtin command documented in this section as accepting options preceded by\n       - accepts -- to signify the end of the options.  The :, true, false, and test/[ builtins  do  not  accept\n       options  and  do  not  treat  --  specially.   The  exit, logout, return, break, continue, let, and shift\n       builtins accept and process arguments beginning with - without requiring --.  Other builtins that  accept\n       arguments  but are not specified as accepting options interpret arguments beginning with - as invalid op\u2010\n       tions and require -- to prevent this interpretation.\n       : [arguments]\n              No effect; the command does nothing beyond expanding arguments and performing any specified  redi\u2010\n              rections.  The return status is zero.\n\n        .  filename [arguments]\n       source filename [arguments]\n              Read  and execute commands from filename in the current shell environment and return the exit sta\u2010\n              tus of the last command executed from filename.  If filename does not contain a  slash,  filenames\n              in  PATH  are  used to find the directory containing filename.  The file searched for in PATH need\n              not be executable.  When bash is not in posix mode, the current directory is searched if  no  file\n              is  found  in PATH.  If the sourcepath option to the shopt builtin command is turned off, the PATH\n              is not searched.  If any arguments are supplied, they become the positional parameters when  file\u2010\n              name  is  executed.   Otherwise  the positional parameters are unchanged.  If the -T option is en\u2010\n              abled, source inherits any trap on DEBUG; if it is not, any DEBUG trap string  is  saved  and  re\u2010\n              stored  around  the  call to source, and source unsets the DEBUG trap while it executes.  If -T is\n              not set, and the sourced file changes the DEBUG trap, the new value is retained when  source  com\u2010\n              pletes.   The  return  status  is the status of the last command exited within the script (0 if no\n              commands are executed), and false if filename is not found or cannot be read.\n\n       alias [-p] [name[=value] ...]\n              Alias with no arguments or with the -p option prints  the  list  of  aliases  in  the  form  alias\n              name=value  on  standard  output.   When arguments are supplied, an alias is defined for each name\n              whose value is given.  A trailing space in value causes the next word to be checked for alias sub\u2010\n              stitution  when  the  alias is expanded.  For each name in the argument list for which no value is\n              supplied, the name and value of the alias is printed.  Alias returns true unless a name  is  given\n              for which no alias has been defined.\n\n       bg [jobspec ...]\n              Resume each suspended job jobspec in the background, as if it had been started with &.  If jobspec\n              is not present, the shell's notion of the current job is used.  bg jobspec returns  0  unless  run\n              when  job control is disabled or, when run with job control enabled, any specified jobspec was not\n              found or was started without job control.\n\n       bind [-m keymap] [-lpsvPSVX]\n       bind [-m keymap] [-q function] [-u function] [-r keyseq]\n       bind [-m keymap] -f filename\n       bind [-m keymap] -x keyseq:shell-command\n       bind [-m keymap] keyseq:function-name\n       bind [-m keymap] keyseq:readline-command\n              Display current readline key and function bindings, bind a key sequence to a readline function  or\n              macro,  or  set  a readline variable.  Each non-option argument is a command as it would appear in\n              .inputrc, but each binding or command must be passed as a separate  argument;  e.g.,  '\"\\C-x\\C-r\":\n              re-read-init-file'.  Options, if supplied, have the following meanings:\n              -m keymap\n                     Use  keymap  as  the  keymap  to be affected by the subsequent bindings.  Acceptable keymap\n                     names are emacs, emacs-standard,  emacs-meta,  emacs-ctlx,  vi,  vi-move,  vi-command,  and\n                     vi-insert.  vi is equivalent to vi-command (vi-move is also a synonym); emacs is equivalent\n                     to emacs-standard.\n              -l     List the names of all readline functions.\n              -p     Display readline function names and bindings in such a way that they can be re-read.\n              -P     List current readline function names and bindings.\n              -s     Display readline key sequences bound to macros and the strings they output in  such  a  way\n                     that they can be re-read.\n              -S     Display readline key sequences bound to macros and the strings they output.\n              -v     Display readline variable names and values in such a way that they can be re-read.\n              -V     List current readline variable names and values.\n              -f filename\n                     Read key bindings from filename.\n              -q function\n                     Query about which keys invoke the named function.\n              -u function\n                     Unbind all keys bound to the named function.\n              -r keyseq\n                     Remove any current binding for keyseq.\n              -x keyseq:shell-command\n                     Cause  shell-command to be executed whenever keyseq is entered.  When shell-command is exe\u2010\n                     cuted, the shell sets the READLINE_LINE variable to the contents of the readline line  buf\u2010\n                     fer  and  the READLINE_POINT and READLINE_MARK variables to the current location of the in\u2010\n                     sertion point and the saved insertion point (the mark), respectively.  If the executed com\u2010\n                     mand changes the value of any of READLINE_LINE, READLINE_POINT, or READLINE_MARK, those new\n                     values will be reflected in the editing state.\n              -X     List all key sequences bound to shell commands and the associated commands in a format that\n                     can be reused as input.\n\n              The return value is 0 unless an unrecognized option is given or an error occurred.\n\n       break [n]\n              Exit  from within a for, while, until, or select loop.  If n is specified, break n levels.  n must\n              be \u2265 1.  If n is greater than the number of enclosing loops, all enclosing loops are exited.   The\n              return value is 0 unless n is not greater than or equal to 1.\n\n       builtin shell-builtin [arguments]\n              Execute  the  specified  shell builtin, passing it arguments, and return its exit status.  This is\n              useful when defining a function whose name is the same as a shell builtin, retaining the function\u2010\n              ality of the builtin within the function.  The cd builtin is commonly redefined this way.  The re\u2010\n              turn status is false if shell-builtin is not a shell builtin command.\n\n       caller [expr]\n              Returns the context of any active subroutine call (a shell function or a script executed with  the\n              .  or  source builtins).  Without expr, caller displays the line number and source filename of the\n              current subroutine call.  If a non-negative integer is supplied as expr, caller displays the  line\n              number,  subroutine  name, and source file corresponding to that position in the current execution\n              call stack.  This extra information may be used, for example, to print a stack trace.  The current\n              frame  is  frame  0.  The return value is 0 unless the shell is not executing a subroutine call or\n              expr does not correspond to a valid position in the call stack.\n\n       cd [-L|[-P [-e]] [-@]] [dir]\n              Change the current directory to dir.  if dir is not supplied, the value of the HOME shell variable\n              is  the default.  Any additional arguments following dir are ignored.  The variable CDPATH defines\n              the search path for the directory containing dir: each directory name in CDPATH  is  searched  for\n              dir.   Alternative  directory names in CDPATH are separated by a colon (:).  A null directory name\n              in CDPATH is the same as the current directory, i.e., ``.''.  If dir begins with a slash (/), then\n              CDPATH  is not used.  The -P option causes cd to use the physical directory structure by resolving\n              symbolic links while traversing dir and before processing instances of .. in dir (see also the  -P\n              option  to the set builtin command); the -L option forces symbolic links to be followed by resolv\u2010\n              ing the link after processing instances of .. in dir.  If .. appears in dir, it  is  processed  by\n              removing the immediately previous pathname component from dir, back to a slash or the beginning of\n              dir.  If the -e option is supplied with -P, and the current working directory cannot  be  success\u2010\n              fully  determined  after a successful directory change, cd will return an unsuccessful status.  On\n              systems that support it, the -@ option presents the extended attributes associated with a file  as\n              a  directory.   An argument of - is converted to $OLDPWD before the directory change is attempted.\n              If a non-empty directory name from CDPATH is used, or if - is the first argument, and  the  direc\u2010\n              tory  change  is  successful, the absolute pathname of the new working directory is written to the\n              standard output.  The return value is true if the directory was successfully changed; false other\u2010\n              wise.\n\n       command [-pVv] command [arg ...]\n              Run command with args suppressing the normal shell function lookup.  Only builtin commands or com\u2010\n              mands found in the PATH are executed.  If the -p option is given, the search for command  is  per\u2010\n              formed  using  a  default value for PATH that is guaranteed to find all of the standard utilities.\n              If either the -V or -v option is supplied, a description of command is  printed.   The  -v  option\n              causes  a  single  word indicating the command or filename used to invoke command to be displayed;\n              the -V option produces a more verbose description.  If the -V or -v option is supplied,  the  exit\n              status  is  0  if command was found, and 1 if not.  If neither option is supplied and an error oc\u2010\n              curred or command cannot be found, the exit status is 127.  Otherwise, the exit status of the com\u2010\n              mand builtin is the exit status of command.\n\n       compgen [option] [word]\n              Generate  possible  completion  matches for word according to the options, which may be any option\n              accepted by the complete builtin with the exception of -p and -r, and write  the  matches  to  the\n              standard output.  When using the -F or -C options, the various shell variables set by the program\u2010\n              mable completion facilities, while available, will not have useful values.\n\n              The matches will be generated in the same way as if the programmable completion code had generated\n              them  directly  from  a  completion specification with the same flags.  If word is specified, only\n              those completions matching word will be displayed.\n\n              The return value is true unless an invalid option is supplied, or no matches were generated.\n\n       complete [-abcdefgjksuv] [-o comp-option] [-DEI] [-A action] [-G globpat] [-W wordlist]\n              [-F function] [-C command] [-X filterpat] [-P prefix] [-S suffix] name [name ...]\n       complete -pr [-DEI] [name ...]\n              Specify how arguments to each name should be completed.  If the -p option is supplied,  or  if  no\n              options  are supplied, existing completion specifications are printed in a way that allows them to\n              be reused as input.  The -r option removes a completion specification for each  name,  or,  if  no\n              names  are  supplied,  all completion specifications.  The -D option indicates that other supplied\n              options and actions should apply to the ``default'' command completion; that  is,  completion  at\u2010\n              tempted on a command for which no completion has previously been defined.  The -E option indicates\n              that other supplied options and actions should apply to ``empty''  command  completion;  that  is,\n              completion attempted on a blank line.  The -I option indicates that other supplied options and ac\u2010\n              tions should apply to completion on the initial non-assignment word on the line, or after  a  com\u2010\n              mand  delimiter such as ; or |, which is usually command name completion.  If multiple options are\n              supplied, the -D option takes precedence over -E, and both take precedence over -I.  If any of -D,\n              -E,  or -I are supplied, any other name arguments are ignored; these completions only apply to the\n              case specified by the option.\n\n              The process of applying these completion specifications when word completion is attempted  is  de\u2010\n              scribed above under Programmable Completion.\n\n              Other options, if specified, have the following meanings.  The arguments to the -G, -W, and -X op\u2010\n              tions (and, if necessary, the -P and -S options) should be quoted to protect them  from  expansion\n              before the complete builtin is invoked.\n              -o comp-option\n                      The comp-option controls several aspects of the compspec's behavior beyond the simple gen\u2010\n                      eration of completions.  comp-option may be one of:\n                      bashdefault\n                              Perform the rest of the default bash completions  if  the  compspec  generates  no\n                              matches.\n                      default Use readline's default filename completion if the compspec generates no matches.\n                      dirnames\n                              Perform directory name completion if the compspec generates no matches.\n                      filenames\n                              Tell  readline  that the compspec generates filenames, so it can perform any file\u2010\n                              name-specific processing (like adding a slash to directory names, quoting  special\n                              characters, or suppressing trailing spaces).  Intended to be used with shell func\u2010\n                              tions.\n                      noquote Tell readline not to quote the completed words  if  they  are  filenames  (quoting\n                              filenames is the default).\n                      nosort  Tell readline not to sort the list of possible completions alphabetically.\n                      nospace Tell readline not to append a space (the default) to words completed at the end of\n                              the line.\n                      plusdirs\n                              After any matches defined by the compspec are generated, directory name completion\n                              is attempted and any matches are added to the results of the other actions.\n              -A action\n                      The action may be one of the following to generate a list of possible completions:\n                      alias   Alias names.  May also be specified as -a.\n                      arrayvar\n                              Array variable names.\n                      binding Readline key binding names.\n                      builtin Names of shell builtin commands.  May also be specified as -b.\n                      command Command names.  May also be specified as -c.\n                      directory\n                              Directory names.  May also be specified as -d.\n                      disabled\n                              Names of disabled shell builtins.\n                      enabled Names of enabled shell builtins.\n                      export  Names of exported shell variables.  May also be specified as -e.\n                      file    File names.  May also be specified as -f.\n                      function\n                              Names of shell functions.\n                      group   Group names.  May also be specified as -g.\n                      helptopic\n                              Help topics as accepted by the help builtin.\n                      hostname\n                              Hostnames, as taken from the file specified by the HOSTFILE shell variable.\n                      job     Job names, if job control is active.  May also be specified as -j.\n                      keyword Shell reserved words.  May also be specified as -k.\n                      running Names of running jobs, if job control is active.\n                      service Service names.  May also be specified as -s.\n                      setopt  Valid arguments for the -o option to the set builtin.\n                      shopt   Shell option names as accepted by the shopt builtin.\n                      signal  Signal names.\n                      stopped Names of stopped jobs, if job control is active.\n                      user    User names.  May also be specified as -u.\n                      variable\n                              Names of all shell variables.  May also be specified as -v.\n              -C command\n                      command is executed in a subshell environment, and its output is used as the possible com\u2010\n                      pletions.\n              -F function\n                      The shell function function is executed in the current shell environment.  When the  func\u2010\n                      tion  is  executed, the first argument ($1) is the name of the command whose arguments are\n                      being completed, the second argument ($2) is the word being completed, and the third argu\u2010\n                      ment  ($3)  is  the  word  preceding the word being completed on the current command line.\n                      When it finishes, the possible completions are retrieved from the value of  the  COMPREPLY\n                      array variable.\n              -G globpat\n                      The pathname expansion pattern globpat is expanded to generate the possible completions.\n              -P prefix\n                      prefix  is added at the beginning of each possible completion after all other options have\n                      been applied.\n              -S suffix\n                      suffix is appended to each possible completion after all other options have been applied.\n              -W wordlist\n                      The wordlist is split using the characters in the IFS special variable as delimiters,  and\n                      each  resultant  word  is expanded.  Shell quoting is honored within wordlist, in order to\n                      provide a mechanism for the words to contain shell metacharacters  or  characters  in  the\n                      value  of IFS.  The possible completions are the members of the resultant list which match\n                      the word being completed.\n              -X filterpat\n                      filterpat is a pattern as used for pathname expansion.  It is applied to the list of  pos\u2010\n                      sible  completions  generated  by the preceding options and arguments, and each completion\n                      matching filterpat is removed from the list.  A leading ! in filterpat  negates  the  pat\u2010\n                      tern; in this case, any completion not matching filterpat is removed.\n\n              The  return  value  is true unless an invalid option is supplied, an option other than -p or -r is\n              supplied without a name argument, an attempt is made to remove a completion  specification  for  a\n              name for which no specification exists, or an error occurs adding a completion specification.\n\n       compopt [-o option] [-DEI] [+o option] [name]\n              Modify  completion  options for each name according to the options, or for the currently-executing\n              completion if no names are supplied.  If no options are given, display the completion options  for\n              each  name  or the current completion.  The possible values of option are those valid for the com\u2010\n              plete builtin described above.  The -D option indicates that other supplied options  should  apply\n              to  the  ``default''  command  completion; that is, completion attempted on a command for which no\n              completion has previously been defined.  The -E  option  indicates  that  other  supplied  options\n              should  apply to ``empty'' command completion; that is, completion attempted on a blank line.  The\n              -I option indicates that other supplied options should apply to completion on the initial  non-as\u2010\n              signment  word  on the line, or after a command delimiter such as ; or |, which is usually command\n              name completion.\n\n              The return value is true unless an invalid option is supplied, an attempt is made  to  modify  the\n              options for a name for which no completion specification exists, or an output error occurs.\n\n       continue [n]\n              Resume  the next iteration of the enclosing for, while, until, or select loop.  If n is specified,\n              resume at the nth enclosing loop.  n must be \u2265 1.  If n is greater than the  number  of  enclosing\n              loops,  the last enclosing loop (the ``top-level'' loop) is resumed.  The return value is 0 unless\n              n is not greater than or equal to 1.\n\n       declare [-aAfFgiIlnrtux] [-p] [name[=value] ...]\n       typeset [-aAfFgiIlnrtux] [-p] [name[=value] ...]\n              Declare variables and/or give them attributes.  If no names are given then display the  values  of\n              variables.   The  -p  option will display the attributes and values of each name.  When -p is used\n              with name arguments, additional options, other than -f and -F, are ignored.  When -p  is  supplied\n              without  name arguments, it will display the attributes and values of all variables having the at\u2010\n              tributes specified by the additional options.  If no other options are supplied with  -p,  declare\n              will  display  the  attributes and values of all shell variables.  The -f option will restrict the\n              display to shell functions.  The -F option inhibits the display of function definitions; only  the\n              function  name  and  attributes are printed.  If the extdebug shell option is enabled using shopt,\n              the source file name and line number where each name is defined are displayed as well.  The -F op\u2010\n              tion  implies  -f.   The -g option forces variables to be created or modified at the global scope,\n              even when declare is executed in a shell function.  It is ignored in all other cases.  The -I  op\u2010\n              tion  causes local variables to inherit the attributes (except the nameref attribute) and value of\n              any existing variable with the same name at a surrounding scope.  If there is  no  existing  vari\u2010\n              able, the local variable is initially unset.  The following options can be used to restrict output\n              to variables with the specified attribute or to give variables attributes:\n              -a     Each name is an indexed array variable (see Arrays above).\n              -A     Each name is an associative array variable (see Arrays above).\n              -f     Use function names only.\n              -i     The variable is treated as an integer; arithmetic  evaluation  (see  ARITHMETIC  EVALUATION\n                     above) is performed when the variable is assigned a value.\n              -l     When  the  variable  is assigned a value, all upper-case characters are converted to lower-\n                     case.  The upper-case attribute is disabled.\n              -n     Give each name the nameref attribute, making it a name reference to another variable.  That\n                     other variable is defined by the value of name.  All references, assignments, and attribute\n                     modifications to name, except those using or changing the -n  attribute  itself,  are  per\u2010\n                     formed on the variable referenced by name's value.  The nameref attribute cannot be applied\n                     to array variables.\n              -r     Make names readonly.  These names cannot then be assigned values by  subsequent  assignment\n                     statements or unset.\n              -t     Give  each  name  the trace attribute.  Traced functions inherit the DEBUG and RETURN traps\n                     from the calling shell.  The trace attribute has no special meaning for variables.\n              -u     When the variable is assigned a value, all lower-case characters are  converted  to  upper-\n                     case.  The lower-case attribute is disabled.\n              -x     Mark names for export to subsequent commands via the environment.\n\n              Using  `+'  instead of `-' turns off the attribute instead, with the exceptions that +a and +A may\n              not be used to destroy array variables and +r will not remove the readonly attribute.   When  used\n              in  a function, declare and typeset make each name local, as with the local command, unless the -g\n              option is supplied.  If a variable name is followed by =value, the value of the variable is set to\n              value.   When  using  -a or -A and the compound assignment syntax to create array variables, addi\u2010\n              tional attributes do not take effect until subsequent assignments.  The return value is  0  unless\n              an invalid option is encountered, an attempt is made to define a function using ``-f foo=bar'', an\n              attempt is made to assign a value to a readonly variable, an attempt is made to assign a value  to\n              an  array  variable  without  using  the compound assignment syntax (see Arrays above), one of the\n              names is not a valid shell variable name, an attempt is made to turn off  readonly  status  for  a\n              readonly  variable,  an  attempt is made to turn off array status for an array variable, or an at\u2010\n              tempt is made to display a non-existent function with -f.\n\n       dirs [-clpv] [+n] [-n]\n              Without options, displays the list of currently remembered directories.  The default display is on\n              a  single  line  with directory names separated by spaces.  Directories are added to the list with\n              the pushd command; the popd command removes entries from the list.  The current directory  is  al\u2010\n              ways the first directory in the stack.\n              -c     Clears the directory stack by deleting all of the entries.\n              -l     Produces  a listing using full pathnames; the default listing format uses a tilde to denote\n                     the home directory.\n              -p     Print the directory stack with one entry per line.\n              -v     Print the directory stack with one entry per line, prefixing each entry with its  index  in\n                     the stack.\n              +n     Displays  the nth entry counting from the left of the list shown by dirs when invoked with\u2010\n                     out options, starting with zero.\n              -n     Displays the nth entry counting from the right of the list shown by dirs when invoked with\u2010\n                     out options, starting with zero.\n\n              The  return value is 0 unless an invalid option is supplied or n indexes beyond the end of the di\u2010\n              rectory stack.\n\n       disown [-ar] [-h] [jobspec ... | pid ... ]\n              Without options, remove each jobspec from the table of active jobs.  If jobspec  is  not  present,\n              and  neither  the  -a nor the -r option is supplied, the current job is used.  If the -h option is\n              given, each jobspec is not removed from the table, but is marked so that SIGHUP is not sent to the\n              job  if  the shell receives a SIGHUP.  If no jobspec is supplied, the -a option means to remove or\n              mark all jobs; the -r option without a jobspec argument restricts operation to running jobs.   The\n              return value is 0 unless a jobspec does not specify a valid job.\n\n       echo [-neE] [arg ...]\n              Output  the  args,  separated  by  spaces, followed by a newline.  The return status is 0 unless a\n              write error occurs.  If -n is specified, the trailing newline is suppressed.  If the -e option  is\n              given,  interpretation  of  the  following backslash-escaped characters is enabled.  The -E option\n              disables the interpretation of these escape characters, even on systems where they are interpreted\n              by  default.   The  xpg_echo shell option may be used to dynamically determine whether or not echo\n              expands these escape characters by default.  echo does not interpret -- to mean  the  end  of  op\u2010\n              tions.  echo interprets the following escape sequences:\n              \\a     alert (bell)\n              \\b     backspace\n              \\c     suppress further output\n              \\e\n              \\E     an escape character\n              \\f     form feed\n              \\n     new line\n              \\r     carriage return\n              \\t     horizontal tab\n              \\v     vertical tab\n              \\\\     backslash\n              \\0nnn  the eight-bit character whose value is the octal value nnn (zero to three octal digits)\n              \\xHH   the eight-bit character whose value is the hexadecimal value HH (one or two hex digits)\n              \\uHHHH the  Unicode  (ISO/IEC  10646)  character whose value is the hexadecimal value HHHH (one to\n                     four hex digits)\n              \\UHHHHHHHH\n                     the Unicode (ISO/IEC 10646) character whose value is the hexadecimal value HHHHHHHH (one to\n                     eight hex digits)\n\n       enable [-a] [-dnps] [-f filename] [name ...]\n              Enable  and  disable  builtin shell commands.  Disabling a builtin allows a disk command which has\n              the same name as a shell builtin to be executed without specifying a full  pathname,  even  though\n              the  shell  normally searches for builtins before disk commands.  If -n is used, each name is dis\u2010\n              abled; otherwise, names are enabled.  For example, to use the test binary found via the  PATH  in\u2010\n              stead  of  the shell builtin version, run ``enable -n test''.  The -f option means to load the new\n              builtin command name from shared object filename, on systems that support dynamic loading.  The -d\n              option will delete a builtin previously loaded with -f.  If no name arguments are given, or if the\n              -p option is supplied, a list of shell builtins is printed.  With no other option  arguments,  the\n              list  consists  of  all  enabled  shell  builtins.   If -n is supplied, only disabled builtins are\n              printed.  If -a is supplied, the list printed includes all builtins, with an indication of whether\n              or  not  each  is  enabled.   If  -s  is  supplied,  the output is restricted to the POSIX special\n              builtins.  The return value is 0 unless a name is not a shell builtin or there is an error loading\n              a new builtin from a shared object.\n\n       eval [arg ...]\n              The  args are read and concatenated together into a single command.  This command is then read and\n              executed by the shell, and its exit status is returned as the value of  eval.   If  there  are  no\n              args, or only null arguments, eval returns 0.\n\n       exec [-cl] [-a name] [command [arguments]]\n              If  command is specified, it replaces the shell.  No new process is created.  The arguments become\n              the arguments to command.  If the -l option is supplied, the shell places a dash at the  beginning\n              of  the zeroth argument passed to command.  This is what login(1) does.  The -c option causes com\u2010\n              mand to be executed with an empty environment.  If -a is supplied, the shell passes  name  as  the\n              zeroth argument to the executed command.  If command cannot be executed for some reason, a non-in\u2010\n              teractive shell exits, unless the execfail shell option is enabled.   In  that  case,  it  returns\n              failure.   An  interactive shell returns failure if the file cannot be executed.  A subshell exits\n              unconditionally if exec fails.  If command is not specified, any redirections take effect  in  the\n              current  shell, and the return status is 0.  If there is a redirection error, the return status is\n              1.\n\n       exit [n]\n              Cause the shell to exit with a status of n.  If n is omitted, the exit status is that of the  last\n              command executed.  A trap on EXIT is executed before the shell terminates.\n\n       export [-fn] [name[=word]] ...\n       export -p\n              The  supplied  names  are  marked for automatic export to the environment of subsequently executed\n              commands.  If the -f option is given, the names refer to functions.  If no names are given, or  if\n              the  -p  option  is supplied, a list of names of all exported variables is printed.  The -n option\n              causes the export property to be removed from each name.  If a variable name is followed by =word,\n              the  value  of  the variable is set to word.  export returns an exit status of 0 unless an invalid\n              option is encountered, one of the names is not a valid shell variable name, or -f is supplied with\n              a name that is not a function.\n\n       fc [-e ename] [-lnr] [first] [last]\n       fc -s [pat=rep] [cmd]\n              The  first  form selects a range of commands from first to last from the history list and displays\n              or edits and re-executes them.  First and last may be specified as a string (to  locate  the  last\n              command  beginning with that string) or as a number (an index into the history list, where a nega\u2010\n              tive number is used as an offset from the current command number).  When listing, a first or  last\n              of  0  is  equivalent  to -1 and -0 is equivalent to the current command (usually the fc command);\n              otherwise 0 is equivalent to -1 and -0 is invalid.  If last is not specified, it  is  set  to  the\n              current  command for listing (so that ``fc -l -10'' prints the last 10 commands) and to first oth\u2010\n              erwise.  If first is not specified, it is set to the previous command  for  editing  and  -16  for\n              listing.\n\n              The  -n  option  suppresses the command numbers when listing.  The -r option reverses the order of\n              the commands.  If the -l option is given, the commands are listed on standard output.   Otherwise,\n              the  editor given by ename is invoked on a file containing those commands.  If ename is not given,\n              the value of the FCEDIT variable is used, and the value of EDITOR if FCEDIT is not set.   If  nei\u2010\n              ther  variable  is  set, vi is used.  When editing is complete, the edited commands are echoed and\n              executed.\n\n              In the second form, command is re-executed after each instance of pat is replaced by rep.  Command\n              is interpreted the same as first above.  A useful alias to use with this is ``r=\"fc -s\"'', so that\n              typing ``r cc'' runs the last command beginning with ``cc'' and typing ``r'' re-executes the  last\n              command.\n\n              If  the first form is used, the return value is 0 unless an invalid option is encountered or first\n              or last specify history lines out of range.  If the -e option is supplied, the return value is the\n              value  of  the last command executed or failure if an error occurs with the temporary file of com\u2010\n              mands.  If the second form is used, the return status is that of the command  re-executed,  unless\n              cmd does not specify a valid history line, in which case fc returns failure.\n\n       fg [jobspec]\n              Resume  jobspec  in  the  foreground, and make it the current job.  If jobspec is not present, the\n              shell's notion of the current job is used.  The return value is that of the  command  placed  into\n              the  foreground,  or failure if run when job control is disabled or, when run with job control en\u2010\n              abled, if jobspec does not specify a valid job or jobspec specifies a job that was started without\n              job control.\n\n       getopts optstring name [arg ...]\n              getopts is used by shell procedures to parse positional parameters.  optstring contains the option\n              characters to be recognized; if a character is followed by a colon, the option is expected to have\n              an  argument, which should be separated from it by white space.  The colon and question mark char\u2010\n              acters may not be used as option characters.  Each time it is invoked, getopts places the next op\u2010\n              tion in the shell variable name, initializing name if it does not exist, and the index of the next\n              argument to be processed into the variable OPTIND.  OPTIND is initialized to 1 each time the shell\n              or  a  shell script is invoked.  When an option requires an argument, getopts places that argument\n              into the variable OPTARG.  The shell does not reset OPTIND automatically; it must be manually  re\u2010\n              set  between multiple calls to getopts within the same shell invocation if a new set of parameters\n              is to be used.\n\n              When the end of options is encountered, getopts exits with  a  return  value  greater  than  zero.\n              OPTIND is set to the index of the first non-option argument, and name is set to ?.\n\n              getopts  normally parses the positional parameters, but if more arguments are supplied as arg val\u2010\n              ues, getopts parses those instead.\n\n              getopts can report errors in two ways.  If the first character of optstring is a colon, silent er\u2010\n              ror  reporting is used.  In normal operation, diagnostic messages are printed when invalid options\n              or missing option arguments are encountered.  If the variable OPTERR is set to 0,  no  error  mes\u2010\n              sages will be displayed, even if the first character of optstring is not a colon.\n\n              If  an invalid option is seen, getopts places ? into name and, if not silent, prints an error mes\u2010\n              sage and unsets OPTARG.  If getopts is silent, the option character found is placed in OPTARG  and\n              no diagnostic message is printed.\n\n              If  a  required argument is not found, and getopts is not silent, a question mark (?) is placed in\n              name, OPTARG is unset, and a diagnostic message is printed.  If getopts is silent,  then  a  colon\n              (:) is placed in name and OPTARG is set to the option character found.\n\n              getopts  returns  true  if an option, specified or unspecified, is found.  It returns false if the\n              end of options is encountered or an error occurs.\n\n       hash [-lr] [-p filename] [-dt] [name]\n              Each time hash is invoked, the full pathname of the command name is determined  by  searching  the\n              directories  in $PATH and remembered.  Any previously-remembered pathname is discarded.  If the -p\n              option is supplied, no path search is performed, and filename is used as the full filename of  the\n              command.  The -r option causes the shell to forget all remembered locations.  The -d option causes\n              the shell to forget the remembered location of each name.  If the -t option is supplied, the  full\n              pathname  to which each name corresponds is printed.  If multiple name arguments are supplied with\n              -t, the name is printed before the hashed full pathname.  The -l option causes output to  be  dis\u2010\n              played  in a format that may be reused as input.  If no arguments are given, or if only -l is sup\u2010\n              plied, information about remembered commands is printed.  The return status is true unless a  name\n              is not found or an invalid option is supplied.\n\n       help [-dms] [pattern]\n              Display  helpful information about builtin commands.  If pattern is specified, help gives detailed\n              help on all commands matching pattern; otherwise help for  all  the  builtins  and  shell  control\n              structures is printed.\n              -d     Display a short description of each pattern\n              -m     Display the description of each pattern in a manpage-like format\n              -s     Display only a short usage synopsis for each pattern\n\n              The return status is 0 unless no command matches pattern.\n\n       history [n]\n       history -c\n       history -d offset\n       history -d start-end\n       history -anrw [filename]\n       history -p arg [arg ...]\n       history -s arg [arg ...]\n              With  no  options, display the command history list with line numbers.  Lines listed with a * have\n              been modified.  An argument of n lists only the last n lines.  If the shell variable  HISTTIMEFOR\u2010\n              MAT  is  set and not null, it is used as a format string for strftime(3) to display the time stamp\n              associated with each displayed history entry.  No intervening blank is printed between the format\u2010\n              ted  time stamp and the history line.  If filename is supplied, it is used as the name of the his\u2010\n              tory file; if not, the value of HISTFILE is used.  Options, if supplied, have the following  mean\u2010\n              ings:\n              -c     Clear the history list by deleting all the entries.\n              -d offset\n                     Delete  the  history entry at position offset.  If offset is negative, it is interpreted as\n                     relative to one greater than the last history position, so negative indices count back from\n                     the end of the history, and an index of -1 refers to the current history -d command.\n              -d start-end\n                     Delete  the history entries between positions start and end, inclusive.  Positive and nega\u2010\n                     tive values for start and end are interpreted as described above.\n              -a     Append the ``new'' history lines to the history file.   These  are  history  lines  entered\n                     since  the  beginning  of the current bash session, but not already appended to the history\n                     file.\n              -n     Read the history lines not already read from the history  file  into  the  current  history\n                     list.  These are lines appended to the history file since the beginning of the current bash\n                     session.\n              -r     Read the contents of the history file and append them to the current history list.\n              -w     Write the current history list to the history file, overwriting  the  history  file's  con\u2010\n                     tents.\n              -p     Perform  history  substitution on the following args and display the result on the standard\n                     output.  Does not store the results in the history list.  Each arg must be quoted  to  dis\u2010\n                     able normal history expansion.\n              -s     Store the args in the history list as a single entry.  The last command in the history list\n                     is removed before the args are added.\n\n              If the HISTTIMEFORMAT variable is set, the time stamp information associated with each history en\u2010\n              try  is  written to the history file, marked with the history comment character.  When the history\n              file is read, lines beginning with the history comment character followed immediately by  a  digit\n              are  interpreted  as  timestamps for the following history entry.  The return value is 0 unless an\n              invalid option is encountered, an error occurs while reading or writing the history file,  an  in\u2010\n              valid offset is supplied as an argument to -d, or the history expansion supplied as an argument to\n              -p fails.\n\n       jobs [-lnprs] [ jobspec ... ]\n       jobs -x command [ args ... ]\n              The first form lists the active jobs.  The options have the following meanings:\n              -l     List process IDs in addition to the normal information.\n              -n     Display information only about jobs that have changed status since the user was last  noti\u2010\n                     fied of their status.\n              -p     List only the process ID of the job's process group leader.\n              -r     Display only running jobs.\n              -s     Display only stopped jobs.\n\n              If  jobspec  is given, output is restricted to information about that job.  The return status is 0\n              unless an invalid option is encountered or an invalid jobspec is supplied.\n\n              If the -x option is supplied, jobs replaces any jobspec found in command or args with  the  corre\u2010\n              sponding process group ID, and executes command passing it args, returning its exit status.\n\n       kill [-s sigspec | -n signum | -sigspec] [pid | jobspec] ...\n       kill -l|-L [sigspec | exit_status]\n              Send  the  signal named by sigspec or signum to the processes named by pid or jobspec.  sigspec is\n              either a case-insensitive signal name such as SIGKILL (with or without the SIG prefix) or a signal\n              number;  signum is a signal number.  If sigspec is not present, then SIGTERM is assumed.  An argu\u2010\n              ment of -l lists the signal names.  If any arguments are supplied when -l is given, the  names  of\n              the  signals corresponding to the arguments are listed, and the return status is 0.  The exit_sta\u2010\n              tus argument to -l is a number specifying either a signal number or the exit status of  a  process\n              terminated  by  a  signal.   The -L option is equivalent to -l.  kill returns true if at least one\n              signal was successfully sent, or false if an error occurs or an invalid option is encountered.\n\n       let arg [arg ...]\n              Each arg is an arithmetic expression to be evaluated (see ARITHMETIC EVALUATION  above).   If  the\n              last arg evaluates to 0, let returns 1; 0 is returned otherwise.\n\n       local [option] [name[=value] ... | - ]\n              For  each argument, a local variable named name is created, and assigned value.  The option can be\n              any of the options accepted by declare.  When local is used within a function, it causes the vari\u2010\n              able name to have a visible scope restricted to that function and its children.  If name is -, the\n              set of shell options is made local to the function  in  which  local  is  invoked:  shell  options\n              changed  using  the set builtin inside the function are restored to their original values when the\n              function returns.  The restore is effected as if a series of set commands were executed to restore\n              the values that were in place before the function.  With no operands, local writes a list of local\n              variables to the standard output.  It is an error to use local when not within  a  function.   The\n              return  status  is 0 unless local is used outside a function, an invalid name is supplied, or name\n              is a readonly variable.\n\n       logout Exit a login shell.\n\n       mapfile [-d delim] [-n count] [-O origin] [-s count] [-t] [-u fd] [-C callback] [-c quantum] [array]\n       readarray [-d delim] [-n count] [-O origin] [-s count] [-t] [-u fd] [-C callback] [-c quantum] [array]\n              Read lines from the standard input into the indexed array variable array, or from file  descriptor\n              fd  if  the  -u  option is supplied.  The variable MAPFILE is the default array.  Options, if sup\u2010\n              plied, have the following meanings:\n              -d     The first character of delim is used to terminate each input line, rather than newline.  If\n                     delim is the empty string, mapfile will terminate a line when it reads a NUL character.\n              -n     Copy at most count lines.  If count is 0, all lines are copied.\n              -O     Begin assigning to array at index origin.  The default index is 0.\n              -s     Discard the first count lines read.\n              -t     Remove a trailing delim (default newline) from each line read.\n              -u     Read lines from file descriptor fd instead of the standard input.\n              -C     Evaluate callback each time quantum lines are read.  The -c option specifies quantum.\n              -c     Specify the number of lines read between each call to callback.\n\n              If  -C  is  specified  without -c, the default quantum is 5000.  When callback is evaluated, it is\n              supplied the index of the next array element to be assigned and the line to be  assigned  to  that\n              element  as additional arguments.  callback is evaluated after the line is read but before the ar\u2010\n              ray element is assigned.\n\n              If not supplied with an explicit origin, mapfile will clear array before assigning to it.\n\n              mapfile returns successfully unless an invalid option or option argument is supplied, array is in\u2010\n              valid or unassignable, or if array is not an indexed array.\n\n       popd [-n] [+n] [-n]\n              Removes  entries  from the directory stack.  With no arguments, removes the top directory from the\n              stack, and performs a cd to the new top directory.  Arguments, if  supplied,  have  the  following\n              meanings:\n              -n     Suppresses the normal change of directory when removing directories from the stack, so that\n                     only the stack is manipulated.\n              +n     Removes the nth entry counting from the left of the list shown by dirs, starting with zero.\n                     For example: ``popd +0'' removes the first directory, ``popd +1'' the second.\n              -n     Removes  the  nth  entry  counting  from the right of the list shown by dirs, starting with\n                     zero.  For example: ``popd -0'' removes the last directory, ``popd -1'' the next to last.\n\n              If the popd command is successful, a dirs is performed as well, and the return status is 0.   popd\n              returns  false  if  an invalid option is encountered, the directory stack is empty, a non-existent\n              directory stack entry is specified, or the directory change fails.\n\n       printf [-v var] format [arguments]\n              Write the formatted arguments to the standard output under the control of the format.  The -v  op\u2010\n              tion  causes  the output to be assigned to the variable var rather than being printed to the stan\u2010\n              dard output.\n\n              The format is a character string which contains three types of objects:  plain  characters,  which\n              are  simply  copied to standard output, character escape sequences, which are converted and copied\n              to the standard output, and format specifications, each of which causes printing of the next  suc\u2010\n              cessive  argument.  In addition to the standard printf(1) format specifications, printf interprets\n              the following extensions:\n              %b     causes printf to expand backslash escape sequences in the  corresponding  argument  in  the\n                     same way as echo -e.\n              %q     causes  printf to output the corresponding argument in a format that can be reused as shell\n                     input.\n              %(datefmt)T\n                     causes printf to output the date-time string resulting  from  using  datefmt  as  a  format\n                     string  for  strftime(3).  The corresponding argument is an integer representing the number\n                     of seconds since the epoch.  Two special argument values may be  used:  -1  represents  the\n                     current  time,  and -2 represents the time the shell was invoked.  If no argument is speci\u2010\n                     fied, conversion behaves as if -1 had been given.  This is an exception to the usual printf\n                     behavior.\n\n              The  %b,  %q,  and  %T  directives all use the field width and precision arguments from the format\n              specification and write that many bytes from (or use that wide a field for) the expanded argument,\n              which usually contains more characters than the original.\n\n              Arguments  to  non-string format specifiers are treated as C constants, except that a leading plus\n              or minus sign is allowed, and if the leading character is a single or double quote, the  value  is\n              the ASCII value of the following character.\n\n              The  format  is  reused as necessary to consume all of the arguments.  If the format requires more\n              arguments than are supplied, the extra format specifications behave as if a  zero  value  or  null\n              string, as appropriate, had been supplied.  The return value is zero on success, non-zero on fail\u2010\n              ure.\n\n       pushd [-n] [+n] [-n]\n       pushd [-n] [dir]\n              Adds a directory to the top of the directory stack, or rotates the stack, making the  new  top  of\n              the  stack the current working directory.  With no arguments, pushd exchanges the top two directo\u2010\n              ries and returns 0, unless the directory stack is empty.  Arguments, if supplied, have the follow\u2010\n              ing meanings:\n              -n     Suppresses the normal change of directory when rotating or adding directories to the stack,\n                     so that only the stack is manipulated.\n              +n     Rotates the stack so that the nth directory (counting from the left of the  list  shown  by\n                     dirs, starting with zero) is at the top.\n              -n     Rotates  the  stack so that the nth directory (counting from the right of the list shown by\n                     dirs, starting with zero) is at the top.\n              dir    Adds dir to the directory stack at the top, making it the new current working directory  as\n                     if it had been supplied as the argument to the cd builtin.\n\n              If the pushd command is successful, a dirs is performed as well.  If the first form is used, pushd\n              returns 0 unless the cd to dir fails.  With the second form, pushd returns 0 unless the  directory\n              stack  is  empty,  a non-existent directory stack element is specified, or the directory change to\n              the specified new current directory fails.\n\n       pwd [-LP]\n              Print the absolute pathname of the current working directory.  The pathname  printed  contains  no\n              symbolic  links  if the -P option is supplied or the -o physical option to the set builtin command\n              is enabled.  If the -L option is used, the pathname printed may contain symbolic links.   The  re\u2010\n              turn  status is 0 unless an error occurs while reading the name of the current directory or an in\u2010\n              valid option is supplied.\n\n       read [-ers] [-a aname] [-d delim] [-i text] [-n nchars] [-N nchars] [-p  prompt]  [-t  timeout]  [-u  fd]\n       [name ...]\n              One  line  is read from the standard input, or from the file descriptor fd supplied as an argument\n              to the -u option, split into words as described above under Word Splitting, and the first word  is\n              assigned  to  the  first  name,  the second word to the second name, and so on.  If there are more\n              words than names, the remaining words and their intervening delimiters are assigned  to  the  last\n              name.  If there are fewer words read from the input stream than names, the remaining names are as\u2010\n              signed empty values.  The characters in IFS are used to split the line into words using  the  same\n              rules  the shell uses for expansion (described above under Word Splitting).  The backslash charac\u2010\n              ter (\\) may be used to remove any special meaning for the next character read and for line contin\u2010\n              uation.  Options, if supplied, have the following meanings:\n              -a aname\n                     The  words  are  assigned to sequential indices of the array variable aname, starting at 0.\n                     aname is unset before any new values are assigned.  Other name arguments are ignored.\n              -d delim\n                     The first character of delim is used to terminate the input line, rather than newline.   If\n                     delim is the empty string, read will terminate a line when it reads a NUL character.\n              -e     If  the  standard input is coming from a terminal, readline (see READLINE above) is used to\n                     obtain the line.  Readline uses the current (or default, if line editing was not previously\n                     active) editing settings, but uses Readline's default filename completion.\n              -i text\n                     If  readline  is being used to read the line, text is placed into the editing buffer before\n                     editing begins.\n              -n nchars\n                     read returns after reading nchars characters rather than waiting for a complete line of in\u2010\n                     put, but honors a delimiter if fewer than nchars characters are read before the delimiter.\n              -N nchars\n                     read  returns  after  reading  exactly nchars characters rather than waiting for a complete\n                     line of input, unless EOF is encountered or read times out.  Delimiter  characters  encoun\u2010\n                     tered  in  the input are not treated specially and do not cause read to return until nchars\n                     characters are read.  The result is not split on the characters in IFS; the intent is  that\n                     the  variable is assigned exactly the characters read (with the exception of backslash; see\n                     the -r option below).\n              -p prompt\n                     Display prompt on standard error, without a trailing newline, before attempting to read any\n                     input.  The prompt is displayed only if input is coming from a terminal.\n              -r     Backslash  does  not act as an escape character.  The backslash is considered to be part of\n                     the line.  In particular, a backslash-newline pair may not then be used as a line continua\u2010\n                     tion.\n              -s     Silent mode.  If input is coming from a terminal, characters are not echoed.\n              -t timeout\n                     Cause  read to time out and return failure if a complete line of input (or a specified num\u2010\n                     ber of characters) is not read within timeout seconds.  timeout may  be  a  decimal  number\n                     with  a  fractional  portion following the decimal point.  This option is only effective if\n                     read is reading input from a terminal, pipe, or other special file; it has no  effect  when\n                     reading  from regular files.  If read times out, read saves any partial input read into the\n                     specified variable name.  If timeout is 0, read returns immediately, without trying to read\n                     any  data.   The  exit  status is 0 if input is available on the specified file descriptor,\n                     non-zero otherwise.  The exit status is greater than 128 if the timeout is exceeded.\n              -u fd  Read input from file descriptor fd.\n\n              If no names are supplied, the line read, without the ending delimiter but otherwise unmodified, is\n              assigned  to the variable REPLY.  The exit status is zero, unless end-of-file is encountered, read\n              times out (in which case the status is greater than 128), a variable assignment error (such as as\u2010\n              signing  to a readonly variable) occurs, or an invalid file descriptor is supplied as the argument\n              to -u.\n\n       readonly [-aAf] [-p] [name[=word] ...]\n              The given names are marked readonly; the values of these names may not be  changed  by  subsequent\n              assignment.  If the -f option is supplied, the functions corresponding to the names are so marked.\n              The -a option restricts the variables to indexed arrays; the -A option restricts the variables  to\n              associative  arrays.  If both options are supplied, -A takes precedence.  If no name arguments are\n              given, or if the -p option is supplied, a list of all readonly names is printed.   The  other  op\u2010\n              tions  may be used to restrict the output to a subset of the set of readonly names.  The -p option\n              causes output to be displayed in a format that may be reused as input.  If a variable name is fol\u2010\n              lowed  by  =word,  the value of the variable is set to word.  The return status is 0 unless an in\u2010\n              valid option is encountered, one of the names is not a valid shell variable name, or  -f  is  sup\u2010\n              plied with a name that is not a function.\n\n       return [n]\n              Causes  a  function  to stop executing and return the value specified by n to its caller.  If n is\n              omitted, the return status is that of the last command executed in the function body.   If  return\n              is  executed  by a trap handler, the last command used to determine the status is the last command\n              executed before the trap handler.  If return is executed during a DEBUG  trap,  the  last  command\n              used  to  determine  the status is the last command executed by the trap handler before return was\n              invoked.  If return is used outside a function,  but  during  execution  of  a  script  by  the  .\n              (source)  command,  it  causes  the shell to stop executing that script and return either n or the\n              exit status of the last command executed within the script as the exit status of the script.  If n\n              is  supplied,  the return value is its least significant 8 bits.  The return status is non-zero if\n              return is supplied a non-numeric argument, or is used outside a function and not during  execution\n              of a script by . or source.  Any command associated with the RETURN trap is executed before execu\u2010\n              tion resumes after the function or script.\n\n       set [--abefhkmnptuvxBCEHPT] [-o option-name] [arg ...]\n       set [+abefhkmnptuvxBCEHPT] [+o option-name] [arg ...]\n              Without options, the name and value of each shell variable are displayed in a format that  can  be\n              reused  as input for setting or resetting the currently-set variables.  Read-only variables cannot\n              be reset.  In posix mode, only shell variables are listed.  The output is sorted according to  the\n              current  locale.   When  options are specified, they set or unset shell attributes.  Any arguments\n              remaining after option processing are treated as values for the positional parameters and are  as\u2010\n              signed, in order, to $1, $2, ...  $n.  Options, if specified, have the following meanings:\n              -a      Each  variable  or  function that is created or modified is given the export attribute and\n                      marked for export to the environment of subsequent commands.\n              -b      Report the status of terminated background jobs immediately, rather than before  the  next\n                      primary prompt.  This is effective only when job control is enabled.\n              -e      Exit  immediately if a pipeline (which may consist of a single simple command), a list, or\n                      a compound command (see SHELL GRAMMAR above), exits with a  non-zero  status.   The  shell\n                      does  not exit if the command that fails is part of the command list immediately following\n                      a while or until keyword, part of the test following the if or elif reserved  words,  part\n                      of  any  command  executed in a && or || list except the command following the final && or\n                      ||, any command in a pipeline but the last, or if the command's return value is being  in\u2010\n                      verted  with !.  If a compound command other than a subshell returns a non-zero status be\u2010\n                      cause a command failed while -e was being ignored, the shell does not  exit.   A  trap  on\n                      ERR,  if  set, is executed before the shell exits.  This option applies to the shell envi\u2010\n                      ronment and each  subshell  environment  separately  (see  COMMAND  EXECUTION  ENVIRONMENT\n                      above), and may cause subshells to exit before executing all the commands in the subshell.\n\n                      If  a  compound command or shell function executes in a context where -e is being ignored,\n                      none of the commands executed within the compound command or function  body  will  be  af\u2010\n                      fected  by the -e setting, even if -e is set and a command returns a failure status.  If a\n                      compound command or shell function sets -e while executing in a context where  -e  is  ig\u2010\n                      nored,  that  setting  will  not have any effect until the compound command or the command\n                      containing the function call completes.\n              -f      Disable pathname expansion.\n              -h      Remember the location of commands as they are looked up for execution.  This is enabled by\n                      default.\n              -k      All  arguments  in  the  form of assignment statements are placed in the environment for a\n                      command, not just those that precede the command name.\n              -m      Monitor mode.  Job control is enabled.  This option  is  on  by  default  for  interactive\n                      shells  on  systems that support it (see JOB CONTROL above).  All processes run in a sepa\u2010\n                      rate process group.  When a background job completes, the shell prints a  line  containing\n                      its exit status.\n              -n      Read  commands but do not execute them.  This may be used to check a shell script for syn\u2010\n                      tax errors.  This is ignored by interactive shells.\n              -o option-name\n                      The option-name can be one of the following:\n                      allexport\n                              Same as -a.\n                      braceexpand\n                              Same as -B.\n                      emacs   Use an emacs-style command line editing interface.  This  is  enabled  by  default\n                              when  the  shell  is interactive, unless the shell is started with the --noediting\n                              option.  This also affects the editing interface used for read -e.\n                      errexit Same as -e.\n                      errtrace\n                              Same as -E.\n                      functrace\n                              Same as -T.\n                      hashall Same as -h.\n                      histexpand\n                              Same as -H.\n                      history Enable command history, as described above under HISTORY.  This option  is  on  by\n                              default in interactive shells.\n                      ignoreeof\n                              The  effect  is  as  if  the shell command ``IGNOREEOF=10'' had been executed (see\n                              Shell Variables above).\n                      keyword Same as -k.\n                      monitor Same as -m.\n                      noclobber\n                              Same as -C.\n                      noexec  Same as -n.\n                      noglob  Same as -f.\n                      nolog   Currently ignored.\n                      notify  Same as -b.\n                      nounset Same as -u.\n                      onecmd  Same as -t.\n                      physical\n                              Same as -P.\n                      pipefail\n                              If set, the return value of a pipeline is the value of the last  (rightmost)  com\u2010\n                              mand  to exit with a non-zero status, or zero if all commands in the pipeline exit\n                              successfully.  This option is disabled by default.\n                      posix   Change the behavior of bash where the default operation  differs  from  the  POSIX\n                              standard  to  match the standard (posix mode).  See SEE ALSO below for a reference\n                              to a document that details how posix mode affects bash's behavior.\n                      privileged\n                              Same as -p.\n                      verbose Same as -v.\n                      vi      Use a vi-style command line editing interface.  This also affects the editing  in\u2010\n                              terface used for read -e.\n                      xtrace  Same as -x.\n                      If  -o is supplied with no option-name, the values of the current options are printed.  If\n                      +o is supplied with no option-name, a series of set commands to recreate the  current  op\u2010\n                      tion settings is displayed on the standard output.\n              -p      Turn  on  privileged  mode.  In this mode, the $ENV and $BASH_ENV files are not processed,\n                      shell functions are not inherited from the environment, and the SHELLOPTS,  BASHOPTS,  CD\u2010\n                      PATH,  and  GLOBIGNORE  variables, if they appear in the environment, are ignored.  If the\n                      shell is started with the effective user (group) id not equal to the real user (group) id,\n                      and  the  -p  option is not supplied, these actions are taken and the effective user id is\n                      set to the real user id.  If the -p option is supplied at startup, the effective  user  id\n                      is  not  reset.  Turning this option off causes the effective user and group ids to be set\n                      to the real user and group ids.\n              -t      Exit after reading and executing one command.\n              -u      Treat unset variables and parameters other than the special parameters \"@\" and \"*\"  as  an\n                      error when performing parameter expansion.  If expansion is attempted on an unset variable\n                      or parameter, the shell prints an error message, and, if not  interactive,  exits  with  a\n                      non-zero status.\n              -v      Print shell input lines as they are read.\n              -x      After  expanding each simple command, for command, case command, select command, or arith\u2010\n                      metic for command, display the expanded value of PS4, followed by the command and its  ex\u2010\n                      panded arguments or associated word list.\n              -B      The shell performs brace expansion (see Brace Expansion above).  This is on by default.\n              -C      If set, bash does not overwrite an existing file with the >, >&, and <> redirection opera\u2010\n                      tors.  This may be overridden when creating output files by using the redirection operator\n                      >| instead of >.\n              -E      If  set,  any trap on ERR is inherited by shell functions, command substitutions, and com\u2010\n                      mands executed in a subshell environment.  The ERR trap is normally not inherited in  such\n                      cases.\n              -H      Enable  !  style history substitution.  This option is on by default when the shell is in\u2010\n                      teractive.\n              -P      If set, the shell does not resolve symbolic links when executing commands such as cd  that\n                      change  the  current working directory.  It uses the physical directory structure instead.\n                      By default, bash follows the logical chain of directories when performing  commands  which\n                      change the current directory.\n              -T      If  set, any traps on DEBUG and RETURN are inherited by shell functions, command substitu\u2010\n                      tions, and commands executed in a subshell environment.  The DEBUG and  RETURN  traps  are\n                      normally not inherited in such cases.\n              --      If  no arguments follow this option, then the positional parameters are unset.  Otherwise,\n                      the positional parameters are set to the args, even if some of them begin with a -.\n              -       Signal the end of options, cause all remaining args to be assigned to the  positional  pa\u2010\n                      rameters.  The -x and -v options are turned off.  If there are no args, the positional pa\u2010\n                      rameters remain unchanged.\n\n              The options are off by default unless otherwise noted.  Using + rather than - causes these options\n              to  be  turned off.  The options can also be specified as arguments to an invocation of the shell.\n              The current set of options may be found in $-.  The return status is always true unless an invalid\n              option is encountered.\n\n       shift [n]\n              The  positional parameters from n+1 ... are renamed to $1 ....  Parameters represented by the num\u2010\n              bers $# down to $#-n+1 are unset.  n must be a non-negative number less than or equal to $#.  If n\n              is  0, no parameters are changed.  If n is not given, it is assumed to be 1.  If n is greater than\n              $#, the positional parameters are not changed.  The return status is greater than  zero  if  n  is\n              greater than $# or less than zero; otherwise 0.\n\n       shopt [-pqsu] [-o] [optname ...]\n              Toggle  the  values  of  settings controlling optional shell behavior.  The settings can be either\n              those listed below, or, if the -o option is used, those available with the -o option  to  the  set\n              builtin  command.   With no options, or with the -p option, a list of all settable options is dis\u2010\n              played, with an indication of whether or not each is set; if optnames are supplied, the output  is\n              restricted  to  those  options.  The -p option causes output to be displayed in a form that may be\n              reused as input.  Other options have the following meanings:\n              -s     Enable (set) each optname.\n              -u     Disable (unset) each optname.\n              -q     Suppresses normal output (quiet mode); the return status indicates whether the  optname  is\n                     set  or  unset.  If multiple optname arguments are given with -q, the return status is zero\n                     if all optnames are enabled; non-zero otherwise.\n              -o     Restricts the values of optname to be those defined for the -o option to the set builtin.\n\n              If either -s or -u is used with no optname arguments, shopt shows only those options which are set\n              or  unset,  respectively.   Unless  otherwise noted, the shopt options are disabled (unset) by de\u2010\n              fault.\n\n              The return status when listing options is zero if all optnames are  enabled,  non-zero  otherwise.\n              When  setting  or  unsetting  options,  the return status is zero unless an optname is not a valid\n              shell option.\n\n              The list of shopt options is:\n\n              assoc_expand_once\n                      If set, the shell suppresses multiple evaluation of associative  array  subscripts  during\n                      arithmetic  expression  evaluation, while executing builtins that can perform variable as\u2010\n                      signments, and while executing builtins that perform array dereferencing.\n              autocd  If set, a command name that is the name of a directory is executed as if it were the argu\u2010\n                      ment to the cd command.  This option is only used by interactive shells.\n              cdable_vars\n                      If set, an argument to the cd builtin command that is not a directory is assumed to be the\n                      name of a variable whose value is the directory to change to.\n              cdspell If set, minor errors in the spelling of a directory component in a cd command will be cor\u2010\n                      rected.   The  errors  checked for are transposed characters, a missing character, and one\n                      character too many.  If a correction is found, the corrected filename is printed, and  the\n                      command proceeds.  This option is only used by interactive shells.\n              checkhash\n                      If set, bash checks that a command found in the hash table exists before trying to execute\n                      it.  If a hashed command no longer exists, a normal path search is performed.\n              checkjobs\n                      If set, bash lists the status of any stopped and running jobs before exiting  an  interac\u2010\n                      tive  shell.   If any jobs are running, this causes the exit to be deferred until a second\n                      exit is attempted without an intervening command (see JOB CONTROL above).  The  shell  al\u2010\n                      ways postpones exiting if any jobs are stopped.\n              checkwinsize\n                      If set, bash checks the window size after each external (non-builtin) command and, if nec\u2010\n                      essary, updates the values of LINES and COLUMNS.  This option is enabled by default.\n              cmdhist If set, bash attempts to save all lines of a multiple-line command in the same history en\u2010\n                      try.   This  allows easy re-editing of multi-line commands.  This option is enabled by de\u2010\n                      fault, but only has an effect if command history is enabled, as described above under HIS\u2010\n                      TORY.\n              compat31\n              compat32\n              compat40\n              compat41\n              compat42\n              compat43\n              compat44\n                      These  control aspects of the shell's compatibility mode (see SHELL COMPATIBILITY MODE be\u2010\n                      low).\n\n              complete_fullquote\n                      If set, bash quotes all shell metacharacters in filenames and directory  names  when  per\u2010\n                      forming  completion.  If not set, bash removes metacharacters such as the dollar sign from\n                      the set of characters that will be quoted in completed filenames when these metacharacters\n                      appear  in  shell  variable  references  in words to be completed.  This means that dollar\n                      signs in variable names that expand to directories will not be quoted; however, any dollar\n                      signs appearing in filenames will not be quoted, either.  This is active only when bash is\n                      using backslashes to quote completed filenames.  This variable is set by default, which is\n                      the default bash behavior in versions through 4.2.\n\n              direxpand\n                      If  set,  bash replaces directory names with the results of word expansion when performing\n                      filename completion.  This changes the contents of the readline editing  buffer.   If  not\n                      set, bash attempts to preserve what the user typed.\n\n              dirspell\n                      If set, bash attempts spelling correction on directory names during word completion if the\n                      directory name initially supplied does not exist.\n\n              dotglob If set, bash includes filenames beginning with a `.' in the results of pathname expansion.\n                      The  filenames  ``.''   and  ``..''  must always be matched explicitly, even if dotglob is\n                      set.\n\n              execfail\n                      If set, a non-interactive shell will not exit if it cannot execute the file  specified  as\n                      an  argument  to  the  exec  builtin  command.  An interactive shell does not exit if exec\n                      fails.\n\n              expand_aliases\n                      If set, aliases are expanded as described above under ALIASES.  This option is enabled  by\n                      default for interactive shells.\n\n              extdebug\n                      If  set  at  shell invocation, or in a shell startup file, arrange to execute the debugger\n                      profile before the shell starts, identical to the --debugger option.  If set after invoca\u2010\n                      tion, behavior intended for use by debuggers is enabled:\n\n                      1.     The  -F option to the declare builtin displays the source file name and line number\n                             corresponding to each function name supplied as an argument.\n\n                      2.     If the command run by the DEBUG trap returns a non-zero value, the next command  is\n                             skipped and not executed.\n\n                      3.     If the command run by the DEBUG trap returns a value of 2, and the shell is execut\u2010\n                             ing in a subroutine (a shell function or a shell script executed by the . or source\n                             builtins), the shell simulates a call to return.\n\n                      4.     BASH_ARGC and BASH_ARGV are updated as described in their descriptions above.\n\n                      5.     Function  tracing  is enabled: command substitution, shell functions, and subshells\n                             invoked with ( command ) inherit the DEBUG and RETURN traps.\n\n                      6.     Error tracing is enabled: command substitution, shell functions, and subshells  in\u2010\n                             voked with ( command ) inherit the ERR trap.\n\n              extglob If  set,  the  extended pattern matching features described above under Pathname Expansion\n                      are enabled.\n\n              extquote\n                      If set, $'string' and $\"string\" quoting is performed within  ${parameter}  expansions  en\u2010\n                      closed in double quotes.  This option is enabled by default.\n\n              failglob\n                      If  set, patterns which fail to match filenames during pathname expansion result in an ex\u2010\n                      pansion error.\n\n              force_fignore\n                      If set, the suffixes specified by the FIGNORE shell variable cause  words  to  be  ignored\n                      when  performing  word  completion even if the ignored words are the only possible comple\u2010\n                      tions.  See SHELL VARIABLES above for a description of FIGNORE.  This option is enabled by\n                      default.\n\n              globasciiranges\n                      If set, range expressions used in pattern matching bracket expressions (see Pattern Match\u2010\n                      ing above) behave as if in the traditional C locale when performing comparisons.  That is,\n                      the  current  locale's collating sequence is not taken into account, so b will not collate\n                      between A and B, and upper-case and lower-case ASCII characters will collate together.\n\n              globstar\n                      If set, the pattern ** used in a pathname expansion context will match all files and  zero\n                      or  more directories and subdirectories.  If the pattern is followed by a /, only directo\u2010\n                      ries and subdirectories match.\n\n              gnu_errfmt\n                      If set, shell error messages are written in the standard GNU error message format.\n\n              histappend\n                      If set, the history list is appended to the file named by the value of the HISTFILE  vari\u2010\n                      able when the shell exits, rather than overwriting the file.\n\n              histreedit\n                      If  set,  and  readline is being used, a user is given the opportunity to re-edit a failed\n                      history substitution.\n\n              histverify\n                      If set, and readline is being used, the results of history substitution  are  not  immedi\u2010\n                      ately passed to the shell parser.  Instead, the resulting line is loaded into the readline\n                      editing buffer, allowing further modification.\n\n              hostcomplete\n                      If set, and readline is being used, bash will attempt to perform hostname completion  when\n                      a  word  containing a @ is being completed (see Completing under READLINE above).  This is\n                      enabled by default.\n\n              huponexit\n                      If set, bash will send SIGHUP to all jobs when an interactive login shell exits.\n\n              inherit_errexit\n                      If set, command substitution inherits the value of the errexit option, instead  of  unset\u2010\n                      ting it in the subshell environment.  This option is enabled when posix mode is enabled.\n\n              interactive_comments\n                      If  set,  allow a word beginning with # to cause that word and all remaining characters on\n                      that line to be ignored in an interactive shell (see COMMENTS above).  This option is  en\u2010\n                      abled by default.\n\n              lastpipe\n                      If  set,  and job control is not active, the shell runs the last command of a pipeline not\n                      executed in the background in the current shell environment.\n\n              lithist If set, and the cmdhist option is enabled, multi-line commands are saved  to  the  history\n                      with embedded newlines rather than using semicolon separators where possible.\n\n              localvar_inherit\n                      If  set,  local  variables inherit the value and attributes of a variable of the same name\n                      that exists at a previous scope before any new value is assigned.  The  nameref  attribute\n                      is not inherited.\n\n              localvar_unset\n                      If  set, calling unset on local variables in previous function scopes marks them so subse\u2010\n                      quent lookups find them unset until that function returns. This is identical to the behav\u2010\n                      ior of unsetting local variables at the current function scope.\n\n              login_shell\n                      The  shell sets this option if it is started as a login shell (see INVOCATION above).  The\n                      value may not be changed.\n\n              mailwarn\n                      If set, and a file that bash is checking for mail has been accessed since the last time it\n                      was checked, the message ``The mail in mailfile has been read'' is displayed.\n\n              no_empty_cmd_completion\n                      If  set, and readline is being used, bash will not attempt to search the PATH for possible\n                      completions when completion is attempted on an empty line.\n\n              nocaseglob\n                      If set, bash matches filenames in a case-insensitive fashion when performing pathname  ex\u2010\n                      pansion (see Pathname Expansion above).\n\n              nocasematch\n                      If set, bash matches patterns in a case-insensitive fashion when performing matching while\n                      executing case or [[ conditional commands, when performing pattern substitution  word  ex\u2010\n                      pansions, or when filtering possible completions as part of programmable completion.\n\n              nullglob\n                      If set, bash allows patterns which match no files (see Pathname Expansion above) to expand\n                      to a null string, rather than themselves.\n\n              progcomp\n                      If set, the programmable completion facilities (see Programmable Completion above) are en\u2010\n                      abled.  This option is enabled by default.\n\n              progcomp_alias\n                      If  set,  and  programmable completion is enabled, bash treats a command name that doesn't\n                      have any completions as a possible alias and attempts alias expansion. If it has an alias,\n                      bash  attempts  programmable completion using the command word resulting from the expanded\n                      alias.\n\n              promptvars\n                      If set, prompt strings undergo parameter expansion, command substitution,  arithmetic  ex\u2010\n                      pansion, and quote removal after being expanded as described in PROMPTING above.  This op\u2010\n                      tion is enabled by default.\n\n              restricted_shell\n                      The shell sets this option if it is started in restricted mode (see RESTRICTED  SHELL  be\u2010\n                      low).   The  value  may not be changed.  This is not reset when the startup files are exe\u2010\n                      cuted, allowing the startup files to discover whether or not a shell is restricted.\n\n              shift_verbose\n                      If set, the shift builtin prints an error message when the shift count exceeds the  number\n                      of positional parameters.\n\n              sourcepath\n                      If set, the source (.) builtin uses the value of PATH to find the directory containing the\n                      file supplied as an argument.  This option is enabled by default.\n\n              xpg_echo\n                      If set, the echo builtin expands backslash-escape sequences by default.\n\n       suspend [-f]\n              Suspend the execution of this shell until it receives a SIGCONT signal.  A login shell  cannot  be\n              suspended; the -f option can be used to override this and force the suspension.  The return status\n              is 0 unless the shell is a login shell and -f is not supplied, or if job control is not enabled.\n\n       test expr\n       [ expr ]\n              Return a status of 0 (true) or 1 (false) depending on the evaluation of the conditional expression\n              expr.   Each  operator  and  operand must be a separate argument.  Expressions are composed of the\n              primaries described in the bash manual page under CONDITIONAL EXPRESSIONS.  test does  not  accept\n              any options, nor does it accept and ignore an argument of -- as signifying the end of options.\n\n              Expressions  may  be  combined using the following operators, listed in decreasing order of prece\u2010\n              dence.  The evaluation depends on the number of arguments; see below.  Operator precedence is used\n              when there are five or more arguments.\n              ! expr True if expr is false.\n              ( expr )\n                     Returns  the  value  of expr.  This may be used to override the normal precedence of opera\u2010\n                     tors.\n              expr1 -a expr2\n                     True if both expr1 and expr2 are true.\n              expr1 -o expr2\n                     True if either expr1 or expr2 is true.\n\n              test and [ evaluate conditional expressions using a set of rules based on the number of arguments.\n\n              0 arguments\n                     The expression is false.\n              1 argument\n                     The expression is true if and only if the argument is not null.\n              2 arguments\n                     If the first argument is !, the expression is true if and only if the  second  argument  is\n                     null.   If  the first argument is one of the unary conditional operators listed above under\n                     CONDITIONAL EXPRESSIONS, the expression is true if the unary test is true.   If  the  first\n                     argument is not a valid unary conditional operator, the expression is false.\n              3 arguments\n                     The following conditions are applied in the order listed.  If the second argument is one of\n                     the binary conditional operators listed above under CONDITIONAL EXPRESSIONS, the result  of\n                     the  expression is the result of the binary test using the first and third arguments as op\u2010\n                     erands.  The -a and -o operators are considered binary operators when there are three argu\u2010\n                     ments.   If the first argument is !, the value is the negation of the two-argument test us\u2010\n                     ing the second and third arguments.  If the first argument is exactly ( and the third argu\u2010\n                     ment  is exactly ), the result is the one-argument test of the second argument.  Otherwise,\n                     the expression is false.\n              4 arguments\n                     If the first argument is !, the result is the negation  of  the  three-argument  expression\n                     composed of the remaining arguments.  Otherwise, the expression is parsed and evaluated ac\u2010\n                     cording to precedence using the rules listed above.\n              5 or more arguments\n                     The expression is parsed and evaluated according  to  precedence  using  the  rules  listed\n                     above.\n\n              When used with test or [, the < and > operators sort lexicographically using ASCII ordering.\n\n       times  Print  the  accumulated  user and system times for the shell and for processes run from the shell.\n              The return status is 0.\n\n       trap [-lp] [[arg] sigspec ...]\n              The command arg is to be read and executed when the shell receives signal(s) sigspec.  If  arg  is\n              absent (and there is a single sigspec) or -, each specified signal is reset to its original dispo\u2010\n              sition (the value it had upon entrance to the shell).  If arg is the null string the signal speci\u2010\n              fied  by  each  sigspec  is  ignored  by  the shell and by the commands it invokes.  If arg is not\n              present and -p has been supplied, then the trap commands associated with  each  sigspec  are  dis\u2010\n              played.  If no arguments are supplied or if only -p is given, trap prints the list of commands as\u2010\n              sociated with each signal.  The -l option causes the shell to print a list  of  signal  names  and\n              their  corresponding  numbers.   Each  sigspec is either a signal name defined in <signal.h>, or a\n              signal number.  Signal names are case insensitive and the SIG prefix is optional.\n\n              If a sigspec is EXIT (0) the command arg is executed on exit from the shell.  If a sigspec is  DE\u2010\n              BUG,  the  command  arg is executed before every simple command, for command, case command, select\n              command, every arithmetic for command, and before the first command executes in a  shell  function\n              (see  SHELL  GRAMMAR above).  Refer to the description of the extdebug option to the shopt builtin\n              for details of its effect on the DEBUG trap.  If a sigspec is RETURN, the command arg is  executed\n              each time a shell function or a script executed with the . or source builtins finishes executing.\n\n              If  a sigspec is ERR, the command arg is executed whenever a pipeline (which may consist of a sin\u2010\n              gle simple command), a list, or a compound command returns a non-zero exit status, subject to  the\n              following  conditions.   The ERR trap is not executed if the failed command is part of the command\n              list immediately following a while or until keyword, part of the test in an if statement, part  of\n              a command executed in a && or || list except the command following the final && or ||, any command\n              in a pipeline but the last, or if the command's return value is being inverted using !.  These are\n              the same conditions obeyed by the errexit (-e) option.\n\n              Signals  ignored upon entry to the shell cannot be trapped, reset or listed.  Trapped signals that\n              are not being ignored are reset to their original values in a  subshell  or  subshell  environment\n              when one is created.  The return status is false if any sigspec is invalid; otherwise trap returns\n              true.\n\n       type [-aftpP] name [name ...]\n              With no options, indicate how each name would be interpreted if used as a command name.  If the -t\n              option is used, type prints a string which is one of alias, keyword, function, builtin, or file if\n              name is an alias, shell reserved word, function, builtin, or disk file, respectively.  If the name\n              is  not found, then nothing is printed, and an exit status of false is returned.  If the -p option\n              is used, type either returns the name of the disk file that would be executed if name were  speci\u2010\n              fied  as  a  command  name,  or  nothing if ``type -t name'' would not return file.  The -P option\n              forces a PATH search for each name, even if ``type -t name'' would not return file.  If a  command\n              is  hashed, -p and -P print the hashed value, which is not necessarily the file that appears first\n              in PATH.  If the -a option is used, type prints all of the places that contain an executable named\n              name.   This  includes  aliases and functions, if and only if the -p option is not also used.  The\n              table of hashed commands is not consulted when using -a.  The -f option suppresses shell  function\n              lookup,  as  with the command builtin.  type returns true if all of the arguments are found, false\n              if any are not found.\n\n       ulimit [-HS] -a\n       ulimit [-HS] [-bcdefiklmnpqrstuvxPRT [limit]]\n              Provides control over the resources available to the shell and to processes started by it, on sys\u2010\n              tems  that  allow  such control.  The -H and -S options specify that the hard or soft limit is set\n              for the given resource.  A hard limit cannot be increased by a non-root user once  it  is  set;  a\n              soft limit may be increased up to the value of the hard limit.  If neither -H nor -S is specified,\n              both the soft and hard limits are set.  The value of limit can be a number in the  unit  specified\n              for  the  resource or one of the special values hard, soft, or unlimited, which stand for the cur\u2010\n              rent hard limit, the current soft limit, and no limit, respectively.  If  limit  is  omitted,  the\n              current  value  of the soft limit of the resource is printed, unless the -H option is given.  When\n              more than one resource is specified, the limit name and unit, if appropriate, are  printed  before\n              the value.  Other options are interpreted as follows:\n              -a     All current limits are reported; no limits are set\n              -b     The maximum socket buffer size\n              -c     The maximum size of core files created\n              -d     The maximum size of a process's data segment\n              -e     The maximum scheduling priority (\"nice\")\n              -f     The maximum size of files written by the shell and its children\n              -i     The maximum number of pending signals\n              -k     The maximum number of kqueues that may be allocated\n              -l     The maximum size that may be locked into memory\n              -m     The maximum resident set size (many systems do not honor this limit)\n              -n     The  maximum  number  of  open file descriptors (most systems do not allow this value to be\n                     set)\n              -p     The pipe size in 512-byte blocks (this may not be set)\n              -q     The maximum number of bytes in POSIX message queues\n              -r     The maximum real-time scheduling priority\n              -s     The maximum stack size\n              -t     The maximum amount of cpu time in seconds\n              -u     The maximum number of processes available to a single user\n              -v     The maximum amount of virtual memory available to the shell and, on some  systems,  to  its\n                     children\n              -x     The maximum number of file locks\n              -P     The maximum number of pseudoterminals\n              -R     The maximum time a real-time process can run before blocking, in microseconds\n              -T     The maximum number of threads\n\n              If  limit  is  given,  and  the -a option is not used, limit is the new value of the specified re\u2010\n              source.  If no option is given, then -f is assumed.  Values are in  1024-byte  increments,  except\n              for  -t,  which  is  in  seconds;  -R, which is in microseconds; -p, which is in units of 512-byte\n              blocks; -P, -T, -b, -k, -n, and -u, which are unscaled values; and, when in posix mode, -c and -f,\n              which  are in 512-byte increments.  The return status is 0 unless an invalid option or argument is\n              supplied, or an error occurs while setting a new limit.  In POSIX Mode 512-byte  blocks  are  used\n              for the `-c' and `-f' options.\n\n       umask [-p] [-S] [mode]\n              The  user file-creation mask is set to mode.  If mode begins with a digit, it is interpreted as an\n              octal number; otherwise it is interpreted as a symbolic mode mask  similar  to  that  accepted  by\n              chmod(1).  If mode is omitted, the current value of the mask is printed.  The -S option causes the\n              mask to be printed in symbolic form; the default output is an octal number.  If the -p  option  is\n              supplied,  and  mode  is omitted, the output is in a form that may be reused as input.  The return\n              status is 0 if the mode was successfully changed or if no mode argument was  supplied,  and  false\n              otherwise.\n\n       unalias [-a] [name ...]\n              Remove  each  name from the list of defined aliases.  If -a is supplied, all alias definitions are\n              removed.  The return value is true unless a supplied name is not a defined alias.\n\n       unset [-fv] [-n] [name ...]\n              For each name, remove the corresponding variable or function.  If the -v  option  is  given,  each\n              name refers to a shell variable, and that variable is removed.  Read-only variables may not be un\u2010\n              set.  If -f is specified, each name refers to a shell function, and the function definition is re\u2010\n              moved.  If the -n option is supplied, and name is a variable with the nameref attribute, name will\n              be unset rather than the variable it references.  -n has no effect if the -f option  is  supplied.\n              If  no options are supplied, each name refers to a variable; if there is no variable by that name,\n              a function with that name, if any, is unset.  Each unset variable or function is removed from  the\n              environment  passed  to  subsequent  commands.   If  any  of  BASH_ALIASES, BASH_ARGV0, BASH_CMDS,\n              BASH_COMMAND, BASH_SUBSHELL,  BASHPID,  COMP_WORDBREAKS,  DIRSTACK,  EPOCHREALTIME,  EPOCHSECONDS,\n              FUNCNAME,  GROUPS, HISTCMD, LINENO, RANDOM, SECONDS, or SRANDOM are unset, they lose their special\n              properties, even if they are subsequently reset.  The exit status is true unless a name  is  read\u2010\n              only.\n\n       wait [-fn] [-p varname] [id ...]\n              Wait for each specified child process and return its termination status.  Each id may be a process\n              ID or a job specification; if a job spec is given, all processes in that job's pipeline are waited\n              for.  If id is not given, wait waits for all running background jobs and the last-executed process\n              substitution, if its process id is the same as $!, and the return status is zero.  If the  -n  op\u2010\n              tion is supplied, wait waits for a single job from the list of ids or, if no ids are supplied, any\n              job, to complete and returns its exit status.  If none of the supplied arguments is a child of the\n              shell, or if no arguments are supplied and the shell has no unwaited-for children, the exit status\n              is 127.  If the -p option is supplied, the process or job identifier of the job for which the exit\n              status is returned is assigned to the variable varname named by the option argument.  The variable\n              will be unset initially, before any assignment.  This is useful only when the -n  option  is  sup\u2010\n              plied.  Supplying the -f option, when job control is enabled, forces wait to wait for id to termi\u2010\n              nate before returning its status, instead of returning when it changes status.  If id specifies  a\n              non-existent  process  or job, the return status is 127.  Otherwise, the return status is the exit\n              status of the last process or job waited for.\n\nSHELL COMPATIBILITY MODE\n       Bash-4.0 introduced the concept of a `shell compatibility level', specified as a set of  options  to  the\n       shopt  builtin compat31, compat32, compat40, compat41, and so on).  There is only one current compatibil\u2010\n       ity level -- each option is mutually exclusive.  The compatibility level is intended to  allow  users  to\n       select  behavior  from  previous  versions  that  is  incompatible with newer versions while they migrate\n       scripts to use current features and behavior. It's intended to be a temporary solution.\n\n       This section does not mention behavior that is standard for a particular version (e.g., setting  compat32\n       means  that quoting the rhs of the regexp matching operator quotes special regexp characters in the word,\n       which is default behavior in bash-3.2 and above).\n\n       If a user enables, say, compat32, it may affect the behavior of other compatibility levels up to and  in\u2010\n       cluding  the  current  compatibility  level.  The idea is that each compatibility level controls behavior\n       that changed in that version of bash, but that behavior may have been present in earlier  versions.   For\n       instance,  the  change  to use locale-based comparisons with the [[ command came in bash-4.1, and earlier\n       versions used ASCII-based comparisons, so enabling compat32 will enable ASCII-based comparisons as  well.\n       That  granularity  may  not be sufficient for all uses, and as a result users should employ compatibility\n       levels carefully.  Read the documentation for a particular feature to find out the current behavior.\n\n       Bash-4.3 introduced a new shell variable: BASH_COMPAT.  The value assigned to this  variable  (a  decimal\n       version number like 4.2, or an integer corresponding to the compatNN option, like 42) determines the com\u2010\n       patibility level.\n\n       Starting with bash-4.4, Bash has begun deprecating older compatibility levels.  Eventually,  the  options\n       will be removed in favor of BASH_COMPAT.\n\n       Bash-5.0  is  the  final version for which there will be an individual shopt option for the previous ver\u2010\n       sion. Users should use BASH_COMPAT on bash-5.0 and later versions.\n\n       The following table describes the behavior changes controlled by each compatibility level  setting.   The\n       compatNN  tag  is  used as shorthand for setting the compatibility level to NN using one of the following\n       mechanisms.  For versions prior to bash-5.0, the compatibility level may be set using  the  corresponding\n       compatNN shopt option.  For bash-4.3 and later versions, the BASH_COMPAT variable is preferred, and it is\n       required for bash-5.1 and later versions.\n\n       compat31\n              \u2022      quoting the rhs of the [[ command's regexp matching operator (=~) has no special effect\n\n       compat32\n              \u2022      interrupting a command list such as \"a ; b ; c\" causes the execution of the next command in\n                     the  list  (in bash-4.0 and later versions, the shell acts as if it received the interrupt,\n                     so interrupting one command in a list aborts the execution of the entire list)\n\n       compat40\n              \u2022      the < and > operators to the [[ command do not consider the current locale  when  comparing\n                     strings;  they use ASCII ordering.  Bash versions prior to bash-4.1 use ASCII collation and\n                     strcmp(3); bash-4.1 and later use the current locale's collation sequence and strcoll(3).\n\n       compat41\n              \u2022      in posix mode, time may be followed by options and still be recognized as a  reserved  word\n                     (this is POSIX interpretation 267)\n              \u2022      in  posix  mode, the parser requires that an even number of single quotes occur in the word\n                     portion of a double-quoted parameter expansion and treats them specially, so  that  charac\u2010\n                     ters within the single quotes are considered quoted (this is POSIX interpretation 221)\n\n       compat42\n              \u2022      the  replacement  string  in  double-quoted pattern substitution does not undergo quote re\u2010\n                     moval, as it does in versions after bash-4.2\n              \u2022      in posix mode, single quotes are considered special when expanding the word  portion  of  a\n                     double-quoted parameter expansion and can be used to quote a closing brace or other special\n                     character (this is part of POSIX interpretation 221); in later versions, single quotes  are\n                     not special within double-quoted word expansions\n\n       compat43\n              \u2022      the  shell  does not print a warning message if an attempt is made to use a quoted compound\n                     assignment as an argument to declare (declare -a foo='(1 2)').  Later  versions  warn  that\n                     this usage is deprecated\n              \u2022      word  expansion  errors  are  considered non-fatal errors that cause the current command to\n                     fail, even in posix mode (the default behavior is to make them fatal errors that cause  the\n                     shell to exit)\n              \u2022      when  executing a shell function, the loop state (while/until/etc.)  is not reset, so break\n                     or continue in that function will break or continue loops in the calling context.  Bash-4.4\n                     and later reset the loop state to prevent this\n\n       compat44\n              \u2022      the  shell  sets  up  the  values used by BASH_ARGV and BASH_ARGC so they can expand to the\n                     shell's positional parameters even if extended debugging mode is not enabled\n              \u2022      a subshell inherits loops from its parent context, so break or continue will cause the sub\u2010\n                     shell to exit.  Bash-5.0 and later reset the loop state to prevent the exit\n              \u2022      variable  assignments  preceding builtins like export and readonly that set attributes con\u2010\n                     tinue to affect variables with the same name in the calling environment even if  the  shell\n                     is not in posix mode\n\n       compat50\n              \u2022      Bash-5.1 changed the way $RANDOM is generated to introduce slightly more randomness. If the\n                     shell compatibility level is set to 50 or lower, it reverts to the method from bash-5.0 and\n                     previous  versions,  so  seeding the random number generator by assigning a value to RANDOM\n                     will produce the same sequence as in bash-5.0\n              \u2022      If the command hash table is empty, bash versions prior to  bash-5.1  printed  an  informa\u2010\n                     tional  message  to  that  effect,  even when producing output that can be reused as input.\n                     Bash-5.1 suppresses that message when the -l option is supplied.\n\nSEE ALSO\n       bash(1), sh(1)\n\nGNU Bash 5.0                                       2004 Apr 20                                  BASH_BUILTINS(1)\n"},{"NOMBRE": "       mount, umount - monta y desmonta sistemas de ficheros.\n\n", "SINOPSIS": "       #include <sys/mount.h>\n\n       int  mount(const  char  *fuente,  const char *destino, const char *tipo_sf, unsigned long opciones, const\n       void *datos);\n\n       int umount(const char *destino);\n\n       int umount2(const char *destino, int opciones);\n\n", "DESCRIPCION": "       mount une el sistema de ficheros especificado por fuente (que frecuentemente es un nombre de dispositivo,\n       pero  que  puede ser tambi\u00e9n un nombre de directorio o un dispositivo virtual) al directorio especificado\n       por destino.\n\n       umount  y  umount2 eliminan la uni\u00f3n del sistema de  ficheros  (el  que  hay  arriba  del  todo)  que  se\n       encuentra montado en destino.\n\n       S\u00f3lo el super-usuario puede montar y desmontar sistemas de ficheros. A partir de la versi\u00f3n 2.4 de Linux,\n       un mismo sistema de ficheros puede ser visible en multiples puntos de montaje y se pueden realizar varios\n       montajes en el mismo punto de montaje, apilando unos sobre otros.\n\n       Los  valores  para  el  argumento tipo_sf que soporta el n\u00facleo se listan en el fichero /proc/filesystems\n       (como \"minix\", \"ext2\", \"msdos\",  \"proc\",  \"nfs\",  \"iso9660\",  etc.).   Es  posible  que  aparezcan  tipos\n       adicionales cuando se carguen los m\u00f3dulos apropiados.\n\n       El  argumento opciones puede tener el n\u00famero m\u00e1gico 0xC0ED (MS_MGC_VAL) en los 16 bits m\u00e1s significativos\n       (esto era necesario en las versiones del n\u00facleo anteriores a la 2.4, pero ya no se necesita y  se  ignora\n       si  se  especifica) y varias opciones de montaje (como las definidas en <linux/fs.h> para libc4 y libc5 y\n       en <sys/mount.h> para glibc2) en los 16 bits menos significativos:\n\n       MS_BIND\n              (Linux 2.4 y siguientes) Realiza un montaje \u00abde ligadura\u00bb (bind), lo que hace que un  sub\u00e1rbol  de\n              ficheros o de directorios sea visible en otro punto dentro de un sistema de ficheros. Los montajes\n              de ligadura pueden cruzar los l\u00edmites de los sistemas de ficheros y atravesar \u00abjaulas\u00bb  chroot(2).\n              Los argumentos tipo_sf, opciones y datos se ignoran.\n\n       MS_DIRSYNC\n              (Desde  Linux  2.5.19.)   Hace que los cambios en los directorios de este sistema de ficheros sean\n              s\u00edncronos.  (Esta propiedad la pueden obtener los directorios  o  sub\u00e1rboles  individuales  usando\n              chattr(8).)\n\n       MS_MANDLOCK\n              Permite  bloqueos  obligatorios  sobre  los  ficheros  de  este sistema de ficheros. (Los bloqueos\n              obligatorios todav\u00eda deben habilitarse  fichero  a  fichero,  de  la  forma  que  se  describe  en\n              fcntl(2).)\n\n       MS_MOVE\n              Mueve  un sub\u00e1rbol.  fuente especifica un punto de montaje existente y destino especifica la nueva\n              posici\u00f3n.  El movimiento es at\u00f3mico: en ning\u00fan momento se desmonta el  sub\u00e1rbol.   Los  argumentos\n              tipo_sf, opciones y datos se ignoran.\n\n       MS_NOATIME\n              No  actualiza  el  tiempo  de  acceso  para  los  ficheros  (de cualquier tipo) en este sistema de\n              ficheros.\n\n       MS_NODEV\n              No permite el acceso a los dispositivos (ficheros especiales) en este sistema de ficheros.\n\n       MS_NODIRATIME\n              No actualiza el tiempo de acceso para los directorios en este sistema de ficheros.\n\n       MS_NOEXEC\n              No permite que los programas se ejecuten desde este sistema de ficheros.\n\n       MS_NOSUID\n              No hace caso a los bits set-UID y set-GID cuando se  ejecutan  programas  desde  este  sistema  de\n              ficheros.\n\n       MS_RDONLY\n              Monta el sistema de ficheros para s\u00f3lo lectura.\n\n       MS_REMOUNT\n              Remonta  un  montaje existente. Esto le permite cambiar el valor de opciones y datos de un montaje\n              existente sin tener que desmontar y remontar el sistema de ficheros.  fuente y destino  deben  ser\n              los mismos valores que los especificados en la llamada mount() inicial; tipo_sf se ignora.\n\n       MS_SYNCHRONOUS\n              Hace  que  las  escrituras  en  este  sistema  de  ficheros  sean  s\u00edncronos  (como  si se hubiera\n              especificado la opci\u00f3n O_SYNC en open(2) para todos los  ficheros  abiertos  en  este  sistema  de\n              ficheros).\n\n       A  partir  de  la versi\u00f3n 2.4 de Linux, las opciones MS_NODEV, MS_NOEXEC y MS_NOSUID se pueden configurar\n       individualmente para cada punto de montaje.\n\n       El argumento datos es interpretado por los diferentes sistemas de ficheros. Normalmente es una cadena  de\n       opciones  separadas  por  comas  que  entiende  este sistema de ficheros.  Consulte mount(8) para ver m\u00e1s\n       detalles de las opciones disponibles para cada tipo de sistema de ficheros.\n\n       La versi\u00f3n 2.1.116 de Linux a\u00f1adi\u00f3 la llamada al  sistema  umount2()  que,  como  umount(),  desmonta  un\n       destino pero permite especificar opciones adicionales que controlen el comportamiento de la operaci\u00f3n:\n\n       MNT_FORCE\n              Fuerza  el  desmontaje  aunque  el  sistema  de  ficheros est\u00e9 ocupado.  (Desde 2.1.116. S\u00f3lo para\n              montajes NFS.)\n\n       MNT_DETACH\n              Realiza un desmontaje \u00abperezoso\u00bb: hace que el punto de  montaje  deje  de  estar  disponible  para\n              nuevos accesos y realmente realiza el desmontaje cuando el punto de montaje deja de estar ocupado.\n              (Desde 2.4.11.)\n\nVALOR DEVUELTO\n       En caso de \u00e9xito se devuelve 0. En caso de error, -1, y se da a errno un valor apropiado.\n\n", "ERRORES": "       Los valores de error dados m\u00e1s abajo son independientes del tipo de sistema de  ficheros.  Cada  tipo  de\n       sistemas  de  ficheros  puede tener sus propios errores especiales y comportamiento. Consulte los fuentes\n       del n\u00facleo para los detalles.\n\n       EPERM  El usuario no es el super-usuario.\n\n       ENODEV tipo_sf no configurado en el n\u00facleo.\n\n       ENOTBLK\n              fuente no es un dispositivo de bloques (y se necesitaba un dispositivo).\n\n       EBUSY  fuente ya est\u00e1 montado. O no puede remontarse para lectura exclusiva, porque ya contiene  ficheros\n              abiertos  para  escritura.   O  no puede montarse en destino porque destino ya est\u00e1 ocupado (es el\n              directorio de trabajo de alguna tarea, el punto de montaje de  otro  dispositivo,  tiene  ficheros\n              abiertos, etc.).  O no puede desmontarse porque est\u00e1 ocupado.\n\n       EINVAL fuente tiene un superbloque inv\u00e1lido.  O se ha intentado volver a montar, pero fuente no estaba ya\n              montado en destino.  O se ha intentando mover fuente cuando \u00e9sta no es un punto de  montaje  o  es\n              '/'.  O se ha intentado desmontar, pero destino no era un punto de montaje.\n\n       ENOTDIR\n              El segundo argumento, o un prefijo del primero, no es un directorio.\n\n       EFAULT Uno de los argumentos de tipo puntero apunta fuera del espacio de direcciones de usuario.\n\n       ENOMEM El n\u00facleo no pudo obtener una p\u00e1gina libre para copiar en ella nombres de ficheros o datos.\n\n       ENAMETOOLONG\n              Un nombre de ruta era m\u00e1s largo que MAXPATHLEN.\n\n       ENOENT Un nombre de camino estaba vac\u00edo o ten\u00eda un componente inexistente.\n\n       ELOOP  Se  han  encontrado  demasiados  enlaces  durante  la resoluci\u00f3n de la ruta.  O se ha intentado un\n              movimiento cuando destino es un descendiente de fuente.\n\n       EACCES No se pudo acceder a un componente de una ruta.\n              O se intent\u00f3 montar un sistema de ficheros para lectura exclusiva sin dar la opci\u00f3n MS_RDONLY.\n              O el dispositivo de bloques fuente estaba  en  un  sistema  de  ficheros  montado  con  la  opci\u00f3n\n              MS_NODEV.\n\n       ENXIO  El n\u00famero mayor del dispositivo de bloques fuente est\u00e1 fuera de rango.\n\n       EMFILE (En caso de que no se necesite un dispositivo de bloques:) La tabla de dispositivos ficticios est\u00e1\n              llena.\n\nCONFORME A\n       Estas  funciones  son  espec\u00edficas  de  Linux  y  no  deber\u00edan  emplearse  en  programas  pretendidamente\n       transportables.\n\n", "HISTORIA": "       La funci\u00f3n umount original se invocaba como umount(dispositivo) y devolv\u00eda ENOTBLK cuando se invocaba con\n       algo distinto a un dispositivo de  bloques.   En  la  versi\u00f3n  0.98p4  de  Linux  se  a\u00f1adi\u00f3  la  llamada\n       umount(dir)  para  dar  soporte  a los dispositivos an\u00f3nimos.  En Linux 2.3.99-pre7 se elimin\u00f3 la llamada\n       umount(dispositivo), dejando s\u00f3lo umount(dir) (ya que ahora los dispositivos se pueden montar en  m\u00e1s  de\n       un lugar, por lo que especificar el dispositivo no es suficiente).\n\n       La  opci\u00f3n MS_SYNC original se renombr\u00f3 a MS_SYNCHRONOUS en la versi\u00f3n 1.1.69 cuando se a\u00f1adi\u00f3 un MS_SYNC\n       diferente a <mman.h>.\n\n       Antes de la versi\u00f3n 2.4 de Linux, cualquier intento por ejecutar un programa set-UID o set-GID  sobre  un\n       sistema  de  ficheros montado con MS_NOSUID fallaba dando el error EPERM.  Desde la versi\u00f3n 2.4, los bits\n       set-UID y set-GID simplemente se ignoran de forma silenciosa en este caso.\n\nV\u00c9ASE TAMBI\u00c9N\n       mount(8), umount(8)\n\nLinux 2.5                                         11 junio 2002                                         MOUNT(2)\n"},{"NOMBRE": "       umount - desmonta sistemas de ficheros\n\n", "SINOPSIS": "       umount [-hV]\n\n       umount -a [-nrv] [-t tipofsv]\n       umount [-nrv] dispositivo | dir [...]\n\n", "DESCRIPCION": "       La  orden umount despega de la jerarqu\u00eda o \u00e1rbol de ficheros el/los sistema(s) de ficheros mencionado(s).\n       Un sistema de ficheros se puede especificar bien dando el directorio donde ha sido montado, o bien  dando\n       el dispositivo o fichero especial donde reside.\n\n       Observe que un sistema de ficheros no puede desmontarse cuando est\u00e1 `ocupado': por ejemplo, cuando hay en\n       \u00e9l ficheros abiertos, o cuando alg\u00fan proceso tiene su directorio de trabajo all\u00ed, o cuando un fichero  de\n       trasiego  en  \u00e9l est\u00e1 en uso.  El proceso que impide el desmontaje podr\u00eda ser incluso el mismo umount: \u00e9l\n       abre libc, y libc a su vez puede abrir por ejemplo ficheros de localizaci\u00f3n.\n\n       Las opciones para la orden umount son:\n\n       -V     Muestra el n\u00famero de versi\u00f3n y acaba.\n\n       -h     Muestra un mensaje de ayuda y acaba.\n\n       -v     Modo prolijo.\n\n       -n     Desmonta sin escribir en /etc/mtab.\n\n       -r     En el caso de que el desmontaje falle, intenta re-montar de lectura exclusiva.\n\n       -a     Se desmontan todos los sistemas de ficheros descritos en /etc/mtab.  (Con  las  versiones  2.7  de\n              umount y superiores: el sistema de ficheros proc no se desmonta.)\n\n       -t tipofsv\n              Indica que las acciones s\u00f3lo deben efectuarse sobre sistemas de ficheros del tipo especificado. Se\n              puede dar m\u00e1s de un tipo empleando una lista de tipos separados por comas. La lista  de  tipos  de\n              sistemas  de  ficheros  puede  llevar  como  prefijo la part\u00edcula no para especificar los tipos de\n              sistemas de ficheros sobre los cuales no se tomar\u00e1 ninguna acci\u00f3n.\n\nEL DISPOSITIVO DE BUCLE\n       La orden umount liberar\u00e1 el dispositivo de bucle (si hay alguno) asociado al montaje, en el caso  de  que\n       encuentre  la  opci\u00f3n  `loop=...'  en  /etc/mtab.   Cualesquier  dispositivos de bucles pendientes pueden\n       liberarse empleando `losetup -d'; vea losetup(8).\n\n", "ARCHIVOS": "       /etc/mtab tabla de sistemas de ficheros montados.\n\nV\u00c9ASE TAMBI\u00c9N\n       umount(2), mount(8), losetup(8).\n\n", "HISTORIA": "       Una orden umount apareci\u00f3 en la Versi\u00f3n 6 del UNIX de AT&T.\n\nLinux 2.0                                         26 Julio 1997                                        UMOUNT(8)\n"},{"NOMBRE": "       uname - imprime informaci\u00f3n del sistema\n\n", "SINOPSIS": "       uname [-snrvma] [--sysname] [--nodename] [--release] [--machine] [--all] [--help] [--version]\n\n", "DESCRIPCION": "       Esta  documentaci\u00f3n  no  va  a  ser  mantenida  a  partir  de ahora y puede ser inexacta o incompleta. La\n       documentaci\u00f3n Texinfo es ahora la fuente autorizada.\n\n       Esta p\u00e1gina de manual documenta la versi\u00f3n de GNU de uname.   uname  imprime  informaci\u00f3n  acerca  de  la\n       m\u00e1quina y el sistema operativo en los que est\u00e1 corriendo. Si no se da ninguna opci\u00f3n, uname act\u00faa como si\n       se hubiera dado la opci\u00f3n -s -a , la informaci\u00f3n seleccionada se imprime  en  el  orden  `snrvm'  con  un\n       espacio entre los diferentes elementos.\n\n   OPCIONES\n       -m, --machine\n              Imprime el tipo de m\u00e1quina (hardware).\n\n       -n, --nodename\n              Imprime el hostname del nodo de red de la m\u00e1quina.\n\n       -r, --release\n              Imprime la versi\u00f3n del sistema operativo.\n\n       -s, --sysname\n              Imprime el nombre del sistema operativo.\n\n       -v     Imprime la fecha de compilaci\u00f3n del sistema operativo.\n\n       -a, --all\n              Imprime toda la informaci\u00f3n anterior.\n\n       --help Imprime un mensaje de uso en la salida est\u00e1ndar y termina satisfactoriamente.\n\n       --version\n              Imprime informaci\u00f3n sobre la versi\u00f3n por la salida est\u00e1ndar y termina satisfactoriamente.\n\nFSF                                          Utilidades Shell de GNU                                    UNAME(1)\n"},{"NOMBRE": "       exit_group,  getpmsg,  get_thread_area, gettid, io_cancel, io_destroy, io_getevents, io_setup, io_submit,\n       madvise1, putpmsg, readahead, rt_sigaction, rt_sigpending, rt_sigprocmask, rt_sigqueueinfo, rt_sigreturn,\n       rt_sigsuspend,   rt_sigtimedwait,  security,  set_thread_area,  ugetrlimit  -  llamadas  al  sistema  sin\n       documentar\n\n", "SINOPSIS": "       Llamadas al sistema sin documentar.\n\n", "DESCRIPCION": "       La versi\u00f3n 2.4.20 del n\u00facleo cuenta  con  253  llamadas  al  sistema  para  la  arquitectura  i386.   Las\n       mencionadas arriba no han sido documentadas todav\u00eda.\n\nV\u00c9ASE TAMBI\u00c9N\n       obsolete(2), syscalls(2), unimplemented(2)\n\nLinux 2.4.20                                     1 febrero 2003                                  UNDOCUMENTED(2)\n"},{"NOMBRE": "       afs_syscall,  break,  ftime,  gtty,  lock,  mpx,  prof,  profil,  stty,  ulimit - Llamadas al sistema sin\n       implementar\n\n", "SINOPSIS": "       Llamadas al sistema sin implementar.\n\n", "DESCRIPCION": "       Estas llamadas al sistema no est\u00e1n implementadas en la versi\u00f3n 2.4 del n\u00facleo de Linux.\n\nVALOR DEVUELTO\n       Estas llamadas al sistema siempre devuelven -1 y asignan a la variable errno el valor ENOSYS.\n\n", "OBSERVACIONES": "       D\u00e9se cuenta que ftime(3), profil(3) y ulimit(3) se implementan como funciones de biblioteca.\n\n       Algunas llamadas al sistema, como alloc_hugepages(2), free_hugepages(2),  ioperm(2),  iopl(2)  y  vm86(2)\n       s\u00f3lo existen en ciertas arquitecturas.\n\n       Algunas  llamadas  al sistema, como ipc(2) y {create,init,delete}_module(2) s\u00f3lo existen cuando el n\u00facleo\n       de Linux se construy\u00f3 con soporte para ellas.\n\nV\u00c9ASE TAMBI\u00c9N\n       obsolete(2)\n\nLinux 2.4                                         12 junio 1998                                 UNIMPLEMENTED(2)\n"},{"NOMBRE": "       unlink - call the unlink function to remove the specified file\n\n", "SINOPSIS": "       unlink FILE\n       unlink OPTION\n\n", "DESCRIPCION": "       Call the unlink function to remove the specified FILE.\n\n       --help display this help and exit\n\n       --version\n              output version information and exit\n\n", "AUTOR": "       Written by Michael Stone.\n\nREPORTING BUGS\n       GNU coreutils online help: <https://www.gnu.org/software/coreutils/>\n       Report any translation bugs to <https://translationproject.org/team/>\n\n", "COPYRIGHT": "       Copyright  \u00a9  2020  Free  Software  Foundation,  Inc.   License  GPLv3+:  GNU  GPL  version  3  or  later\n       <https://gnu.org/licenses/gpl.html>.\n       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to  the  extent\n       permitted by law.\n\nSEE ALSO\n       unlink(2)\n\n       Full documentation <https://www.gnu.org/software/coreutils/unlink>\n       or available locally via: info '(coreutils) unlink invocation'\n\nGNU coreutils 8.32                                  July 2021                                          UNLINK(1)\n"},{"NOMBRE": "       uselib - selecciona biblioteca compartida\n\n", "SINOPSIS": "       #include <unistd.h>\n\n       int uselib(const char *biblioteca);\n\n", "DESCRIPCION": "       uselib  selecciona  el  fichero  binario  de  la   biblioteca compartida que ser\u00e1 empleado por el proceso\n       invocador.\n\nVALOR DEVUELTO\n       En caso de \u00e9xito se devuelve cero. En caso de error se devuelve -1 y se pone en errno un valor apropiado.\n\n", "ERRORES": "       Adem\u00e1s de todos los c\u00f3digos de error devueltos por open(2)  y  mmap(2),  tambi\u00e9n  pueden  devolverse  los\n       siguientes:\n\n       ENOEXEC\n              El fichero especificado por biblioteca no es ejecutable, o no posee los n\u00fameros m\u00e1gicos correctos.\n\n       EACCES La biblioteca especificada por biblioteca no tiene permiso de lectura.\n\nCONFORME A\n       uselib() es espec\u00edfica de Linux, y no deber\u00eda emplearse en programas que se pretendan transportables.\n\nV\u00c9ASE TAMBI\u00c9N\n       ar(1), gcc(1), ld(1), ldd(1), mmap(2), open(2), ld.so(8)\n\nLinux 0.99.11                                    9 febrero 1998                                        USELIB(2)\n"},{"NOMBRE": "       ustat - obtiene datos del sistema de ficheros\n\n", "SINOPSIS": "       #include <sys/types.h>\n       #include <unistd.h>    /* libc[45] */\n       #include <ustat.h>     /* glibc2 */\n\n       int ustat(dev_t dev, struct ustat *ubuf);\n\n", "DESCRIPCION": "       ustat  devuelve  informaci\u00f3n  sobre  un sistema de ficheros montado.  dev es un n\u00famero de dispositivo que\n       identifica a uno que contiene un sistema de ficheros montado.  ubuf es un puntero a una estructura  ustat\n       que contiene los siguientes miembros:\n\n              daddr_t f_tfree;                /* Bloques libres en total */\n              ino_t   f_tinode;               /* N\u00famero de nodos-\u00ed libres */\n              char    f_fname[6];             /* Nombre del sist. de fichs. */\n              char    f_fpack[6];             /* Nombre del pack del s.f. */\n\n       Los  dos \u00faltimos campos, f_fname y f_fpack, no est\u00e1n implementados y siempre se rellenar\u00e1n con caracteres\n       nulos (ceros).\n\nVALOR DEVUELTO\n       En caso de \u00e9xito, se devuelve cero y la estructura ustat a la que apunta ubuf se rellenar\u00e1.  En  caso  de\n       error, se devuelve -1 y se pone en errno un valor apropiado.\n\n", "ERRORES": "       EINVAL dev no se refiere a un dispositivo que contiene un sistema de ficheros montado.\n\n       EFAULT ubuf apunta afuera del espacio de direcciones accesible.\n\n       ENOSYS EL  sistema de ficheros montado referenciado por dev no admite esta operaci\u00f3n, o cualquier versi\u00f3n\n              de Linux anterior a la 1.3.16.\n\n", "OBSERVACIONES": "       ustat s\u00f3lo se proporciona por compatibilidad. Todos los nuevos programas deber\u00edan emplear statfs(2) en su\n       lugar.\n\nCONFORME A\n       SVr4.   SVr4  documenta  condiciones  de  error  adicionales:  ENOLINK,  ECOMM  y EINTR, pero no tiene la\n       condici\u00f3n ENOSYS.\n\nV\u00c9ASE TAMBI\u00c9N\n       statfs(2), stat(2)\n\nLinux 1.3.16                                      9 agosto 1995                                         USTAT(2)\n"},{"NOMBRE": "       utime, utimes - cambian los tiempos de acceso o modificaci\u00f3n de un nodo-\u00ed\n\n", "SINOPSIS": "       #include <sys/types.h>\n       #include <utime.h>\n\n       int utime(const char *nombrefichero, struct utimbuf *buf);\n\n       #include <sys/time.h>\n\n       int utimes(char *nombrefichero, struct timeval *tvp);\n\n", "DESCRIPCION": "       utime  cambia los tiempos de acceso y modificaci\u00f3n del nodo-\u00ed especificado por nombrefichero a los campos\n       actime y modtime de buf respectivamente.  Si buf es NULL, entonces los tiempos de acceso  y  modificaci\u00f3n\n       del fichero se ponen al tiempo actual. La estructura utimbuf es:\n\n              struct utimbuf {\n                      time_t actime;  /* tiempo de acceso */\n                      time_t modtime; /* tiempo de modificaci\u00f3n */\n              };\n\n       En  las  bibliotecas DLL 4.4.1 de Linux, utimes es simplemente un envoltorio para utime: tvp[0].tv_sec es\n       actime, y tvp[1].tv_sec es modtime.  La estructura timeval es:\n\n              struct timeval {\n                      long    tv_sec;         /* segundos */\n                      long    tv_usec;        /* microsegundos */\n              };\n\nVALOR DEVUELTO\n       En caso de \u00e9xito se devuelve cero. En caso de error se devuelve -1 y se pone en errno un valor apropiado.\n\n", "ERRORES": "       Pueden ocurrir otros errores.\n\n       EACCES Permiso denegado para escribir en el fichero.\n\n       ENOENT nombrefichero no existe.\n\nCONFORME A\n       utime: SVr4, SVID, POSIX.  SVr4 documenta las condiciones de  error  adicionales  EFAULT,  EINTR,  ELOOP,\n       EMULTIHOP, ENAMETOOLONG, ENOLINK, ENOTDIR, ENOLINK, ENOTDIR, EPERM  y EROFS.\n       utimes: BSD 4.3\n\nV\u00c9ASE TAMBI\u00c9N\n       stat(2)\n\nLinux                                             10 junio 1995                                         UTIME(2)\n"},{"NOMBRE": "       utime, utimes - cambian los tiempos de acceso o modificaci\u00f3n de un nodo-\u00ed\n\n", "SINOPSIS": "       #include <sys/types.h>\n       #include <utime.h>\n\n       int utime(const char *nombrefichero, struct utimbuf *buf);\n\n       #include <sys/time.h>\n\n       int utimes(char *nombrefichero, struct timeval *tvp);\n\n", "DESCRIPCION": "       utime  cambia los tiempos de acceso y modificaci\u00f3n del nodo-\u00ed especificado por nombrefichero a los campos\n       actime y modtime de buf respectivamente.  Si buf es NULL, entonces los tiempos de acceso  y  modificaci\u00f3n\n       del fichero se ponen al tiempo actual. La estructura utimbuf es:\n\n              struct utimbuf {\n                      time_t actime;  /* tiempo de acceso */\n                      time_t modtime; /* tiempo de modificaci\u00f3n */\n              };\n\n       En  las  bibliotecas DLL 4.4.1 de Linux, utimes es simplemente un envoltorio para utime: tvp[0].tv_sec es\n       actime, y tvp[1].tv_sec es modtime.  La estructura timeval es:\n\n              struct timeval {\n                      long    tv_sec;         /* segundos */\n                      long    tv_usec;        /* microsegundos */\n              };\n\nVALOR DEVUELTO\n       En caso de \u00e9xito se devuelve cero. En caso de error se devuelve -1 y se pone en errno un valor apropiado.\n\n", "ERRORES": "       Pueden ocurrir otros errores.\n\n       EACCES Permiso denegado para escribir en el fichero.\n\n       ENOENT nombrefichero no existe.\n\nCONFORME A\n       utime: SVr4, SVID, POSIX.  SVr4 documenta las condiciones de  error  adicionales  EFAULT,  EINTR,  ELOOP,\n       EMULTIHOP, ENAMETOOLONG, ENOLINK, ENOTDIR, ENOLINK, ENOTDIR, EPERM  y EROFS.\n       utimes: BSD 4.3\n\nV\u00c9ASE TAMBI\u00c9N\n       stat(2)\n\nLinux                                             10 junio 1995                                         UTIME(2)\n"},{"NOMBRE": "       vfork - crea un proceso hijo y bloquea al padre\n\n", "SINOPSIS": "       #include <sys/types.h>\n       #include <unistd.h>\n\n       pid_t vfork(void);\n\nDESCRIPCION EST\u00c1NDAR\n       (Seg\u00fan  XPG4  /  SUSv2  /  borrador POSIX.)  La funci\u00f3n vfork() tiene el mismo efecto que fork(), pero el\n       comportamiento es indefinido si el proceso creado por vfork() o bien modifica cualquier otro dato que  no\n       sea  una  variable de tipo pid_t usada para almacenar el valor devuelto por vfork(), o bien regresa de la\n       funci\u00f3n en la que se llam\u00f3 a vfork() o bien llama a cualquier otra funci\u00f3n antes de llamar  con  \u00e9xito  a\n       _exit() o a una de las funciones de la familia exec.\n\n", "ERRORES": "       EAGAIN Demasiados procesos. Int\u00e9ntelo de nuevo.\n\n       ENOMEM No hay espacio de intercambio suficiente para el nuevo proceso.\n\nDESCRIPCION DE LINUX\n       vfork,  como  fork(2),  crea  un  proceso hijo del proceso invocador. Para m\u00e1s detalles, valor devuelto y\n       errores, vea fork(2).\n\n       vfork() es un caso especial de clone(2).  Se usa para crear procesos nuevos  sin  copiar  las  tablas  de\n       p\u00e1ginas  del  proceso  padre.  Puede ser \u00fatil en aplicaciones sensibles al rendimiento donde se crear\u00e1 un\n       hijo que a continuaci\u00f3n realizar\u00e1 inmediatamete una llamada execve().\n\n       vfork() se diferencia de fork en que se suspende al padre hasta que el hijo hace una llamada execve(2)  o\n       _exit(2).   El hijo comparte con su padre toda la memoria, incluyendo la pila, hasta que el hijo invoca a\n       execve().  El hijo no debe regresar de la funci\u00f3n actual o llamar a exit(), pero puede llamar a _exit().\n\n       Los manejadores de se\u00f1al se heredan pero no se comparten. Las se\u00f1ales destinadas al padre llegan  despu\u00e9s\n       de que el hijo lo libere.\n\nDESCRIPCION HIST\u00d3RICA\n       En Linux fork() se implementa usando p\u00e1ginas de \"copia en escritura\", por lo que la \u00fanica penalizaci\u00f3n en\n       la que incurre fork() es el tiempo y memoria necesarios para duplicar las tablas de p\u00e1ginas del  padre  y\n       crear  una estructura de tarea para el hijo.  Sin embargo, en los malos tiempos, un fork() requer\u00eda hacer\n       una copia completa del espacio de datos del invocador, a menudo de forma in\u00fatil ya  que,  usualmente,  se\n       realizaba inmediatamente despu\u00e9s una llamada exec().  Por tanto, para una mayor eficiencia, BSD introdujo\n       la llamada al sistema vfork que no copiaba totalmente el espacio de direcciones del proceso  padre,  sino\n       que  tomaba  prestados  la  memoria  del padre y su hilo de ejecuci\u00f3n hasta que se produc\u00eda una llamada a\n       execve() o un fin de ejecuci\u00f3n. El proceso padre se suspend\u00eda mientras el hijo usaba  sus  recursos.   El\n       uso  de  vfork era delicado (por ejemplo, el no modificar datos en el proceso padre depend\u00eda de saber qu\u00e9\n       variables se manten\u00edan en un registro).\n\n", "FALLOS": "       Es bastante desafortunado que Linux haya revivido este espectro del pasado.  La p\u00e1gina de manual  de  BSD\n       establece:  \"Esta  llamada al sistema se eliminar\u00e1 cuando se implementen mecanismos del sistema adecuados\n       para compartici\u00f3n. Los usuarios no deber\u00edan confiar en la sem\u00e1ntica de compartici\u00f3n de memoria  de  vfork\n       ya que, en ese momento, ser\u00e1 igual a fork.\"\n\n       Formalmente hablando, la descripci\u00f3n est\u00e1ndar dada antes no permite usar vfork() ya que un exec posterior\n       podr\u00eda fallar y lo que a continuaci\u00f3n ocurra es indefinido.\n\n       Los detalles del manejo de se\u00f1ales son oscuros y difieren entre sistemas. La  p\u00e1gina  de  manual  de  BSD\n       dice:  \"Para evitar una posible situaci\u00f3n de abrazo mortal, a aquellos procesos hijos que se encuentran a\n       mitad de una llamada vfork nunca se les env\u00eda una se\u00f1al SIGTTOU o SIGTTIN. En su lugar,  se  permiten  la\n       salida o las ioctls, y los intentos de entrada dan lugar a una indicaci\u00f3n de \"fin de fichero\".\"\n\n       Actualmente (Linux 2.3.25), strace(1) no puede seguir un vfork() y necesita un parche del n\u00facleo.\n\n", "HISTORIA": "       La  llamada al sistema vfork() apareci\u00f3 en 3.0BSD.  En BSD 4.4 se hizo sin\u00f3nima de fork(), pero NetBSD la\n       introdujo de nuevo, http://www.netbsd.org/Documentation/kernel/vfork.html.  En Linux ha sido  equivalente\n       a fork() hasta la versi\u00f3n 2.2.0-pre6 m\u00e1s o menos. Desde la versi\u00f3n 2.2.0-pre9 (en i386, algo m\u00e1s tarde en\n       otras arquitecturas) es una llamada al sistema independiente. El soporte para esta llamada se  a\u00f1adi\u00f3  en\n       la versi\u00f3n 2.0.112 de glibc.\n\nCONFORME A\n       La  llamada  vfork se puede parecer un poco a las llamadas con el mismo nombre en otro sistema operativo.\n       Los requisitos sobre vfork impuestos por los est\u00e1ndares son m\u00e1s  d\u00e9biles  que  aquellos  impuestos  sobre\n       fork,  por  lo  que  una  implementaci\u00f3n el la que las dos sean sin\u00f3nimas es correcta.  En particular, el\n       programador no puede confiar en que el padre se quede bloqueado hasta una llamada a execve() o _exit()  y\n       no puede confiar en ning\u00fan comportamiento espec\u00edfico en relaci\u00f3n a la memoria compartida.\n\nV\u00c9ASE TAMBI\u00c9N\n       clone(2), execve(2), fork(2), wait(2)\n\nLinux 2.2.0                                     1 noviembre 1999                                        VFORK(2)\n"},{"NOMBRE": "       vhangup - cuelga virtualmente la tty en uso\n\n", "SINOPSIS": "       #include <unistd.h>\n\n       int vhangup(void);\n\n", "DESCRIPCION": "       vhangup  simula  un  cuelgue en la terminal en uso. Esta llamada hace que otros usuarios obtengan una tty\n       \u201climpia\u201d cuando entren en el sistema.\n\nVALOR DEVUELTO\n       En caso de \u00e9xito, se devuelve cero. En caso de error, se  devuelve  -1  y  se  pone  en  errno  un  valor\n       apropiado.\n\n", "ERRORES": "       EPERM  El usuario no es el s\u00faper-usuario.\n\nCONFORME A\n       Esta llamada es espec\u00edfica de Linux, y no deber\u00eda emplearse en programas que se pretendan transportables.\n\nV\u00c9ASE TAMBI\u00c9N\n       init(8)\n\nLinux 0.99.11                                     24 julio 1993                                       VHANGUP(2)\n"},{"NOMBRE": "       vm86old, vm86 - entra en el modo virtual del 8086\n\n", "SINOPSIS": "       #include <sys/vm86.h>\n\n       int vm86old(struct vm86_struct * info);\n\n       int vm86(unsigned long fn, struct vm86plus_struct * v86);\n\n", "DESCRIPCION": "       La  llamada  al  sistema  vm86 fue introducida en Linux 0.97p2. En Linux 2.1.15 y 2.0.28 se renombr\u00f3 como\n       vm86old, y se introdujo una nueva vm86.  La definici\u00f3n de la `struct vm86_struct' se cambi\u00f3  en  1.1.8  y\n       1.1.9.\n\n       Estas llamadas hacen que el proceso entre en el modo VM86, y las emplea dosemu (dos(1)).\n\nVALOR DEVUELTO\n       En  caso  de  \u00e9xito,  se  devuelve  cero.  En  caso  de error, se devuelve -1 y se pone en errno un valor\n       apropiado.\n\n", "ERRORES": "       (para vm86old)\n\n       EPERM  Existe la pila del n\u00facleo salvaguardada. (\u00c9sta es una comprobaci\u00f3n prudencial del n\u00facleo; la  pila\n              salvaguardada s\u00f3lo existe dentro del propio modo vm86.)\n\nCONFORME A\n       Esta  llamada  es  espec\u00edfica  de  Linux  en  procesadores  de Intel, y no deber\u00eda emplearse en programas\n       pretendidamente transportables.\n\nLinux 2.1.15                                      17 julio 1997                                          VM86(2)\n"},{"NOMBRE": "       bash,  :,  .,  [,  alias, bg, bind, break, builtin, caller, cd, command, compgen, complete, compopt, con\u2010\n       tinue, declare, dirs, disown, echo, enable, eval, exec, exit, export, false, fc, fg, getopts, hash, help,\n       history,  jobs, kill, let, local, logout, mapfile, popd, printf, pushd, pwd, read, readonly, return, set,\n       shift, shopt, source, suspend, test, times, trap, true, type, typeset,  ulimit,  umask,  unalias,  unset,\n       wait - bash built-in commands, see bash(1)\n\nBASH BUILTIN COMMANDS\n       Unless  otherwise noted, each builtin command documented in this section as accepting options preceded by\n       - accepts -- to signify the end of the options.  The :, true, false, and test/[ builtins  do  not  accept\n       options  and  do  not  treat  --  specially.   The  exit, logout, return, break, continue, let, and shift\n       builtins accept and process arguments beginning with - without requiring --.  Other builtins that  accept\n       arguments  but are not specified as accepting options interpret arguments beginning with - as invalid op\u2010\n       tions and require -- to prevent this interpretation.\n       : [arguments]\n              No effect; the command does nothing beyond expanding arguments and performing any specified  redi\u2010\n              rections.  The return status is zero.\n\n        .  filename [arguments]\n       source filename [arguments]\n              Read  and execute commands from filename in the current shell environment and return the exit sta\u2010\n              tus of the last command executed from filename.  If filename does not contain a  slash,  filenames\n              in  PATH  are  used to find the directory containing filename.  The file searched for in PATH need\n              not be executable.  When bash is not in posix mode, the current directory is searched if  no  file\n              is  found  in PATH.  If the sourcepath option to the shopt builtin command is turned off, the PATH\n              is not searched.  If any arguments are supplied, they become the positional parameters when  file\u2010\n              name  is  executed.   Otherwise  the positional parameters are unchanged.  If the -T option is en\u2010\n              abled, source inherits any trap on DEBUG; if it is not, any DEBUG trap string  is  saved  and  re\u2010\n              stored  around  the  call to source, and source unsets the DEBUG trap while it executes.  If -T is\n              not set, and the sourced file changes the DEBUG trap, the new value is retained when  source  com\u2010\n              pletes.   The  return  status  is the status of the last command exited within the script (0 if no\n              commands are executed), and false if filename is not found or cannot be read.\n\n       alias [-p] [name[=value] ...]\n              Alias with no arguments or with the -p option prints  the  list  of  aliases  in  the  form  alias\n              name=value  on  standard  output.   When arguments are supplied, an alias is defined for each name\n              whose value is given.  A trailing space in value causes the next word to be checked for alias sub\u2010\n              stitution  when  the  alias is expanded.  For each name in the argument list for which no value is\n              supplied, the name and value of the alias is printed.  Alias returns true unless a name  is  given\n              for which no alias has been defined.\n\n       bg [jobspec ...]\n              Resume each suspended job jobspec in the background, as if it had been started with &.  If jobspec\n              is not present, the shell's notion of the current job is used.  bg jobspec returns  0  unless  run\n              when  job control is disabled or, when run with job control enabled, any specified jobspec was not\n              found or was started without job control.\n\n       bind [-m keymap] [-lpsvPSVX]\n       bind [-m keymap] [-q function] [-u function] [-r keyseq]\n       bind [-m keymap] -f filename\n       bind [-m keymap] -x keyseq:shell-command\n       bind [-m keymap] keyseq:function-name\n       bind [-m keymap] keyseq:readline-command\n              Display current readline key and function bindings, bind a key sequence to a readline function  or\n              macro,  or  set  a readline variable.  Each non-option argument is a command as it would appear in\n              .inputrc, but each binding or command must be passed as a separate  argument;  e.g.,  '\"\\C-x\\C-r\":\n              re-read-init-file'.  Options, if supplied, have the following meanings:\n              -m keymap\n                     Use  keymap  as  the  keymap  to be affected by the subsequent bindings.  Acceptable keymap\n                     names are emacs, emacs-standard,  emacs-meta,  emacs-ctlx,  vi,  vi-move,  vi-command,  and\n                     vi-insert.  vi is equivalent to vi-command (vi-move is also a synonym); emacs is equivalent\n                     to emacs-standard.\n              -l     List the names of all readline functions.\n              -p     Display readline function names and bindings in such a way that they can be re-read.\n              -P     List current readline function names and bindings.\n              -s     Display readline key sequences bound to macros and the strings they output in  such  a  way\n                     that they can be re-read.\n              -S     Display readline key sequences bound to macros and the strings they output.\n              -v     Display readline variable names and values in such a way that they can be re-read.\n              -V     List current readline variable names and values.\n              -f filename\n                     Read key bindings from filename.\n              -q function\n                     Query about which keys invoke the named function.\n              -u function\n                     Unbind all keys bound to the named function.\n              -r keyseq\n                     Remove any current binding for keyseq.\n              -x keyseq:shell-command\n                     Cause  shell-command to be executed whenever keyseq is entered.  When shell-command is exe\u2010\n                     cuted, the shell sets the READLINE_LINE variable to the contents of the readline line  buf\u2010\n                     fer  and  the READLINE_POINT and READLINE_MARK variables to the current location of the in\u2010\n                     sertion point and the saved insertion point (the mark), respectively.  If the executed com\u2010\n                     mand changes the value of any of READLINE_LINE, READLINE_POINT, or READLINE_MARK, those new\n                     values will be reflected in the editing state.\n              -X     List all key sequences bound to shell commands and the associated commands in a format that\n                     can be reused as input.\n\n              The return value is 0 unless an unrecognized option is given or an error occurred.\n\n       break [n]\n              Exit  from within a for, while, until, or select loop.  If n is specified, break n levels.  n must\n              be \u2265 1.  If n is greater than the number of enclosing loops, all enclosing loops are exited.   The\n              return value is 0 unless n is not greater than or equal to 1.\n\n       builtin shell-builtin [arguments]\n              Execute  the  specified  shell builtin, passing it arguments, and return its exit status.  This is\n              useful when defining a function whose name is the same as a shell builtin, retaining the function\u2010\n              ality of the builtin within the function.  The cd builtin is commonly redefined this way.  The re\u2010\n              turn status is false if shell-builtin is not a shell builtin command.\n\n       caller [expr]\n              Returns the context of any active subroutine call (a shell function or a script executed with  the\n              .  or  source builtins).  Without expr, caller displays the line number and source filename of the\n              current subroutine call.  If a non-negative integer is supplied as expr, caller displays the  line\n              number,  subroutine  name, and source file corresponding to that position in the current execution\n              call stack.  This extra information may be used, for example, to print a stack trace.  The current\n              frame  is  frame  0.  The return value is 0 unless the shell is not executing a subroutine call or\n              expr does not correspond to a valid position in the call stack.\n\n       cd [-L|[-P [-e]] [-@]] [dir]\n              Change the current directory to dir.  if dir is not supplied, the value of the HOME shell variable\n              is  the default.  Any additional arguments following dir are ignored.  The variable CDPATH defines\n              the search path for the directory containing dir: each directory name in CDPATH  is  searched  for\n              dir.   Alternative  directory names in CDPATH are separated by a colon (:).  A null directory name\n              in CDPATH is the same as the current directory, i.e., ``.''.  If dir begins with a slash (/), then\n              CDPATH  is not used.  The -P option causes cd to use the physical directory structure by resolving\n              symbolic links while traversing dir and before processing instances of .. in dir (see also the  -P\n              option  to the set builtin command); the -L option forces symbolic links to be followed by resolv\u2010\n              ing the link after processing instances of .. in dir.  If .. appears in dir, it  is  processed  by\n              removing the immediately previous pathname component from dir, back to a slash or the beginning of\n              dir.  If the -e option is supplied with -P, and the current working directory cannot  be  success\u2010\n              fully  determined  after a successful directory change, cd will return an unsuccessful status.  On\n              systems that support it, the -@ option presents the extended attributes associated with a file  as\n              a  directory.   An argument of - is converted to $OLDPWD before the directory change is attempted.\n              If a non-empty directory name from CDPATH is used, or if - is the first argument, and  the  direc\u2010\n              tory  change  is  successful, the absolute pathname of the new working directory is written to the\n              standard output.  The return value is true if the directory was successfully changed; false other\u2010\n              wise.\n\n       command [-pVv] command [arg ...]\n              Run command with args suppressing the normal shell function lookup.  Only builtin commands or com\u2010\n              mands found in the PATH are executed.  If the -p option is given, the search for command  is  per\u2010\n              formed  using  a  default value for PATH that is guaranteed to find all of the standard utilities.\n              If either the -V or -v option is supplied, a description of command is  printed.   The  -v  option\n              causes  a  single  word indicating the command or filename used to invoke command to be displayed;\n              the -V option produces a more verbose description.  If the -V or -v option is supplied,  the  exit\n              status  is  0  if command was found, and 1 if not.  If neither option is supplied and an error oc\u2010\n              curred or command cannot be found, the exit status is 127.  Otherwise, the exit status of the com\u2010\n              mand builtin is the exit status of command.\n\n       compgen [option] [word]\n              Generate  possible  completion  matches for word according to the options, which may be any option\n              accepted by the complete builtin with the exception of -p and -r, and write  the  matches  to  the\n              standard output.  When using the -F or -C options, the various shell variables set by the program\u2010\n              mable completion facilities, while available, will not have useful values.\n\n              The matches will be generated in the same way as if the programmable completion code had generated\n              them  directly  from  a  completion specification with the same flags.  If word is specified, only\n              those completions matching word will be displayed.\n\n              The return value is true unless an invalid option is supplied, or no matches were generated.\n\n       complete [-abcdefgjksuv] [-o comp-option] [-DEI] [-A action] [-G globpat] [-W wordlist]\n              [-F function] [-C command] [-X filterpat] [-P prefix] [-S suffix] name [name ...]\n       complete -pr [-DEI] [name ...]\n              Specify how arguments to each name should be completed.  If the -p option is supplied,  or  if  no\n              options  are supplied, existing completion specifications are printed in a way that allows them to\n              be reused as input.  The -r option removes a completion specification for each  name,  or,  if  no\n              names  are  supplied,  all completion specifications.  The -D option indicates that other supplied\n              options and actions should apply to the ``default'' command completion; that  is,  completion  at\u2010\n              tempted on a command for which no completion has previously been defined.  The -E option indicates\n              that other supplied options and actions should apply to ``empty''  command  completion;  that  is,\n              completion attempted on a blank line.  The -I option indicates that other supplied options and ac\u2010\n              tions should apply to completion on the initial non-assignment word on the line, or after  a  com\u2010\n              mand  delimiter such as ; or |, which is usually command name completion.  If multiple options are\n              supplied, the -D option takes precedence over -E, and both take precedence over -I.  If any of -D,\n              -E,  or -I are supplied, any other name arguments are ignored; these completions only apply to the\n              case specified by the option.\n\n              The process of applying these completion specifications when word completion is attempted  is  de\u2010\n              scribed above under Programmable Completion.\n\n              Other options, if specified, have the following meanings.  The arguments to the -G, -W, and -X op\u2010\n              tions (and, if necessary, the -P and -S options) should be quoted to protect them  from  expansion\n              before the complete builtin is invoked.\n              -o comp-option\n                      The comp-option controls several aspects of the compspec's behavior beyond the simple gen\u2010\n                      eration of completions.  comp-option may be one of:\n                      bashdefault\n                              Perform the rest of the default bash completions  if  the  compspec  generates  no\n                              matches.\n                      default Use readline's default filename completion if the compspec generates no matches.\n                      dirnames\n                              Perform directory name completion if the compspec generates no matches.\n                      filenames\n                              Tell  readline  that the compspec generates filenames, so it can perform any file\u2010\n                              name-specific processing (like adding a slash to directory names, quoting  special\n                              characters, or suppressing trailing spaces).  Intended to be used with shell func\u2010\n                              tions.\n                      noquote Tell readline not to quote the completed words  if  they  are  filenames  (quoting\n                              filenames is the default).\n                      nosort  Tell readline not to sort the list of possible completions alphabetically.\n                      nospace Tell readline not to append a space (the default) to words completed at the end of\n                              the line.\n                      plusdirs\n                              After any matches defined by the compspec are generated, directory name completion\n                              is attempted and any matches are added to the results of the other actions.\n              -A action\n                      The action may be one of the following to generate a list of possible completions:\n                      alias   Alias names.  May also be specified as -a.\n                      arrayvar\n                              Array variable names.\n                      binding Readline key binding names.\n                      builtin Names of shell builtin commands.  May also be specified as -b.\n                      command Command names.  May also be specified as -c.\n                      directory\n                              Directory names.  May also be specified as -d.\n                      disabled\n                              Names of disabled shell builtins.\n                      enabled Names of enabled shell builtins.\n                      export  Names of exported shell variables.  May also be specified as -e.\n                      file    File names.  May also be specified as -f.\n                      function\n                              Names of shell functions.\n                      group   Group names.  May also be specified as -g.\n                      helptopic\n                              Help topics as accepted by the help builtin.\n                      hostname\n                              Hostnames, as taken from the file specified by the HOSTFILE shell variable.\n                      job     Job names, if job control is active.  May also be specified as -j.\n                      keyword Shell reserved words.  May also be specified as -k.\n                      running Names of running jobs, if job control is active.\n                      service Service names.  May also be specified as -s.\n                      setopt  Valid arguments for the -o option to the set builtin.\n                      shopt   Shell option names as accepted by the shopt builtin.\n                      signal  Signal names.\n                      stopped Names of stopped jobs, if job control is active.\n                      user    User names.  May also be specified as -u.\n                      variable\n                              Names of all shell variables.  May also be specified as -v.\n              -C command\n                      command is executed in a subshell environment, and its output is used as the possible com\u2010\n                      pletions.\n              -F function\n                      The shell function function is executed in the current shell environment.  When the  func\u2010\n                      tion  is  executed, the first argument ($1) is the name of the command whose arguments are\n                      being completed, the second argument ($2) is the word being completed, and the third argu\u2010\n                      ment  ($3)  is  the  word  preceding the word being completed on the current command line.\n                      When it finishes, the possible completions are retrieved from the value of  the  COMPREPLY\n                      array variable.\n              -G globpat\n                      The pathname expansion pattern globpat is expanded to generate the possible completions.\n              -P prefix\n                      prefix  is added at the beginning of each possible completion after all other options have\n                      been applied.\n              -S suffix\n                      suffix is appended to each possible completion after all other options have been applied.\n              -W wordlist\n                      The wordlist is split using the characters in the IFS special variable as delimiters,  and\n                      each  resultant  word  is expanded.  Shell quoting is honored within wordlist, in order to\n                      provide a mechanism for the words to contain shell metacharacters  or  characters  in  the\n                      value  of IFS.  The possible completions are the members of the resultant list which match\n                      the word being completed.\n              -X filterpat\n                      filterpat is a pattern as used for pathname expansion.  It is applied to the list of  pos\u2010\n                      sible  completions  generated  by the preceding options and arguments, and each completion\n                      matching filterpat is removed from the list.  A leading ! in filterpat  negates  the  pat\u2010\n                      tern; in this case, any completion not matching filterpat is removed.\n\n              The  return  value  is true unless an invalid option is supplied, an option other than -p or -r is\n              supplied without a name argument, an attempt is made to remove a completion  specification  for  a\n              name for which no specification exists, or an error occurs adding a completion specification.\n\n       compopt [-o option] [-DEI] [+o option] [name]\n              Modify  completion  options for each name according to the options, or for the currently-executing\n              completion if no names are supplied.  If no options are given, display the completion options  for\n              each  name  or the current completion.  The possible values of option are those valid for the com\u2010\n              plete builtin described above.  The -D option indicates that other supplied options  should  apply\n              to  the  ``default''  command  completion; that is, completion attempted on a command for which no\n              completion has previously been defined.  The -E  option  indicates  that  other  supplied  options\n              should  apply to ``empty'' command completion; that is, completion attempted on a blank line.  The\n              -I option indicates that other supplied options should apply to completion on the initial  non-as\u2010\n              signment  word  on the line, or after a command delimiter such as ; or |, which is usually command\n              name completion.\n\n              The return value is true unless an invalid option is supplied, an attempt is made  to  modify  the\n              options for a name for which no completion specification exists, or an output error occurs.\n\n       continue [n]\n              Resume  the next iteration of the enclosing for, while, until, or select loop.  If n is specified,\n              resume at the nth enclosing loop.  n must be \u2265 1.  If n is greater than the  number  of  enclosing\n              loops,  the last enclosing loop (the ``top-level'' loop) is resumed.  The return value is 0 unless\n              n is not greater than or equal to 1.\n\n       declare [-aAfFgiIlnrtux] [-p] [name[=value] ...]\n       typeset [-aAfFgiIlnrtux] [-p] [name[=value] ...]\n              Declare variables and/or give them attributes.  If no names are given then display the  values  of\n              variables.   The  -p  option will display the attributes and values of each name.  When -p is used\n              with name arguments, additional options, other than -f and -F, are ignored.  When -p  is  supplied\n              without  name arguments, it will display the attributes and values of all variables having the at\u2010\n              tributes specified by the additional options.  If no other options are supplied with  -p,  declare\n              will  display  the  attributes and values of all shell variables.  The -f option will restrict the\n              display to shell functions.  The -F option inhibits the display of function definitions; only  the\n              function  name  and  attributes are printed.  If the extdebug shell option is enabled using shopt,\n              the source file name and line number where each name is defined are displayed as well.  The -F op\u2010\n              tion  implies  -f.   The -g option forces variables to be created or modified at the global scope,\n              even when declare is executed in a shell function.  It is ignored in all other cases.  The -I  op\u2010\n              tion  causes local variables to inherit the attributes (except the nameref attribute) and value of\n              any existing variable with the same name at a surrounding scope.  If there is  no  existing  vari\u2010\n              able, the local variable is initially unset.  The following options can be used to restrict output\n              to variables with the specified attribute or to give variables attributes:\n              -a     Each name is an indexed array variable (see Arrays above).\n              -A     Each name is an associative array variable (see Arrays above).\n              -f     Use function names only.\n              -i     The variable is treated as an integer; arithmetic  evaluation  (see  ARITHMETIC  EVALUATION\n                     above) is performed when the variable is assigned a value.\n              -l     When  the  variable  is assigned a value, all upper-case characters are converted to lower-\n                     case.  The upper-case attribute is disabled.\n              -n     Give each name the nameref attribute, making it a name reference to another variable.  That\n                     other variable is defined by the value of name.  All references, assignments, and attribute\n                     modifications to name, except those using or changing the -n  attribute  itself,  are  per\u2010\n                     formed on the variable referenced by name's value.  The nameref attribute cannot be applied\n                     to array variables.\n              -r     Make names readonly.  These names cannot then be assigned values by  subsequent  assignment\n                     statements or unset.\n              -t     Give  each  name  the trace attribute.  Traced functions inherit the DEBUG and RETURN traps\n                     from the calling shell.  The trace attribute has no special meaning for variables.\n              -u     When the variable is assigned a value, all lower-case characters are  converted  to  upper-\n                     case.  The lower-case attribute is disabled.\n              -x     Mark names for export to subsequent commands via the environment.\n\n              Using  `+'  instead of `-' turns off the attribute instead, with the exceptions that +a and +A may\n              not be used to destroy array variables and +r will not remove the readonly attribute.   When  used\n              in  a function, declare and typeset make each name local, as with the local command, unless the -g\n              option is supplied.  If a variable name is followed by =value, the value of the variable is set to\n              value.   When  using  -a or -A and the compound assignment syntax to create array variables, addi\u2010\n              tional attributes do not take effect until subsequent assignments.  The return value is  0  unless\n              an invalid option is encountered, an attempt is made to define a function using ``-f foo=bar'', an\n              attempt is made to assign a value to a readonly variable, an attempt is made to assign a value  to\n              an  array  variable  without  using  the compound assignment syntax (see Arrays above), one of the\n              names is not a valid shell variable name, an attempt is made to turn off  readonly  status  for  a\n              readonly  variable,  an  attempt is made to turn off array status for an array variable, or an at\u2010\n              tempt is made to display a non-existent function with -f.\n\n       dirs [-clpv] [+n] [-n]\n              Without options, displays the list of currently remembered directories.  The default display is on\n              a  single  line  with directory names separated by spaces.  Directories are added to the list with\n              the pushd command; the popd command removes entries from the list.  The current directory  is  al\u2010\n              ways the first directory in the stack.\n              -c     Clears the directory stack by deleting all of the entries.\n              -l     Produces  a listing using full pathnames; the default listing format uses a tilde to denote\n                     the home directory.\n              -p     Print the directory stack with one entry per line.\n              -v     Print the directory stack with one entry per line, prefixing each entry with its  index  in\n                     the stack.\n              +n     Displays  the nth entry counting from the left of the list shown by dirs when invoked with\u2010\n                     out options, starting with zero.\n              -n     Displays the nth entry counting from the right of the list shown by dirs when invoked with\u2010\n                     out options, starting with zero.\n\n              The  return value is 0 unless an invalid option is supplied or n indexes beyond the end of the di\u2010\n              rectory stack.\n\n       disown [-ar] [-h] [jobspec ... | pid ... ]\n              Without options, remove each jobspec from the table of active jobs.  If jobspec  is  not  present,\n              and  neither  the  -a nor the -r option is supplied, the current job is used.  If the -h option is\n              given, each jobspec is not removed from the table, but is marked so that SIGHUP is not sent to the\n              job  if  the shell receives a SIGHUP.  If no jobspec is supplied, the -a option means to remove or\n              mark all jobs; the -r option without a jobspec argument restricts operation to running jobs.   The\n              return value is 0 unless a jobspec does not specify a valid job.\n\n       echo [-neE] [arg ...]\n              Output  the  args,  separated  by  spaces, followed by a newline.  The return status is 0 unless a\n              write error occurs.  If -n is specified, the trailing newline is suppressed.  If the -e option  is\n              given,  interpretation  of  the  following backslash-escaped characters is enabled.  The -E option\n              disables the interpretation of these escape characters, even on systems where they are interpreted\n              by  default.   The  xpg_echo shell option may be used to dynamically determine whether or not echo\n              expands these escape characters by default.  echo does not interpret -- to mean  the  end  of  op\u2010\n              tions.  echo interprets the following escape sequences:\n              \\a     alert (bell)\n              \\b     backspace\n              \\c     suppress further output\n              \\e\n              \\E     an escape character\n              \\f     form feed\n              \\n     new line\n              \\r     carriage return\n              \\t     horizontal tab\n              \\v     vertical tab\n              \\\\     backslash\n              \\0nnn  the eight-bit character whose value is the octal value nnn (zero to three octal digits)\n              \\xHH   the eight-bit character whose value is the hexadecimal value HH (one or two hex digits)\n              \\uHHHH the  Unicode  (ISO/IEC  10646)  character whose value is the hexadecimal value HHHH (one to\n                     four hex digits)\n              \\UHHHHHHHH\n                     the Unicode (ISO/IEC 10646) character whose value is the hexadecimal value HHHHHHHH (one to\n                     eight hex digits)\n\n       enable [-a] [-dnps] [-f filename] [name ...]\n              Enable  and  disable  builtin shell commands.  Disabling a builtin allows a disk command which has\n              the same name as a shell builtin to be executed without specifying a full  pathname,  even  though\n              the  shell  normally searches for builtins before disk commands.  If -n is used, each name is dis\u2010\n              abled; otherwise, names are enabled.  For example, to use the test binary found via the  PATH  in\u2010\n              stead  of  the shell builtin version, run ``enable -n test''.  The -f option means to load the new\n              builtin command name from shared object filename, on systems that support dynamic loading.  The -d\n              option will delete a builtin previously loaded with -f.  If no name arguments are given, or if the\n              -p option is supplied, a list of shell builtins is printed.  With no other option  arguments,  the\n              list  consists  of  all  enabled  shell  builtins.   If -n is supplied, only disabled builtins are\n              printed.  If -a is supplied, the list printed includes all builtins, with an indication of whether\n              or  not  each  is  enabled.   If  -s  is  supplied,  the output is restricted to the POSIX special\n              builtins.  The return value is 0 unless a name is not a shell builtin or there is an error loading\n              a new builtin from a shared object.\n\n       eval [arg ...]\n              The  args are read and concatenated together into a single command.  This command is then read and\n              executed by the shell, and its exit status is returned as the value of  eval.   If  there  are  no\n              args, or only null arguments, eval returns 0.\n\n       exec [-cl] [-a name] [command [arguments]]\n              If  command is specified, it replaces the shell.  No new process is created.  The arguments become\n              the arguments to command.  If the -l option is supplied, the shell places a dash at the  beginning\n              of  the zeroth argument passed to command.  This is what login(1) does.  The -c option causes com\u2010\n              mand to be executed with an empty environment.  If -a is supplied, the shell passes  name  as  the\n              zeroth argument to the executed command.  If command cannot be executed for some reason, a non-in\u2010\n              teractive shell exits, unless the execfail shell option is enabled.   In  that  case,  it  returns\n              failure.   An  interactive shell returns failure if the file cannot be executed.  A subshell exits\n              unconditionally if exec fails.  If command is not specified, any redirections take effect  in  the\n              current  shell, and the return status is 0.  If there is a redirection error, the return status is\n              1.\n\n       exit [n]\n              Cause the shell to exit with a status of n.  If n is omitted, the exit status is that of the  last\n              command executed.  A trap on EXIT is executed before the shell terminates.\n\n       export [-fn] [name[=word]] ...\n       export -p\n              The  supplied  names  are  marked for automatic export to the environment of subsequently executed\n              commands.  If the -f option is given, the names refer to functions.  If no names are given, or  if\n              the  -p  option  is supplied, a list of names of all exported variables is printed.  The -n option\n              causes the export property to be removed from each name.  If a variable name is followed by =word,\n              the  value  of  the variable is set to word.  export returns an exit status of 0 unless an invalid\n              option is encountered, one of the names is not a valid shell variable name, or -f is supplied with\n              a name that is not a function.\n\n       fc [-e ename] [-lnr] [first] [last]\n       fc -s [pat=rep] [cmd]\n              The  first  form selects a range of commands from first to last from the history list and displays\n              or edits and re-executes them.  First and last may be specified as a string (to  locate  the  last\n              command  beginning with that string) or as a number (an index into the history list, where a nega\u2010\n              tive number is used as an offset from the current command number).  When listing, a first or  last\n              of  0  is  equivalent  to -1 and -0 is equivalent to the current command (usually the fc command);\n              otherwise 0 is equivalent to -1 and -0 is invalid.  If last is not specified, it  is  set  to  the\n              current  command for listing (so that ``fc -l -10'' prints the last 10 commands) and to first oth\u2010\n              erwise.  If first is not specified, it is set to the previous command  for  editing  and  -16  for\n              listing.\n\n              The  -n  option  suppresses the command numbers when listing.  The -r option reverses the order of\n              the commands.  If the -l option is given, the commands are listed on standard output.   Otherwise,\n              the  editor given by ename is invoked on a file containing those commands.  If ename is not given,\n              the value of the FCEDIT variable is used, and the value of EDITOR if FCEDIT is not set.   If  nei\u2010\n              ther  variable  is  set, vi is used.  When editing is complete, the edited commands are echoed and\n              executed.\n\n              In the second form, command is re-executed after each instance of pat is replaced by rep.  Command\n              is interpreted the same as first above.  A useful alias to use with this is ``r=\"fc -s\"'', so that\n              typing ``r cc'' runs the last command beginning with ``cc'' and typing ``r'' re-executes the  last\n              command.\n\n              If  the first form is used, the return value is 0 unless an invalid option is encountered or first\n              or last specify history lines out of range.  If the -e option is supplied, the return value is the\n              value  of  the last command executed or failure if an error occurs with the temporary file of com\u2010\n              mands.  If the second form is used, the return status is that of the command  re-executed,  unless\n              cmd does not specify a valid history line, in which case fc returns failure.\n\n       fg [jobspec]\n              Resume  jobspec  in  the  foreground, and make it the current job.  If jobspec is not present, the\n              shell's notion of the current job is used.  The return value is that of the  command  placed  into\n              the  foreground,  or failure if run when job control is disabled or, when run with job control en\u2010\n              abled, if jobspec does not specify a valid job or jobspec specifies a job that was started without\n              job control.\n\n       getopts optstring name [arg ...]\n              getopts is used by shell procedures to parse positional parameters.  optstring contains the option\n              characters to be recognized; if a character is followed by a colon, the option is expected to have\n              an  argument, which should be separated from it by white space.  The colon and question mark char\u2010\n              acters may not be used as option characters.  Each time it is invoked, getopts places the next op\u2010\n              tion in the shell variable name, initializing name if it does not exist, and the index of the next\n              argument to be processed into the variable OPTIND.  OPTIND is initialized to 1 each time the shell\n              or  a  shell script is invoked.  When an option requires an argument, getopts places that argument\n              into the variable OPTARG.  The shell does not reset OPTIND automatically; it must be manually  re\u2010\n              set  between multiple calls to getopts within the same shell invocation if a new set of parameters\n              is to be used.\n\n              When the end of options is encountered, getopts exits with  a  return  value  greater  than  zero.\n              OPTIND is set to the index of the first non-option argument, and name is set to ?.\n\n              getopts  normally parses the positional parameters, but if more arguments are supplied as arg val\u2010\n              ues, getopts parses those instead.\n\n              getopts can report errors in two ways.  If the first character of optstring is a colon, silent er\u2010\n              ror  reporting is used.  In normal operation, diagnostic messages are printed when invalid options\n              or missing option arguments are encountered.  If the variable OPTERR is set to 0,  no  error  mes\u2010\n              sages will be displayed, even if the first character of optstring is not a colon.\n\n              If  an invalid option is seen, getopts places ? into name and, if not silent, prints an error mes\u2010\n              sage and unsets OPTARG.  If getopts is silent, the option character found is placed in OPTARG  and\n              no diagnostic message is printed.\n\n              If  a  required argument is not found, and getopts is not silent, a question mark (?) is placed in\n              name, OPTARG is unset, and a diagnostic message is printed.  If getopts is silent,  then  a  colon\n              (:) is placed in name and OPTARG is set to the option character found.\n\n              getopts  returns  true  if an option, specified or unspecified, is found.  It returns false if the\n              end of options is encountered or an error occurs.\n\n       hash [-lr] [-p filename] [-dt] [name]\n              Each time hash is invoked, the full pathname of the command name is determined  by  searching  the\n              directories  in $PATH and remembered.  Any previously-remembered pathname is discarded.  If the -p\n              option is supplied, no path search is performed, and filename is used as the full filename of  the\n              command.  The -r option causes the shell to forget all remembered locations.  The -d option causes\n              the shell to forget the remembered location of each name.  If the -t option is supplied, the  full\n              pathname  to which each name corresponds is printed.  If multiple name arguments are supplied with\n              -t, the name is printed before the hashed full pathname.  The -l option causes output to  be  dis\u2010\n              played  in a format that may be reused as input.  If no arguments are given, or if only -l is sup\u2010\n              plied, information about remembered commands is printed.  The return status is true unless a  name\n              is not found or an invalid option is supplied.\n\n       help [-dms] [pattern]\n              Display  helpful information about builtin commands.  If pattern is specified, help gives detailed\n              help on all commands matching pattern; otherwise help for  all  the  builtins  and  shell  control\n              structures is printed.\n              -d     Display a short description of each pattern\n              -m     Display the description of each pattern in a manpage-like format\n              -s     Display only a short usage synopsis for each pattern\n\n              The return status is 0 unless no command matches pattern.\n\n       history [n]\n       history -c\n       history -d offset\n       history -d start-end\n       history -anrw [filename]\n       history -p arg [arg ...]\n       history -s arg [arg ...]\n              With  no  options, display the command history list with line numbers.  Lines listed with a * have\n              been modified.  An argument of n lists only the last n lines.  If the shell variable  HISTTIMEFOR\u2010\n              MAT  is  set and not null, it is used as a format string for strftime(3) to display the time stamp\n              associated with each displayed history entry.  No intervening blank is printed between the format\u2010\n              ted  time stamp and the history line.  If filename is supplied, it is used as the name of the his\u2010\n              tory file; if not, the value of HISTFILE is used.  Options, if supplied, have the following  mean\u2010\n              ings:\n              -c     Clear the history list by deleting all the entries.\n              -d offset\n                     Delete  the  history entry at position offset.  If offset is negative, it is interpreted as\n                     relative to one greater than the last history position, so negative indices count back from\n                     the end of the history, and an index of -1 refers to the current history -d command.\n              -d start-end\n                     Delete  the history entries between positions start and end, inclusive.  Positive and nega\u2010\n                     tive values for start and end are interpreted as described above.\n              -a     Append the ``new'' history lines to the history file.   These  are  history  lines  entered\n                     since  the  beginning  of the current bash session, but not already appended to the history\n                     file.\n              -n     Read the history lines not already read from the history  file  into  the  current  history\n                     list.  These are lines appended to the history file since the beginning of the current bash\n                     session.\n              -r     Read the contents of the history file and append them to the current history list.\n              -w     Write the current history list to the history file, overwriting  the  history  file's  con\u2010\n                     tents.\n              -p     Perform  history  substitution on the following args and display the result on the standard\n                     output.  Does not store the results in the history list.  Each arg must be quoted  to  dis\u2010\n                     able normal history expansion.\n              -s     Store the args in the history list as a single entry.  The last command in the history list\n                     is removed before the args are added.\n\n              If the HISTTIMEFORMAT variable is set, the time stamp information associated with each history en\u2010\n              try  is  written to the history file, marked with the history comment character.  When the history\n              file is read, lines beginning with the history comment character followed immediately by  a  digit\n              are  interpreted  as  timestamps for the following history entry.  The return value is 0 unless an\n              invalid option is encountered, an error occurs while reading or writing the history file,  an  in\u2010\n              valid offset is supplied as an argument to -d, or the history expansion supplied as an argument to\n              -p fails.\n\n       jobs [-lnprs] [ jobspec ... ]\n       jobs -x command [ args ... ]\n              The first form lists the active jobs.  The options have the following meanings:\n              -l     List process IDs in addition to the normal information.\n              -n     Display information only about jobs that have changed status since the user was last  noti\u2010\n                     fied of their status.\n              -p     List only the process ID of the job's process group leader.\n              -r     Display only running jobs.\n              -s     Display only stopped jobs.\n\n              If  jobspec  is given, output is restricted to information about that job.  The return status is 0\n              unless an invalid option is encountered or an invalid jobspec is supplied.\n\n              If the -x option is supplied, jobs replaces any jobspec found in command or args with  the  corre\u2010\n              sponding process group ID, and executes command passing it args, returning its exit status.\n\n       kill [-s sigspec | -n signum | -sigspec] [pid | jobspec] ...\n       kill -l|-L [sigspec | exit_status]\n              Send  the  signal named by sigspec or signum to the processes named by pid or jobspec.  sigspec is\n              either a case-insensitive signal name such as SIGKILL (with or without the SIG prefix) or a signal\n              number;  signum is a signal number.  If sigspec is not present, then SIGTERM is assumed.  An argu\u2010\n              ment of -l lists the signal names.  If any arguments are supplied when -l is given, the  names  of\n              the  signals corresponding to the arguments are listed, and the return status is 0.  The exit_sta\u2010\n              tus argument to -l is a number specifying either a signal number or the exit status of  a  process\n              terminated  by  a  signal.   The -L option is equivalent to -l.  kill returns true if at least one\n              signal was successfully sent, or false if an error occurs or an invalid option is encountered.\n\n       let arg [arg ...]\n              Each arg is an arithmetic expression to be evaluated (see ARITHMETIC EVALUATION  above).   If  the\n              last arg evaluates to 0, let returns 1; 0 is returned otherwise.\n\n       local [option] [name[=value] ... | - ]\n              For  each argument, a local variable named name is created, and assigned value.  The option can be\n              any of the options accepted by declare.  When local is used within a function, it causes the vari\u2010\n              able name to have a visible scope restricted to that function and its children.  If name is -, the\n              set of shell options is made local to the function  in  which  local  is  invoked:  shell  options\n              changed  using  the set builtin inside the function are restored to their original values when the\n              function returns.  The restore is effected as if a series of set commands were executed to restore\n              the values that were in place before the function.  With no operands, local writes a list of local\n              variables to the standard output.  It is an error to use local when not within  a  function.   The\n              return  status  is 0 unless local is used outside a function, an invalid name is supplied, or name\n              is a readonly variable.\n\n       logout Exit a login shell.\n\n       mapfile [-d delim] [-n count] [-O origin] [-s count] [-t] [-u fd] [-C callback] [-c quantum] [array]\n       readarray [-d delim] [-n count] [-O origin] [-s count] [-t] [-u fd] [-C callback] [-c quantum] [array]\n              Read lines from the standard input into the indexed array variable array, or from file  descriptor\n              fd  if  the  -u  option is supplied.  The variable MAPFILE is the default array.  Options, if sup\u2010\n              plied, have the following meanings:\n              -d     The first character of delim is used to terminate each input line, rather than newline.  If\n                     delim is the empty string, mapfile will terminate a line when it reads a NUL character.\n              -n     Copy at most count lines.  If count is 0, all lines are copied.\n              -O     Begin assigning to array at index origin.  The default index is 0.\n              -s     Discard the first count lines read.\n              -t     Remove a trailing delim (default newline) from each line read.\n              -u     Read lines from file descriptor fd instead of the standard input.\n              -C     Evaluate callback each time quantum lines are read.  The -c option specifies quantum.\n              -c     Specify the number of lines read between each call to callback.\n\n              If  -C  is  specified  without -c, the default quantum is 5000.  When callback is evaluated, it is\n              supplied the index of the next array element to be assigned and the line to be  assigned  to  that\n              element  as additional arguments.  callback is evaluated after the line is read but before the ar\u2010\n              ray element is assigned.\n\n              If not supplied with an explicit origin, mapfile will clear array before assigning to it.\n\n              mapfile returns successfully unless an invalid option or option argument is supplied, array is in\u2010\n              valid or unassignable, or if array is not an indexed array.\n\n       popd [-n] [+n] [-n]\n              Removes  entries  from the directory stack.  With no arguments, removes the top directory from the\n              stack, and performs a cd to the new top directory.  Arguments, if  supplied,  have  the  following\n              meanings:\n              -n     Suppresses the normal change of directory when removing directories from the stack, so that\n                     only the stack is manipulated.\n              +n     Removes the nth entry counting from the left of the list shown by dirs, starting with zero.\n                     For example: ``popd +0'' removes the first directory, ``popd +1'' the second.\n              -n     Removes  the  nth  entry  counting  from the right of the list shown by dirs, starting with\n                     zero.  For example: ``popd -0'' removes the last directory, ``popd -1'' the next to last.\n\n              If the popd command is successful, a dirs is performed as well, and the return status is 0.   popd\n              returns  false  if  an invalid option is encountered, the directory stack is empty, a non-existent\n              directory stack entry is specified, or the directory change fails.\n\n       printf [-v var] format [arguments]\n              Write the formatted arguments to the standard output under the control of the format.  The -v  op\u2010\n              tion  causes  the output to be assigned to the variable var rather than being printed to the stan\u2010\n              dard output.\n\n              The format is a character string which contains three types of objects:  plain  characters,  which\n              are  simply  copied to standard output, character escape sequences, which are converted and copied\n              to the standard output, and format specifications, each of which causes printing of the next  suc\u2010\n              cessive  argument.  In addition to the standard printf(1) format specifications, printf interprets\n              the following extensions:\n              %b     causes printf to expand backslash escape sequences in the  corresponding  argument  in  the\n                     same way as echo -e.\n              %q     causes  printf to output the corresponding argument in a format that can be reused as shell\n                     input.\n              %(datefmt)T\n                     causes printf to output the date-time string resulting  from  using  datefmt  as  a  format\n                     string  for  strftime(3).  The corresponding argument is an integer representing the number\n                     of seconds since the epoch.  Two special argument values may be  used:  -1  represents  the\n                     current  time,  and -2 represents the time the shell was invoked.  If no argument is speci\u2010\n                     fied, conversion behaves as if -1 had been given.  This is an exception to the usual printf\n                     behavior.\n\n              The  %b,  %q,  and  %T  directives all use the field width and precision arguments from the format\n              specification and write that many bytes from (or use that wide a field for) the expanded argument,\n              which usually contains more characters than the original.\n\n              Arguments  to  non-string format specifiers are treated as C constants, except that a leading plus\n              or minus sign is allowed, and if the leading character is a single or double quote, the  value  is\n              the ASCII value of the following character.\n\n              The  format  is  reused as necessary to consume all of the arguments.  If the format requires more\n              arguments than are supplied, the extra format specifications behave as if a  zero  value  or  null\n              string, as appropriate, had been supplied.  The return value is zero on success, non-zero on fail\u2010\n              ure.\n\n       pushd [-n] [+n] [-n]\n       pushd [-n] [dir]\n              Adds a directory to the top of the directory stack, or rotates the stack, making the  new  top  of\n              the  stack the current working directory.  With no arguments, pushd exchanges the top two directo\u2010\n              ries and returns 0, unless the directory stack is empty.  Arguments, if supplied, have the follow\u2010\n              ing meanings:\n              -n     Suppresses the normal change of directory when rotating or adding directories to the stack,\n                     so that only the stack is manipulated.\n              +n     Rotates the stack so that the nth directory (counting from the left of the  list  shown  by\n                     dirs, starting with zero) is at the top.\n              -n     Rotates  the  stack so that the nth directory (counting from the right of the list shown by\n                     dirs, starting with zero) is at the top.\n              dir    Adds dir to the directory stack at the top, making it the new current working directory  as\n                     if it had been supplied as the argument to the cd builtin.\n\n              If the pushd command is successful, a dirs is performed as well.  If the first form is used, pushd\n              returns 0 unless the cd to dir fails.  With the second form, pushd returns 0 unless the  directory\n              stack  is  empty,  a non-existent directory stack element is specified, or the directory change to\n              the specified new current directory fails.\n\n       pwd [-LP]\n              Print the absolute pathname of the current working directory.  The pathname  printed  contains  no\n              symbolic  links  if the -P option is supplied or the -o physical option to the set builtin command\n              is enabled.  If the -L option is used, the pathname printed may contain symbolic links.   The  re\u2010\n              turn  status is 0 unless an error occurs while reading the name of the current directory or an in\u2010\n              valid option is supplied.\n\n       read [-ers] [-a aname] [-d delim] [-i text] [-n nchars] [-N nchars] [-p  prompt]  [-t  timeout]  [-u  fd]\n       [name ...]\n              One  line  is read from the standard input, or from the file descriptor fd supplied as an argument\n              to the -u option, split into words as described above under Word Splitting, and the first word  is\n              assigned  to  the  first  name,  the second word to the second name, and so on.  If there are more\n              words than names, the remaining words and their intervening delimiters are assigned  to  the  last\n              name.  If there are fewer words read from the input stream than names, the remaining names are as\u2010\n              signed empty values.  The characters in IFS are used to split the line into words using  the  same\n              rules  the shell uses for expansion (described above under Word Splitting).  The backslash charac\u2010\n              ter (\\) may be used to remove any special meaning for the next character read and for line contin\u2010\n              uation.  Options, if supplied, have the following meanings:\n              -a aname\n                     The  words  are  assigned to sequential indices of the array variable aname, starting at 0.\n                     aname is unset before any new values are assigned.  Other name arguments are ignored.\n              -d delim\n                     The first character of delim is used to terminate the input line, rather than newline.   If\n                     delim is the empty string, read will terminate a line when it reads a NUL character.\n              -e     If  the  standard input is coming from a terminal, readline (see READLINE above) is used to\n                     obtain the line.  Readline uses the current (or default, if line editing was not previously\n                     active) editing settings, but uses Readline's default filename completion.\n              -i text\n                     If  readline  is being used to read the line, text is placed into the editing buffer before\n                     editing begins.\n              -n nchars\n                     read returns after reading nchars characters rather than waiting for a complete line of in\u2010\n                     put, but honors a delimiter if fewer than nchars characters are read before the delimiter.\n              -N nchars\n                     read  returns  after  reading  exactly nchars characters rather than waiting for a complete\n                     line of input, unless EOF is encountered or read times out.  Delimiter  characters  encoun\u2010\n                     tered  in  the input are not treated specially and do not cause read to return until nchars\n                     characters are read.  The result is not split on the characters in IFS; the intent is  that\n                     the  variable is assigned exactly the characters read (with the exception of backslash; see\n                     the -r option below).\n              -p prompt\n                     Display prompt on standard error, without a trailing newline, before attempting to read any\n                     input.  The prompt is displayed only if input is coming from a terminal.\n              -r     Backslash  does  not act as an escape character.  The backslash is considered to be part of\n                     the line.  In particular, a backslash-newline pair may not then be used as a line continua\u2010\n                     tion.\n              -s     Silent mode.  If input is coming from a terminal, characters are not echoed.\n              -t timeout\n                     Cause  read to time out and return failure if a complete line of input (or a specified num\u2010\n                     ber of characters) is not read within timeout seconds.  timeout may  be  a  decimal  number\n                     with  a  fractional  portion following the decimal point.  This option is only effective if\n                     read is reading input from a terminal, pipe, or other special file; it has no  effect  when\n                     reading  from regular files.  If read times out, read saves any partial input read into the\n                     specified variable name.  If timeout is 0, read returns immediately, without trying to read\n                     any  data.   The  exit  status is 0 if input is available on the specified file descriptor,\n                     non-zero otherwise.  The exit status is greater than 128 if the timeout is exceeded.\n              -u fd  Read input from file descriptor fd.\n\n              If no names are supplied, the line read, without the ending delimiter but otherwise unmodified, is\n              assigned  to the variable REPLY.  The exit status is zero, unless end-of-file is encountered, read\n              times out (in which case the status is greater than 128), a variable assignment error (such as as\u2010\n              signing  to a readonly variable) occurs, or an invalid file descriptor is supplied as the argument\n              to -u.\n\n       readonly [-aAf] [-p] [name[=word] ...]\n              The given names are marked readonly; the values of these names may not be  changed  by  subsequent\n              assignment.  If the -f option is supplied, the functions corresponding to the names are so marked.\n              The -a option restricts the variables to indexed arrays; the -A option restricts the variables  to\n              associative  arrays.  If both options are supplied, -A takes precedence.  If no name arguments are\n              given, or if the -p option is supplied, a list of all readonly names is printed.   The  other  op\u2010\n              tions  may be used to restrict the output to a subset of the set of readonly names.  The -p option\n              causes output to be displayed in a format that may be reused as input.  If a variable name is fol\u2010\n              lowed  by  =word,  the value of the variable is set to word.  The return status is 0 unless an in\u2010\n              valid option is encountered, one of the names is not a valid shell variable name, or  -f  is  sup\u2010\n              plied with a name that is not a function.\n\n       return [n]\n              Causes  a  function  to stop executing and return the value specified by n to its caller.  If n is\n              omitted, the return status is that of the last command executed in the function body.   If  return\n              is  executed  by a trap handler, the last command used to determine the status is the last command\n              executed before the trap handler.  If return is executed during a DEBUG  trap,  the  last  command\n              used  to  determine  the status is the last command executed by the trap handler before return was\n              invoked.  If return is used outside a function,  but  during  execution  of  a  script  by  the  .\n              (source)  command,  it  causes  the shell to stop executing that script and return either n or the\n              exit status of the last command executed within the script as the exit status of the script.  If n\n              is  supplied,  the return value is its least significant 8 bits.  The return status is non-zero if\n              return is supplied a non-numeric argument, or is used outside a function and not during  execution\n              of a script by . or source.  Any command associated with the RETURN trap is executed before execu\u2010\n              tion resumes after the function or script.\n\n       set [--abefhkmnptuvxBCEHPT] [-o option-name] [arg ...]\n       set [+abefhkmnptuvxBCEHPT] [+o option-name] [arg ...]\n              Without options, the name and value of each shell variable are displayed in a format that  can  be\n              reused  as input for setting or resetting the currently-set variables.  Read-only variables cannot\n              be reset.  In posix mode, only shell variables are listed.  The output is sorted according to  the\n              current  locale.   When  options are specified, they set or unset shell attributes.  Any arguments\n              remaining after option processing are treated as values for the positional parameters and are  as\u2010\n              signed, in order, to $1, $2, ...  $n.  Options, if specified, have the following meanings:\n              -a      Each  variable  or  function that is created or modified is given the export attribute and\n                      marked for export to the environment of subsequent commands.\n              -b      Report the status of terminated background jobs immediately, rather than before  the  next\n                      primary prompt.  This is effective only when job control is enabled.\n              -e      Exit  immediately if a pipeline (which may consist of a single simple command), a list, or\n                      a compound command (see SHELL GRAMMAR above), exits with a  non-zero  status.   The  shell\n                      does  not exit if the command that fails is part of the command list immediately following\n                      a while or until keyword, part of the test following the if or elif reserved  words,  part\n                      of  any  command  executed in a && or || list except the command following the final && or\n                      ||, any command in a pipeline but the last, or if the command's return value is being  in\u2010\n                      verted  with !.  If a compound command other than a subshell returns a non-zero status be\u2010\n                      cause a command failed while -e was being ignored, the shell does not  exit.   A  trap  on\n                      ERR,  if  set, is executed before the shell exits.  This option applies to the shell envi\u2010\n                      ronment and each  subshell  environment  separately  (see  COMMAND  EXECUTION  ENVIRONMENT\n                      above), and may cause subshells to exit before executing all the commands in the subshell.\n\n                      If  a  compound command or shell function executes in a context where -e is being ignored,\n                      none of the commands executed within the compound command or function  body  will  be  af\u2010\n                      fected  by the -e setting, even if -e is set and a command returns a failure status.  If a\n                      compound command or shell function sets -e while executing in a context where  -e  is  ig\u2010\n                      nored,  that  setting  will  not have any effect until the compound command or the command\n                      containing the function call completes.\n              -f      Disable pathname expansion.\n              -h      Remember the location of commands as they are looked up for execution.  This is enabled by\n                      default.\n              -k      All  arguments  in  the  form of assignment statements are placed in the environment for a\n                      command, not just those that precede the command name.\n              -m      Monitor mode.  Job control is enabled.  This option  is  on  by  default  for  interactive\n                      shells  on  systems that support it (see JOB CONTROL above).  All processes run in a sepa\u2010\n                      rate process group.  When a background job completes, the shell prints a  line  containing\n                      its exit status.\n              -n      Read  commands but do not execute them.  This may be used to check a shell script for syn\u2010\n                      tax errors.  This is ignored by interactive shells.\n              -o option-name\n                      The option-name can be one of the following:\n                      allexport\n                              Same as -a.\n                      braceexpand\n                              Same as -B.\n                      emacs   Use an emacs-style command line editing interface.  This  is  enabled  by  default\n                              when  the  shell  is interactive, unless the shell is started with the --noediting\n                              option.  This also affects the editing interface used for read -e.\n                      errexit Same as -e.\n                      errtrace\n                              Same as -E.\n                      functrace\n                              Same as -T.\n                      hashall Same as -h.\n                      histexpand\n                              Same as -H.\n                      history Enable command history, as described above under HISTORY.  This option  is  on  by\n                              default in interactive shells.\n                      ignoreeof\n                              The  effect  is  as  if  the shell command ``IGNOREEOF=10'' had been executed (see\n                              Shell Variables above).\n                      keyword Same as -k.\n                      monitor Same as -m.\n                      noclobber\n                              Same as -C.\n                      noexec  Same as -n.\n                      noglob  Same as -f.\n                      nolog   Currently ignored.\n                      notify  Same as -b.\n                      nounset Same as -u.\n                      onecmd  Same as -t.\n                      physical\n                              Same as -P.\n                      pipefail\n                              If set, the return value of a pipeline is the value of the last  (rightmost)  com\u2010\n                              mand  to exit with a non-zero status, or zero if all commands in the pipeline exit\n                              successfully.  This option is disabled by default.\n                      posix   Change the behavior of bash where the default operation  differs  from  the  POSIX\n                              standard  to  match the standard (posix mode).  See SEE ALSO below for a reference\n                              to a document that details how posix mode affects bash's behavior.\n                      privileged\n                              Same as -p.\n                      verbose Same as -v.\n                      vi      Use a vi-style command line editing interface.  This also affects the editing  in\u2010\n                              terface used for read -e.\n                      xtrace  Same as -x.\n                      If  -o is supplied with no option-name, the values of the current options are printed.  If\n                      +o is supplied with no option-name, a series of set commands to recreate the  current  op\u2010\n                      tion settings is displayed on the standard output.\n              -p      Turn  on  privileged  mode.  In this mode, the $ENV and $BASH_ENV files are not processed,\n                      shell functions are not inherited from the environment, and the SHELLOPTS,  BASHOPTS,  CD\u2010\n                      PATH,  and  GLOBIGNORE  variables, if they appear in the environment, are ignored.  If the\n                      shell is started with the effective user (group) id not equal to the real user (group) id,\n                      and  the  -p  option is not supplied, these actions are taken and the effective user id is\n                      set to the real user id.  If the -p option is supplied at startup, the effective  user  id\n                      is  not  reset.  Turning this option off causes the effective user and group ids to be set\n                      to the real user and group ids.\n              -t      Exit after reading and executing one command.\n              -u      Treat unset variables and parameters other than the special parameters \"@\" and \"*\"  as  an\n                      error when performing parameter expansion.  If expansion is attempted on an unset variable\n                      or parameter, the shell prints an error message, and, if not  interactive,  exits  with  a\n                      non-zero status.\n              -v      Print shell input lines as they are read.\n              -x      After  expanding each simple command, for command, case command, select command, or arith\u2010\n                      metic for command, display the expanded value of PS4, followed by the command and its  ex\u2010\n                      panded arguments or associated word list.\n              -B      The shell performs brace expansion (see Brace Expansion above).  This is on by default.\n              -C      If set, bash does not overwrite an existing file with the >, >&, and <> redirection opera\u2010\n                      tors.  This may be overridden when creating output files by using the redirection operator\n                      >| instead of >.\n              -E      If  set,  any trap on ERR is inherited by shell functions, command substitutions, and com\u2010\n                      mands executed in a subshell environment.  The ERR trap is normally not inherited in  such\n                      cases.\n              -H      Enable  !  style history substitution.  This option is on by default when the shell is in\u2010\n                      teractive.\n              -P      If set, the shell does not resolve symbolic links when executing commands such as cd  that\n                      change  the  current working directory.  It uses the physical directory structure instead.\n                      By default, bash follows the logical chain of directories when performing  commands  which\n                      change the current directory.\n              -T      If  set, any traps on DEBUG and RETURN are inherited by shell functions, command substitu\u2010\n                      tions, and commands executed in a subshell environment.  The DEBUG and  RETURN  traps  are\n                      normally not inherited in such cases.\n              --      If  no arguments follow this option, then the positional parameters are unset.  Otherwise,\n                      the positional parameters are set to the args, even if some of them begin with a -.\n              -       Signal the end of options, cause all remaining args to be assigned to the  positional  pa\u2010\n                      rameters.  The -x and -v options are turned off.  If there are no args, the positional pa\u2010\n                      rameters remain unchanged.\n\n              The options are off by default unless otherwise noted.  Using + rather than - causes these options\n              to  be  turned off.  The options can also be specified as arguments to an invocation of the shell.\n              The current set of options may be found in $-.  The return status is always true unless an invalid\n              option is encountered.\n\n       shift [n]\n              The  positional parameters from n+1 ... are renamed to $1 ....  Parameters represented by the num\u2010\n              bers $# down to $#-n+1 are unset.  n must be a non-negative number less than or equal to $#.  If n\n              is  0, no parameters are changed.  If n is not given, it is assumed to be 1.  If n is greater than\n              $#, the positional parameters are not changed.  The return status is greater than  zero  if  n  is\n              greater than $# or less than zero; otherwise 0.\n\n       shopt [-pqsu] [-o] [optname ...]\n              Toggle  the  values  of  settings controlling optional shell behavior.  The settings can be either\n              those listed below, or, if the -o option is used, those available with the -o option  to  the  set\n              builtin  command.   With no options, or with the -p option, a list of all settable options is dis\u2010\n              played, with an indication of whether or not each is set; if optnames are supplied, the output  is\n              restricted  to  those  options.  The -p option causes output to be displayed in a form that may be\n              reused as input.  Other options have the following meanings:\n              -s     Enable (set) each optname.\n              -u     Disable (unset) each optname.\n              -q     Suppresses normal output (quiet mode); the return status indicates whether the  optname  is\n                     set  or  unset.  If multiple optname arguments are given with -q, the return status is zero\n                     if all optnames are enabled; non-zero otherwise.\n              -o     Restricts the values of optname to be those defined for the -o option to the set builtin.\n\n              If either -s or -u is used with no optname arguments, shopt shows only those options which are set\n              or  unset,  respectively.   Unless  otherwise noted, the shopt options are disabled (unset) by de\u2010\n              fault.\n\n              The return status when listing options is zero if all optnames are  enabled,  non-zero  otherwise.\n              When  setting  or  unsetting  options,  the return status is zero unless an optname is not a valid\n              shell option.\n\n              The list of shopt options is:\n\n              assoc_expand_once\n                      If set, the shell suppresses multiple evaluation of associative  array  subscripts  during\n                      arithmetic  expression  evaluation, while executing builtins that can perform variable as\u2010\n                      signments, and while executing builtins that perform array dereferencing.\n              autocd  If set, a command name that is the name of a directory is executed as if it were the argu\u2010\n                      ment to the cd command.  This option is only used by interactive shells.\n              cdable_vars\n                      If set, an argument to the cd builtin command that is not a directory is assumed to be the\n                      name of a variable whose value is the directory to change to.\n              cdspell If set, minor errors in the spelling of a directory component in a cd command will be cor\u2010\n                      rected.   The  errors  checked for are transposed characters, a missing character, and one\n                      character too many.  If a correction is found, the corrected filename is printed, and  the\n                      command proceeds.  This option is only used by interactive shells.\n              checkhash\n                      If set, bash checks that a command found in the hash table exists before trying to execute\n                      it.  If a hashed command no longer exists, a normal path search is performed.\n              checkjobs\n                      If set, bash lists the status of any stopped and running jobs before exiting  an  interac\u2010\n                      tive  shell.   If any jobs are running, this causes the exit to be deferred until a second\n                      exit is attempted without an intervening command (see JOB CONTROL above).  The  shell  al\u2010\n                      ways postpones exiting if any jobs are stopped.\n              checkwinsize\n                      If set, bash checks the window size after each external (non-builtin) command and, if nec\u2010\n                      essary, updates the values of LINES and COLUMNS.  This option is enabled by default.\n              cmdhist If set, bash attempts to save all lines of a multiple-line command in the same history en\u2010\n                      try.   This  allows easy re-editing of multi-line commands.  This option is enabled by de\u2010\n                      fault, but only has an effect if command history is enabled, as described above under HIS\u2010\n                      TORY.\n              compat31\n              compat32\n              compat40\n              compat41\n              compat42\n              compat43\n              compat44\n                      These  control aspects of the shell's compatibility mode (see SHELL COMPATIBILITY MODE be\u2010\n                      low).\n\n              complete_fullquote\n                      If set, bash quotes all shell metacharacters in filenames and directory  names  when  per\u2010\n                      forming  completion.  If not set, bash removes metacharacters such as the dollar sign from\n                      the set of characters that will be quoted in completed filenames when these metacharacters\n                      appear  in  shell  variable  references  in words to be completed.  This means that dollar\n                      signs in variable names that expand to directories will not be quoted; however, any dollar\n                      signs appearing in filenames will not be quoted, either.  This is active only when bash is\n                      using backslashes to quote completed filenames.  This variable is set by default, which is\n                      the default bash behavior in versions through 4.2.\n\n              direxpand\n                      If  set,  bash replaces directory names with the results of word expansion when performing\n                      filename completion.  This changes the contents of the readline editing  buffer.   If  not\n                      set, bash attempts to preserve what the user typed.\n\n              dirspell\n                      If set, bash attempts spelling correction on directory names during word completion if the\n                      directory name initially supplied does not exist.\n\n              dotglob If set, bash includes filenames beginning with a `.' in the results of pathname expansion.\n                      The  filenames  ``.''   and  ``..''  must always be matched explicitly, even if dotglob is\n                      set.\n\n              execfail\n                      If set, a non-interactive shell will not exit if it cannot execute the file  specified  as\n                      an  argument  to  the  exec  builtin  command.  An interactive shell does not exit if exec\n                      fails.\n\n              expand_aliases\n                      If set, aliases are expanded as described above under ALIASES.  This option is enabled  by\n                      default for interactive shells.\n\n              extdebug\n                      If  set  at  shell invocation, or in a shell startup file, arrange to execute the debugger\n                      profile before the shell starts, identical to the --debugger option.  If set after invoca\u2010\n                      tion, behavior intended for use by debuggers is enabled:\n\n                      1.     The  -F option to the declare builtin displays the source file name and line number\n                             corresponding to each function name supplied as an argument.\n\n                      2.     If the command run by the DEBUG trap returns a non-zero value, the next command  is\n                             skipped and not executed.\n\n                      3.     If the command run by the DEBUG trap returns a value of 2, and the shell is execut\u2010\n                             ing in a subroutine (a shell function or a shell script executed by the . or source\n                             builtins), the shell simulates a call to return.\n\n                      4.     BASH_ARGC and BASH_ARGV are updated as described in their descriptions above.\n\n                      5.     Function  tracing  is enabled: command substitution, shell functions, and subshells\n                             invoked with ( command ) inherit the DEBUG and RETURN traps.\n\n                      6.     Error tracing is enabled: command substitution, shell functions, and subshells  in\u2010\n                             voked with ( command ) inherit the ERR trap.\n\n              extglob If  set,  the  extended pattern matching features described above under Pathname Expansion\n                      are enabled.\n\n              extquote\n                      If set, $'string' and $\"string\" quoting is performed within  ${parameter}  expansions  en\u2010\n                      closed in double quotes.  This option is enabled by default.\n\n              failglob\n                      If  set, patterns which fail to match filenames during pathname expansion result in an ex\u2010\n                      pansion error.\n\n              force_fignore\n                      If set, the suffixes specified by the FIGNORE shell variable cause  words  to  be  ignored\n                      when  performing  word  completion even if the ignored words are the only possible comple\u2010\n                      tions.  See SHELL VARIABLES above for a description of FIGNORE.  This option is enabled by\n                      default.\n\n              globasciiranges\n                      If set, range expressions used in pattern matching bracket expressions (see Pattern Match\u2010\n                      ing above) behave as if in the traditional C locale when performing comparisons.  That is,\n                      the  current  locale's collating sequence is not taken into account, so b will not collate\n                      between A and B, and upper-case and lower-case ASCII characters will collate together.\n\n              globstar\n                      If set, the pattern ** used in a pathname expansion context will match all files and  zero\n                      or  more directories and subdirectories.  If the pattern is followed by a /, only directo\u2010\n                      ries and subdirectories match.\n\n              gnu_errfmt\n                      If set, shell error messages are written in the standard GNU error message format.\n\n              histappend\n                      If set, the history list is appended to the file named by the value of the HISTFILE  vari\u2010\n                      able when the shell exits, rather than overwriting the file.\n\n              histreedit\n                      If  set,  and  readline is being used, a user is given the opportunity to re-edit a failed\n                      history substitution.\n\n              histverify\n                      If set, and readline is being used, the results of history substitution  are  not  immedi\u2010\n                      ately passed to the shell parser.  Instead, the resulting line is loaded into the readline\n                      editing buffer, allowing further modification.\n\n              hostcomplete\n                      If set, and readline is being used, bash will attempt to perform hostname completion  when\n                      a  word  containing a @ is being completed (see Completing under READLINE above).  This is\n                      enabled by default.\n\n              huponexit\n                      If set, bash will send SIGHUP to all jobs when an interactive login shell exits.\n\n              inherit_errexit\n                      If set, command substitution inherits the value of the errexit option, instead  of  unset\u2010\n                      ting it in the subshell environment.  This option is enabled when posix mode is enabled.\n\n              interactive_comments\n                      If  set,  allow a word beginning with # to cause that word and all remaining characters on\n                      that line to be ignored in an interactive shell (see COMMENTS above).  This option is  en\u2010\n                      abled by default.\n\n              lastpipe\n                      If  set,  and job control is not active, the shell runs the last command of a pipeline not\n                      executed in the background in the current shell environment.\n\n              lithist If set, and the cmdhist option is enabled, multi-line commands are saved  to  the  history\n                      with embedded newlines rather than using semicolon separators where possible.\n\n              localvar_inherit\n                      If  set,  local  variables inherit the value and attributes of a variable of the same name\n                      that exists at a previous scope before any new value is assigned.  The  nameref  attribute\n                      is not inherited.\n\n              localvar_unset\n                      If  set, calling unset on local variables in previous function scopes marks them so subse\u2010\n                      quent lookups find them unset until that function returns. This is identical to the behav\u2010\n                      ior of unsetting local variables at the current function scope.\n\n              login_shell\n                      The  shell sets this option if it is started as a login shell (see INVOCATION above).  The\n                      value may not be changed.\n\n              mailwarn\n                      If set, and a file that bash is checking for mail has been accessed since the last time it\n                      was checked, the message ``The mail in mailfile has been read'' is displayed.\n\n              no_empty_cmd_completion\n                      If  set, and readline is being used, bash will not attempt to search the PATH for possible\n                      completions when completion is attempted on an empty line.\n\n              nocaseglob\n                      If set, bash matches filenames in a case-insensitive fashion when performing pathname  ex\u2010\n                      pansion (see Pathname Expansion above).\n\n              nocasematch\n                      If set, bash matches patterns in a case-insensitive fashion when performing matching while\n                      executing case or [[ conditional commands, when performing pattern substitution  word  ex\u2010\n                      pansions, or when filtering possible completions as part of programmable completion.\n\n              nullglob\n                      If set, bash allows patterns which match no files (see Pathname Expansion above) to expand\n                      to a null string, rather than themselves.\n\n              progcomp\n                      If set, the programmable completion facilities (see Programmable Completion above) are en\u2010\n                      abled.  This option is enabled by default.\n\n              progcomp_alias\n                      If  set,  and  programmable completion is enabled, bash treats a command name that doesn't\n                      have any completions as a possible alias and attempts alias expansion. If it has an alias,\n                      bash  attempts  programmable completion using the command word resulting from the expanded\n                      alias.\n\n              promptvars\n                      If set, prompt strings undergo parameter expansion, command substitution,  arithmetic  ex\u2010\n                      pansion, and quote removal after being expanded as described in PROMPTING above.  This op\u2010\n                      tion is enabled by default.\n\n              restricted_shell\n                      The shell sets this option if it is started in restricted mode (see RESTRICTED  SHELL  be\u2010\n                      low).   The  value  may not be changed.  This is not reset when the startup files are exe\u2010\n                      cuted, allowing the startup files to discover whether or not a shell is restricted.\n\n              shift_verbose\n                      If set, the shift builtin prints an error message when the shift count exceeds the  number\n                      of positional parameters.\n\n              sourcepath\n                      If set, the source (.) builtin uses the value of PATH to find the directory containing the\n                      file supplied as an argument.  This option is enabled by default.\n\n              xpg_echo\n                      If set, the echo builtin expands backslash-escape sequences by default.\n\n       suspend [-f]\n              Suspend the execution of this shell until it receives a SIGCONT signal.  A login shell  cannot  be\n              suspended; the -f option can be used to override this and force the suspension.  The return status\n              is 0 unless the shell is a login shell and -f is not supplied, or if job control is not enabled.\n\n       test expr\n       [ expr ]\n              Return a status of 0 (true) or 1 (false) depending on the evaluation of the conditional expression\n              expr.   Each  operator  and  operand must be a separate argument.  Expressions are composed of the\n              primaries described in the bash manual page under CONDITIONAL EXPRESSIONS.  test does  not  accept\n              any options, nor does it accept and ignore an argument of -- as signifying the end of options.\n\n              Expressions  may  be  combined using the following operators, listed in decreasing order of prece\u2010\n              dence.  The evaluation depends on the number of arguments; see below.  Operator precedence is used\n              when there are five or more arguments.\n              ! expr True if expr is false.\n              ( expr )\n                     Returns  the  value  of expr.  This may be used to override the normal precedence of opera\u2010\n                     tors.\n              expr1 -a expr2\n                     True if both expr1 and expr2 are true.\n              expr1 -o expr2\n                     True if either expr1 or expr2 is true.\n\n              test and [ evaluate conditional expressions using a set of rules based on the number of arguments.\n\n              0 arguments\n                     The expression is false.\n              1 argument\n                     The expression is true if and only if the argument is not null.\n              2 arguments\n                     If the first argument is !, the expression is true if and only if the  second  argument  is\n                     null.   If  the first argument is one of the unary conditional operators listed above under\n                     CONDITIONAL EXPRESSIONS, the expression is true if the unary test is true.   If  the  first\n                     argument is not a valid unary conditional operator, the expression is false.\n              3 arguments\n                     The following conditions are applied in the order listed.  If the second argument is one of\n                     the binary conditional operators listed above under CONDITIONAL EXPRESSIONS, the result  of\n                     the  expression is the result of the binary test using the first and third arguments as op\u2010\n                     erands.  The -a and -o operators are considered binary operators when there are three argu\u2010\n                     ments.   If the first argument is !, the value is the negation of the two-argument test us\u2010\n                     ing the second and third arguments.  If the first argument is exactly ( and the third argu\u2010\n                     ment  is exactly ), the result is the one-argument test of the second argument.  Otherwise,\n                     the expression is false.\n              4 arguments\n                     If the first argument is !, the result is the negation  of  the  three-argument  expression\n                     composed of the remaining arguments.  Otherwise, the expression is parsed and evaluated ac\u2010\n                     cording to precedence using the rules listed above.\n              5 or more arguments\n                     The expression is parsed and evaluated according  to  precedence  using  the  rules  listed\n                     above.\n\n              When used with test or [, the < and > operators sort lexicographically using ASCII ordering.\n\n       times  Print  the  accumulated  user and system times for the shell and for processes run from the shell.\n              The return status is 0.\n\n       trap [-lp] [[arg] sigspec ...]\n              The command arg is to be read and executed when the shell receives signal(s) sigspec.  If  arg  is\n              absent (and there is a single sigspec) or -, each specified signal is reset to its original dispo\u2010\n              sition (the value it had upon entrance to the shell).  If arg is the null string the signal speci\u2010\n              fied  by  each  sigspec  is  ignored  by  the shell and by the commands it invokes.  If arg is not\n              present and -p has been supplied, then the trap commands associated with  each  sigspec  are  dis\u2010\n              played.  If no arguments are supplied or if only -p is given, trap prints the list of commands as\u2010\n              sociated with each signal.  The -l option causes the shell to print a list  of  signal  names  and\n              their  corresponding  numbers.   Each  sigspec is either a signal name defined in <signal.h>, or a\n              signal number.  Signal names are case insensitive and the SIG prefix is optional.\n\n              If a sigspec is EXIT (0) the command arg is executed on exit from the shell.  If a sigspec is  DE\u2010\n              BUG,  the  command  arg is executed before every simple command, for command, case command, select\n              command, every arithmetic for command, and before the first command executes in a  shell  function\n              (see  SHELL  GRAMMAR above).  Refer to the description of the extdebug option to the shopt builtin\n              for details of its effect on the DEBUG trap.  If a sigspec is RETURN, the command arg is  executed\n              each time a shell function or a script executed with the . or source builtins finishes executing.\n\n              If  a sigspec is ERR, the command arg is executed whenever a pipeline (which may consist of a sin\u2010\n              gle simple command), a list, or a compound command returns a non-zero exit status, subject to  the\n              following  conditions.   The ERR trap is not executed if the failed command is part of the command\n              list immediately following a while or until keyword, part of the test in an if statement, part  of\n              a command executed in a && or || list except the command following the final && or ||, any command\n              in a pipeline but the last, or if the command's return value is being inverted using !.  These are\n              the same conditions obeyed by the errexit (-e) option.\n\n              Signals  ignored upon entry to the shell cannot be trapped, reset or listed.  Trapped signals that\n              are not being ignored are reset to their original values in a  subshell  or  subshell  environment\n              when one is created.  The return status is false if any sigspec is invalid; otherwise trap returns\n              true.\n\n       type [-aftpP] name [name ...]\n              With no options, indicate how each name would be interpreted if used as a command name.  If the -t\n              option is used, type prints a string which is one of alias, keyword, function, builtin, or file if\n              name is an alias, shell reserved word, function, builtin, or disk file, respectively.  If the name\n              is  not found, then nothing is printed, and an exit status of false is returned.  If the -p option\n              is used, type either returns the name of the disk file that would be executed if name were  speci\u2010\n              fied  as  a  command  name,  or  nothing if ``type -t name'' would not return file.  The -P option\n              forces a PATH search for each name, even if ``type -t name'' would not return file.  If a  command\n              is  hashed, -p and -P print the hashed value, which is not necessarily the file that appears first\n              in PATH.  If the -a option is used, type prints all of the places that contain an executable named\n              name.   This  includes  aliases and functions, if and only if the -p option is not also used.  The\n              table of hashed commands is not consulted when using -a.  The -f option suppresses shell  function\n              lookup,  as  with the command builtin.  type returns true if all of the arguments are found, false\n              if any are not found.\n\n       ulimit [-HS] -a\n       ulimit [-HS] [-bcdefiklmnpqrstuvxPRT [limit]]\n              Provides control over the resources available to the shell and to processes started by it, on sys\u2010\n              tems  that  allow  such control.  The -H and -S options specify that the hard or soft limit is set\n              for the given resource.  A hard limit cannot be increased by a non-root user once  it  is  set;  a\n              soft limit may be increased up to the value of the hard limit.  If neither -H nor -S is specified,\n              both the soft and hard limits are set.  The value of limit can be a number in the  unit  specified\n              for  the  resource or one of the special values hard, soft, or unlimited, which stand for the cur\u2010\n              rent hard limit, the current soft limit, and no limit, respectively.  If  limit  is  omitted,  the\n              current  value  of the soft limit of the resource is printed, unless the -H option is given.  When\n              more than one resource is specified, the limit name and unit, if appropriate, are  printed  before\n              the value.  Other options are interpreted as follows:\n              -a     All current limits are reported; no limits are set\n              -b     The maximum socket buffer size\n              -c     The maximum size of core files created\n              -d     The maximum size of a process's data segment\n              -e     The maximum scheduling priority (\"nice\")\n              -f     The maximum size of files written by the shell and its children\n              -i     The maximum number of pending signals\n              -k     The maximum number of kqueues that may be allocated\n              -l     The maximum size that may be locked into memory\n              -m     The maximum resident set size (many systems do not honor this limit)\n              -n     The  maximum  number  of  open file descriptors (most systems do not allow this value to be\n                     set)\n              -p     The pipe size in 512-byte blocks (this may not be set)\n              -q     The maximum number of bytes in POSIX message queues\n              -r     The maximum real-time scheduling priority\n              -s     The maximum stack size\n              -t     The maximum amount of cpu time in seconds\n              -u     The maximum number of processes available to a single user\n              -v     The maximum amount of virtual memory available to the shell and, on some  systems,  to  its\n                     children\n              -x     The maximum number of file locks\n              -P     The maximum number of pseudoterminals\n              -R     The maximum time a real-time process can run before blocking, in microseconds\n              -T     The maximum number of threads\n\n              If  limit  is  given,  and  the -a option is not used, limit is the new value of the specified re\u2010\n              source.  If no option is given, then -f is assumed.  Values are in  1024-byte  increments,  except\n              for  -t,  which  is  in  seconds;  -R, which is in microseconds; -p, which is in units of 512-byte\n              blocks; -P, -T, -b, -k, -n, and -u, which are unscaled values; and, when in posix mode, -c and -f,\n              which  are in 512-byte increments.  The return status is 0 unless an invalid option or argument is\n              supplied, or an error occurs while setting a new limit.  In POSIX Mode 512-byte  blocks  are  used\n              for the `-c' and `-f' options.\n\n       umask [-p] [-S] [mode]\n              The  user file-creation mask is set to mode.  If mode begins with a digit, it is interpreted as an\n              octal number; otherwise it is interpreted as a symbolic mode mask  similar  to  that  accepted  by\n              chmod(1).  If mode is omitted, the current value of the mask is printed.  The -S option causes the\n              mask to be printed in symbolic form; the default output is an octal number.  If the -p  option  is\n              supplied,  and  mode  is omitted, the output is in a form that may be reused as input.  The return\n              status is 0 if the mode was successfully changed or if no mode argument was  supplied,  and  false\n              otherwise.\n\n       unalias [-a] [name ...]\n              Remove  each  name from the list of defined aliases.  If -a is supplied, all alias definitions are\n              removed.  The return value is true unless a supplied name is not a defined alias.\n\n       unset [-fv] [-n] [name ...]\n              For each name, remove the corresponding variable or function.  If the -v  option  is  given,  each\n              name refers to a shell variable, and that variable is removed.  Read-only variables may not be un\u2010\n              set.  If -f is specified, each name refers to a shell function, and the function definition is re\u2010\n              moved.  If the -n option is supplied, and name is a variable with the nameref attribute, name will\n              be unset rather than the variable it references.  -n has no effect if the -f option  is  supplied.\n              If  no options are supplied, each name refers to a variable; if there is no variable by that name,\n              a function with that name, if any, is unset.  Each unset variable or function is removed from  the\n              environment  passed  to  subsequent  commands.   If  any  of  BASH_ALIASES, BASH_ARGV0, BASH_CMDS,\n              BASH_COMMAND, BASH_SUBSHELL,  BASHPID,  COMP_WORDBREAKS,  DIRSTACK,  EPOCHREALTIME,  EPOCHSECONDS,\n              FUNCNAME,  GROUPS, HISTCMD, LINENO, RANDOM, SECONDS, or SRANDOM are unset, they lose their special\n              properties, even if they are subsequently reset.  The exit status is true unless a name  is  read\u2010\n              only.\n\n       wait [-fn] [-p varname] [id ...]\n              Wait for each specified child process and return its termination status.  Each id may be a process\n              ID or a job specification; if a job spec is given, all processes in that job's pipeline are waited\n              for.  If id is not given, wait waits for all running background jobs and the last-executed process\n              substitution, if its process id is the same as $!, and the return status is zero.  If the  -n  op\u2010\n              tion is supplied, wait waits for a single job from the list of ids or, if no ids are supplied, any\n              job, to complete and returns its exit status.  If none of the supplied arguments is a child of the\n              shell, or if no arguments are supplied and the shell has no unwaited-for children, the exit status\n              is 127.  If the -p option is supplied, the process or job identifier of the job for which the exit\n              status is returned is assigned to the variable varname named by the option argument.  The variable\n              will be unset initially, before any assignment.  This is useful only when the -n  option  is  sup\u2010\n              plied.  Supplying the -f option, when job control is enabled, forces wait to wait for id to termi\u2010\n              nate before returning its status, instead of returning when it changes status.  If id specifies  a\n              non-existent  process  or job, the return status is 127.  Otherwise, the return status is the exit\n              status of the last process or job waited for.\n\nSHELL COMPATIBILITY MODE\n       Bash-4.0 introduced the concept of a `shell compatibility level', specified as a set of  options  to  the\n       shopt  builtin compat31, compat32, compat40, compat41, and so on).  There is only one current compatibil\u2010\n       ity level -- each option is mutually exclusive.  The compatibility level is intended to  allow  users  to\n       select  behavior  from  previous  versions  that  is  incompatible with newer versions while they migrate\n       scripts to use current features and behavior. It's intended to be a temporary solution.\n\n       This section does not mention behavior that is standard for a particular version (e.g., setting  compat32\n       means  that quoting the rhs of the regexp matching operator quotes special regexp characters in the word,\n       which is default behavior in bash-3.2 and above).\n\n       If a user enables, say, compat32, it may affect the behavior of other compatibility levels up to and  in\u2010\n       cluding  the  current  compatibility  level.  The idea is that each compatibility level controls behavior\n       that changed in that version of bash, but that behavior may have been present in earlier  versions.   For\n       instance,  the  change  to use locale-based comparisons with the [[ command came in bash-4.1, and earlier\n       versions used ASCII-based comparisons, so enabling compat32 will enable ASCII-based comparisons as  well.\n       That  granularity  may  not be sufficient for all uses, and as a result users should employ compatibility\n       levels carefully.  Read the documentation for a particular feature to find out the current behavior.\n\n       Bash-4.3 introduced a new shell variable: BASH_COMPAT.  The value assigned to this  variable  (a  decimal\n       version number like 4.2, or an integer corresponding to the compatNN option, like 42) determines the com\u2010\n       patibility level.\n\n       Starting with bash-4.4, Bash has begun deprecating older compatibility levels.  Eventually,  the  options\n       will be removed in favor of BASH_COMPAT.\n\n       Bash-5.0  is  the  final version for which there will be an individual shopt option for the previous ver\u2010\n       sion. Users should use BASH_COMPAT on bash-5.0 and later versions.\n\n       The following table describes the behavior changes controlled by each compatibility level  setting.   The\n       compatNN  tag  is  used as shorthand for setting the compatibility level to NN using one of the following\n       mechanisms.  For versions prior to bash-5.0, the compatibility level may be set using  the  corresponding\n       compatNN shopt option.  For bash-4.3 and later versions, the BASH_COMPAT variable is preferred, and it is\n       required for bash-5.1 and later versions.\n\n       compat31\n              \u2022      quoting the rhs of the [[ command's regexp matching operator (=~) has no special effect\n\n       compat32\n              \u2022      interrupting a command list such as \"a ; b ; c\" causes the execution of the next command in\n                     the  list  (in bash-4.0 and later versions, the shell acts as if it received the interrupt,\n                     so interrupting one command in a list aborts the execution of the entire list)\n\n       compat40\n              \u2022      the < and > operators to the [[ command do not consider the current locale  when  comparing\n                     strings;  they use ASCII ordering.  Bash versions prior to bash-4.1 use ASCII collation and\n                     strcmp(3); bash-4.1 and later use the current locale's collation sequence and strcoll(3).\n\n       compat41\n              \u2022      in posix mode, time may be followed by options and still be recognized as a  reserved  word\n                     (this is POSIX interpretation 267)\n              \u2022      in  posix  mode, the parser requires that an even number of single quotes occur in the word\n                     portion of a double-quoted parameter expansion and treats them specially, so  that  charac\u2010\n                     ters within the single quotes are considered quoted (this is POSIX interpretation 221)\n\n       compat42\n              \u2022      the  replacement  string  in  double-quoted pattern substitution does not undergo quote re\u2010\n                     moval, as it does in versions after bash-4.2\n              \u2022      in posix mode, single quotes are considered special when expanding the word  portion  of  a\n                     double-quoted parameter expansion and can be used to quote a closing brace or other special\n                     character (this is part of POSIX interpretation 221); in later versions, single quotes  are\n                     not special within double-quoted word expansions\n\n       compat43\n              \u2022      the  shell  does not print a warning message if an attempt is made to use a quoted compound\n                     assignment as an argument to declare (declare -a foo='(1 2)').  Later  versions  warn  that\n                     this usage is deprecated\n              \u2022      word  expansion  errors  are  considered non-fatal errors that cause the current command to\n                     fail, even in posix mode (the default behavior is to make them fatal errors that cause  the\n                     shell to exit)\n              \u2022      when  executing a shell function, the loop state (while/until/etc.)  is not reset, so break\n                     or continue in that function will break or continue loops in the calling context.  Bash-4.4\n                     and later reset the loop state to prevent this\n\n       compat44\n              \u2022      the  shell  sets  up  the  values used by BASH_ARGV and BASH_ARGC so they can expand to the\n                     shell's positional parameters even if extended debugging mode is not enabled\n              \u2022      a subshell inherits loops from its parent context, so break or continue will cause the sub\u2010\n                     shell to exit.  Bash-5.0 and later reset the loop state to prevent the exit\n              \u2022      variable  assignments  preceding builtins like export and readonly that set attributes con\u2010\n                     tinue to affect variables with the same name in the calling environment even if  the  shell\n                     is not in posix mode\n\n       compat50\n              \u2022      Bash-5.1 changed the way $RANDOM is generated to introduce slightly more randomness. If the\n                     shell compatibility level is set to 50 or lower, it reverts to the method from bash-5.0 and\n                     previous  versions,  so  seeding the random number generator by assigning a value to RANDOM\n                     will produce the same sequence as in bash-5.0\n              \u2022      If the command hash table is empty, bash versions prior to  bash-5.1  printed  an  informa\u2010\n                     tional  message  to  that  effect,  even when producing output that can be reused as input.\n                     Bash-5.1 suppresses that message when the -l option is supplied.\n\nSEE ALSO\n       bash(1), sh(1)\n\nGNU Bash 5.0                                       2004 Apr 20                                  BASH_BUILTINS(1)\n"},{"NOMBRE": "       wait3, wait4 - esperan la terminaci\u00f3n de un proceso, al estilo BSD\n\n", "SINOPSIS": "       #include <sys/types.h>\n       #include <sys/time.h>\n       #include <sys/resource.h>\n       #include <sys/wait.h>\n\n       pid_t wait3(int *status, int options,\n             struct rusage *rusage);\n\n       pid_t wait4(pid_t pid, int *status, int options,\n             struct rusage *rusage);\n\n", "DESCRIPCION": "       La  funci\u00f3n  wait3  suspende  la  ejecuci\u00f3n  del proceso actual hasta que finalice un hijo o hasta que se\n       produzca una se\u00f1al cuya acci\u00f3n sea finalizar el proceso actual o  llamar  a  una  funci\u00f3n  manejadora  de\n       se\u00f1ales.  Si  un  hijo  ha  terminado  ya  cuando  se  realiza  la llamada (lo que se conoce como proceso\n       \"zombie\"), la funci\u00f3n regresa inmediatamente. Todos los recursos del sistema utilizados por el  hijo  son\n       liberados.\n\n       La  funci\u00f3n  wait4  suspende  la  ejecuci\u00f3n  del  proceso  actual  hasta que un hijo, especificado por el\n       argumento pid, haya terminado o hasta que se produzca una se\u00f1al cuya  acci\u00f3n  sea  finalizar  el  proceso\n       actual o llamar a una funci\u00f3n manejadora de se\u00f1ales.  Si el hijo especificado por pid ha terminado cuando\n       se realiza la llamada (lo que se conoce como proceso \"zombie\"), la funci\u00f3n regresa inmediatamente.  Todos\n       los recursos del sistema utilizados por el hijo son liberados.\n\n       El valor de pid puede ser uno de los siguientes:\n\n       < -1   lo que significa que espera por cualquier proceso hijo cuyo ID de grupo es igual al valor absoluto\n              de pid.\n\n       -1     que significa que espera por cualquier proceso hijo; esto es equivalente a llamar a wait3.\n\n       0      que significa esperar por cualquier proceso hijo  cuyo  ID  de  grupo  es  igual  al  del  proceso\n              invocador.\n\n       > 0    que significa esperar por el proceso hijo cuyo ID es igual a pid.\n\n       El valor de options es un OR de cero o m\u00e1s de las siguientes constantes:\n\n       WNOHANG\n              que significa volver inmediatamente si no hay hijo por el que esperar.\n\n       WUNTRACED\n              que  significa  volver porque hay hijos que est\u00e1n parados (estado stop), y de cuyo estado no se ha\n              recibido notificaci\u00f3n.\n\n       Si status no es NULL, wait3 o wait4 almacenan informaci\u00f3n de estado en la memoria apuntada por status.\n\n       Este estado puede ser evaluado con las siguientes macros (que toman como argumento el propio  buffer  (un\n       int) \u2014 \u00a1no un puntero al buffer!):\n\n       WIFEXITED(status)\n              es distinto de cero si el hijo termin\u00f3 normalmente.\n\n       WEXITSTATUS(status)\n              eval\u00faa  los  ocho bits menos significativos del c\u00f3digo de retorno del hijo que termin\u00f3, que pueden\n              haber sido activados como un argumento en la llamada a la funci\u00f3n exit() o como un argumento  para\n              un  return  en  el programa principal. Esta macro s\u00f3lo puede ser evaluada si WIFEXITED devolvi\u00f3 un\n              valor distinto de cero.\n\n       WIFSIGNALED(status)\n              devuelve \"true\" si el proceso hijo termin\u00f3 a causa de una se\u00f1al no capturada.\n\n       WTERMSIG(status)\n              devuelve el n\u00famero de la se\u00f1al que caus\u00f3 el final del proceso hijo.  Esta  macro  s\u00f3lo  puede  ser\n              evaluada si WIFSIGNALED devolvi\u00f3 un valor distinto de cero.\n\n       WIFSTOPPED(status)\n              devuelve  \"true\"  si  el proceso hijo que provoc\u00f3 el retorno est\u00e1 actualmente parado; esto s\u00f3lo es\n              posible si la llamada se hizo usando WUNTRACED.\n\n       WSTOPSIG(status)\n              devuelve el n\u00famero de la se\u00f1al que provoc\u00f3 la parada del proceso hijo. Esta macro s\u00f3lo  puede  ser\n              evaluada si WIFSTOPPED devolvi\u00f3 un valor distinto de cero.\n\n       Si  rusage  no es NULL, se rellenar\u00e1 la estructura structrusage, seg\u00fan se define en <sys/resource.h>, con\n       informaci\u00f3n contable. Ver getrusage(2) para m\u00e1s detalles.\n\nVALOR DEVUELTO\n       El ID del proceso hijo que termin\u00f3, -1 en caso de error (en particular, cuando no existe un proceso hijo,\n       por  el  que  no  esperamos,  del  tipo especificado) o cero si se utiliz\u00f3 WNOHANG y no hab\u00eda ning\u00fan hijo\n       disponible todav\u00eda. En los dos \u00faltimos casos errno ser\u00e1 activado convenientemente.\n\n", "ERRORES": "       ECHILD No existe un proceso hijo como el especificado y por el que no esperamos.\n\n       EINTR  si no se activ\u00f3 WNOHANG y se captur\u00f3 una se\u00f1al no bloqueada o una SIGCHLD.\n\n", "OBSERVACIONES": "       Incluir <sys/time.h> no es obligatorio en la actualidad, pero incrementa  la  portabilidad.   (De  hecho,\n       <sys/resource.h> define la estructura rusage con campos de tipo struct timeval definida en <sys/time.h>.)\n\n       El prototipo para estas funciones est\u00e1 disponible s\u00f3lo si _BSD_SOURCE est\u00e1 definida (bine expl\u00edcitamente,\n       o impl\u00edcitamente, no definiendo _POSIX_SOURCE o compilando con la opci\u00f3n -ansi).\n\nCONFORME A\n       SVr4, POSIX.1\n\nV\u00c9ASE TAMBI\u00c9N\n       signal(2), getrusage(2), wait(2), signal(7)\n\nLinux                                             23 junio 1997                                         WAIT4(2)\n"},{"NOMBRE": "       wait3, wait4 - esperan la terminaci\u00f3n de un proceso, al estilo BSD\n\n", "SINOPSIS": "       #include <sys/types.h>\n       #include <sys/time.h>\n       #include <sys/resource.h>\n       #include <sys/wait.h>\n\n       pid_t wait3(int *status, int options,\n             struct rusage *rusage);\n\n       pid_t wait4(pid_t pid, int *status, int options,\n             struct rusage *rusage);\n\n", "DESCRIPCION": "       La  funci\u00f3n  wait3  suspende  la  ejecuci\u00f3n  del proceso actual hasta que finalice un hijo o hasta que se\n       produzca una se\u00f1al cuya acci\u00f3n sea finalizar el proceso actual o  llamar  a  una  funci\u00f3n  manejadora  de\n       se\u00f1ales.  Si  un  hijo  ha  terminado  ya  cuando  se  realiza  la llamada (lo que se conoce como proceso\n       \"zombie\"), la funci\u00f3n regresa inmediatamente. Todos los recursos del sistema utilizados por el  hijo  son\n       liberados.\n\n       La  funci\u00f3n  wait4  suspende  la  ejecuci\u00f3n  del  proceso  actual  hasta que un hijo, especificado por el\n       argumento pid, haya terminado o hasta que se produzca una se\u00f1al cuya  acci\u00f3n  sea  finalizar  el  proceso\n       actual o llamar a una funci\u00f3n manejadora de se\u00f1ales.  Si el hijo especificado por pid ha terminado cuando\n       se realiza la llamada (lo que se conoce como proceso \"zombie\"), la funci\u00f3n regresa inmediatamente.  Todos\n       los recursos del sistema utilizados por el hijo son liberados.\n\n       El valor de pid puede ser uno de los siguientes:\n\n       < -1   lo que significa que espera por cualquier proceso hijo cuyo ID de grupo es igual al valor absoluto\n              de pid.\n\n       -1     que significa que espera por cualquier proceso hijo; esto es equivalente a llamar a wait3.\n\n       0      que significa esperar por cualquier proceso hijo  cuyo  ID  de  grupo  es  igual  al  del  proceso\n              invocador.\n\n       > 0    que significa esperar por el proceso hijo cuyo ID es igual a pid.\n\n       El valor de options es un OR de cero o m\u00e1s de las siguientes constantes:\n\n       WNOHANG\n              que significa volver inmediatamente si no hay hijo por el que esperar.\n\n       WUNTRACED\n              que  significa  volver porque hay hijos que est\u00e1n parados (estado stop), y de cuyo estado no se ha\n              recibido notificaci\u00f3n.\n\n       Si status no es NULL, wait3 o wait4 almacenan informaci\u00f3n de estado en la memoria apuntada por status.\n\n       Este estado puede ser evaluado con las siguientes macros (que toman como argumento el propio  buffer  (un\n       int) \u2014 \u00a1no un puntero al buffer!):\n\n       WIFEXITED(status)\n              es distinto de cero si el hijo termin\u00f3 normalmente.\n\n       WEXITSTATUS(status)\n              eval\u00faa  los  ocho bits menos significativos del c\u00f3digo de retorno del hijo que termin\u00f3, que pueden\n              haber sido activados como un argumento en la llamada a la funci\u00f3n exit() o como un argumento  para\n              un  return  en  el programa principal. Esta macro s\u00f3lo puede ser evaluada si WIFEXITED devolvi\u00f3 un\n              valor distinto de cero.\n\n       WIFSIGNALED(status)\n              devuelve \"true\" si el proceso hijo termin\u00f3 a causa de una se\u00f1al no capturada.\n\n       WTERMSIG(status)\n              devuelve el n\u00famero de la se\u00f1al que caus\u00f3 el final del proceso hijo.  Esta  macro  s\u00f3lo  puede  ser\n              evaluada si WIFSIGNALED devolvi\u00f3 un valor distinto de cero.\n\n       WIFSTOPPED(status)\n              devuelve  \"true\"  si  el proceso hijo que provoc\u00f3 el retorno est\u00e1 actualmente parado; esto s\u00f3lo es\n              posible si la llamada se hizo usando WUNTRACED.\n\n       WSTOPSIG(status)\n              devuelve el n\u00famero de la se\u00f1al que provoc\u00f3 la parada del proceso hijo. Esta macro s\u00f3lo  puede  ser\n              evaluada si WIFSTOPPED devolvi\u00f3 un valor distinto de cero.\n\n       Si  rusage  no es NULL, se rellenar\u00e1 la estructura structrusage, seg\u00fan se define en <sys/resource.h>, con\n       informaci\u00f3n contable. Ver getrusage(2) para m\u00e1s detalles.\n\nVALOR DEVUELTO\n       El ID del proceso hijo que termin\u00f3, -1 en caso de error (en particular, cuando no existe un proceso hijo,\n       por  el  que  no  esperamos,  del  tipo especificado) o cero si se utiliz\u00f3 WNOHANG y no hab\u00eda ning\u00fan hijo\n       disponible todav\u00eda. En los dos \u00faltimos casos errno ser\u00e1 activado convenientemente.\n\n", "ERRORES": "       ECHILD No existe un proceso hijo como el especificado y por el que no esperamos.\n\n       EINTR  si no se activ\u00f3 WNOHANG y se captur\u00f3 una se\u00f1al no bloqueada o una SIGCHLD.\n\n", "OBSERVACIONES": "       Incluir <sys/time.h> no es obligatorio en la actualidad, pero incrementa  la  portabilidad.   (De  hecho,\n       <sys/resource.h> define la estructura rusage con campos de tipo struct timeval definida en <sys/time.h>.)\n\n       El prototipo para estas funciones est\u00e1 disponible s\u00f3lo si _BSD_SOURCE est\u00e1 definida (bine expl\u00edcitamente,\n       o impl\u00edcitamente, no definiendo _POSIX_SOURCE o compilando con la opci\u00f3n -ansi).\n\nCONFORME A\n       SVr4, POSIX.1\n\nV\u00c9ASE TAMBI\u00c9N\n       signal(2), getrusage(2), wait(2), signal(7)\n\nLinux                                             23 junio 1997                                         WAIT4(2)\n"},{"NOMBRE": "       wait, waitpid - espera por el final de un proceso\n\n", "SINOPSIS": "       #include <sys/types.h>\n       #include <sys/wait.h>\n\n       pid_t wait(int *status);\n       pid_t waitpid(pid_t pid, int *status, int options);\n\n", "DESCRIPCION": "       La  funci\u00f3n wait suspende la ejecuci\u00f3n del proceso actual haste que un proceso hijo ha terminado, o hasta\n       que se produce una se\u00f1al cuya acci\u00f3n es terminar el proceso actual o llamar a la funci\u00f3n manejadora de la\n       se\u00f1al.  Si  un  hijo ha salido cuando se produce la llamada (lo que se entiende por proceso \"zombie\"), la\n       funci\u00f3n vuelve inmediatamente. Todos los recursos del sistema reservados por el hijo son liberados.\n\n       La funci\u00f3n waitpid suspende la ejecuci\u00f3n del proceso en curso hasta  que  un  hijo  especificado  por  el\n       argumento pid ha terminado, o hasta que se produce una se\u00f1al cuya acci\u00f3n es finalizar el proceso actual o\n       llamar a la funci\u00f3n manejadora de la se\u00f1al.\n\n       Si el hijo especificado por pid ha terminado cuando se produce  la  llamada  (un  proceso  \"zombie\"),  la\n       funci\u00f3n vuelve inmediatamente. Todos los recursos del sistema reservados por el hijo son liberados.\n\n       El valor de pid puede ser uno de los siguientes:\n\n       < -1   lo  que  significa  esperar  a  que  cualquier  proceso hijo cuyo ID del proceso es igual al valor\n              absoluto de pid.\n\n       -1     lo que significa que espera por cualquier proceso hijo; este es el mismo comportamiento que  tiene\n              wait.\n\n       0      lo que significa que espera por cualquier proceso hijo cuyo ID es igual al del proceso llamante.\n\n       > 0    lo que significa que espera por el proceso hijo cuyo ID es igual al valor de pid.\n\n       El valor de options es un OR de cero o m\u00e1s de las siguientes constantes:\n\n       WNOHANG\n              que significa que vuelve inmediatamente si ning\u00fan hijo ha terminado.\n\n       WUNTRACED\n              que significa que tambi\u00e9n vuelve si hay hijos parados (pero no rastreados), y de cuyo estado no ha\n              recibido notificaci\u00f3n.  El  estado  para  los  hijos  rastreados  que  est\u00e1n  parados  tambi\u00e9n  se\n              proporciona sin esta opci\u00f3n.\n\n       (Para opciones exclusivas de Linux, vea m\u00e1s abajo.)\n\n       Si status no es NULL, wait o waitpid almacena la informaci\u00f3n de estado en la memoria apuntada por status.\n\n       Si  el  estado  puede ser evaluado con las siguientes macros (dichas macros toman el buffer stat (un int)\n       como argumento \u2014 \u00a1no un puntero al buffer!):\n\n       WIFEXITED(status)\n              es distinto de cero si el hijo termin\u00f3 normalmente.\n\n       WEXITSTATUS(status)\n              eval\u00faa los ocho bits menos significativos del c\u00f3digo de retorno del hijo que termin\u00f3, que  podr\u00edan\n              estar  activados como el argumento de una llamada a exit() o como el argumento de un\u00f1 return en el\n              programa principal. Esta macro solamente puede ser tenida en cuenta si WIFEXITED devuelve un valor\n              distinto de cero.\n\n       WIFSIGNALED(status)\n              devuelve true si el proceso hijo termin\u00f3 a causa de una se\u00f1al no capturada.\n\n       WTERMSIG(status)\n              devuelve  el  n\u00famero de la se\u00f1al que provoc\u00f3 la muerte del proceso hijo. Esta macro s\u00f3lo puede ser\n              evaluada si WIFSIGNALED devolvi\u00f3 un valor distinto de cero.\n\n       WIFSTOPPED(status)\n              devuelve true si el proceso hijo que provoc\u00f3 el retorno est\u00e1 actualmente pardo; esto solamente  es\n              posible  si  la  llamada  se  hizo  usando  WUNTRACED  o cuando el hijo est\u00e1 siendo rastreado (vea\n              ptrace(2)).\n\n       WSTOPSIG(status)\n              devuelve el n\u00famero de la se\u00f1al que provoc\u00f3 la parada del hijo.  Esta  macro  solamente  puede  ser\n              evaluada si WIFSTOPPED devolvi\u00f3 un valor distinto de cero.  Algunas versiones de Unix (p.e. Linux,\n              Solaris, pero no AIX ni SunOS) definen tambi\u00e9n una macro WCOREDUMP(status) para  comprobar  si  el\n              proceso  hijo provoc\u00f3 un volcado de memoria.  Util\u00edcela solamente encerrada entre #ifdef WCOREDUMP\n              ... #endif.\n\nVALOR DEVUELTO\n       El ID del proceso del hijo que termin\u00f3, o cero si se utiliz\u00f3 WNOHANG y no hay hijo disponible,  o  -1  en\n       caso de error (en este caso, errno se pone a un valor apropiado).\n\n", "ERRORES": "       ECHILD si  el  proceso  especificado  en  pid  no termina o no es hijo del proceso llamante.  (Esto puede\n              ocurrir para nuestros propios hijos si se asigna SIG_IGN como acci\u00f3n de SIGCHLD.  Vea  tambi\u00e9n  la\n              secci\u00f3n NOTAS DE LINUX sobre hilos.)\n\n       EINVAL si el argumento options no fue valido.\n\n       EINTR  si no se activ\u00f3 WNOHANG y si no se ha capturado una se\u00f1al no bloqueada o SIGCHLD.\n\n", "OBSERVACIONES": "       The  Single  Unix  Specification (Especificaci\u00f3n para un Unix \u00danico) describe un modificador SA_NOCLDWAIT\n       (no soportado en Linux) tal que si este modificador est\u00e1 activo, o  bien  se  ha  asignado  SIG_IGN  como\n       acci\u00f3n para SIGCHLD, entonces los hijos que terminan no se convierten en zombies y una llamada a wait() o\n       waitpid() se bloquear\u00e1 hasta que todos los hijos hayan terminado y, a continuaci\u00f3n, fallar\u00e1  asignando  a\n       errno el valor ECHILD.\n\n       El  est\u00e1ndar  POSIX  original estableci\u00f3 como indefinido el comportamiento de tratar SIGCHLD con SIG_IGN.\n       Est\u00e1ndares  posteriores,  incluyendo  SUSv2  y  POSIX   1003.1-2001   especifican   este   comportamiento\n       describi\u00e9ndolo tan solo como una opci\u00f3n conforme con XSI.  Linux no es conforme con el segundo de los dos\n       puntos reci\u00e9n descritos: si se hace una llamada  a  wait()  o  waitpid()  mientras  SIGCHLD  est\u00e1  siendo\n       ignorada, la llamada se comporta como si SIGCHLD no estuviera siendo ignorada, es decir, se bloquea hasta\n       que el siguiente hijo termina y luego devuelve el PID y el estado de ese hijo.\n\nNOTAS DE LINUX\n       En el n\u00facleo de Linux, un hijo planificado por el n\u00facleo no es una construcci\u00f3n distinta a un proceso. En\n       su  lugar,  un  hilo  es simplemente un proceso que es creado usando la llamada al sistema \u00fanica en Linux\n       clone(2) ; otras rutinas como la llamada portable pthread_create(3) son  implementadas  usando  clone(2).\n       Antes  de  la  versi\u00f3n 2.4. de Linux, un hilo era un caso especial de un proceso, y como consecuencia, un\n       hilo no pod\u00eda esperar al hijo de otro hilo, incluso cuando este  \u00faltimo  pertenec\u00eda  al  mismo  grupo  de\n       hilos.   Sin embargo, POSIX recomienda tal funcionalidad, y desde la versi\u00f3n 2.4. de Linux un hilo puede,\n       y por defecto lo har\u00e1, esperar a hijos de otros hilos en el mismo grupo de hilos.\n\n       Las siguientes opciones espec\u00edficas de Linux codificadas en options se pueden utilizar con hijos  creados\n       usando clone(2).\n\n       __WCLONE\n              Espera por hijos \"clone\" solamente. Si se omite espera s\u00f3lo por hijos \"no clone\". (Un hijo \"clone\"\n              es el que al terminar no comunica ninguna se\u00f1al, o una se\u00f1al distinta  de  SIGCHLD  a  su  padre.)\n              Esta opci\u00f3n es ignorada si se especifica tambi\u00e9n __WALL.\n\n       __WALL (Desde Linux 2.4) Espera por todos los hijos, sin importar su tipo (\"clone\" o \"no clone\").\n\n       __WNOTHREAD\n              (Desde Linux 2.4) No espera por hijos de otros hilos en el mismo grupo de hilos. Era la opci\u00f3n por\n              defecto antes de la versi\u00f3n 2.4. de Linux.\n\nCONFORME A\n       SVr4, POSIX.1\n\nV\u00c9ASE TAMBI\u00c9N\n       clone(2), ptrace(2), signal(2), wait4(2), pthread_create(3), signal(7)\n\nLinux                                             24 julio 2000                                          WAIT(2)\n"},{"NOMBRE": "       write - env\u00eda un mensaje a otro usuario\n\n", "SINOPSIS": "       write usuario [nombre-tty]\n\n", "DESCRIPCION": "       Write le permite comunicarse con otro usuario, copiando l\u00edneas de su terminal a la de \u00e9l.\n\n       Cuando Ud. llama a la orden write, el usuario al que Ud. vaya a escribir recibe un mensaje de la forma:\n\n              Message from su-nombre@su-computador on su-tty at hh:mm ...\n\n       O sea, en espa\u00f1ol:\n\n              Mensaje de su-nombre@su-computador en su-tty a las hh:mm ...\n\n       Cualesquiera  l\u00edneas  posteriores  que Ud. escriba se copiar\u00e1n a la terminal del usuario especificado. Si\n       \u00e9ste quiere responder, debe ejecutar tambi\u00e9n write.\n\n       Cuando haya acabado, teclee un car\u00e1cter de Fin-De-Fichero o de interrupci\u00f3n.  El  otro  usuario  ver\u00e1  el\n       mensaje EOF indicando (End Of File) que la conversaci\u00f3n se ha terminado.\n\n       Ud.  puede  evitar  que la gente (distinta del s\u00faper-usuario) le escriba en la terminal mediante la orden\n       mesg(1).  Algunas \u00f3rdenes, por ejemplo nroff(1) y pr(1), pueden autom\u00e1ticamente evitar esta escritura, de\n       forma que su salida no se mezcle con ella y as\u00ed no se vea sobrescrita.\n\n       Si  el usuario al que Ud. quiere escribir est\u00e1 en el sistema en m\u00e1s de una terminal, puede especificar en\n       qu\u00e9 terminal escribir especificando el nombre de la terminal como el segundo argumento de la orden write.\n       Alternativamente,  puede  dejar que write seleccione una de las terminales; coger\u00e1 la que tenga un tiempo\n       de inactividad m\u00e1s corto. Esto es as\u00ed para que si el usuario, por ejemplo, est\u00e1 en el sistema  desde  una\n       terminal en el trabajo y tambi\u00e9n conectado desde casa, el mensaje vaya al sitio correcto.\n\n       El  protocolo  tradicional para escribir a alguien es que la cadena `-o', bien al final de una l\u00ednea o en\n       una l\u00ednea sola, significa que es el turno de hablar de la otra persona. La `o'  es  por  `over';  o  sea,\n       `cambio'.  La cadena `oo' (por `over and out'; o sea, `cambio y corto') significa que la persona cree que\n       la conversaci\u00f3n ha terminado.\n\nV\u00c9ASE TAMBI\u00c9N\n       mesg(1), talk(1), who(1), wall(1).\n\n", "HISTORIA": "       Una orden write apareci\u00f3 en la Versi\u00f3n 6 del UNIX de AT&T.\n\nLinux                                             12 Marzo 1995                                         WRITE(1)\n"},{"NOMBRE": "       readv, writev - leen o escriben datos en m\u00faltiples buffers\n\n", "SINOPSIS": "       #include <sys/uio.h>\n\n       ssize_t readv(int fd, const struct iovec *vector, int count);\n\n       ssize_t writev(int fd, const struct iovec *vector, int count);\n\n", "DESCRIPCION": "       La  funci\u00f3n  readv()  lee count bloques del fichero asociado con el descriptor de fichero fd en m\u00faltiples\n       buffers descritos por vector.\n\n       La funci\u00f3n writev() escribe como m\u00e1ximo count bloques descritos por vector en el fichero asociado con  el\n       descriptor de fichero fd.\n\n       El puntero vector apunta a una estructura iovec definida en <sys/uio.h> como\n\n          struct iovec {\n              void *iov_base;   /* Direcci\u00f3n de comienzo */\n              size_t iov_len;   /* N\u00famero de bytes */\n          };\n\n       Los buffers son procesados en el orden especificado.\n\n       La funci\u00f3n readv() trabaja exactamente igual que read(2) salvo que rellena m\u00faltiples buffers.\n\n       La funci\u00f3n writev() trabaja exactamente igual que write(2) salvo que escribe m\u00faltiples buffers.\n\nVALOR DEVUELTO\n       En  caso de \u00e9xito, la funci\u00f3n readv() devuelve el n\u00famero de bytes le\u00eddos; la funci\u00f3n writev() devuelve el\n       n\u00famero de bytes escritos.  En caso de error, se devuelve -1, y se modifica errno con un valor apropiado.\n\n", "ERRORES": "       Los errores son los mismos que para read(2) y write(2).  Adicionalmente se define el siguiente error.\n\n       EINVAL La suma de los valores iov_len provoca un desbordamiento por arriba en un valor ssize_t.  O  bien,\n              el contador count es cero o mayor que MAX_IOVEC.\n\nCONFORME A\n       4.4BSD  (las funciones readv y writev aparecieron por primera vez en BSD 4.2), Unix98, POSIX 1003.1-2001.\n       La biblioteca libc5 de Linux usaba size_t como tipo del par\u00e1metro count, e int  como  tipo  devuelto  por\n       estas funciones.\n\n", "FALLOS": "       No  es recomendable mezclar llamadas a funciones como readv() o writev(), que trabajan sobre descriptores\n       de fichero, con funciones de la biblioteca  stdio;  los  resultados  ser\u00e1n  indefinidos  y  probablemente\n       indeseados.\n\nV\u00c9ASE TAMBI\u00c9N\n       read(2), write(2)\n\n                                                 17 octubre 2002                                        READV(2)\n"}]